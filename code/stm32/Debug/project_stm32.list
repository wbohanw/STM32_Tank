
project_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< Updated upstream
  1 .text         0000d13c  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d8c  0800d300  0800d300  0000e300  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e08c  0800e08c  00010214  2**0
                  CONTENTS
  4 .ARM          00000008  0800e08c  0800e08c  0000f08c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e094  0800e094  00010214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e094  0800e094  0000f094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e098  0800e098  0000f098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  0800e09c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c4  20000214  0800e2b0  00010214  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008d8  0800e2b0  000108d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010214  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e0c7  00000000  00000000  00010244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000396d  00000000  00000000  0002e30b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001758  00000000  00000000  00031c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001206  00000000  00000000  000333d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dd22  00000000  00000000  000345d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c228  00000000  00000000  000622f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00115b4b  00000000  00000000  0007e520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  0019406b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000078a8  00000000  00000000  00194124  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  0019b9cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000000fa  00000000  00000000  0019ba1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000010  00000000  00000000  0019bb14  2**0
=======
  1 .text         0000d184  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d94  0800d348  0800d348  0000e348  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e0dc  0800e0dc  00010214  2**0
                  CONTENTS
  4 .ARM          00000008  0800e0dc  0800e0dc  0000f0dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e0e4  0800e0e4  00010214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e0e4  0800e0e4  0000f0e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e0e8  0800e0e8  0000f0e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  0800e0ec  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c8  20000214  0800e300  00010214  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008dc  0800e300  000108dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010214  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e0fb  00000000  00000000  00010244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000396e  00000000  00000000  0002e33f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001758  00000000  00000000  00031cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001206  00000000  00000000  00033408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dd22  00000000  00000000  0003460e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c24f  00000000  00000000  00062330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00115bb8  00000000  00000000  0007e57f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  00194137  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000078a8  00000000  00000000  001941f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  0019ba98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000000fa  00000000  00000000  0019bb25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000010  00000000  00000000  0019bc1f  2**0
>>>>>>> Stashed changes
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000214 	.word	0x20000214
 80001dc:	00000000 	.word	0x00000000
<<<<<<< Updated upstream
 80001e0:	0800d2e4 	.word	0x0800d2e4
=======
 80001e0:	0800d32c 	.word	0x0800d32c
>>>>>>> Stashed changes

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000218 	.word	0x20000218
<<<<<<< Updated upstream
 80001fc:	0800d2e4 	.word	0x0800d2e4
=======
 80001fc:	0800d32c 	.word	0x0800d32c
>>>>>>> Stashed changes

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000ccc:	f000 b9a0 	b.w	8001010 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	460c      	mov	r4, r1
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d14e      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d60:	4694      	mov	ip, r2
 8000d62:	458c      	cmp	ip, r1
 8000d64:	4686      	mov	lr, r0
 8000d66:	fab2 f282 	clz	r2, r2
 8000d6a:	d962      	bls.n	8000e32 <__udivmoddi4+0xde>
 8000d6c:	b14a      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d6e:	f1c2 0320 	rsb	r3, r2, #32
 8000d72:	4091      	lsls	r1, r2
 8000d74:	fa20 f303 	lsr.w	r3, r0, r3
 8000d78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7c:	4319      	orrs	r1, r3
 8000d7e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f f68c 	uxth.w	r6, ip
 8000d8a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d92:	fb07 1114 	mls	r1, r7, r4, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb04 f106 	mul.w	r1, r4, r6
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000daa:	f080 8112 	bcs.w	8000fd2 <__udivmoddi4+0x27e>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 810f 	bls.w	8000fd2 <__udivmoddi4+0x27e>
 8000db4:	3c02      	subs	r4, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a59      	subs	r1, r3, r1
 8000dba:	fa1f f38e 	uxth.w	r3, lr
 8000dbe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dca:	fb00 f606 	mul.w	r6, r0, r6
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x94>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dda:	f080 80fc 	bcs.w	8000fd6 <__udivmoddi4+0x282>
 8000dde:	429e      	cmp	r6, r3
 8000de0:	f240 80f9 	bls.w	8000fd6 <__udivmoddi4+0x282>
 8000de4:	4463      	add	r3, ip
 8000de6:	3802      	subs	r0, #2
 8000de8:	1b9b      	subs	r3, r3, r6
 8000dea:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dee:	2100      	movs	r1, #0
 8000df0:	b11d      	cbz	r5, 8000dfa <__udivmoddi4+0xa6>
 8000df2:	40d3      	lsrs	r3, r2
 8000df4:	2200      	movs	r2, #0
 8000df6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d905      	bls.n	8000e0e <__udivmoddi4+0xba>
 8000e02:	b10d      	cbz	r5, 8000e08 <__udivmoddi4+0xb4>
 8000e04:	e9c5 0100 	strd	r0, r1, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e7f5      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000e0e:	fab3 f183 	clz	r1, r3
 8000e12:	2900      	cmp	r1, #0
 8000e14:	d146      	bne.n	8000ea4 <__udivmoddi4+0x150>
 8000e16:	42a3      	cmp	r3, r4
 8000e18:	d302      	bcc.n	8000e20 <__udivmoddi4+0xcc>
 8000e1a:	4290      	cmp	r0, r2
 8000e1c:	f0c0 80f0 	bcc.w	8001000 <__udivmoddi4+0x2ac>
 8000e20:	1a86      	subs	r6, r0, r2
 8000e22:	eb64 0303 	sbc.w	r3, r4, r3
 8000e26:	2001      	movs	r0, #1
 8000e28:	2d00      	cmp	r5, #0
 8000e2a:	d0e6      	beq.n	8000dfa <__udivmoddi4+0xa6>
 8000e2c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e30:	e7e3      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000e32:	2a00      	cmp	r2, #0
 8000e34:	f040 8090 	bne.w	8000f58 <__udivmoddi4+0x204>
 8000e38:	eba1 040c 	sub.w	r4, r1, ip
 8000e3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e40:	fa1f f78c 	uxth.w	r7, ip
 8000e44:	2101      	movs	r1, #1
 8000e46:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e4a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e4e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e56:	fb07 f006 	mul.w	r0, r7, r6
 8000e5a:	4298      	cmp	r0, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x11c>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x11a>
 8000e68:	4298      	cmp	r0, r3
 8000e6a:	f200 80cd 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e6e:	4626      	mov	r6, r4
 8000e70:	1a1c      	subs	r4, r3, r0
 8000e72:	fa1f f38e 	uxth.w	r3, lr
 8000e76:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e7a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e7e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e82:	fb00 f707 	mul.w	r7, r0, r7
 8000e86:	429f      	cmp	r7, r3
 8000e88:	d908      	bls.n	8000e9c <__udivmoddi4+0x148>
 8000e8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e92:	d202      	bcs.n	8000e9a <__udivmoddi4+0x146>
 8000e94:	429f      	cmp	r7, r3
 8000e96:	f200 80b0 	bhi.w	8000ffa <__udivmoddi4+0x2a6>
 8000e9a:	4620      	mov	r0, r4
 8000e9c:	1bdb      	subs	r3, r3, r7
 8000e9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ea2:	e7a5      	b.n	8000df0 <__udivmoddi4+0x9c>
 8000ea4:	f1c1 0620 	rsb	r6, r1, #32
 8000ea8:	408b      	lsls	r3, r1
 8000eaa:	fa22 f706 	lsr.w	r7, r2, r6
 8000eae:	431f      	orrs	r7, r3
 8000eb0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000eb4:	fa04 f301 	lsl.w	r3, r4, r1
 8000eb8:	ea43 030c 	orr.w	r3, r3, ip
 8000ebc:	40f4      	lsrs	r4, r6
 8000ebe:	fa00 f801 	lsl.w	r8, r0, r1
 8000ec2:	0c38      	lsrs	r0, r7, #16
 8000ec4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ec8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ecc:	fa1f fc87 	uxth.w	ip, r7
 8000ed0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ed4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ed8:	fb0e f90c 	mul.w	r9, lr, ip
 8000edc:	45a1      	cmp	r9, r4
 8000ede:	fa02 f201 	lsl.w	r2, r2, r1
 8000ee2:	d90a      	bls.n	8000efa <__udivmoddi4+0x1a6>
 8000ee4:	193c      	adds	r4, r7, r4
 8000ee6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000eea:	f080 8084 	bcs.w	8000ff6 <__udivmoddi4+0x2a2>
 8000eee:	45a1      	cmp	r9, r4
 8000ef0:	f240 8081 	bls.w	8000ff6 <__udivmoddi4+0x2a2>
 8000ef4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ef8:	443c      	add	r4, r7
 8000efa:	eba4 0409 	sub.w	r4, r4, r9
 8000efe:	fa1f f983 	uxth.w	r9, r3
 8000f02:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f06:	fb00 4413 	mls	r4, r0, r3, r4
 8000f0a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f0e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f12:	45a4      	cmp	ip, r4
 8000f14:	d907      	bls.n	8000f26 <__udivmoddi4+0x1d2>
 8000f16:	193c      	adds	r4, r7, r4
 8000f18:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f1c:	d267      	bcs.n	8000fee <__udivmoddi4+0x29a>
 8000f1e:	45a4      	cmp	ip, r4
 8000f20:	d965      	bls.n	8000fee <__udivmoddi4+0x29a>
 8000f22:	3b02      	subs	r3, #2
 8000f24:	443c      	add	r4, r7
 8000f26:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f2a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f2e:	eba4 040c 	sub.w	r4, r4, ip
 8000f32:	429c      	cmp	r4, r3
 8000f34:	46ce      	mov	lr, r9
 8000f36:	469c      	mov	ip, r3
 8000f38:	d351      	bcc.n	8000fde <__udivmoddi4+0x28a>
 8000f3a:	d04e      	beq.n	8000fda <__udivmoddi4+0x286>
 8000f3c:	b155      	cbz	r5, 8000f54 <__udivmoddi4+0x200>
 8000f3e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f42:	eb64 040c 	sbc.w	r4, r4, ip
 8000f46:	fa04 f606 	lsl.w	r6, r4, r6
 8000f4a:	40cb      	lsrs	r3, r1
 8000f4c:	431e      	orrs	r6, r3
 8000f4e:	40cc      	lsrs	r4, r1
 8000f50:	e9c5 6400 	strd	r6, r4, [r5]
 8000f54:	2100      	movs	r1, #0
 8000f56:	e750      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000f58:	f1c2 0320 	rsb	r3, r2, #32
 8000f5c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f64:	fa24 f303 	lsr.w	r3, r4, r3
 8000f68:	4094      	lsls	r4, r2
 8000f6a:	430c      	orrs	r4, r1
 8000f6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f70:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f74:	fa1f f78c 	uxth.w	r7, ip
 8000f78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f7c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f80:	0c23      	lsrs	r3, r4, #16
 8000f82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f86:	fb00 f107 	mul.w	r1, r0, r7
 8000f8a:	4299      	cmp	r1, r3
 8000f8c:	d908      	bls.n	8000fa0 <__udivmoddi4+0x24c>
 8000f8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f92:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f96:	d22c      	bcs.n	8000ff2 <__udivmoddi4+0x29e>
 8000f98:	4299      	cmp	r1, r3
 8000f9a:	d92a      	bls.n	8000ff2 <__udivmoddi4+0x29e>
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	4463      	add	r3, ip
 8000fa0:	1a5b      	subs	r3, r3, r1
 8000fa2:	b2a4      	uxth	r4, r4
 8000fa4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fa8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fb0:	fb01 f307 	mul.w	r3, r1, r7
 8000fb4:	42a3      	cmp	r3, r4
 8000fb6:	d908      	bls.n	8000fca <__udivmoddi4+0x276>
 8000fb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fbc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fc0:	d213      	bcs.n	8000fea <__udivmoddi4+0x296>
 8000fc2:	42a3      	cmp	r3, r4
 8000fc4:	d911      	bls.n	8000fea <__udivmoddi4+0x296>
 8000fc6:	3902      	subs	r1, #2
 8000fc8:	4464      	add	r4, ip
 8000fca:	1ae4      	subs	r4, r4, r3
 8000fcc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fd0:	e739      	b.n	8000e46 <__udivmoddi4+0xf2>
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	e6f0      	b.n	8000db8 <__udivmoddi4+0x64>
 8000fd6:	4608      	mov	r0, r1
 8000fd8:	e706      	b.n	8000de8 <__udivmoddi4+0x94>
 8000fda:	45c8      	cmp	r8, r9
 8000fdc:	d2ae      	bcs.n	8000f3c <__udivmoddi4+0x1e8>
 8000fde:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fe2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fe6:	3801      	subs	r0, #1
 8000fe8:	e7a8      	b.n	8000f3c <__udivmoddi4+0x1e8>
 8000fea:	4631      	mov	r1, r6
 8000fec:	e7ed      	b.n	8000fca <__udivmoddi4+0x276>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	e799      	b.n	8000f26 <__udivmoddi4+0x1d2>
 8000ff2:	4630      	mov	r0, r6
 8000ff4:	e7d4      	b.n	8000fa0 <__udivmoddi4+0x24c>
 8000ff6:	46d6      	mov	lr, sl
 8000ff8:	e77f      	b.n	8000efa <__udivmoddi4+0x1a6>
 8000ffa:	4463      	add	r3, ip
 8000ffc:	3802      	subs	r0, #2
 8000ffe:	e74d      	b.n	8000e9c <__udivmoddi4+0x148>
 8001000:	4606      	mov	r6, r0
 8001002:	4623      	mov	r3, r4
 8001004:	4608      	mov	r0, r1
 8001006:	e70f      	b.n	8000e28 <__udivmoddi4+0xd4>
 8001008:	3e02      	subs	r6, #2
 800100a:	4463      	add	r3, ip
 800100c:	e730      	b.n	8000e70 <__udivmoddi4+0x11c>
 800100e:	bf00      	nop

08001010 <__aeabi_idiv0>:
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	0000      	movs	r0, r0
	...

08001018 <generate_gameover_sound_waves>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void generate_gameover_sound_waves(){
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
	//G4 : 392 Hz
	for (int j = 0; j < 112; j++){
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
 8001022:	e02a      	b.n	800107a <generate_gameover_sound_waves+0x62>
<<<<<<< Updated upstream
		 sine_g4[j] = (uint8_t)((arm_sin_f32((2*M_PI/112)*j)+1)*2047.5f);
 8001024:	6978      	ldr	r0, [r7, #20]
 8001026:	f7ff fa95 	bl	8000554 <__aeabi_i2d>
 800102a:	a351      	add	r3, pc, #324	@ (adr r3, 8001170 <generate_gameover_sound_waves+0x158>)
=======
		 sine_g4[j] = (uint8_t)((arm_sin_f32((2*M_PI/112)*j)+1)*20470.5f);
 8001024:	6978      	ldr	r0, [r7, #20]
 8001026:	f7ff fa95 	bl	8000554 <__aeabi_i2d>
 800102a:	a352      	add	r3, pc, #328	@ (adr r3, 8001174 <generate_gameover_sound_waves+0x15c>)
>>>>>>> Stashed changes
 800102c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001030:	f7ff fafa 	bl	8000628 <__aeabi_dmul>
 8001034:	4602      	mov	r2, r0
 8001036:	460b      	mov	r3, r1
 8001038:	4610      	mov	r0, r2
 800103a:	4619      	mov	r1, r3
 800103c:	f7ff fdec 	bl	8000c18 <__aeabi_d2f>
 8001040:	4603      	mov	r3, r0
 8001042:	ee00 3a10 	vmov	s0, r3
<<<<<<< Updated upstream
 8001046:	f007 fb75 	bl	8008734 <arm_sin_f32>
=======
 8001046:	f007 fb9b 	bl	8008780 <arm_sin_f32>
>>>>>>> Stashed changes
 800104a:	eef0 7a40 	vmov.f32	s15, s0
 800104e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001052:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001056:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8001160 <generate_gameover_sound_waves+0x148>
 800105a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800105e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001062:	edc7 7a01 	vstr	s15, [r7, #4]
 8001066:	793b      	ldrb	r3, [r7, #4]
 8001068:	b2d9      	uxtb	r1, r3
 800106a:	4a3e      	ldr	r2, [pc, #248]	@ (8001164 <generate_gameover_sound_waves+0x14c>)
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	4413      	add	r3, r2
 8001070:	460a      	mov	r2, r1
 8001072:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < 112; j++){
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	3301      	adds	r3, #1
 8001078:	617b      	str	r3, [r7, #20]
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	2b6f      	cmp	r3, #111	@ 0x6f
 800107e:	ddd1      	ble.n	8001024 <generate_gameover_sound_waves+0xc>
	}
	//E4: 330 Hz
	for (int j=0; j < 134; j++) {
 8001080:	2300      	movs	r3, #0
 8001082:	613b      	str	r3, [r7, #16]
 8001084:	e02a      	b.n	80010dc <generate_gameover_sound_waves+0xc4>
		sine_e4[j] = (uint8_t)((arm_sin_f32((2*M_PI/134)*j)+1)*2047.5f);
 8001086:	6938      	ldr	r0, [r7, #16]
 8001088:	f7ff fa64 	bl	8000554 <__aeabi_i2d>
 800108c:	a330      	add	r3, pc, #192	@ (adr r3, 8001150 <generate_gameover_sound_waves+0x138>)
 800108e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001092:	f7ff fac9 	bl	8000628 <__aeabi_dmul>
 8001096:	4602      	mov	r2, r0
 8001098:	460b      	mov	r3, r1
 800109a:	4610      	mov	r0, r2
 800109c:	4619      	mov	r1, r3
 800109e:	f7ff fdbb 	bl	8000c18 <__aeabi_d2f>
 80010a2:	4603      	mov	r3, r0
 80010a4:	ee00 3a10 	vmov	s0, r3
<<<<<<< Updated upstream
 80010a8:	f007 fb44 	bl	8008734 <arm_sin_f32>
 80010ac:	eef0 7a40 	vmov.f32	s15, s0
 80010b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80010b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010b8:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8001160 <generate_gameover_sound_waves+0x148>
=======
 80010a8:	f007 fb6a 	bl	8008780 <arm_sin_f32>
 80010ac:	eef0 7a40 	vmov.f32	s15, s0
 80010b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80010b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010b8:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8001168 <generate_gameover_sound_waves+0x150>
>>>>>>> Stashed changes
 80010bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010c4:	edc7 7a01 	vstr	s15, [r7, #4]
 80010c8:	793b      	ldrb	r3, [r7, #4]
 80010ca:	b2d9      	uxtb	r1, r3
<<<<<<< Updated upstream
 80010cc:	4a26      	ldr	r2, [pc, #152]	@ (8001168 <generate_gameover_sound_waves+0x150>)
=======
 80010cc:	4a27      	ldr	r2, [pc, #156]	@ (800116c <generate_gameover_sound_waves+0x154>)
>>>>>>> Stashed changes
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	4413      	add	r3, r2
 80010d2:	460a      	mov	r2, r1
 80010d4:	701a      	strb	r2, [r3, #0]
	for (int j=0; j < 134; j++) {
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	3301      	adds	r3, #1
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	2b85      	cmp	r3, #133	@ 0x85
 80010e0:	ddd1      	ble.n	8001086 <generate_gameover_sound_waves+0x6e>
	}
	//C4: 261.63 Hz
	for (int j = 0; j < 169; j++){
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	e02a      	b.n	800113e <generate_gameover_sound_waves+0x126>
		 sine_c4[j] = (uint8_t)((arm_sin_f32((2*M_PI/169)*j)+1)*2047.5f);
 80010e8:	68f8      	ldr	r0, [r7, #12]
 80010ea:	f7ff fa33 	bl	8000554 <__aeabi_i2d>
 80010ee:	a31a      	add	r3, pc, #104	@ (adr r3, 8001158 <generate_gameover_sound_waves+0x140>)
 80010f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f4:	f7ff fa98 	bl	8000628 <__aeabi_dmul>
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	4610      	mov	r0, r2
 80010fe:	4619      	mov	r1, r3
 8001100:	f7ff fd8a 	bl	8000c18 <__aeabi_d2f>
 8001104:	4603      	mov	r3, r0
 8001106:	ee00 3a10 	vmov	s0, r3
<<<<<<< Updated upstream
 800110a:	f007 fb13 	bl	8008734 <arm_sin_f32>
 800110e:	eef0 7a40 	vmov.f32	s15, s0
 8001112:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001116:	ee77 7a87 	vadd.f32	s15, s15, s14
 800111a:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001160 <generate_gameover_sound_waves+0x148>
=======
 800110a:	f007 fb39 	bl	8008780 <arm_sin_f32>
 800110e:	eef0 7a40 	vmov.f32	s15, s0
 8001112:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001116:	ee77 7a87 	vadd.f32	s15, s15, s14
 800111a:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001168 <generate_gameover_sound_waves+0x150>
>>>>>>> Stashed changes
 800111e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001122:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001126:	edc7 7a01 	vstr	s15, [r7, #4]
 800112a:	793b      	ldrb	r3, [r7, #4]
 800112c:	b2d9      	uxtb	r1, r3
<<<<<<< Updated upstream
 800112e:	4a0f      	ldr	r2, [pc, #60]	@ (800116c <generate_gameover_sound_waves+0x154>)
=======
 800112e:	4a10      	ldr	r2, [pc, #64]	@ (8001170 <generate_gameover_sound_waves+0x158>)
>>>>>>> Stashed changes
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	4413      	add	r3, r2
 8001134:	460a      	mov	r2, r1
 8001136:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < 169; j++){
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	3301      	adds	r3, #1
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	2ba8      	cmp	r3, #168	@ 0xa8
 8001142:	ddd1      	ble.n	80010e8 <generate_gameover_sound_waves+0xd0>
	}
}
 8001144:	bf00      	nop
 8001146:	bf00      	nop
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	9ce93e2e 	.word	0x9ce93e2e
 8001154:	3fa801e4 	.word	0x3fa801e4
 8001158:	2f290867 	.word	0x2f290867
 800115c:	3fa30913 	.word	0x3fa30913
<<<<<<< Updated upstream
 8001160:	44fff000 	.word	0x44fff000
 8001164:	2000028c 	.word	0x2000028c
 8001168:	200002fc 	.word	0x200002fc
 800116c:	20000384 	.word	0x20000384
 8001170:	3bbba140 	.word	0x3bbba140
 8001174:	3facb91f 	.word	0x3facb91f

08001178 <play_gameover_sound>:

void play_gameover_sound(){
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
	start = 0;
 800117c:	4b08      	ldr	r3, [pc, #32]	@ (80011a0 <play_gameover_sound+0x28>)
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
	current_tone = sine_g4;
 8001182:	4b08      	ldr	r3, [pc, #32]	@ (80011a4 <play_gameover_sound+0x2c>)
 8001184:	4a08      	ldr	r2, [pc, #32]	@ (80011a8 <play_gameover_sound+0x30>)
 8001186:	601a      	str	r2, [r3, #0]
	current_num_sample = 112;
 8001188:	4b08      	ldr	r3, [pc, #32]	@ (80011ac <play_gameover_sound+0x34>)
 800118a:	2270      	movs	r2, #112	@ 0x70
 800118c:	601a      	str	r2, [r3, #0]
	tone_index = 0;
 800118e:	4b08      	ldr	r3, [pc, #32]	@ (80011b0 <play_gameover_sound+0x38>)
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]

	HAL_TIM_Base_Start_IT(&htim2);
 8001194:	4807      	ldr	r0, [pc, #28]	@ (80011b4 <play_gameover_sound+0x3c>)
 8001196:	f004 fcf9 	bl	8005b8c <HAL_TIM_Base_Start_IT>
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000008 	.word	0x20000008
 80011a4:	20000000 	.word	0x20000000
 80011a8:	2000028c 	.word	0x2000028c
 80011ac:	20000004 	.word	0x20000004
 80011b0:	20000430 	.word	0x20000430
 80011b4:	2000064c 	.word	0x2000064c

080011b8 <play_start_sound>:

void play_start_sound(){
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
	start = 1;
 80011bc:	4b08      	ldr	r3, [pc, #32]	@ (80011e0 <play_start_sound+0x28>)
 80011be:	2201      	movs	r2, #1
 80011c0:	601a      	str	r2, [r3, #0]
	current_tone = sine_c4;
 80011c2:	4b08      	ldr	r3, [pc, #32]	@ (80011e4 <play_start_sound+0x2c>)
 80011c4:	4a08      	ldr	r2, [pc, #32]	@ (80011e8 <play_start_sound+0x30>)
 80011c6:	601a      	str	r2, [r3, #0]
	current_num_sample = 169;
 80011c8:	4b08      	ldr	r3, [pc, #32]	@ (80011ec <play_start_sound+0x34>)
 80011ca:	22a9      	movs	r2, #169	@ 0xa9
 80011cc:	601a      	str	r2, [r3, #0]
	tone_index = 0;
 80011ce:	4b08      	ldr	r3, [pc, #32]	@ (80011f0 <play_start_sound+0x38>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]

	HAL_TIM_Base_Start_IT(&htim2);
 80011d4:	4807      	ldr	r0, [pc, #28]	@ (80011f4 <play_start_sound+0x3c>)
 80011d6:	f004 fcd9 	bl	8005b8c <HAL_TIM_Base_Start_IT>
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000008 	.word	0x20000008
 80011e4:	20000000 	.word	0x20000000
 80011e8:	20000384 	.word	0x20000384
 80011ec:	20000004 	.word	0x20000004
 80011f0:	20000430 	.word	0x20000430
 80011f4:	2000064c 	.word	0x2000064c

080011f8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == myButton_Pin) {
 8001202:	88fb      	ldrh	r3, [r7, #6]
 8001204:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001208:	d133      	bne.n	8001272 <HAL_GPIO_EXTI_Callback+0x7a>
        printf("Button Pressed! Current Position: %d\r\n", current_position);
 800120a:	4b1c      	ldr	r3, [pc, #112]	@ (800127c <HAL_GPIO_EXTI_Callback+0x84>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4619      	mov	r1, r3
 8001210:	481b      	ldr	r0, [pc, #108]	@ (8001280 <HAL_GPIO_EXTI_Callback+0x88>)
 8001212:	f009 f8a9 	bl	800a368 <iprintf>

        // Record accelerometer data
        if (current_position == 0) {
 8001216:	4b19      	ldr	r3, [pc, #100]	@ (800127c <HAL_GPIO_EXTI_Callback+0x84>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d103      	bne.n	8001226 <HAL_GPIO_EXTI_Callback+0x2e>
            BSP_ACCELERO_AccGetXYZ(accelero_p0);
 800121e:	4819      	ldr	r0, [pc, #100]	@ (8001284 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001220:	f000 fe08 	bl	8001e34 <BSP_ACCELERO_AccGetXYZ>
 8001224:	e016      	b.n	8001254 <HAL_GPIO_EXTI_Callback+0x5c>
        } else if (current_position == 1) {
 8001226:	4b15      	ldr	r3, [pc, #84]	@ (800127c <HAL_GPIO_EXTI_Callback+0x84>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d103      	bne.n	8001236 <HAL_GPIO_EXTI_Callback+0x3e>
            BSP_ACCELERO_AccGetXYZ(accelero_p1);
 800122e:	4816      	ldr	r0, [pc, #88]	@ (8001288 <HAL_GPIO_EXTI_Callback+0x90>)
 8001230:	f000 fe00 	bl	8001e34 <BSP_ACCELERO_AccGetXYZ>
 8001234:	e00e      	b.n	8001254 <HAL_GPIO_EXTI_Callback+0x5c>
        } else if (current_position == 2) {
 8001236:	4b11      	ldr	r3, [pc, #68]	@ (800127c <HAL_GPIO_EXTI_Callback+0x84>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2b02      	cmp	r3, #2
 800123c:	d103      	bne.n	8001246 <HAL_GPIO_EXTI_Callback+0x4e>
            BSP_ACCELERO_AccGetXYZ(accelero_p2);
 800123e:	4813      	ldr	r0, [pc, #76]	@ (800128c <HAL_GPIO_EXTI_Callback+0x94>)
 8001240:	f000 fdf8 	bl	8001e34 <BSP_ACCELERO_AccGetXYZ>
 8001244:	e006      	b.n	8001254 <HAL_GPIO_EXTI_Callback+0x5c>
        } else if (current_position == 3) {
 8001246:	4b0d      	ldr	r3, [pc, #52]	@ (800127c <HAL_GPIO_EXTI_Callback+0x84>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2b03      	cmp	r3, #3
 800124c:	d102      	bne.n	8001254 <HAL_GPIO_EXTI_Callback+0x5c>
            BSP_ACCELERO_AccGetXYZ(accelero_p3);
 800124e:	4810      	ldr	r0, [pc, #64]	@ (8001290 <HAL_GPIO_EXTI_Callback+0x98>)
 8001250:	f000 fdf0 	bl	8001e34 <BSP_ACCELERO_AccGetXYZ>
        }

        current_position++;
 8001254:	4b09      	ldr	r3, [pc, #36]	@ (800127c <HAL_GPIO_EXTI_Callback+0x84>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	3301      	adds	r3, #1
 800125a:	4a08      	ldr	r2, [pc, #32]	@ (800127c <HAL_GPIO_EXTI_Callback+0x84>)
 800125c:	6013      	str	r3, [r2, #0]

        if (current_position > 3) {
 800125e:	4b07      	ldr	r3, [pc, #28]	@ (800127c <HAL_GPIO_EXTI_Callback+0x84>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2b03      	cmp	r3, #3
 8001264:	dd05      	ble.n	8001272 <HAL_GPIO_EXTI_Callback+0x7a>
            calibrationDone = 1;
 8001266:	4b0b      	ldr	r3, [pc, #44]	@ (8001294 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001268:	2201      	movs	r2, #1
 800126a:	601a      	str	r2, [r3, #0]
            printf("Calibration complete!\r\n");
 800126c:	480a      	ldr	r0, [pc, #40]	@ (8001298 <HAL_GPIO_EXTI_Callback+0xa0>)
 800126e:	f009 f8e3 	bl	800a438 <puts>
        }
    }
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000230 	.word	0x20000230
 8001280:	0800d300 	.word	0x0800d300
 8001284:	20000238 	.word	0x20000238
 8001288:	20000240 	.word	0x20000240
 800128c:	20000248 	.word	0x20000248
 8001290:	20000250 	.word	0x20000250
 8001294:	20000234 	.word	0x20000234
 8001298:	0800d328 	.word	0x0800d328

0800129c <calibrate_accelerometer>:

void calibrate_accelerometer() {
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
	  // Compute offsets
	  OFFX = (accelero_p0[0] + accelero_p1[0] + accelero_p2[0] + accelero_p3[0]) / 4;
 80012a0:	4b45      	ldr	r3, [pc, #276]	@ (80013b8 <calibrate_accelerometer+0x11c>)
 80012a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012a6:	461a      	mov	r2, r3
 80012a8:	4b44      	ldr	r3, [pc, #272]	@ (80013bc <calibrate_accelerometer+0x120>)
 80012aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ae:	4413      	add	r3, r2
 80012b0:	4a43      	ldr	r2, [pc, #268]	@ (80013c0 <calibrate_accelerometer+0x124>)
 80012b2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80012b6:	4413      	add	r3, r2
 80012b8:	4a42      	ldr	r2, [pc, #264]	@ (80013c4 <calibrate_accelerometer+0x128>)
 80012ba:	f9b2 2000 	ldrsh.w	r2, [r2]
 80012be:	4413      	add	r3, r2
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	da00      	bge.n	80012c6 <calibrate_accelerometer+0x2a>
 80012c4:	3303      	adds	r3, #3
 80012c6:	109b      	asrs	r3, r3, #2
 80012c8:	ee07 3a90 	vmov	s15, r3
 80012cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012d0:	4b3d      	ldr	r3, [pc, #244]	@ (80013c8 <calibrate_accelerometer+0x12c>)
 80012d2:	edc3 7a00 	vstr	s15, [r3]
	  OFFY = (accelero_p0[1] + accelero_p1[1] + accelero_p2[1] + accelero_p3[1]) / 4;
 80012d6:	4b38      	ldr	r3, [pc, #224]	@ (80013b8 <calibrate_accelerometer+0x11c>)
 80012d8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80012dc:	461a      	mov	r2, r3
 80012de:	4b37      	ldr	r3, [pc, #220]	@ (80013bc <calibrate_accelerometer+0x120>)
 80012e0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80012e4:	4413      	add	r3, r2
 80012e6:	4a36      	ldr	r2, [pc, #216]	@ (80013c0 <calibrate_accelerometer+0x124>)
 80012e8:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80012ec:	4413      	add	r3, r2
 80012ee:	4a35      	ldr	r2, [pc, #212]	@ (80013c4 <calibrate_accelerometer+0x128>)
 80012f0:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80012f4:	4413      	add	r3, r2
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	da00      	bge.n	80012fc <calibrate_accelerometer+0x60>
 80012fa:	3303      	adds	r3, #3
 80012fc:	109b      	asrs	r3, r3, #2
 80012fe:	ee07 3a90 	vmov	s15, r3
 8001302:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001306:	4b31      	ldr	r3, [pc, #196]	@ (80013cc <calibrate_accelerometer+0x130>)
 8001308:	edc3 7a00 	vstr	s15, [r3]

	  // Compute sensitivities
	  SENSX = (accelero_p2[0] - accelero_p1[0]) / 2;
 800130c:	4b2c      	ldr	r3, [pc, #176]	@ (80013c0 <calibrate_accelerometer+0x124>)
 800130e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001312:	461a      	mov	r2, r3
 8001314:	4b29      	ldr	r3, [pc, #164]	@ (80013bc <calibrate_accelerometer+0x120>)
 8001316:	f9b3 3000 	ldrsh.w	r3, [r3]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	0fda      	lsrs	r2, r3, #31
 800131e:	4413      	add	r3, r2
 8001320:	105b      	asrs	r3, r3, #1
 8001322:	ee07 3a90 	vmov	s15, r3
 8001326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800132a:	4b29      	ldr	r3, [pc, #164]	@ (80013d0 <calibrate_accelerometer+0x134>)
 800132c:	edc3 7a00 	vstr	s15, [r3]
	  SENSY = (accelero_p0[1] - accelero_p3[1]) / 2;
 8001330:	4b21      	ldr	r3, [pc, #132]	@ (80013b8 <calibrate_accelerometer+0x11c>)
 8001332:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001336:	461a      	mov	r2, r3
 8001338:	4b22      	ldr	r3, [pc, #136]	@ (80013c4 <calibrate_accelerometer+0x128>)
 800133a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	0fda      	lsrs	r2, r3, #31
 8001342:	4413      	add	r3, r2
 8001344:	105b      	asrs	r3, r3, #1
 8001346:	ee07 3a90 	vmov	s15, r3
 800134a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800134e:	4b21      	ldr	r3, [pc, #132]	@ (80013d4 <calibrate_accelerometer+0x138>)
 8001350:	edc3 7a00 	vstr	s15, [r3]

	  // Compute calibration factors
	  CXY = (accelero_p0[0] - accelero_p3[0]) / (2 * SENSX);
 8001354:	4b18      	ldr	r3, [pc, #96]	@ (80013b8 <calibrate_accelerometer+0x11c>)
 8001356:	f9b3 3000 	ldrsh.w	r3, [r3]
 800135a:	461a      	mov	r2, r3
 800135c:	4b19      	ldr	r3, [pc, #100]	@ (80013c4 <calibrate_accelerometer+0x128>)
 800135e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	ee07 3a90 	vmov	s15, r3
 8001368:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800136c:	4b18      	ldr	r3, [pc, #96]	@ (80013d0 <calibrate_accelerometer+0x134>)
 800136e:	edd3 7a00 	vldr	s15, [r3]
 8001372:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001376:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800137a:	4b17      	ldr	r3, [pc, #92]	@ (80013d8 <calibrate_accelerometer+0x13c>)
 800137c:	edc3 7a00 	vstr	s15, [r3]
	  CYX = (accelero_p2[1] - accelero_p1[1]) / (2 * SENSY);
 8001380:	4b0f      	ldr	r3, [pc, #60]	@ (80013c0 <calibrate_accelerometer+0x124>)
 8001382:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001386:	461a      	mov	r2, r3
 8001388:	4b0c      	ldr	r3, [pc, #48]	@ (80013bc <calibrate_accelerometer+0x120>)
 800138a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	ee07 3a90 	vmov	s15, r3
 8001394:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001398:	4b0e      	ldr	r3, [pc, #56]	@ (80013d4 <calibrate_accelerometer+0x138>)
 800139a:	edd3 7a00 	vldr	s15, [r3]
 800139e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80013a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013a6:	4b0d      	ldr	r3, [pc, #52]	@ (80013dc <calibrate_accelerometer+0x140>)
 80013a8:	edc3 7a00 	vstr	s15, [r3]
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	20000238 	.word	0x20000238
 80013bc:	20000240 	.word	0x20000240
 80013c0:	20000248 	.word	0x20000248
 80013c4:	20000250 	.word	0x20000250
 80013c8:	20000260 	.word	0x20000260
 80013cc:	20000264 	.word	0x20000264
 80013d0:	20000268 	.word	0x20000268
 80013d4:	2000026c 	.word	0x2000026c
 80013d8:	20000270 	.word	0x20000270
 80013dc:	20000274 	.word	0x20000274

080013e0 <main>:
=======
 8001160:	469fed00 	.word	0x469fed00
 8001164:	2000028c 	.word	0x2000028c
 8001168:	44fff000 	.word	0x44fff000
 800116c:	200002fc 	.word	0x200002fc
 8001170:	20000384 	.word	0x20000384
 8001174:	3bbba140 	.word	0x3bbba140
 8001178:	3facb91f 	.word	0x3facb91f

0800117c <play_gameover_sound>:

void play_gameover_sound(){
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
	start = 0;
 8001180:	4b08      	ldr	r3, [pc, #32]	@ (80011a4 <play_gameover_sound+0x28>)
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
	current_tone = sine_g4;
 8001186:	4b08      	ldr	r3, [pc, #32]	@ (80011a8 <play_gameover_sound+0x2c>)
 8001188:	4a08      	ldr	r2, [pc, #32]	@ (80011ac <play_gameover_sound+0x30>)
 800118a:	601a      	str	r2, [r3, #0]
	current_num_sample = 112;
 800118c:	4b08      	ldr	r3, [pc, #32]	@ (80011b0 <play_gameover_sound+0x34>)
 800118e:	2270      	movs	r2, #112	@ 0x70
 8001190:	601a      	str	r2, [r3, #0]
	tone_index = 0;
 8001192:	4b08      	ldr	r3, [pc, #32]	@ (80011b4 <play_gameover_sound+0x38>)
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]

	HAL_TIM_Base_Start_IT(&htim2);
 8001198:	4807      	ldr	r0, [pc, #28]	@ (80011b8 <play_gameover_sound+0x3c>)
 800119a:	f004 fd1d 	bl	8005bd8 <HAL_TIM_Base_Start_IT>
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000008 	.word	0x20000008
 80011a8:	20000000 	.word	0x20000000
 80011ac:	2000028c 	.word	0x2000028c
 80011b0:	20000004 	.word	0x20000004
 80011b4:	20000430 	.word	0x20000430
 80011b8:	2000064c 	.word	0x2000064c

080011bc <play_start_sound>:

void play_start_sound(){
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
	start = 1;
 80011c0:	4b08      	ldr	r3, [pc, #32]	@ (80011e4 <play_start_sound+0x28>)
 80011c2:	2201      	movs	r2, #1
 80011c4:	601a      	str	r2, [r3, #0]
	current_tone = sine_c4;
 80011c6:	4b08      	ldr	r3, [pc, #32]	@ (80011e8 <play_start_sound+0x2c>)
 80011c8:	4a08      	ldr	r2, [pc, #32]	@ (80011ec <play_start_sound+0x30>)
 80011ca:	601a      	str	r2, [r3, #0]
	current_num_sample = 169;
 80011cc:	4b08      	ldr	r3, [pc, #32]	@ (80011f0 <play_start_sound+0x34>)
 80011ce:	22a9      	movs	r2, #169	@ 0xa9
 80011d0:	601a      	str	r2, [r3, #0]
	tone_index = 0;
 80011d2:	4b08      	ldr	r3, [pc, #32]	@ (80011f4 <play_start_sound+0x38>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]

	HAL_TIM_Base_Start_IT(&htim2);
 80011d8:	4807      	ldr	r0, [pc, #28]	@ (80011f8 <play_start_sound+0x3c>)
 80011da:	f004 fcfd 	bl	8005bd8 <HAL_TIM_Base_Start_IT>
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000008 	.word	0x20000008
 80011e8:	20000000 	.word	0x20000000
 80011ec:	20000384 	.word	0x20000384
 80011f0:	20000004 	.word	0x20000004
 80011f4:	20000430 	.word	0x20000430
 80011f8:	2000064c 	.word	0x2000064c

080011fc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	80fb      	strh	r3, [r7, #6]
	if(!calibrationDone) {
 8001206:	4b25      	ldr	r3, [pc, #148]	@ (800129c <HAL_GPIO_EXTI_Callback+0xa0>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d137      	bne.n	800127e <HAL_GPIO_EXTI_Callback+0x82>
	    if (GPIO_Pin == myButton_Pin) {
 800120e:	88fb      	ldrh	r3, [r7, #6]
 8001210:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001214:	d133      	bne.n	800127e <HAL_GPIO_EXTI_Callback+0x82>
	        printf("Button Pressed! Current Position: %d\r\n", current_position);
 8001216:	4b22      	ldr	r3, [pc, #136]	@ (80012a0 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4619      	mov	r1, r3
 800121c:	4821      	ldr	r0, [pc, #132]	@ (80012a4 <HAL_GPIO_EXTI_Callback+0xa8>)
 800121e:	f009 f8c7 	bl	800a3b0 <iprintf>

	        // Record accelerometer data
	        if (current_position == 0) {
 8001222:	4b1f      	ldr	r3, [pc, #124]	@ (80012a0 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d103      	bne.n	8001232 <HAL_GPIO_EXTI_Callback+0x36>
	            BSP_ACCELERO_AccGetXYZ(accelero_p0);
 800122a:	481f      	ldr	r0, [pc, #124]	@ (80012a8 <HAL_GPIO_EXTI_Callback+0xac>)
 800122c:	f000 fe28 	bl	8001e80 <BSP_ACCELERO_AccGetXYZ>
 8001230:	e016      	b.n	8001260 <HAL_GPIO_EXTI_Callback+0x64>
	        } else if (current_position == 1) {
 8001232:	4b1b      	ldr	r3, [pc, #108]	@ (80012a0 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d103      	bne.n	8001242 <HAL_GPIO_EXTI_Callback+0x46>
	            BSP_ACCELERO_AccGetXYZ(accelero_p1);
 800123a:	481c      	ldr	r0, [pc, #112]	@ (80012ac <HAL_GPIO_EXTI_Callback+0xb0>)
 800123c:	f000 fe20 	bl	8001e80 <BSP_ACCELERO_AccGetXYZ>
 8001240:	e00e      	b.n	8001260 <HAL_GPIO_EXTI_Callback+0x64>
	        } else if (current_position == 2) {
 8001242:	4b17      	ldr	r3, [pc, #92]	@ (80012a0 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2b02      	cmp	r3, #2
 8001248:	d103      	bne.n	8001252 <HAL_GPIO_EXTI_Callback+0x56>
	            BSP_ACCELERO_AccGetXYZ(accelero_p2);
 800124a:	4819      	ldr	r0, [pc, #100]	@ (80012b0 <HAL_GPIO_EXTI_Callback+0xb4>)
 800124c:	f000 fe18 	bl	8001e80 <BSP_ACCELERO_AccGetXYZ>
 8001250:	e006      	b.n	8001260 <HAL_GPIO_EXTI_Callback+0x64>
	        } else if (current_position == 3) {
 8001252:	4b13      	ldr	r3, [pc, #76]	@ (80012a0 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2b03      	cmp	r3, #3
 8001258:	d102      	bne.n	8001260 <HAL_GPIO_EXTI_Callback+0x64>
	            BSP_ACCELERO_AccGetXYZ(accelero_p3);
 800125a:	4816      	ldr	r0, [pc, #88]	@ (80012b4 <HAL_GPIO_EXTI_Callback+0xb8>)
 800125c:	f000 fe10 	bl	8001e80 <BSP_ACCELERO_AccGetXYZ>
	        }

	        current_position++;
 8001260:	4b0f      	ldr	r3, [pc, #60]	@ (80012a0 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	3301      	adds	r3, #1
 8001266:	4a0e      	ldr	r2, [pc, #56]	@ (80012a0 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001268:	6013      	str	r3, [r2, #0]

	        if (current_position > 3) {
 800126a:	4b0d      	ldr	r3, [pc, #52]	@ (80012a0 <HAL_GPIO_EXTI_Callback+0xa4>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2b03      	cmp	r3, #3
 8001270:	dd05      	ble.n	800127e <HAL_GPIO_EXTI_Callback+0x82>
	            calibrationDone = 1;
 8001272:	4b0a      	ldr	r3, [pc, #40]	@ (800129c <HAL_GPIO_EXTI_Callback+0xa0>)
 8001274:	2201      	movs	r2, #1
 8001276:	601a      	str	r2, [r3, #0]
	            printf("Calibration complete!\r\n");
 8001278:	480f      	ldr	r0, [pc, #60]	@ (80012b8 <HAL_GPIO_EXTI_Callback+0xbc>)
 800127a:	f009 f901 	bl	800a480 <puts>
	        }
	    }
	}

	if(calibrationDone) {
 800127e:	4b07      	ldr	r3, [pc, #28]	@ (800129c <HAL_GPIO_EXTI_Callback+0xa0>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d006      	beq.n	8001294 <HAL_GPIO_EXTI_Callback+0x98>
////			printf("Button Pressed! Shoot!", current_position);
//		}
//		else{
//			buttonStatus_after_Calibration = 0;
//		}
	    if (GPIO_Pin == myButton_Pin) {
 8001286:	88fb      	ldrh	r3, [r7, #6]
 8001288:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800128c:	d102      	bne.n	8001294 <HAL_GPIO_EXTI_Callback+0x98>
	        button_pressed = 1;  // Set flag on button press
 800128e:	4b0b      	ldr	r3, [pc, #44]	@ (80012bc <HAL_GPIO_EXTI_Callback+0xc0>)
 8001290:	2201      	movs	r2, #1
 8001292:	601a      	str	r2, [r3, #0]
	    }
	}

}
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000234 	.word	0x20000234
 80012a0:	20000230 	.word	0x20000230
 80012a4:	0800d348 	.word	0x0800d348
 80012a8:	20000238 	.word	0x20000238
 80012ac:	20000240 	.word	0x20000240
 80012b0:	20000248 	.word	0x20000248
 80012b4:	20000250 	.word	0x20000250
 80012b8:	0800d370 	.word	0x0800d370
 80012bc:	2000072c 	.word	0x2000072c

080012c0 <calibrate_accelerometer>:

void calibrate_accelerometer() {
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
	  // Compute offsets
	  OFFX = (accelero_p0[0] + accelero_p1[0] + accelero_p2[0] + accelero_p3[0]) / 4;
 80012c4:	4b45      	ldr	r3, [pc, #276]	@ (80013dc <calibrate_accelerometer+0x11c>)
 80012c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ca:	461a      	mov	r2, r3
 80012cc:	4b44      	ldr	r3, [pc, #272]	@ (80013e0 <calibrate_accelerometer+0x120>)
 80012ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d2:	4413      	add	r3, r2
 80012d4:	4a43      	ldr	r2, [pc, #268]	@ (80013e4 <calibrate_accelerometer+0x124>)
 80012d6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80012da:	4413      	add	r3, r2
 80012dc:	4a42      	ldr	r2, [pc, #264]	@ (80013e8 <calibrate_accelerometer+0x128>)
 80012de:	f9b2 2000 	ldrsh.w	r2, [r2]
 80012e2:	4413      	add	r3, r2
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	da00      	bge.n	80012ea <calibrate_accelerometer+0x2a>
 80012e8:	3303      	adds	r3, #3
 80012ea:	109b      	asrs	r3, r3, #2
 80012ec:	ee07 3a90 	vmov	s15, r3
 80012f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012f4:	4b3d      	ldr	r3, [pc, #244]	@ (80013ec <calibrate_accelerometer+0x12c>)
 80012f6:	edc3 7a00 	vstr	s15, [r3]
	  OFFY = (accelero_p0[1] + accelero_p1[1] + accelero_p2[1] + accelero_p3[1]) / 4;
 80012fa:	4b38      	ldr	r3, [pc, #224]	@ (80013dc <calibrate_accelerometer+0x11c>)
 80012fc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001300:	461a      	mov	r2, r3
 8001302:	4b37      	ldr	r3, [pc, #220]	@ (80013e0 <calibrate_accelerometer+0x120>)
 8001304:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001308:	4413      	add	r3, r2
 800130a:	4a36      	ldr	r2, [pc, #216]	@ (80013e4 <calibrate_accelerometer+0x124>)
 800130c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001310:	4413      	add	r3, r2
 8001312:	4a35      	ldr	r2, [pc, #212]	@ (80013e8 <calibrate_accelerometer+0x128>)
 8001314:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001318:	4413      	add	r3, r2
 800131a:	2b00      	cmp	r3, #0
 800131c:	da00      	bge.n	8001320 <calibrate_accelerometer+0x60>
 800131e:	3303      	adds	r3, #3
 8001320:	109b      	asrs	r3, r3, #2
 8001322:	ee07 3a90 	vmov	s15, r3
 8001326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800132a:	4b31      	ldr	r3, [pc, #196]	@ (80013f0 <calibrate_accelerometer+0x130>)
 800132c:	edc3 7a00 	vstr	s15, [r3]

	  // Compute sensitivities
	  SENSX = (accelero_p2[0] - accelero_p1[0]) / 2;
 8001330:	4b2c      	ldr	r3, [pc, #176]	@ (80013e4 <calibrate_accelerometer+0x124>)
 8001332:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001336:	461a      	mov	r2, r3
 8001338:	4b29      	ldr	r3, [pc, #164]	@ (80013e0 <calibrate_accelerometer+0x120>)
 800133a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	0fda      	lsrs	r2, r3, #31
 8001342:	4413      	add	r3, r2
 8001344:	105b      	asrs	r3, r3, #1
 8001346:	ee07 3a90 	vmov	s15, r3
 800134a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800134e:	4b29      	ldr	r3, [pc, #164]	@ (80013f4 <calibrate_accelerometer+0x134>)
 8001350:	edc3 7a00 	vstr	s15, [r3]
	  SENSY = (accelero_p0[1] - accelero_p3[1]) / 2;
 8001354:	4b21      	ldr	r3, [pc, #132]	@ (80013dc <calibrate_accelerometer+0x11c>)
 8001356:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800135a:	461a      	mov	r2, r3
 800135c:	4b22      	ldr	r3, [pc, #136]	@ (80013e8 <calibrate_accelerometer+0x128>)
 800135e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	0fda      	lsrs	r2, r3, #31
 8001366:	4413      	add	r3, r2
 8001368:	105b      	asrs	r3, r3, #1
 800136a:	ee07 3a90 	vmov	s15, r3
 800136e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001372:	4b21      	ldr	r3, [pc, #132]	@ (80013f8 <calibrate_accelerometer+0x138>)
 8001374:	edc3 7a00 	vstr	s15, [r3]

	  // Compute calibration factors
	  CXY = (accelero_p0[0] - accelero_p3[0]) / (2 * SENSX);
 8001378:	4b18      	ldr	r3, [pc, #96]	@ (80013dc <calibrate_accelerometer+0x11c>)
 800137a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800137e:	461a      	mov	r2, r3
 8001380:	4b19      	ldr	r3, [pc, #100]	@ (80013e8 <calibrate_accelerometer+0x128>)
 8001382:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	ee07 3a90 	vmov	s15, r3
 800138c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001390:	4b18      	ldr	r3, [pc, #96]	@ (80013f4 <calibrate_accelerometer+0x134>)
 8001392:	edd3 7a00 	vldr	s15, [r3]
 8001396:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800139a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800139e:	4b17      	ldr	r3, [pc, #92]	@ (80013fc <calibrate_accelerometer+0x13c>)
 80013a0:	edc3 7a00 	vstr	s15, [r3]
	  CYX = (accelero_p2[1] - accelero_p1[1]) / (2 * SENSY);
 80013a4:	4b0f      	ldr	r3, [pc, #60]	@ (80013e4 <calibrate_accelerometer+0x124>)
 80013a6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013aa:	461a      	mov	r2, r3
 80013ac:	4b0c      	ldr	r3, [pc, #48]	@ (80013e0 <calibrate_accelerometer+0x120>)
 80013ae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	ee07 3a90 	vmov	s15, r3
 80013b8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013bc:	4b0e      	ldr	r3, [pc, #56]	@ (80013f8 <calibrate_accelerometer+0x138>)
 80013be:	edd3 7a00 	vldr	s15, [r3]
 80013c2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80013c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001400 <calibrate_accelerometer+0x140>)
 80013cc:	edc3 7a00 	vstr	s15, [r3]
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	20000238 	.word	0x20000238
 80013e0:	20000240 	.word	0x20000240
 80013e4:	20000248 	.word	0x20000248
 80013e8:	20000250 	.word	0x20000250
 80013ec:	20000260 	.word	0x20000260
 80013f0:	20000264 	.word	0x20000264
 80013f4:	20000268 	.word	0x20000268
 80013f8:	2000026c 	.word	0x2000026c
 80013fc:	20000270 	.word	0x20000270
 8001400:	20000274 	.word	0x20000274

08001404 <main>:
>>>>>>> Stashed changes
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
<<<<<<< Updated upstream
 80013e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013e4:	ed2d 8b02 	vpush	{d8}
 80013e8:	b08a      	sub	sp, #40	@ 0x28
 80013ea:	af04      	add	r7, sp, #16
=======
 8001404:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001408:	ed2d 8b02 	vpush	{d8}
 800140c:	b08c      	sub	sp, #48	@ 0x30
 800140e:	af06      	add	r7, sp, #24
>>>>>>> Stashed changes
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< Updated upstream
 80013ec:	f001 f91c 	bl	8002628 <HAL_Init>
=======
 8001410:	f001 f930 	bl	8002674 <HAL_Init>
>>>>>>> Stashed changes
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< Updated upstream
 80013f0:	f000 f932 	bl	8001658 <SystemClock_Config>
=======
 8001414:	f000 f946 	bl	80016a4 <SystemClock_Config>
>>>>>>> Stashed changes
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< Updated upstream
 80013f4:	f000 fa90 	bl	8001918 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80013f8:	f000 fa42 	bl	8001880 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 80013fc:	f000 f9b2 	bl	8001764 <MX_I2C2_Init>
  MX_DAC1_Init();
 8001400:	f000 f97c 	bl	80016fc <MX_DAC1_Init>
  MX_TIM2_Init();
 8001404:	f000 f9ee 	bl	80017e4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  BSP_ACCELERO_Init();
 8001408:	f000 fcd6 	bl	8001db8 <BSP_ACCELERO_Init>
  //BSP_GYRO_Init();

  HAL_UART_Init(&huart1);
 800140c:	487c      	ldr	r0, [pc, #496]	@ (8001600 <main+0x220>)
 800140e:	f005 f83b 	bl	8006488 <HAL_UART_Init>
  rxStatus = HAL_UART_Receive_IT(&huart1, rxBuffer, 10);
 8001412:	220a      	movs	r2, #10
 8001414:	497b      	ldr	r1, [pc, #492]	@ (8001604 <main+0x224>)
 8001416:	487a      	ldr	r0, [pc, #488]	@ (8001600 <main+0x220>)
 8001418:	f005 f914 	bl	8006644 <HAL_UART_Receive_IT>
 800141c:	4603      	mov	r3, r0
 800141e:	461a      	mov	r2, r3
 8001420:	4b79      	ldr	r3, [pc, #484]	@ (8001608 <main+0x228>)
 8001422:	701a      	strb	r2, [r3, #0]

  current_position = 0;
 8001424:	4b79      	ldr	r3, [pc, #484]	@ (800160c <main+0x22c>)
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
  calibrationDone = 0;
 800142a:	4b79      	ldr	r3, [pc, #484]	@ (8001610 <main+0x230>)
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]

  while (calibrationDone == 0) {
 8001430:	e01d      	b.n	800146e <main+0x8e>
	  // waiting loop
	  sprintf(txBuffer, "Waiting for calibration \r\n");
 8001432:	4978      	ldr	r1, [pc, #480]	@ (8001614 <main+0x234>)
 8001434:	4878      	ldr	r0, [pc, #480]	@ (8001618 <main+0x238>)
 8001436:	f008 f82f 	bl	8009498 <siprintf>

	  HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, SIZE_BUFFER, 100);
 800143a:	2364      	movs	r3, #100	@ 0x64
 800143c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001440:	4975      	ldr	r1, [pc, #468]	@ (8001618 <main+0x238>)
 8001442:	486f      	ldr	r0, [pc, #444]	@ (8001600 <main+0x220>)
 8001444:	f005 f870 	bl	8006528 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8001448:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800144c:	f001 f960 	bl	8002710 <HAL_Delay>

	  for(int i = 0; i < SIZE_BUFFER; i++) {
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]
 8001454:	e007      	b.n	8001466 <main+0x86>
		  txBuffer[i] = 0;
 8001456:	4a70      	ldr	r2, [pc, #448]	@ (8001618 <main+0x238>)
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	4413      	add	r3, r2
 800145c:	2200      	movs	r2, #0
 800145e:	701a      	strb	r2, [r3, #0]
	  for(int i = 0; i < SIZE_BUFFER; i++) {
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	3301      	adds	r3, #1
 8001464:	617b      	str	r3, [r7, #20]
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800146c:	dbf3      	blt.n	8001456 <main+0x76>
  while (calibrationDone == 0) {
 800146e:	4b68      	ldr	r3, [pc, #416]	@ (8001610 <main+0x230>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d0dd      	beq.n	8001432 <main+0x52>
=======
 8001418:	f000 faa4 	bl	8001964 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800141c:	f000 fa56 	bl	80018cc <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8001420:	f000 f9c6 	bl	80017b0 <MX_I2C2_Init>
  MX_DAC1_Init();
 8001424:	f000 f990 	bl	8001748 <MX_DAC1_Init>
  MX_TIM2_Init();
 8001428:	f000 fa02 	bl	8001830 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  BSP_ACCELERO_Init();
 800142c:	f000 fcea 	bl	8001e04 <BSP_ACCELERO_Init>
  //BSP_GYRO_Init();

  HAL_UART_Init(&huart1);
 8001430:	4885      	ldr	r0, [pc, #532]	@ (8001648 <main+0x244>)
 8001432:	f005 f84f 	bl	80064d4 <HAL_UART_Init>
  rxStatus = HAL_UART_Receive_IT(&huart1, rxBuffer, 10);
 8001436:	220a      	movs	r2, #10
 8001438:	4984      	ldr	r1, [pc, #528]	@ (800164c <main+0x248>)
 800143a:	4883      	ldr	r0, [pc, #524]	@ (8001648 <main+0x244>)
 800143c:	f005 f928 	bl	8006690 <HAL_UART_Receive_IT>
 8001440:	4603      	mov	r3, r0
 8001442:	461a      	mov	r2, r3
 8001444:	4b82      	ldr	r3, [pc, #520]	@ (8001650 <main+0x24c>)
 8001446:	701a      	strb	r2, [r3, #0]

  current_position = 0;
 8001448:	4b82      	ldr	r3, [pc, #520]	@ (8001654 <main+0x250>)
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
  calibrationDone = 0;
 800144e:	4b82      	ldr	r3, [pc, #520]	@ (8001658 <main+0x254>)
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]

  while (calibrationDone == 0) {
 8001454:	e01d      	b.n	8001492 <main+0x8e>
	  // waiting loop
	  sprintf(txBuffer, "Waiting for calibration \r\n");
 8001456:	4981      	ldr	r1, [pc, #516]	@ (800165c <main+0x258>)
 8001458:	4881      	ldr	r0, [pc, #516]	@ (8001660 <main+0x25c>)
 800145a:	f008 f843 	bl	80094e4 <siprintf>

	  HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, SIZE_BUFFER, 100);
 800145e:	2364      	movs	r3, #100	@ 0x64
 8001460:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001464:	497e      	ldr	r1, [pc, #504]	@ (8001660 <main+0x25c>)
 8001466:	4878      	ldr	r0, [pc, #480]	@ (8001648 <main+0x244>)
 8001468:	f005 f884 	bl	8006574 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 800146c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001470:	f001 f974 	bl	800275c <HAL_Delay>

	  for(int i = 0; i < SIZE_BUFFER; i++) {
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
 8001478:	e007      	b.n	800148a <main+0x86>
		  txBuffer[i] = 0;
 800147a:	4a79      	ldr	r2, [pc, #484]	@ (8001660 <main+0x25c>)
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	4413      	add	r3, r2
 8001480:	2200      	movs	r2, #0
 8001482:	701a      	strb	r2, [r3, #0]
	  for(int i = 0; i < SIZE_BUFFER; i++) {
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	3301      	adds	r3, #1
 8001488:	617b      	str	r3, [r7, #20]
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001490:	dbf3      	blt.n	800147a <main+0x76>
  while (calibrationDone == 0) {
 8001492:	4b71      	ldr	r3, [pc, #452]	@ (8001658 <main+0x254>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d0dd      	beq.n	8001456 <main+0x52>
>>>>>>> Stashed changes
	  }
  }

  calibrate_accelerometer();
<<<<<<< Updated upstream
 8001476:	f7ff ff11 	bl	800129c <calibrate_accelerometer>
  sprintf(txBuffer, "Calibration done \r\n");
 800147a:	4968      	ldr	r1, [pc, #416]	@ (800161c <main+0x23c>)
 800147c:	4866      	ldr	r0, [pc, #408]	@ (8001618 <main+0x238>)
 800147e:	f008 f80b 	bl	8009498 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, SIZE_BUFFER, 100);
 8001482:	2364      	movs	r3, #100	@ 0x64
 8001484:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001488:	4963      	ldr	r1, [pc, #396]	@ (8001618 <main+0x238>)
 800148a:	485d      	ldr	r0, [pc, #372]	@ (8001600 <main+0x220>)
 800148c:	f005 f84c 	bl	8006528 <HAL_UART_Transmit>
  HAL_Delay(1000);
 8001490:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001494:	f001 f93c 	bl	8002710 <HAL_Delay>

  for(int i = 0; i < SIZE_BUFFER; i++) {
 8001498:	2300      	movs	r3, #0
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	e007      	b.n	80014ae <main+0xce>
	  txBuffer[i] = 0;
 800149e:	4a5e      	ldr	r2, [pc, #376]	@ (8001618 <main+0x238>)
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	4413      	add	r3, r2
 80014a4:	2200      	movs	r2, #0
 80014a6:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < SIZE_BUFFER; i++) {
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	3301      	adds	r3, #1
 80014ac:	613b      	str	r3, [r7, #16]
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80014b4:	dbf3      	blt.n	800149e <main+0xbe>
  }

  generate_gameover_sound_waves();
 80014b6:	f7ff fdaf 	bl	8001018 <generate_gameover_sound_waves>

  STATUS = HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80014ba:	2100      	movs	r1, #0
 80014bc:	4858      	ldr	r0, [pc, #352]	@ (8001620 <main+0x240>)
 80014be:	f001 fa7e 	bl	80029be <HAL_DAC_Start>
 80014c2:	4603      	mov	r3, r0
 80014c4:	461a      	mov	r2, r3
 80014c6:	4b57      	ldr	r3, [pc, #348]	@ (8001624 <main+0x244>)
 80014c8:	701a      	strb	r2, [r3, #0]
  	if(STATUS!=HAL_OK){
 80014ca:	4b56      	ldr	r3, [pc, #344]	@ (8001624 <main+0x244>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <main+0xf6>
  	  Error_Handler();
 80014d2:	f000 fb1b 	bl	8001b0c <Error_Handler>
=======
 800149a:	f7ff ff11 	bl	80012c0 <calibrate_accelerometer>
  sprintf(txBuffer, "Calibration done \r\n");
 800149e:	4971      	ldr	r1, [pc, #452]	@ (8001664 <main+0x260>)
 80014a0:	486f      	ldr	r0, [pc, #444]	@ (8001660 <main+0x25c>)
 80014a2:	f008 f81f 	bl	80094e4 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, SIZE_BUFFER, 100);
 80014a6:	2364      	movs	r3, #100	@ 0x64
 80014a8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80014ac:	496c      	ldr	r1, [pc, #432]	@ (8001660 <main+0x25c>)
 80014ae:	4866      	ldr	r0, [pc, #408]	@ (8001648 <main+0x244>)
 80014b0:	f005 f860 	bl	8006574 <HAL_UART_Transmit>
  HAL_Delay(1000);
 80014b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014b8:	f001 f950 	bl	800275c <HAL_Delay>

  for(int i = 0; i < SIZE_BUFFER; i++) {
 80014bc:	2300      	movs	r3, #0
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	e007      	b.n	80014d2 <main+0xce>
	  txBuffer[i] = 0;
 80014c2:	4a67      	ldr	r2, [pc, #412]	@ (8001660 <main+0x25c>)
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	4413      	add	r3, r2
 80014c8:	2200      	movs	r2, #0
 80014ca:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < SIZE_BUFFER; i++) {
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	3301      	adds	r3, #1
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80014d8:	dbf3      	blt.n	80014c2 <main+0xbe>
  }

  generate_gameover_sound_waves();
 80014da:	f7ff fd9d 	bl	8001018 <generate_gameover_sound_waves>

  STATUS = HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80014de:	2100      	movs	r1, #0
 80014e0:	4861      	ldr	r0, [pc, #388]	@ (8001668 <main+0x264>)
 80014e2:	f001 fa92 	bl	8002a0a <HAL_DAC_Start>
 80014e6:	4603      	mov	r3, r0
 80014e8:	461a      	mov	r2, r3
 80014ea:	4b60      	ldr	r3, [pc, #384]	@ (800166c <main+0x268>)
 80014ec:	701a      	strb	r2, [r3, #0]
  	if(STATUS!=HAL_OK){
 80014ee:	4b5f      	ldr	r3, [pc, #380]	@ (800166c <main+0x268>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <main+0xf6>
  	  Error_Handler();
 80014f6:	f000 fb2f 	bl	8001b58 <Error_Handler>
>>>>>>> Stashed changes

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  play_start_sound();
<<<<<<< Updated upstream
 80014d6:	f7ff fe6f 	bl	80011b8 <play_start_sound>
=======
 80014fa:	f7ff fe5f 	bl	80011bc <play_start_sound>


>>>>>>> Stashed changes
  while (1)
  {
	  //rxStatus = HAL_UART_Receive_IT(&huart1, rxBuffer, 100);
	  int temp = 0;
 80014fe:	2300      	movs	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
	    if (button_pressed) {
 8001502:	4b5b      	ldr	r3, [pc, #364]	@ (8001670 <main+0x26c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d004      	beq.n	8001514 <main+0x110>
	        // Reset the flag
	        button_pressed = 0;
 800150a:	4b59      	ldr	r3, [pc, #356]	@ (8001670 <main+0x26c>)
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
	        temp = 1;
 8001510:	2301      	movs	r3, #1
 8001512:	60fb      	str	r3, [r7, #12]

	    }

<<<<<<< Updated upstream
	  BSP_ACCELERO_AccGetXYZ(accelero);
 80014da:	4853      	ldr	r0, [pc, #332]	@ (8001628 <main+0x248>)
 80014dc:	f000 fcaa 	bl	8001e34 <BSP_ACCELERO_AccGetXYZ>

	  // Initial estimates
	  ACCX_prime = (accelero[0] - OFFX) / SENSX;
 80014e0:	4b51      	ldr	r3, [pc, #324]	@ (8001628 <main+0x248>)
 80014e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014e6:	ee07 3a90 	vmov	s15, r3
 80014ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014ee:	4b4f      	ldr	r3, [pc, #316]	@ (800162c <main+0x24c>)
 80014f0:	edd3 7a00 	vldr	s15, [r3]
 80014f4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80014f8:	4b4d      	ldr	r3, [pc, #308]	@ (8001630 <main+0x250>)
 80014fa:	ed93 7a00 	vldr	s14, [r3]
 80014fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001502:	4b4c      	ldr	r3, [pc, #304]	@ (8001634 <main+0x254>)
 8001504:	edc3 7a00 	vstr	s15, [r3]
	  ACCY_prime = (accelero[1] - OFFY) / SENSY;
 8001508:	4b47      	ldr	r3, [pc, #284]	@ (8001628 <main+0x248>)
 800150a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800150e:	ee07 3a90 	vmov	s15, r3
 8001512:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001516:	4b48      	ldr	r3, [pc, #288]	@ (8001638 <main+0x258>)
 8001518:	edd3 7a00 	vldr	s15, [r3]
 800151c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001520:	4b46      	ldr	r3, [pc, #280]	@ (800163c <main+0x25c>)
 8001522:	ed93 7a00 	vldr	s14, [r3]
 8001526:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800152a:	4b45      	ldr	r3, [pc, #276]	@ (8001640 <main+0x260>)
 800152c:	edc3 7a00 	vstr	s15, [r3]
=======
	  HAL_Delay(50);
 8001514:	2032      	movs	r0, #50	@ 0x32
 8001516:	f001 f921 	bl	800275c <HAL_Delay>

	  BSP_ACCELERO_AccGetXYZ(accelero);
 800151a:	4856      	ldr	r0, [pc, #344]	@ (8001674 <main+0x270>)
 800151c:	f000 fcb0 	bl	8001e80 <BSP_ACCELERO_AccGetXYZ>

	  // Initial estimates
	  ACCX_prime = (accelero[0] - OFFX) / SENSX;
 8001520:	4b54      	ldr	r3, [pc, #336]	@ (8001674 <main+0x270>)
 8001522:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001526:	ee07 3a90 	vmov	s15, r3
 800152a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800152e:	4b52      	ldr	r3, [pc, #328]	@ (8001678 <main+0x274>)
 8001530:	edd3 7a00 	vldr	s15, [r3]
 8001534:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001538:	4b50      	ldr	r3, [pc, #320]	@ (800167c <main+0x278>)
 800153a:	ed93 7a00 	vldr	s14, [r3]
 800153e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001542:	4b4f      	ldr	r3, [pc, #316]	@ (8001680 <main+0x27c>)
 8001544:	edc3 7a00 	vstr	s15, [r3]
	  ACCY_prime = (accelero[1] - OFFY) / SENSY;
 8001548:	4b4a      	ldr	r3, [pc, #296]	@ (8001674 <main+0x270>)
 800154a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800154e:	ee07 3a90 	vmov	s15, r3
 8001552:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001556:	4b4b      	ldr	r3, [pc, #300]	@ (8001684 <main+0x280>)
 8001558:	edd3 7a00 	vldr	s15, [r3]
 800155c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001560:	4b49      	ldr	r3, [pc, #292]	@ (8001688 <main+0x284>)
 8001562:	ed93 7a00 	vldr	s14, [r3]
 8001566:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800156a:	4b48      	ldr	r3, [pc, #288]	@ (800168c <main+0x288>)
 800156c:	edc3 7a00 	vstr	s15, [r3]
>>>>>>> Stashed changes
	//	ACCX_prime = (accelero[0] - OFFX) / SENSX - ACCY_prime * CXY;
	//	ACCY_prime = (accelero[1] - OFFY) / SENSY - ACCX_prime * CYX;
	  //}

	  // Store final calibrated values
	  ACCX = ACCX_prime;
<<<<<<< Updated upstream
 8001530:	4b40      	ldr	r3, [pc, #256]	@ (8001634 <main+0x254>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a43      	ldr	r2, [pc, #268]	@ (8001644 <main+0x264>)
 8001536:	6013      	str	r3, [r2, #0]
	  ACCY = ACCY_prime;
 8001538:	4b41      	ldr	r3, [pc, #260]	@ (8001640 <main+0x260>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a42      	ldr	r2, [pc, #264]	@ (8001648 <main+0x268>)
 800153e:	6013      	str	r3, [r2, #0]

	  // Compute tilt angle in radians
	  float tilt = atan2f(ACCX, sqrtf(ACCY * ACCY));
 8001540:	4b40      	ldr	r3, [pc, #256]	@ (8001644 <main+0x264>)
 8001542:	ed93 8a00 	vldr	s16, [r3]
 8001546:	4b40      	ldr	r3, [pc, #256]	@ (8001648 <main+0x268>)
 8001548:	ed93 7a00 	vldr	s14, [r3]
 800154c:	4b3e      	ldr	r3, [pc, #248]	@ (8001648 <main+0x268>)
 800154e:	edd3 7a00 	vldr	s15, [r3]
 8001552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001556:	eeb0 0a67 	vmov.f32	s0, s15
 800155a:	f00b fd25 	bl	800cfa8 <sqrtf>
 800155e:	eef0 7a40 	vmov.f32	s15, s0
 8001562:	eef0 0a67 	vmov.f32	s1, s15
 8001566:	eeb0 0a48 	vmov.f32	s0, s16
 800156a:	f00b fd1b 	bl	800cfa4 <atan2f>
 800156e:	ed87 0a02 	vstr	s0, [r7, #8]

	  // Convert radians to degrees if needed
	  float tilt_degrees = tilt * 180 / PI;
 8001572:	edd7 7a02 	vldr	s15, [r7, #8]
 8001576:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 800164c <main+0x26c>
 800157a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800157e:	eddf 6a34 	vldr	s13, [pc, #208]	@ 8001650 <main+0x270>
 8001582:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001586:	edc7 7a01 	vstr	s15, [r7, #4]

	  sprintf(txBuffer, "Calibrated Accelero X: %f, Y: %f, Tilt degrees: %f \r\n", ACCX, ACCY, tilt_degrees);
 800158a:	4b2e      	ldr	r3, [pc, #184]	@ (8001644 <main+0x264>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f7fe fff2 	bl	8000578 <__aeabi_f2d>
 8001594:	4680      	mov	r8, r0
 8001596:	4689      	mov	r9, r1
 8001598:	4b2b      	ldr	r3, [pc, #172]	@ (8001648 <main+0x268>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	f7fe ffeb 	bl	8000578 <__aeabi_f2d>
 80015a2:	4604      	mov	r4, r0
 80015a4:	460d      	mov	r5, r1
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7fe ffe6 	bl	8000578 <__aeabi_f2d>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80015b4:	e9cd 4500 	strd	r4, r5, [sp]
 80015b8:	4642      	mov	r2, r8
 80015ba:	464b      	mov	r3, r9
 80015bc:	4925      	ldr	r1, [pc, #148]	@ (8001654 <main+0x274>)
 80015be:	4816      	ldr	r0, [pc, #88]	@ (8001618 <main+0x238>)
 80015c0:	f007 ff6a 	bl	8009498 <siprintf>
=======
 8001570:	4b43      	ldr	r3, [pc, #268]	@ (8001680 <main+0x27c>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a46      	ldr	r2, [pc, #280]	@ (8001690 <main+0x28c>)
 8001576:	6013      	str	r3, [r2, #0]
	  ACCY = ACCY_prime;
 8001578:	4b44      	ldr	r3, [pc, #272]	@ (800168c <main+0x288>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a45      	ldr	r2, [pc, #276]	@ (8001694 <main+0x290>)
 800157e:	6013      	str	r3, [r2, #0]

	  // Compute tilt angle in radians
	  float tilt = atan2f(ACCX, sqrtf(ACCY * ACCY));
 8001580:	4b43      	ldr	r3, [pc, #268]	@ (8001690 <main+0x28c>)
 8001582:	ed93 8a00 	vldr	s16, [r3]
 8001586:	4b43      	ldr	r3, [pc, #268]	@ (8001694 <main+0x290>)
 8001588:	ed93 7a00 	vldr	s14, [r3]
 800158c:	4b41      	ldr	r3, [pc, #260]	@ (8001694 <main+0x290>)
 800158e:	edd3 7a00 	vldr	s15, [r3]
 8001592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001596:	eeb0 0a67 	vmov.f32	s0, s15
 800159a:	f00b fd29 	bl	800cff0 <sqrtf>
 800159e:	eef0 7a40 	vmov.f32	s15, s0
 80015a2:	eef0 0a67 	vmov.f32	s1, s15
 80015a6:	eeb0 0a48 	vmov.f32	s0, s16
 80015aa:	f00b fd1f 	bl	800cfec <atan2f>
 80015ae:	ed87 0a01 	vstr	s0, [r7, #4]

	  // Convert radians to degrees if needed
	  float tilt_degrees = tilt * 180 / PI;
 80015b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80015b6:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8001698 <main+0x294>
 80015ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015be:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800169c <main+0x298>
 80015c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015c6:	edc7 7a00 	vstr	s15, [r7]

>>>>>>> Stashed changes


	  sprintf(txBuffer, "Calibrated Accelero X: %f, Y: %f, Tilt degrees: %f, Shoot: %d \r\n", ACCX, ACCY, tilt_degrees, temp);
 80015ca:	4b31      	ldr	r3, [pc, #196]	@ (8001690 <main+0x28c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7fe ffd2 	bl	8000578 <__aeabi_f2d>
 80015d4:	4680      	mov	r8, r0
 80015d6:	4689      	mov	r9, r1
 80015d8:	4b2e      	ldr	r3, [pc, #184]	@ (8001694 <main+0x290>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7fe ffcb 	bl	8000578 <__aeabi_f2d>
 80015e2:	4604      	mov	r4, r0
 80015e4:	460d      	mov	r5, r1
 80015e6:	6838      	ldr	r0, [r7, #0]
 80015e8:	f7fe ffc6 	bl	8000578 <__aeabi_f2d>
 80015ec:	4602      	mov	r2, r0
 80015ee:	460b      	mov	r3, r1
 80015f0:	68f9      	ldr	r1, [r7, #12]
 80015f2:	9104      	str	r1, [sp, #16]
 80015f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80015f8:	e9cd 4500 	strd	r4, r5, [sp]
 80015fc:	4642      	mov	r2, r8
 80015fe:	464b      	mov	r3, r9
 8001600:	4927      	ldr	r1, [pc, #156]	@ (80016a0 <main+0x29c>)
 8001602:	4817      	ldr	r0, [pc, #92]	@ (8001660 <main+0x25c>)
 8001604:	f007 ff6e 	bl	80094e4 <siprintf>
	  temp = 0;
 8001608:	2300      	movs	r3, #0
 800160a:	60fb      	str	r3, [r7, #12]
//	  sprintf(output, "Accelero X: %d, Y: %d, Z: %d \r\n", accelero[0], accelero[1], accelero[2]);
	  HAL_Delay(10);
<<<<<<< Updated upstream
 80015c4:	200a      	movs	r0, #10
 80015c6:	f001 f8a3 	bl	8002710 <HAL_Delay>
	  HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, SIZE_BUFFER,100);
 80015ca:	2364      	movs	r3, #100	@ 0x64
 80015cc:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80015d0:	4911      	ldr	r1, [pc, #68]	@ (8001618 <main+0x238>)
 80015d2:	480b      	ldr	r0, [pc, #44]	@ (8001600 <main+0x220>)
 80015d4:	f004 ffa8 	bl	8006528 <HAL_UART_Transmit>
	  HAL_Delay(25);
 80015d8:	2019      	movs	r0, #25
 80015da:	f001 f899 	bl	8002710 <HAL_Delay>
	  for(int i = 0; i < SIZE_BUFFER; i++) {
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	e007      	b.n	80015f4 <main+0x214>
	       txBuffer[i] = 0;
 80015e4:	4a0c      	ldr	r2, [pc, #48]	@ (8001618 <main+0x238>)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	4413      	add	r3, r2
 80015ea:	2200      	movs	r2, #0
 80015ec:	701a      	strb	r2, [r3, #0]
	  for(int i = 0; i < SIZE_BUFFER; i++) {
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	3301      	adds	r3, #1
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80015fa:	dbf3      	blt.n	80015e4 <main+0x204>
  {
 80015fc:	e76d      	b.n	80014da <main+0xfa>
 80015fe:	bf00      	nop
 8001600:	20000698 	.word	0x20000698
 8001604:	2000043c 	.word	0x2000043c
 8001608:	200004a0 	.word	0x200004a0
 800160c:	20000230 	.word	0x20000230
 8001610:	20000234 	.word	0x20000234
 8001614:	0800d340 	.word	0x0800d340
 8001618:	200004a4 	.word	0x200004a4
 800161c:	0800d35c 	.word	0x0800d35c
 8001620:	200005e4 	.word	0x200005e4
 8001624:	20000288 	.word	0x20000288
 8001628:	20000258 	.word	0x20000258
 800162c:	20000260 	.word	0x20000260
 8001630:	20000268 	.word	0x20000268
 8001634:	20000280 	.word	0x20000280
 8001638:	20000264 	.word	0x20000264
 800163c:	2000026c 	.word	0x2000026c
 8001640:	20000284 	.word	0x20000284
 8001644:	20000278 	.word	0x20000278
 8001648:	2000027c 	.word	0x2000027c
 800164c:	43340000 	.word	0x43340000
 8001650:	40490fdb 	.word	0x40490fdb
 8001654:	0800d370 	.word	0x0800d370

08001658 <SystemClock_Config>:
=======
 800160c:	200a      	movs	r0, #10
 800160e:	f001 f8a5 	bl	800275c <HAL_Delay>
	  HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, SIZE_BUFFER,100);
 8001612:	2364      	movs	r3, #100	@ 0x64
 8001614:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001618:	4911      	ldr	r1, [pc, #68]	@ (8001660 <main+0x25c>)
 800161a:	480b      	ldr	r0, [pc, #44]	@ (8001648 <main+0x244>)
 800161c:	f004 ffaa 	bl	8006574 <HAL_UART_Transmit>
	  HAL_Delay(25);
 8001620:	2019      	movs	r0, #25
 8001622:	f001 f89b 	bl	800275c <HAL_Delay>
	  for(int i = 0; i < SIZE_BUFFER; i++) {
 8001626:	2300      	movs	r3, #0
 8001628:	60bb      	str	r3, [r7, #8]
 800162a:	e007      	b.n	800163c <main+0x238>
	       txBuffer[i] = 0;
 800162c:	4a0c      	ldr	r2, [pc, #48]	@ (8001660 <main+0x25c>)
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	4413      	add	r3, r2
 8001632:	2200      	movs	r2, #0
 8001634:	701a      	strb	r2, [r3, #0]
	  for(int i = 0; i < SIZE_BUFFER; i++) {
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	3301      	adds	r3, #1
 800163a:	60bb      	str	r3, [r7, #8]
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001642:	dbf3      	blt.n	800162c <main+0x228>
  {
 8001644:	e75b      	b.n	80014fe <main+0xfa>
 8001646:	bf00      	nop
 8001648:	20000698 	.word	0x20000698
 800164c:	2000043c 	.word	0x2000043c
 8001650:	200004a0 	.word	0x200004a0
 8001654:	20000230 	.word	0x20000230
 8001658:	20000234 	.word	0x20000234
 800165c:	0800d388 	.word	0x0800d388
 8001660:	200004a4 	.word	0x200004a4
 8001664:	0800d3a4 	.word	0x0800d3a4
 8001668:	200005e4 	.word	0x200005e4
 800166c:	20000288 	.word	0x20000288
 8001670:	2000072c 	.word	0x2000072c
 8001674:	20000258 	.word	0x20000258
 8001678:	20000260 	.word	0x20000260
 800167c:	20000268 	.word	0x20000268
 8001680:	20000280 	.word	0x20000280
 8001684:	20000264 	.word	0x20000264
 8001688:	2000026c 	.word	0x2000026c
 800168c:	20000284 	.word	0x20000284
 8001690:	20000278 	.word	0x20000278
 8001694:	2000027c 	.word	0x2000027c
 8001698:	43340000 	.word	0x43340000
 800169c:	40490fdb 	.word	0x40490fdb
 80016a0:	0800d3b8 	.word	0x0800d3b8

080016a4 <SystemClock_Config>:
>>>>>>> Stashed changes
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< Updated upstream
 8001658:	b580      	push	{r7, lr}
 800165a:	b096      	sub	sp, #88	@ 0x58
 800165c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800165e:	f107 0314 	add.w	r3, r7, #20
 8001662:	2244      	movs	r2, #68	@ 0x44
 8001664:	2100      	movs	r1, #0
 8001666:	4618      	mov	r0, r3
 8001668:	f008 ff16 	bl	800a498 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800166c:	463b      	mov	r3, r7
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	605a      	str	r2, [r3, #4]
 8001674:	609a      	str	r2, [r3, #8]
 8001676:	60da      	str	r2, [r3, #12]
 8001678:	611a      	str	r2, [r3, #16]
=======
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b096      	sub	sp, #88	@ 0x58
 80016a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016aa:	f107 0314 	add.w	r3, r7, #20
 80016ae:	2244      	movs	r2, #68	@ 0x44
 80016b0:	2100      	movs	r1, #0
 80016b2:	4618      	mov	r0, r3
 80016b4:	f008 ff14 	bl	800a4e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016b8:	463b      	mov	r3, r7
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	609a      	str	r2, [r3, #8]
 80016c2:	60da      	str	r2, [r3, #12]
 80016c4:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
<<<<<<< Updated upstream
 800167a:	2000      	movs	r0, #0
 800167c:	f002 fd9a 	bl	80041b4 <HAL_PWREx_ControlVoltageScaling>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8001686:	f000 fa41 	bl	8001b0c <Error_Handler>
=======
 80016c6:	2000      	movs	r0, #0
 80016c8:	f002 fd9a 	bl	8004200 <HAL_PWREx_ControlVoltageScaling>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80016d2:	f000 fa41 	bl	8001b58 <Error_Handler>
>>>>>>> Stashed changes
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
<<<<<<< Updated upstream
 800168a:	2310      	movs	r3, #16
 800168c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800168e:	2301      	movs	r3, #1
 8001690:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001692:	2300      	movs	r3, #0
 8001694:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001696:	2360      	movs	r3, #96	@ 0x60
 8001698:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800169a:	2302      	movs	r3, #2
 800169c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800169e:	2301      	movs	r3, #1
 80016a0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80016a2:	2301      	movs	r3, #1
 80016a4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80016a6:	233c      	movs	r3, #60	@ 0x3c
 80016a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016aa:	2302      	movs	r3, #2
 80016ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016ae:	2302      	movs	r3, #2
 80016b0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016b2:	2302      	movs	r3, #2
 80016b4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016b6:	f107 0314 	add.w	r3, r7, #20
 80016ba:	4618      	mov	r0, r3
 80016bc:	f002 fe1e 	bl	80042fc <HAL_RCC_OscConfig>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <SystemClock_Config+0x72>
  {
    Error_Handler();
 80016c6:	f000 fa21 	bl	8001b0c <Error_Handler>
=======
 80016d6:	2310      	movs	r3, #16
 80016d8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80016da:	2301      	movs	r3, #1
 80016dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80016de:	2300      	movs	r3, #0
 80016e0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80016e2:	2360      	movs	r3, #96	@ 0x60
 80016e4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016e6:	2302      	movs	r3, #2
 80016e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80016ea:	2301      	movs	r3, #1
 80016ec:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80016ee:	2301      	movs	r3, #1
 80016f0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80016f2:	233c      	movs	r3, #60	@ 0x3c
 80016f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016f6:	2302      	movs	r3, #2
 80016f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016fa:	2302      	movs	r3, #2
 80016fc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016fe:	2302      	movs	r3, #2
 8001700:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001702:	f107 0314 	add.w	r3, r7, #20
 8001706:	4618      	mov	r0, r3
 8001708:	f002 fe1e 	bl	8004348 <HAL_RCC_OscConfig>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001712:	f000 fa21 	bl	8001b58 <Error_Handler>
>>>>>>> Stashed changes
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< Updated upstream
 80016ca:	230f      	movs	r3, #15
 80016cc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ce:	2303      	movs	r3, #3
 80016d0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016d2:	2300      	movs	r3, #0
 80016d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016d6:	2300      	movs	r3, #0
 80016d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016da:	2300      	movs	r3, #0
 80016dc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80016de:	463b      	mov	r3, r7
 80016e0:	2105      	movs	r1, #5
 80016e2:	4618      	mov	r0, r3
 80016e4:	f003 fa24 	bl	8004b30 <HAL_RCC_ClockConfig>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80016ee:	f000 fa0d 	bl	8001b0c <Error_Handler>
  }
}
 80016f2:	bf00      	nop
 80016f4:	3758      	adds	r7, #88	@ 0x58
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
	...

080016fc <MX_DAC1_Init>:
=======
 8001716:	230f      	movs	r3, #15
 8001718:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800171a:	2303      	movs	r3, #3
 800171c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800171e:	2300      	movs	r3, #0
 8001720:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001722:	2300      	movs	r3, #0
 8001724:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001726:	2300      	movs	r3, #0
 8001728:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800172a:	463b      	mov	r3, r7
 800172c:	2105      	movs	r1, #5
 800172e:	4618      	mov	r0, r3
 8001730:	f003 fa24 	bl	8004b7c <HAL_RCC_ClockConfig>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800173a:	f000 fa0d 	bl	8001b58 <Error_Handler>
  }
}
 800173e:	bf00      	nop
 8001740:	3758      	adds	r7, #88	@ 0x58
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <MX_DAC1_Init>:
>>>>>>> Stashed changes
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
<<<<<<< Updated upstream
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08a      	sub	sp, #40	@ 0x28
 8001700:	af00      	add	r7, sp, #0
=======
 8001748:	b580      	push	{r7, lr}
 800174a:	b08a      	sub	sp, #40	@ 0x28
 800174c:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
<<<<<<< Updated upstream
 8001702:	463b      	mov	r3, r7
 8001704:	2228      	movs	r2, #40	@ 0x28
 8001706:	2100      	movs	r1, #0
 8001708:	4618      	mov	r0, r3
 800170a:	f008 fec5 	bl	800a498 <memset>
=======
 800174e:	463b      	mov	r3, r7
 8001750:	2228      	movs	r2, #40	@ 0x28
 8001752:	2100      	movs	r1, #0
 8001754:	4618      	mov	r0, r3
 8001756:	f008 fec3 	bl	800a4e0 <memset>
>>>>>>> Stashed changes

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
<<<<<<< Updated upstream
 800170e:	4b13      	ldr	r3, [pc, #76]	@ (800175c <MX_DAC1_Init+0x60>)
 8001710:	4a13      	ldr	r2, [pc, #76]	@ (8001760 <MX_DAC1_Init+0x64>)
 8001712:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001714:	4811      	ldr	r0, [pc, #68]	@ (800175c <MX_DAC1_Init+0x60>)
 8001716:	f001 f930 	bl	800297a <HAL_DAC_Init>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001720:	f000 f9f4 	bl	8001b0c <Error_Handler>
=======
 800175a:	4b13      	ldr	r3, [pc, #76]	@ (80017a8 <MX_DAC1_Init+0x60>)
 800175c:	4a13      	ldr	r2, [pc, #76]	@ (80017ac <MX_DAC1_Init+0x64>)
 800175e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001760:	4811      	ldr	r0, [pc, #68]	@ (80017a8 <MX_DAC1_Init+0x60>)
 8001762:	f001 f930 	bl	80029c6 <HAL_DAC_Init>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800176c:	f000 f9f4 	bl	8001b58 <Error_Handler>
>>>>>>> Stashed changes
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
<<<<<<< Updated upstream
 8001724:	2300      	movs	r3, #0
 8001726:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001728:	2300      	movs	r3, #0
 800172a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800172c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001730:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001732:	2300      	movs	r3, #0
 8001734:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001736:	2300      	movs	r3, #0
 8001738:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800173a:	2300      	movs	r3, #0
 800173c:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800173e:	463b      	mov	r3, r7
 8001740:	2200      	movs	r2, #0
 8001742:	4619      	mov	r1, r3
 8001744:	4805      	ldr	r0, [pc, #20]	@ (800175c <MX_DAC1_Init+0x60>)
 8001746:	f001 fa15 	bl	8002b74 <HAL_DAC_ConfigChannel>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8001750:	f000 f9dc 	bl	8001b0c <Error_Handler>
=======
 8001770:	2300      	movs	r3, #0
 8001772:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001774:	2300      	movs	r3, #0
 8001776:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8001778:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800177c:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800177e:	2300      	movs	r3, #0
 8001780:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001786:	2300      	movs	r3, #0
 8001788:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800178a:	463b      	mov	r3, r7
 800178c:	2200      	movs	r2, #0
 800178e:	4619      	mov	r1, r3
 8001790:	4805      	ldr	r0, [pc, #20]	@ (80017a8 <MX_DAC1_Init+0x60>)
 8001792:	f001 fa15 	bl	8002bc0 <HAL_DAC_ConfigChannel>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 800179c:	f000 f9dc 	bl	8001b58 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
<<<<<<< Updated upstream
 8001754:	bf00      	nop
 8001756:	3728      	adds	r7, #40	@ 0x28
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	200005e4 	.word	0x200005e4
 8001760:	40007400 	.word	0x40007400

08001764 <MX_I2C2_Init>:
=======
 80017a0:	bf00      	nop
 80017a2:	3728      	adds	r7, #40	@ 0x28
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	200005e4 	.word	0x200005e4
 80017ac:	40007400 	.word	0x40007400

080017b0 <MX_I2C2_Init>:
>>>>>>> Stashed changes
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
<<<<<<< Updated upstream
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
=======
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
<<<<<<< Updated upstream
 8001768:	4b1b      	ldr	r3, [pc, #108]	@ (80017d8 <MX_I2C2_Init+0x74>)
 800176a:	4a1c      	ldr	r2, [pc, #112]	@ (80017dc <MX_I2C2_Init+0x78>)
 800176c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 800176e:	4b1a      	ldr	r3, [pc, #104]	@ (80017d8 <MX_I2C2_Init+0x74>)
 8001770:	4a1b      	ldr	r2, [pc, #108]	@ (80017e0 <MX_I2C2_Init+0x7c>)
 8001772:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001774:	4b18      	ldr	r3, [pc, #96]	@ (80017d8 <MX_I2C2_Init+0x74>)
 8001776:	2200      	movs	r2, #0
 8001778:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800177a:	4b17      	ldr	r3, [pc, #92]	@ (80017d8 <MX_I2C2_Init+0x74>)
 800177c:	2201      	movs	r2, #1
 800177e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001780:	4b15      	ldr	r3, [pc, #84]	@ (80017d8 <MX_I2C2_Init+0x74>)
 8001782:	2200      	movs	r2, #0
 8001784:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001786:	4b14      	ldr	r3, [pc, #80]	@ (80017d8 <MX_I2C2_Init+0x74>)
 8001788:	2200      	movs	r2, #0
 800178a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800178c:	4b12      	ldr	r3, [pc, #72]	@ (80017d8 <MX_I2C2_Init+0x74>)
 800178e:	2200      	movs	r2, #0
 8001790:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001792:	4b11      	ldr	r3, [pc, #68]	@ (80017d8 <MX_I2C2_Init+0x74>)
 8001794:	2200      	movs	r2, #0
 8001796:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001798:	4b0f      	ldr	r3, [pc, #60]	@ (80017d8 <MX_I2C2_Init+0x74>)
 800179a:	2200      	movs	r2, #0
 800179c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800179e:	480e      	ldr	r0, [pc, #56]	@ (80017d8 <MX_I2C2_Init+0x74>)
 80017a0:	f001 fe96 	bl	80034d0 <HAL_I2C_Init>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80017aa:	f000 f9af 	bl	8001b0c <Error_Handler>
=======
 80017b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001824 <MX_I2C2_Init+0x74>)
 80017b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001828 <MX_I2C2_Init+0x78>)
 80017b8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 80017ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001824 <MX_I2C2_Init+0x74>)
 80017bc:	4a1b      	ldr	r2, [pc, #108]	@ (800182c <MX_I2C2_Init+0x7c>)
 80017be:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80017c0:	4b18      	ldr	r3, [pc, #96]	@ (8001824 <MX_I2C2_Init+0x74>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017c6:	4b17      	ldr	r3, [pc, #92]	@ (8001824 <MX_I2C2_Init+0x74>)
 80017c8:	2201      	movs	r2, #1
 80017ca:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017cc:	4b15      	ldr	r3, [pc, #84]	@ (8001824 <MX_I2C2_Init+0x74>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80017d2:	4b14      	ldr	r3, [pc, #80]	@ (8001824 <MX_I2C2_Init+0x74>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017d8:	4b12      	ldr	r3, [pc, #72]	@ (8001824 <MX_I2C2_Init+0x74>)
 80017da:	2200      	movs	r2, #0
 80017dc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017de:	4b11      	ldr	r3, [pc, #68]	@ (8001824 <MX_I2C2_Init+0x74>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001824 <MX_I2C2_Init+0x74>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80017ea:	480e      	ldr	r0, [pc, #56]	@ (8001824 <MX_I2C2_Init+0x74>)
 80017ec:	f001 fe96 	bl	800351c <HAL_I2C_Init>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80017f6:	f000 f9af 	bl	8001b58 <Error_Handler>
>>>>>>> Stashed changes
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
<<<<<<< Updated upstream
 80017ae:	2100      	movs	r1, #0
 80017b0:	4809      	ldr	r0, [pc, #36]	@ (80017d8 <MX_I2C2_Init+0x74>)
 80017b2:	f002 fc47 	bl	8004044 <HAL_I2CEx_ConfigAnalogFilter>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80017bc:	f000 f9a6 	bl	8001b0c <Error_Handler>
=======
 80017fa:	2100      	movs	r1, #0
 80017fc:	4809      	ldr	r0, [pc, #36]	@ (8001824 <MX_I2C2_Init+0x74>)
 80017fe:	f002 fc47 	bl	8004090 <HAL_I2CEx_ConfigAnalogFilter>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001808:	f000 f9a6 	bl	8001b58 <Error_Handler>
>>>>>>> Stashed changes
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
<<<<<<< Updated upstream
 80017c0:	2100      	movs	r1, #0
 80017c2:	4805      	ldr	r0, [pc, #20]	@ (80017d8 <MX_I2C2_Init+0x74>)
 80017c4:	f002 fc89 	bl	80040da <HAL_I2CEx_ConfigDigitalFilter>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80017ce:	f000 f99d 	bl	8001b0c <Error_Handler>
=======
 800180c:	2100      	movs	r1, #0
 800180e:	4805      	ldr	r0, [pc, #20]	@ (8001824 <MX_I2C2_Init+0x74>)
 8001810:	f002 fc89 	bl	8004126 <HAL_I2CEx_ConfigDigitalFilter>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800181a:	f000 f99d 	bl	8001b58 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
<<<<<<< Updated upstream
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	200005f8 	.word	0x200005f8
 80017dc:	40005800 	.word	0x40005800
 80017e0:	307075b1 	.word	0x307075b1

080017e4 <MX_TIM2_Init>:
=======
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	200005f8 	.word	0x200005f8
 8001828:	40005800 	.word	0x40005800
 800182c:	307075b1 	.word	0x307075b1

08001830 <MX_TIM2_Init>:
>>>>>>> Stashed changes
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
<<<<<<< Updated upstream
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b088      	sub	sp, #32
 80017e8:	af00      	add	r7, sp, #0
=======
 8001830:	b580      	push	{r7, lr}
 8001832:	b088      	sub	sp, #32
 8001834:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
<<<<<<< Updated upstream
 80017ea:	f107 0310 	add.w	r3, r7, #16
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	605a      	str	r2, [r3, #4]
 80017f4:	609a      	str	r2, [r3, #8]
 80017f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f8:	1d3b      	adds	r3, r7, #4
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	605a      	str	r2, [r3, #4]
 8001800:	609a      	str	r2, [r3, #8]
=======
 8001836:	f107 0310 	add.w	r3, r7, #16
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	609a      	str	r2, [r3, #8]
 8001842:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001844:	1d3b      	adds	r3, r7, #4
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	605a      	str	r2, [r3, #4]
 800184c:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
<<<<<<< Updated upstream
 8001802:	4b1e      	ldr	r3, [pc, #120]	@ (800187c <MX_TIM2_Init+0x98>)
 8001804:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001808:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800180a:	4b1c      	ldr	r3, [pc, #112]	@ (800187c <MX_TIM2_Init+0x98>)
 800180c:	2200      	movs	r2, #0
 800180e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001810:	4b1a      	ldr	r3, [pc, #104]	@ (800187c <MX_TIM2_Init+0x98>)
 8001812:	2200      	movs	r2, #0
 8001814:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2721;
 8001816:	4b19      	ldr	r3, [pc, #100]	@ (800187c <MX_TIM2_Init+0x98>)
 8001818:	f640 22a1 	movw	r2, #2721	@ 0xaa1
 800181c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800181e:	4b17      	ldr	r3, [pc, #92]	@ (800187c <MX_TIM2_Init+0x98>)
 8001820:	2200      	movs	r2, #0
 8001822:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001824:	4b15      	ldr	r3, [pc, #84]	@ (800187c <MX_TIM2_Init+0x98>)
 8001826:	2200      	movs	r2, #0
 8001828:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800182a:	4814      	ldr	r0, [pc, #80]	@ (800187c <MX_TIM2_Init+0x98>)
 800182c:	f004 f956 	bl	8005adc <HAL_TIM_Base_Init>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001836:	f000 f969 	bl	8001b0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800183a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800183e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001840:	f107 0310 	add.w	r3, r7, #16
 8001844:	4619      	mov	r1, r3
 8001846:	480d      	ldr	r0, [pc, #52]	@ (800187c <MX_TIM2_Init+0x98>)
 8001848:	f004 fb46 	bl	8005ed8 <HAL_TIM_ConfigClockSource>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001852:	f000 f95b 	bl	8001b0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001856:	2300      	movs	r3, #0
 8001858:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800185e:	1d3b      	adds	r3, r7, #4
 8001860:	4619      	mov	r1, r3
 8001862:	4806      	ldr	r0, [pc, #24]	@ (800187c <MX_TIM2_Init+0x98>)
 8001864:	f004 fd6a 	bl	800633c <HAL_TIMEx_MasterConfigSynchronization>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800186e:	f000 f94d 	bl	8001b0c <Error_Handler>
=======
 800184e:	4b1e      	ldr	r3, [pc, #120]	@ (80018c8 <MX_TIM2_Init+0x98>)
 8001850:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001854:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001856:	4b1c      	ldr	r3, [pc, #112]	@ (80018c8 <MX_TIM2_Init+0x98>)
 8001858:	2200      	movs	r2, #0
 800185a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800185c:	4b1a      	ldr	r3, [pc, #104]	@ (80018c8 <MX_TIM2_Init+0x98>)
 800185e:	2200      	movs	r2, #0
 8001860:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2721;
 8001862:	4b19      	ldr	r3, [pc, #100]	@ (80018c8 <MX_TIM2_Init+0x98>)
 8001864:	f640 22a1 	movw	r2, #2721	@ 0xaa1
 8001868:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800186a:	4b17      	ldr	r3, [pc, #92]	@ (80018c8 <MX_TIM2_Init+0x98>)
 800186c:	2200      	movs	r2, #0
 800186e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001870:	4b15      	ldr	r3, [pc, #84]	@ (80018c8 <MX_TIM2_Init+0x98>)
 8001872:	2200      	movs	r2, #0
 8001874:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001876:	4814      	ldr	r0, [pc, #80]	@ (80018c8 <MX_TIM2_Init+0x98>)
 8001878:	f004 f956 	bl	8005b28 <HAL_TIM_Base_Init>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001882:	f000 f969 	bl	8001b58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001886:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800188a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800188c:	f107 0310 	add.w	r3, r7, #16
 8001890:	4619      	mov	r1, r3
 8001892:	480d      	ldr	r0, [pc, #52]	@ (80018c8 <MX_TIM2_Init+0x98>)
 8001894:	f004 fb46 	bl	8005f24 <HAL_TIM_ConfigClockSource>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800189e:	f000 f95b 	bl	8001b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018a2:	2300      	movs	r3, #0
 80018a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	4619      	mov	r1, r3
 80018ae:	4806      	ldr	r0, [pc, #24]	@ (80018c8 <MX_TIM2_Init+0x98>)
 80018b0:	f004 fd6a 	bl	8006388 <HAL_TIMEx_MasterConfigSynchronization>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80018ba:	f000 f94d 	bl	8001b58 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
<<<<<<< Updated upstream
 8001872:	bf00      	nop
 8001874:	3720      	adds	r7, #32
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	2000064c 	.word	0x2000064c

08001880 <MX_USART1_UART_Init>:
=======
 80018be:	bf00      	nop
 80018c0:	3720      	adds	r7, #32
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	2000064c 	.word	0x2000064c

080018cc <MX_USART1_UART_Init>:
>>>>>>> Stashed changes
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
<<<<<<< Updated upstream
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
=======
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
<<<<<<< Updated upstream
 8001884:	4b22      	ldr	r3, [pc, #136]	@ (8001910 <MX_USART1_UART_Init+0x90>)
 8001886:	4a23      	ldr	r2, [pc, #140]	@ (8001914 <MX_USART1_UART_Init+0x94>)
 8001888:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800188a:	4b21      	ldr	r3, [pc, #132]	@ (8001910 <MX_USART1_UART_Init+0x90>)
 800188c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001890:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001892:	4b1f      	ldr	r3, [pc, #124]	@ (8001910 <MX_USART1_UART_Init+0x90>)
 8001894:	2200      	movs	r2, #0
 8001896:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001898:	4b1d      	ldr	r3, [pc, #116]	@ (8001910 <MX_USART1_UART_Init+0x90>)
 800189a:	2200      	movs	r2, #0
 800189c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800189e:	4b1c      	ldr	r3, [pc, #112]	@ (8001910 <MX_USART1_UART_Init+0x90>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001910 <MX_USART1_UART_Init+0x90>)
 80018a6:	220c      	movs	r2, #12
 80018a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018aa:	4b19      	ldr	r3, [pc, #100]	@ (8001910 <MX_USART1_UART_Init+0x90>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018b0:	4b17      	ldr	r3, [pc, #92]	@ (8001910 <MX_USART1_UART_Init+0x90>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018b6:	4b16      	ldr	r3, [pc, #88]	@ (8001910 <MX_USART1_UART_Init+0x90>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018bc:	4b14      	ldr	r3, [pc, #80]	@ (8001910 <MX_USART1_UART_Init+0x90>)
 80018be:	2200      	movs	r2, #0
 80018c0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018c2:	4b13      	ldr	r3, [pc, #76]	@ (8001910 <MX_USART1_UART_Init+0x90>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018c8:	4811      	ldr	r0, [pc, #68]	@ (8001910 <MX_USART1_UART_Init+0x90>)
 80018ca:	f004 fddd 	bl	8006488 <HAL_UART_Init>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80018d4:	f000 f91a 	bl	8001b0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018d8:	2100      	movs	r1, #0
 80018da:	480d      	ldr	r0, [pc, #52]	@ (8001910 <MX_USART1_UART_Init+0x90>)
 80018dc:	f006 fe5f 	bl	800859e <HAL_UARTEx_SetTxFifoThreshold>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80018e6:	f000 f911 	bl	8001b0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018ea:	2100      	movs	r1, #0
 80018ec:	4808      	ldr	r0, [pc, #32]	@ (8001910 <MX_USART1_UART_Init+0x90>)
 80018ee:	f006 fe94 	bl	800861a <HAL_UARTEx_SetRxFifoThreshold>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80018f8:	f000 f908 	bl	8001b0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80018fc:	4804      	ldr	r0, [pc, #16]	@ (8001910 <MX_USART1_UART_Init+0x90>)
 80018fe:	f006 fe15 	bl	800852c <HAL_UARTEx_DisableFifoMode>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001908:	f000 f900 	bl	8001b0c <Error_Handler>
=======
 80018d0:	4b22      	ldr	r3, [pc, #136]	@ (800195c <MX_USART1_UART_Init+0x90>)
 80018d2:	4a23      	ldr	r2, [pc, #140]	@ (8001960 <MX_USART1_UART_Init+0x94>)
 80018d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018d6:	4b21      	ldr	r3, [pc, #132]	@ (800195c <MX_USART1_UART_Init+0x90>)
 80018d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018de:	4b1f      	ldr	r3, [pc, #124]	@ (800195c <MX_USART1_UART_Init+0x90>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018e4:	4b1d      	ldr	r3, [pc, #116]	@ (800195c <MX_USART1_UART_Init+0x90>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018ea:	4b1c      	ldr	r3, [pc, #112]	@ (800195c <MX_USART1_UART_Init+0x90>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018f0:	4b1a      	ldr	r3, [pc, #104]	@ (800195c <MX_USART1_UART_Init+0x90>)
 80018f2:	220c      	movs	r2, #12
 80018f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018f6:	4b19      	ldr	r3, [pc, #100]	@ (800195c <MX_USART1_UART_Init+0x90>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018fc:	4b17      	ldr	r3, [pc, #92]	@ (800195c <MX_USART1_UART_Init+0x90>)
 80018fe:	2200      	movs	r2, #0
 8001900:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001902:	4b16      	ldr	r3, [pc, #88]	@ (800195c <MX_USART1_UART_Init+0x90>)
 8001904:	2200      	movs	r2, #0
 8001906:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001908:	4b14      	ldr	r3, [pc, #80]	@ (800195c <MX_USART1_UART_Init+0x90>)
 800190a:	2200      	movs	r2, #0
 800190c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800190e:	4b13      	ldr	r3, [pc, #76]	@ (800195c <MX_USART1_UART_Init+0x90>)
 8001910:	2200      	movs	r2, #0
 8001912:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001914:	4811      	ldr	r0, [pc, #68]	@ (800195c <MX_USART1_UART_Init+0x90>)
 8001916:	f004 fddd 	bl	80064d4 <HAL_UART_Init>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001920:	f000 f91a 	bl	8001b58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001924:	2100      	movs	r1, #0
 8001926:	480d      	ldr	r0, [pc, #52]	@ (800195c <MX_USART1_UART_Init+0x90>)
 8001928:	f006 fe5f 	bl	80085ea <HAL_UARTEx_SetTxFifoThreshold>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001932:	f000 f911 	bl	8001b58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001936:	2100      	movs	r1, #0
 8001938:	4808      	ldr	r0, [pc, #32]	@ (800195c <MX_USART1_UART_Init+0x90>)
 800193a:	f006 fe94 	bl	8008666 <HAL_UARTEx_SetRxFifoThreshold>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001944:	f000 f908 	bl	8001b58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001948:	4804      	ldr	r0, [pc, #16]	@ (800195c <MX_USART1_UART_Init+0x90>)
 800194a:	f006 fe15 	bl	8008578 <HAL_UARTEx_DisableFifoMode>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001954:	f000 f900 	bl	8001b58 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
<<<<<<< Updated upstream
 800190c:	bf00      	nop
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20000698 	.word	0x20000698
 8001914:	40013800 	.word	0x40013800

08001918 <MX_GPIO_Init>:
=======
 8001958:	bf00      	nop
 800195a:	bd80      	pop	{r7, pc}
 800195c:	20000698 	.word	0x20000698
 8001960:	40013800 	.word	0x40013800

08001964 <MX_GPIO_Init>:
>>>>>>> Stashed changes
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
<<<<<<< Updated upstream
 8001918:	b580      	push	{r7, lr}
 800191a:	b088      	sub	sp, #32
 800191c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191e:	f107 030c 	add.w	r3, r7, #12
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	605a      	str	r2, [r3, #4]
 8001928:	609a      	str	r2, [r3, #8]
 800192a:	60da      	str	r2, [r3, #12]
 800192c:	611a      	str	r2, [r3, #16]
=======
 8001964:	b580      	push	{r7, lr}
 8001966:	b088      	sub	sp, #32
 8001968:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196a:	f107 030c 	add.w	r3, r7, #12
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	605a      	str	r2, [r3, #4]
 8001974:	609a      	str	r2, [r3, #8]
 8001976:	60da      	str	r2, [r3, #12]
 8001978:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
<<<<<<< Updated upstream
 800192e:	4b1f      	ldr	r3, [pc, #124]	@ (80019ac <MX_GPIO_Init+0x94>)
 8001930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001932:	4a1e      	ldr	r2, [pc, #120]	@ (80019ac <MX_GPIO_Init+0x94>)
 8001934:	f043 0304 	orr.w	r3, r3, #4
 8001938:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800193a:	4b1c      	ldr	r3, [pc, #112]	@ (80019ac <MX_GPIO_Init+0x94>)
 800193c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800193e:	f003 0304 	and.w	r3, r3, #4
 8001942:	60bb      	str	r3, [r7, #8]
 8001944:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001946:	4b19      	ldr	r3, [pc, #100]	@ (80019ac <MX_GPIO_Init+0x94>)
 8001948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800194a:	4a18      	ldr	r2, [pc, #96]	@ (80019ac <MX_GPIO_Init+0x94>)
 800194c:	f043 0301 	orr.w	r3, r3, #1
 8001950:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001952:	4b16      	ldr	r3, [pc, #88]	@ (80019ac <MX_GPIO_Init+0x94>)
 8001954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	607b      	str	r3, [r7, #4]
 800195c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800195e:	4b13      	ldr	r3, [pc, #76]	@ (80019ac <MX_GPIO_Init+0x94>)
 8001960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001962:	4a12      	ldr	r2, [pc, #72]	@ (80019ac <MX_GPIO_Init+0x94>)
 8001964:	f043 0302 	orr.w	r3, r3, #2
 8001968:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800196a:	4b10      	ldr	r3, [pc, #64]	@ (80019ac <MX_GPIO_Init+0x94>)
 800196c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	603b      	str	r3, [r7, #0]
 8001974:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : myButton_Pin */
  GPIO_InitStruct.Pin = myButton_Pin;
 8001976:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800197a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800197c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001980:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(myButton_GPIO_Port, &GPIO_InitStruct);
 8001986:	f107 030c 	add.w	r3, r7, #12
 800198a:	4619      	mov	r1, r3
 800198c:	4808      	ldr	r0, [pc, #32]	@ (80019b0 <MX_GPIO_Init+0x98>)
 800198e:	f001 fb03 	bl	8002f98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001992:	2200      	movs	r2, #0
 8001994:	2100      	movs	r1, #0
 8001996:	2028      	movs	r0, #40	@ 0x28
 8001998:	f000 ffb9 	bl	800290e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800199c:	2028      	movs	r0, #40	@ 0x28
 800199e:	f000 ffd2 	bl	8002946 <HAL_NVIC_EnableIRQ>
=======
 800197a:	4b1f      	ldr	r3, [pc, #124]	@ (80019f8 <MX_GPIO_Init+0x94>)
 800197c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800197e:	4a1e      	ldr	r2, [pc, #120]	@ (80019f8 <MX_GPIO_Init+0x94>)
 8001980:	f043 0304 	orr.w	r3, r3, #4
 8001984:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001986:	4b1c      	ldr	r3, [pc, #112]	@ (80019f8 <MX_GPIO_Init+0x94>)
 8001988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800198a:	f003 0304 	and.w	r3, r3, #4
 800198e:	60bb      	str	r3, [r7, #8]
 8001990:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001992:	4b19      	ldr	r3, [pc, #100]	@ (80019f8 <MX_GPIO_Init+0x94>)
 8001994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001996:	4a18      	ldr	r2, [pc, #96]	@ (80019f8 <MX_GPIO_Init+0x94>)
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800199e:	4b16      	ldr	r3, [pc, #88]	@ (80019f8 <MX_GPIO_Init+0x94>)
 80019a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	607b      	str	r3, [r7, #4]
 80019a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019aa:	4b13      	ldr	r3, [pc, #76]	@ (80019f8 <MX_GPIO_Init+0x94>)
 80019ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ae:	4a12      	ldr	r2, [pc, #72]	@ (80019f8 <MX_GPIO_Init+0x94>)
 80019b0:	f043 0302 	orr.w	r3, r3, #2
 80019b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019b6:	4b10      	ldr	r3, [pc, #64]	@ (80019f8 <MX_GPIO_Init+0x94>)
 80019b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	603b      	str	r3, [r7, #0]
 80019c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : myButton_Pin */
  GPIO_InitStruct.Pin = myButton_Pin;
 80019c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019c8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80019cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(myButton_GPIO_Port, &GPIO_InitStruct);
 80019d2:	f107 030c 	add.w	r3, r7, #12
 80019d6:	4619      	mov	r1, r3
 80019d8:	4808      	ldr	r0, [pc, #32]	@ (80019fc <MX_GPIO_Init+0x98>)
 80019da:	f001 fb03 	bl	8002fe4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80019de:	2200      	movs	r2, #0
 80019e0:	2100      	movs	r1, #0
 80019e2:	2028      	movs	r0, #40	@ 0x28
 80019e4:	f000 ffb9 	bl	800295a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80019e8:	2028      	movs	r0, #40	@ 0x28
 80019ea:	f000 ffd2 	bl	8002992 <HAL_NVIC_EnableIRQ>
>>>>>>> Stashed changes

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
<<<<<<< Updated upstream
 80019a2:	bf00      	nop
 80019a4:	3720      	adds	r7, #32
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40021000 	.word	0x40021000
 80019b0:	48000800 	.word	0x48000800

080019b4 <HAL_TIM_PeriodElapsedCallback>:
=======
 80019ee:	bf00      	nop
 80019f0:	3720      	adds	r7, #32
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40021000 	.word	0x40021000
 80019fc:	48000800 	.word	0x48000800

08001a00 <HAL_TIM_PeriodElapsedCallback>:
>>>>>>> Stashed changes

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019c4:	d15e      	bne.n	8001a84 <HAL_TIM_PeriodElapsedCallback+0xd0>
		HAL_IncTick();
 80019c6:	f000 fe83 	bl	80026d0 <HAL_IncTick>
		if(periods<80){
 80019ca:	4b30      	ldr	r3, [pc, #192]	@ (8001a8c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2b4f      	cmp	r3, #79	@ 0x4f
 80019d0:	dc26      	bgt.n	8001a20 <HAL_TIM_PeriodElapsedCallback+0x6c>
			STATUS = HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, current_tone[tone_index++]);
 80019d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001a90 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	4b2f      	ldr	r3, [pc, #188]	@ (8001a94 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	1c59      	adds	r1, r3, #1
 80019dc:	482d      	ldr	r0, [pc, #180]	@ (8001a94 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80019de:	6001      	str	r1, [r0, #0]
 80019e0:	4413      	add	r3, r2
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2200      	movs	r2, #0
 80019e6:	2100      	movs	r1, #0
 80019e8:	482b      	ldr	r0, [pc, #172]	@ (8001a98 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80019ea:	f001 f894 	bl	8002b16 <HAL_DAC_SetValue>
 80019ee:	4603      	mov	r3, r0
 80019f0:	461a      	mov	r2, r3
 80019f2:	4b2a      	ldr	r3, [pc, #168]	@ (8001a9c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80019f4:	701a      	strb	r2, [r3, #0]
			if(STATUS != HAL_OK){
 80019f6:	4b29      	ldr	r3, [pc, #164]	@ (8001a9c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <HAL_TIM_PeriodElapsedCallback+0x4e>
				Error_Handler();
 80019fe:	f000 f885 	bl	8001b0c <Error_Handler>
			}
			if(tone_index==current_num_sample){
 8001a02:	4b24      	ldr	r3, [pc, #144]	@ (8001a94 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	4b26      	ldr	r3, [pc, #152]	@ (8001aa0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d13a      	bne.n	8001a84 <HAL_TIM_PeriodElapsedCallback+0xd0>
				tone_index=0;
 8001a0e:	4b21      	ldr	r3, [pc, #132]	@ (8001a94 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
				periods++;
 8001a14:	4b1d      	ldr	r3, [pc, #116]	@ (8001a8c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	4a1c      	ldr	r2, [pc, #112]	@ (8001a8c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	e031      	b.n	8001a84 <HAL_TIM_PeriodElapsedCallback+0xd0>
=======
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a10:	d15e      	bne.n	8001ad0 <HAL_TIM_PeriodElapsedCallback+0xd0>
		HAL_IncTick();
 8001a12:	f000 fe83 	bl	800271c <HAL_IncTick>
		if(periods<80){
 8001a16:	4b30      	ldr	r3, [pc, #192]	@ (8001ad8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2b4f      	cmp	r3, #79	@ 0x4f
 8001a1c:	dc26      	bgt.n	8001a6c <HAL_TIM_PeriodElapsedCallback+0x6c>
			STATUS = HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, current_tone[tone_index++]);
 8001a1e:	4b2f      	ldr	r3, [pc, #188]	@ (8001adc <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	4b2f      	ldr	r3, [pc, #188]	@ (8001ae0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	1c59      	adds	r1, r3, #1
 8001a28:	482d      	ldr	r0, [pc, #180]	@ (8001ae0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001a2a:	6001      	str	r1, [r0, #0]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2200      	movs	r2, #0
 8001a32:	2100      	movs	r1, #0
 8001a34:	482b      	ldr	r0, [pc, #172]	@ (8001ae4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001a36:	f001 f894 	bl	8002b62 <HAL_DAC_SetValue>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ae8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001a40:	701a      	strb	r2, [r3, #0]
			if(STATUS != HAL_OK){
 8001a42:	4b29      	ldr	r3, [pc, #164]	@ (8001ae8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <HAL_TIM_PeriodElapsedCallback+0x4e>
				Error_Handler();
 8001a4a:	f000 f885 	bl	8001b58 <Error_Handler>
			}
			if(tone_index==current_num_sample){
 8001a4e:	4b24      	ldr	r3, [pc, #144]	@ (8001ae0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	4b26      	ldr	r3, [pc, #152]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d13a      	bne.n	8001ad0 <HAL_TIM_PeriodElapsedCallback+0xd0>
				tone_index=0;
 8001a5a:	4b21      	ldr	r3, [pc, #132]	@ (8001ae0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
				periods++;
 8001a60:	4b1d      	ldr	r3, [pc, #116]	@ (8001ad8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	3301      	adds	r3, #1
 8001a66:	4a1c      	ldr	r2, [pc, #112]	@ (8001ad8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001a68:	6013      	str	r3, [r2, #0]
 8001a6a:	e031      	b.n	8001ad0 <HAL_TIM_PeriodElapsedCallback+0xd0>
>>>>>>> Stashed changes
			}
		}
		else {
			tone++;
<<<<<<< Updated upstream
 8001a20:	4b20      	ldr	r3, [pc, #128]	@ (8001aa4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	3301      	adds	r3, #1
 8001a26:	4a1f      	ldr	r2, [pc, #124]	@ (8001aa4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001a28:	6013      	str	r3, [r2, #0]
			tone_index=0;
 8001a2a:	4b1a      	ldr	r3, [pc, #104]	@ (8001a94 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
			periods = 0;
 8001a30:	4b16      	ldr	r3, [pc, #88]	@ (8001a8c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]

			switch(tone){
 8001a36:	4b1b      	ldr	r3, [pc, #108]	@ (8001aa4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d002      	beq.n	8001a44 <HAL_TIM_PeriodElapsedCallback+0x90>
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d007      	beq.n	8001a52 <HAL_TIM_PeriodElapsedCallback+0x9e>
 8001a42:	e018      	b.n	8001a76 <HAL_TIM_PeriodElapsedCallback+0xc2>
				case 1:
					current_tone = sine_e4;
 8001a44:	4b12      	ldr	r3, [pc, #72]	@ (8001a90 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001a46:	4a18      	ldr	r2, [pc, #96]	@ (8001aa8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001a48:	601a      	str	r2, [r3, #0]
					current_num_sample = 134;
 8001a4a:	4b15      	ldr	r3, [pc, #84]	@ (8001aa0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001a4c:	2286      	movs	r2, #134	@ 0x86
 8001a4e:	601a      	str	r2, [r3, #0]
					break;
 8001a50:	e018      	b.n	8001a84 <HAL_TIM_PeriodElapsedCallback+0xd0>
				case 2:
					if(start){
 8001a52:	4b16      	ldr	r3, [pc, #88]	@ (8001aac <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d006      	beq.n	8001a68 <HAL_TIM_PeriodElapsedCallback+0xb4>
						current_tone = sine_g4;
 8001a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a90 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001a5c:	4a14      	ldr	r2, [pc, #80]	@ (8001ab0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001a5e:	601a      	str	r2, [r3, #0]
						current_num_sample = 112;
 8001a60:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001a62:	2270      	movs	r2, #112	@ 0x70
 8001a64:	601a      	str	r2, [r3, #0]
=======
 8001a6c:	4b20      	ldr	r3, [pc, #128]	@ (8001af0 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	3301      	adds	r3, #1
 8001a72:	4a1f      	ldr	r2, [pc, #124]	@ (8001af0 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001a74:	6013      	str	r3, [r2, #0]
			tone_index=0;
 8001a76:	4b1a      	ldr	r3, [pc, #104]	@ (8001ae0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
			periods = 0;
 8001a7c:	4b16      	ldr	r3, [pc, #88]	@ (8001ad8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]

			switch(tone){
 8001a82:	4b1b      	ldr	r3, [pc, #108]	@ (8001af0 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d002      	beq.n	8001a90 <HAL_TIM_PeriodElapsedCallback+0x90>
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d007      	beq.n	8001a9e <HAL_TIM_PeriodElapsedCallback+0x9e>
 8001a8e:	e018      	b.n	8001ac2 <HAL_TIM_PeriodElapsedCallback+0xc2>
				case 1:
					current_tone = sine_e4;
 8001a90:	4b12      	ldr	r3, [pc, #72]	@ (8001adc <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001a92:	4a18      	ldr	r2, [pc, #96]	@ (8001af4 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001a94:	601a      	str	r2, [r3, #0]
					current_num_sample = 134;
 8001a96:	4b15      	ldr	r3, [pc, #84]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001a98:	2286      	movs	r2, #134	@ 0x86
 8001a9a:	601a      	str	r2, [r3, #0]
					break;
 8001a9c:	e018      	b.n	8001ad0 <HAL_TIM_PeriodElapsedCallback+0xd0>
				case 2:
					if(start){
 8001a9e:	4b16      	ldr	r3, [pc, #88]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d006      	beq.n	8001ab4 <HAL_TIM_PeriodElapsedCallback+0xb4>
						current_tone = sine_g4;
 8001aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8001adc <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001aa8:	4a14      	ldr	r2, [pc, #80]	@ (8001afc <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001aaa:	601a      	str	r2, [r3, #0]
						current_num_sample = 112;
 8001aac:	4b0f      	ldr	r3, [pc, #60]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001aae:	2270      	movs	r2, #112	@ 0x70
 8001ab0:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
					}else {
						current_tone = sine_c4;
						current_num_sample = 169;
					}
					break;
<<<<<<< Updated upstream
 8001a66:	e00d      	b.n	8001a84 <HAL_TIM_PeriodElapsedCallback+0xd0>
						current_tone = sine_c4;
 8001a68:	4b09      	ldr	r3, [pc, #36]	@ (8001a90 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001a6a:	4a12      	ldr	r2, [pc, #72]	@ (8001ab4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001a6c:	601a      	str	r2, [r3, #0]
						current_num_sample = 169;
 8001a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001a70:	22a9      	movs	r2, #169	@ 0xa9
 8001a72:	601a      	str	r2, [r3, #0]
					break;
 8001a74:	e006      	b.n	8001a84 <HAL_TIM_PeriodElapsedCallback+0xd0>
				default:
					HAL_TIM_Base_Stop_IT(&htim2);
 8001a76:	4810      	ldr	r0, [pc, #64]	@ (8001ab8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001a78:	f004 f8f8 	bl	8005c6c <HAL_TIM_Base_Stop_IT>
					tone = 0;
 8001a7c:	4b09      	ldr	r3, [pc, #36]	@ (8001aa4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
					return;
 8001a82:	bf00      	nop
=======
 8001ab2:	e00d      	b.n	8001ad0 <HAL_TIM_PeriodElapsedCallback+0xd0>
						current_tone = sine_c4;
 8001ab4:	4b09      	ldr	r3, [pc, #36]	@ (8001adc <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001ab6:	4a12      	ldr	r2, [pc, #72]	@ (8001b00 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001ab8:	601a      	str	r2, [r3, #0]
						current_num_sample = 169;
 8001aba:	4b0c      	ldr	r3, [pc, #48]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001abc:	22a9      	movs	r2, #169	@ 0xa9
 8001abe:	601a      	str	r2, [r3, #0]
					break;
 8001ac0:	e006      	b.n	8001ad0 <HAL_TIM_PeriodElapsedCallback+0xd0>
				default:
					HAL_TIM_Base_Stop_IT(&htim2);
 8001ac2:	4810      	ldr	r0, [pc, #64]	@ (8001b04 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001ac4:	f004 f8f8 	bl	8005cb8 <HAL_TIM_Base_Stop_IT>
					tone = 0;
 8001ac8:	4b09      	ldr	r3, [pc, #36]	@ (8001af0 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
					return;
 8001ace:	bf00      	nop
>>>>>>> Stashed changes
			}


		}
	}
}
<<<<<<< Updated upstream
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20000434 	.word	0x20000434
 8001a90:	20000000 	.word	0x20000000
 8001a94:	20000430 	.word	0x20000430
 8001a98:	200005e4 	.word	0x200005e4
 8001a9c:	20000288 	.word	0x20000288
 8001aa0:	20000004 	.word	0x20000004
 8001aa4:	20000438 	.word	0x20000438
 8001aa8:	200002fc 	.word	0x200002fc
 8001aac:	20000008 	.word	0x20000008
 8001ab0:	2000028c 	.word	0x2000028c
 8001ab4:	20000384 	.word	0x20000384
 8001ab8:	2000064c 	.word	0x2000064c

08001abc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a0c      	ldr	r2, [pc, #48]	@ (8001afc <HAL_UART_RxCpltCallback+0x40>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d112      	bne.n	8001af4 <HAL_UART_RxCpltCallback+0x38>
  {
    HAL_UART_Receive_IT(&huart1, rxBuffer, 10);
 8001ace:	220a      	movs	r2, #10
 8001ad0:	490b      	ldr	r1, [pc, #44]	@ (8001b00 <HAL_UART_RxCpltCallback+0x44>)
 8001ad2:	480c      	ldr	r0, [pc, #48]	@ (8001b04 <HAL_UART_RxCpltCallback+0x48>)
 8001ad4:	f004 fdb6 	bl	8006644 <HAL_UART_Receive_IT>

    if (strstr((char *)rxBuffer, "GAME_OVER\n") != NULL) {
 8001ad8:	490b      	ldr	r1, [pc, #44]	@ (8001b08 <HAL_UART_RxCpltCallback+0x4c>)
 8001ada:	4809      	ldr	r0, [pc, #36]	@ (8001b00 <HAL_UART_RxCpltCallback+0x44>)
 8001adc:	f008 fcc6 	bl	800a46c <strstr>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d006      	beq.n	8001af4 <HAL_UART_RxCpltCallback+0x38>
      play_gameover_sound();
 8001ae6:	f7ff fb47 	bl	8001178 <play_gameover_sound>
      memset(rxBuffer, 0, sizeof(rxBuffer));
 8001aea:	2264      	movs	r2, #100	@ 0x64
 8001aec:	2100      	movs	r1, #0
 8001aee:	4804      	ldr	r0, [pc, #16]	@ (8001b00 <HAL_UART_RxCpltCallback+0x44>)
 8001af0:	f008 fcd2 	bl	800a498 <memset>
    }
  }
}
 8001af4:	bf00      	nop
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40013800 	.word	0x40013800
 8001b00:	2000043c 	.word	0x2000043c
 8001b04:	20000698 	.word	0x20000698
 8001b08:	0800d3a8 	.word	0x0800d3a8

08001b0c <Error_Handler>:
=======
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20000434 	.word	0x20000434
 8001adc:	20000000 	.word	0x20000000
 8001ae0:	20000430 	.word	0x20000430
 8001ae4:	200005e4 	.word	0x200005e4
 8001ae8:	20000288 	.word	0x20000288
 8001aec:	20000004 	.word	0x20000004
 8001af0:	20000438 	.word	0x20000438
 8001af4:	200002fc 	.word	0x200002fc
 8001af8:	20000008 	.word	0x20000008
 8001afc:	2000028c 	.word	0x2000028c
 8001b00:	20000384 	.word	0x20000384
 8001b04:	2000064c 	.word	0x2000064c

08001b08 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a0c      	ldr	r2, [pc, #48]	@ (8001b48 <HAL_UART_RxCpltCallback+0x40>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d112      	bne.n	8001b40 <HAL_UART_RxCpltCallback+0x38>
  {
    HAL_UART_Receive_IT(&huart1, rxBuffer, 10);
 8001b1a:	220a      	movs	r2, #10
 8001b1c:	490b      	ldr	r1, [pc, #44]	@ (8001b4c <HAL_UART_RxCpltCallback+0x44>)
 8001b1e:	480c      	ldr	r0, [pc, #48]	@ (8001b50 <HAL_UART_RxCpltCallback+0x48>)
 8001b20:	f004 fdb6 	bl	8006690 <HAL_UART_Receive_IT>

    if (strstr((char *)rxBuffer, "GAME_OVER\n") != NULL) {
 8001b24:	490b      	ldr	r1, [pc, #44]	@ (8001b54 <HAL_UART_RxCpltCallback+0x4c>)
 8001b26:	4809      	ldr	r0, [pc, #36]	@ (8001b4c <HAL_UART_RxCpltCallback+0x44>)
 8001b28:	f008 fcc4 	bl	800a4b4 <strstr>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d006      	beq.n	8001b40 <HAL_UART_RxCpltCallback+0x38>
      play_gameover_sound();
 8001b32:	f7ff fb23 	bl	800117c <play_gameover_sound>
      memset(rxBuffer, 0, sizeof(rxBuffer));
 8001b36:	2264      	movs	r2, #100	@ 0x64
 8001b38:	2100      	movs	r1, #0
 8001b3a:	4804      	ldr	r0, [pc, #16]	@ (8001b4c <HAL_UART_RxCpltCallback+0x44>)
 8001b3c:	f008 fcd0 	bl	800a4e0 <memset>
    }
  }
}
 8001b40:	bf00      	nop
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40013800 	.word	0x40013800
 8001b4c:	2000043c 	.word	0x2000043c
 8001b50:	20000698 	.word	0x20000698
 8001b54:	0800d3fc 	.word	0x0800d3fc

08001b58 <Error_Handler>:
>>>>>>> Stashed changes
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< Updated upstream
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
=======
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< Updated upstream
 8001b10:	b672      	cpsid	i
}
 8001b12:	bf00      	nop
=======
 8001b5c:	b672      	cpsid	i
}
 8001b5e:	bf00      	nop
>>>>>>> Stashed changes
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
<<<<<<< Updated upstream
 8001b14:	bf00      	nop
 8001b16:	e7fd      	b.n	8001b14 <Error_Handler+0x8>

08001b18 <I2Cx_MspInit>:
=======
 8001b60:	bf00      	nop
 8001b62:	e7fd      	b.n	8001b60 <Error_Handler+0x8>

08001b64 <I2Cx_MspInit>:
>>>>>>> Stashed changes
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
<<<<<<< Updated upstream
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b08a      	sub	sp, #40	@ 0x28
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
=======
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08a      	sub	sp, #40	@ 0x28
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
<<<<<<< Updated upstream
 8001b20:	4b27      	ldr	r3, [pc, #156]	@ (8001bc0 <I2Cx_MspInit+0xa8>)
 8001b22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b24:	4a26      	ldr	r2, [pc, #152]	@ (8001bc0 <I2Cx_MspInit+0xa8>)
 8001b26:	f043 0302 	orr.w	r3, r3, #2
 8001b2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b2c:	4b24      	ldr	r3, [pc, #144]	@ (8001bc0 <I2Cx_MspInit+0xa8>)
 8001b2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	613b      	str	r3, [r7, #16]
 8001b36:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001b38:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001b3c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001b3e:	2312      	movs	r3, #18
 8001b40:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001b42:	2301      	movs	r3, #1
 8001b44:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b46:	2303      	movs	r3, #3
 8001b48:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001b4a:	2304      	movs	r3, #4
 8001b4c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001b4e:	f107 0314 	add.w	r3, r7, #20
 8001b52:	4619      	mov	r1, r3
 8001b54:	481b      	ldr	r0, [pc, #108]	@ (8001bc4 <I2Cx_MspInit+0xac>)
 8001b56:	f001 fa1f 	bl	8002f98 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001b5a:	f107 0314 	add.w	r3, r7, #20
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4818      	ldr	r0, [pc, #96]	@ (8001bc4 <I2Cx_MspInit+0xac>)
 8001b62:	f001 fa19 	bl	8002f98 <HAL_GPIO_Init>
=======
 8001b6c:	4b27      	ldr	r3, [pc, #156]	@ (8001c0c <I2Cx_MspInit+0xa8>)
 8001b6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b70:	4a26      	ldr	r2, [pc, #152]	@ (8001c0c <I2Cx_MspInit+0xa8>)
 8001b72:	f043 0302 	orr.w	r3, r3, #2
 8001b76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b78:	4b24      	ldr	r3, [pc, #144]	@ (8001c0c <I2Cx_MspInit+0xa8>)
 8001b7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	613b      	str	r3, [r7, #16]
 8001b82:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001b84:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001b88:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001b8a:	2312      	movs	r3, #18
 8001b8c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b92:	2303      	movs	r3, #3
 8001b94:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001b96:	2304      	movs	r3, #4
 8001b98:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001b9a:	f107 0314 	add.w	r3, r7, #20
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	481b      	ldr	r0, [pc, #108]	@ (8001c10 <I2Cx_MspInit+0xac>)
 8001ba2:	f001 fa1f 	bl	8002fe4 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001ba6:	f107 0314 	add.w	r3, r7, #20
 8001baa:	4619      	mov	r1, r3
 8001bac:	4818      	ldr	r0, [pc, #96]	@ (8001c10 <I2Cx_MspInit+0xac>)
 8001bae:	f001 fa19 	bl	8002fe4 <HAL_GPIO_Init>
>>>>>>> Stashed changes

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
<<<<<<< Updated upstream
 8001b66:	4b16      	ldr	r3, [pc, #88]	@ (8001bc0 <I2Cx_MspInit+0xa8>)
 8001b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b6a:	4a15      	ldr	r2, [pc, #84]	@ (8001bc0 <I2Cx_MspInit+0xa8>)
 8001b6c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b70:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b72:	4b13      	ldr	r3, [pc, #76]	@ (8001bc0 <I2Cx_MspInit+0xa8>)
 8001b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001b7e:	4b10      	ldr	r3, [pc, #64]	@ (8001bc0 <I2Cx_MspInit+0xa8>)
 8001b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b82:	4a0f      	ldr	r2, [pc, #60]	@ (8001bc0 <I2Cx_MspInit+0xa8>)
 8001b84:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b88:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8001bc0 <I2Cx_MspInit+0xa8>)
 8001b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b8e:	4a0c      	ldr	r2, [pc, #48]	@ (8001bc0 <I2Cx_MspInit+0xa8>)
 8001b90:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001b94:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001b96:	2200      	movs	r2, #0
 8001b98:	210f      	movs	r1, #15
 8001b9a:	2021      	movs	r0, #33	@ 0x21
 8001b9c:	f000 feb7 	bl	800290e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001ba0:	2021      	movs	r0, #33	@ 0x21
 8001ba2:	f000 fed0 	bl	8002946 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	210f      	movs	r1, #15
 8001baa:	2022      	movs	r0, #34	@ 0x22
 8001bac:	f000 feaf 	bl	800290e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001bb0:	2022      	movs	r0, #34	@ 0x22
 8001bb2:	f000 fec8 	bl	8002946 <HAL_NVIC_EnableIRQ>
}
 8001bb6:	bf00      	nop
 8001bb8:	3728      	adds	r7, #40	@ 0x28
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	48000400 	.word	0x48000400

08001bc8 <I2Cx_Init>:
=======
 8001bb2:	4b16      	ldr	r3, [pc, #88]	@ (8001c0c <I2Cx_MspInit+0xa8>)
 8001bb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bb6:	4a15      	ldr	r2, [pc, #84]	@ (8001c0c <I2Cx_MspInit+0xa8>)
 8001bb8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001bbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bbe:	4b13      	ldr	r3, [pc, #76]	@ (8001c0c <I2Cx_MspInit+0xa8>)
 8001bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001bca:	4b10      	ldr	r3, [pc, #64]	@ (8001c0c <I2Cx_MspInit+0xa8>)
 8001bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bce:	4a0f      	ldr	r2, [pc, #60]	@ (8001c0c <I2Cx_MspInit+0xa8>)
 8001bd0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001bd4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8001c0c <I2Cx_MspInit+0xa8>)
 8001bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bda:	4a0c      	ldr	r2, [pc, #48]	@ (8001c0c <I2Cx_MspInit+0xa8>)
 8001bdc:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001be0:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001be2:	2200      	movs	r2, #0
 8001be4:	210f      	movs	r1, #15
 8001be6:	2021      	movs	r0, #33	@ 0x21
 8001be8:	f000 feb7 	bl	800295a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001bec:	2021      	movs	r0, #33	@ 0x21
 8001bee:	f000 fed0 	bl	8002992 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	210f      	movs	r1, #15
 8001bf6:	2022      	movs	r0, #34	@ 0x22
 8001bf8:	f000 feaf 	bl	800295a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001bfc:	2022      	movs	r0, #34	@ 0x22
 8001bfe:	f000 fec8 	bl	8002992 <HAL_NVIC_EnableIRQ>
}
 8001c02:	bf00      	nop
 8001c04:	3728      	adds	r7, #40	@ 0x28
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	48000400 	.word	0x48000400

08001c14 <I2Cx_Init>:
>>>>>>> Stashed changes
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
<<<<<<< Updated upstream
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	4a12      	ldr	r2, [pc, #72]	@ (8001c1c <I2Cx_Init+0x54>)
 8001bd4:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a11      	ldr	r2, [pc, #68]	@ (8001c20 <I2Cx_Init+0x58>)
 8001bda:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2201      	movs	r2, #1
 8001be6:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff ff89 	bl	8001b18 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f001 fc62 	bl	80034d0 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f002 fa18 	bl	8004044 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001c14:	bf00      	nop
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40005800 	.word	0x40005800
 8001c20:	00702681 	.word	0x00702681

08001c24 <I2Cx_ReadMultiple>:
=======
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a12      	ldr	r2, [pc, #72]	@ (8001c68 <I2Cx_Init+0x54>)
 8001c20:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a11      	ldr	r2, [pc, #68]	@ (8001c6c <I2Cx_Init+0x58>)
 8001c26:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2201      	movs	r2, #1
 8001c32:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f7ff ff89 	bl	8001b64 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f001 fc62 	bl	800351c <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001c58:	2100      	movs	r1, #0
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f002 fa18 	bl	8004090 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001c60:	bf00      	nop
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40005800 	.word	0x40005800
 8001c6c:	00702681 	.word	0x00702681

08001c70 <I2Cx_ReadMultiple>:
>>>>>>> Stashed changes
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
<<<<<<< Updated upstream
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b08a      	sub	sp, #40	@ 0x28
 8001c28:	af04      	add	r7, sp, #16
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	4608      	mov	r0, r1
 8001c2e:	4611      	mov	r1, r2
 8001c30:	461a      	mov	r2, r3
 8001c32:	4603      	mov	r3, r0
 8001c34:	72fb      	strb	r3, [r7, #11]
 8001c36:	460b      	mov	r3, r1
 8001c38:	813b      	strh	r3, [r7, #8]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001c42:	7afb      	ldrb	r3, [r7, #11]
 8001c44:	b299      	uxth	r1, r3
 8001c46:	88f8      	ldrh	r0, [r7, #6]
 8001c48:	893a      	ldrh	r2, [r7, #8]
 8001c4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c4e:	9302      	str	r3, [sp, #8]
 8001c50:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001c52:	9301      	str	r3, [sp, #4]
 8001c54:	6a3b      	ldr	r3, [r7, #32]
 8001c56:	9300      	str	r3, [sp, #0]
 8001c58:	4603      	mov	r3, r0
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	f001 fe16 	bl	800388c <HAL_I2C_Mem_Read>
 8001c60:	4603      	mov	r3, r0
 8001c62:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001c64:	7dfb      	ldrb	r3, [r7, #23]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d004      	beq.n	8001c74 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8001c6a:	7afb      	ldrb	r3, [r7, #11]
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	68f8      	ldr	r0, [r7, #12]
 8001c70:	f000 f832 	bl	8001cd8 <I2Cx_Error>
  }
  return status;
 8001c74:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3718      	adds	r7, #24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <I2Cx_WriteMultiple>:
=======
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08a      	sub	sp, #40	@ 0x28
 8001c74:	af04      	add	r7, sp, #16
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	4608      	mov	r0, r1
 8001c7a:	4611      	mov	r1, r2
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	4603      	mov	r3, r0
 8001c80:	72fb      	strb	r3, [r7, #11]
 8001c82:	460b      	mov	r3, r1
 8001c84:	813b      	strh	r3, [r7, #8]
 8001c86:	4613      	mov	r3, r2
 8001c88:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001c8e:	7afb      	ldrb	r3, [r7, #11]
 8001c90:	b299      	uxth	r1, r3
 8001c92:	88f8      	ldrh	r0, [r7, #6]
 8001c94:	893a      	ldrh	r2, [r7, #8]
 8001c96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c9a:	9302      	str	r3, [sp, #8]
 8001c9c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001c9e:	9301      	str	r3, [sp, #4]
 8001ca0:	6a3b      	ldr	r3, [r7, #32]
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	68f8      	ldr	r0, [r7, #12]
 8001ca8:	f001 fe16 	bl	80038d8 <HAL_I2C_Mem_Read>
 8001cac:	4603      	mov	r3, r0
 8001cae:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001cb0:	7dfb      	ldrb	r3, [r7, #23]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d004      	beq.n	8001cc0 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8001cb6:	7afb      	ldrb	r3, [r7, #11]
 8001cb8:	4619      	mov	r1, r3
 8001cba:	68f8      	ldr	r0, [r7, #12]
 8001cbc:	f000 f832 	bl	8001d24 <I2Cx_Error>
  }
  return status;
 8001cc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3718      	adds	r7, #24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <I2Cx_WriteMultiple>:
>>>>>>> Stashed changes
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
<<<<<<< Updated upstream
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b08a      	sub	sp, #40	@ 0x28
 8001c82:	af04      	add	r7, sp, #16
 8001c84:	60f8      	str	r0, [r7, #12]
 8001c86:	4608      	mov	r0, r1
 8001c88:	4611      	mov	r1, r2
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	72fb      	strb	r3, [r7, #11]
 8001c90:	460b      	mov	r3, r1
 8001c92:	813b      	strh	r3, [r7, #8]
 8001c94:	4613      	mov	r3, r2
 8001c96:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001c9c:	7afb      	ldrb	r3, [r7, #11]
 8001c9e:	b299      	uxth	r1, r3
 8001ca0:	88f8      	ldrh	r0, [r7, #6]
 8001ca2:	893a      	ldrh	r2, [r7, #8]
 8001ca4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ca8:	9302      	str	r3, [sp, #8]
 8001caa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001cac:	9301      	str	r3, [sp, #4]
 8001cae:	6a3b      	ldr	r3, [r7, #32]
 8001cb0:	9300      	str	r3, [sp, #0]
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	68f8      	ldr	r0, [r7, #12]
 8001cb6:	f001 fcd5 	bl	8003664 <HAL_I2C_Mem_Write>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001cbe:	7dfb      	ldrb	r3, [r7, #23]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d004      	beq.n	8001cce <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001cc4:	7afb      	ldrb	r3, [r7, #11]
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	68f8      	ldr	r0, [r7, #12]
 8001cca:	f000 f805 	bl	8001cd8 <I2Cx_Error>
  }
  return status;
 8001cce:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3718      	adds	r7, #24
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <I2Cx_Error>:
=======
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b08a      	sub	sp, #40	@ 0x28
 8001cce:	af04      	add	r7, sp, #16
 8001cd0:	60f8      	str	r0, [r7, #12]
 8001cd2:	4608      	mov	r0, r1
 8001cd4:	4611      	mov	r1, r2
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	4603      	mov	r3, r0
 8001cda:	72fb      	strb	r3, [r7, #11]
 8001cdc:	460b      	mov	r3, r1
 8001cde:	813b      	strh	r3, [r7, #8]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001ce8:	7afb      	ldrb	r3, [r7, #11]
 8001cea:	b299      	uxth	r1, r3
 8001cec:	88f8      	ldrh	r0, [r7, #6]
 8001cee:	893a      	ldrh	r2, [r7, #8]
 8001cf0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cf4:	9302      	str	r3, [sp, #8]
 8001cf6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001cf8:	9301      	str	r3, [sp, #4]
 8001cfa:	6a3b      	ldr	r3, [r7, #32]
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	4603      	mov	r3, r0
 8001d00:	68f8      	ldr	r0, [r7, #12]
 8001d02:	f001 fcd5 	bl	80036b0 <HAL_I2C_Mem_Write>
 8001d06:	4603      	mov	r3, r0
 8001d08:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001d0a:	7dfb      	ldrb	r3, [r7, #23]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d004      	beq.n	8001d1a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001d10:	7afb      	ldrb	r3, [r7, #11]
 8001d12:	4619      	mov	r1, r3
 8001d14:	68f8      	ldr	r0, [r7, #12]
 8001d16:	f000 f805 	bl	8001d24 <I2Cx_Error>
  }
  return status;
 8001d1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3718      	adds	r7, #24
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <I2Cx_Error>:
>>>>>>> Stashed changes
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
<<<<<<< Updated upstream
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f001 fc8e 	bl	8003606 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7ff ff6c 	bl	8001bc8 <I2Cx_Init>
}
 8001cf0:	bf00      	nop
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <SENSOR_IO_Init>:
=======
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f001 fc8e 	bl	8003652 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7ff ff6c 	bl	8001c14 <I2Cx_Init>
}
 8001d3c:	bf00      	nop
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <SENSOR_IO_Init>:
>>>>>>> Stashed changes
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
<<<<<<< Updated upstream
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001cfc:	4802      	ldr	r0, [pc, #8]	@ (8001d08 <SENSOR_IO_Init+0x10>)
 8001cfe:	f7ff ff63 	bl	8001bc8 <I2Cx_Init>
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	2000072c 	.word	0x2000072c

08001d0c <SENSOR_IO_Write>:
=======
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001d48:	4802      	ldr	r0, [pc, #8]	@ (8001d54 <SENSOR_IO_Init+0x10>)
 8001d4a:	f7ff ff63 	bl	8001c14 <I2Cx_Init>
}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	20000730 	.word	0x20000730

08001d58 <SENSOR_IO_Write>:
>>>>>>> Stashed changes
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
<<<<<<< Updated upstream
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af02      	add	r7, sp, #8
 8001d12:	4603      	mov	r3, r0
 8001d14:	71fb      	strb	r3, [r7, #7]
 8001d16:	460b      	mov	r3, r1
 8001d18:	71bb      	strb	r3, [r7, #6]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001d1e:	79bb      	ldrb	r3, [r7, #6]
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	79f9      	ldrb	r1, [r7, #7]
 8001d24:	2301      	movs	r3, #1
 8001d26:	9301      	str	r3, [sp, #4]
 8001d28:	1d7b      	adds	r3, r7, #5
 8001d2a:	9300      	str	r3, [sp, #0]
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	4803      	ldr	r0, [pc, #12]	@ (8001d3c <SENSOR_IO_Write+0x30>)
 8001d30:	f7ff ffa5 	bl	8001c7e <I2Cx_WriteMultiple>
}
 8001d34:	bf00      	nop
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	2000072c 	.word	0x2000072c

08001d40 <SENSOR_IO_Read>:
=======
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af02      	add	r7, sp, #8
 8001d5e:	4603      	mov	r3, r0
 8001d60:	71fb      	strb	r3, [r7, #7]
 8001d62:	460b      	mov	r3, r1
 8001d64:	71bb      	strb	r3, [r7, #6]
 8001d66:	4613      	mov	r3, r2
 8001d68:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001d6a:	79bb      	ldrb	r3, [r7, #6]
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	79f9      	ldrb	r1, [r7, #7]
 8001d70:	2301      	movs	r3, #1
 8001d72:	9301      	str	r3, [sp, #4]
 8001d74:	1d7b      	adds	r3, r7, #5
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	2301      	movs	r3, #1
 8001d7a:	4803      	ldr	r0, [pc, #12]	@ (8001d88 <SENSOR_IO_Write+0x30>)
 8001d7c:	f7ff ffa5 	bl	8001cca <I2Cx_WriteMultiple>
}
 8001d80:	bf00      	nop
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	20000730 	.word	0x20000730

08001d8c <SENSOR_IO_Read>:
>>>>>>> Stashed changes
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
<<<<<<< Updated upstream
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af02      	add	r7, sp, #8
 8001d46:	4603      	mov	r3, r0
 8001d48:	460a      	mov	r2, r1
 8001d4a:	71fb      	strb	r3, [r7, #7]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001d50:	2300      	movs	r3, #0
 8001d52:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001d54:	79bb      	ldrb	r3, [r7, #6]
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	79f9      	ldrb	r1, [r7, #7]
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	9301      	str	r3, [sp, #4]
 8001d5e:	f107 030f 	add.w	r3, r7, #15
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	2301      	movs	r3, #1
 8001d66:	4804      	ldr	r0, [pc, #16]	@ (8001d78 <SENSOR_IO_Read+0x38>)
 8001d68:	f7ff ff5c 	bl	8001c24 <I2Cx_ReadMultiple>

  return read_value;
 8001d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	2000072c 	.word	0x2000072c

08001d7c <SENSOR_IO_ReadMultiple>:
=======
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af02      	add	r7, sp, #8
 8001d92:	4603      	mov	r3, r0
 8001d94:	460a      	mov	r2, r1
 8001d96:	71fb      	strb	r3, [r7, #7]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001da0:	79bb      	ldrb	r3, [r7, #6]
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	79f9      	ldrb	r1, [r7, #7]
 8001da6:	2301      	movs	r3, #1
 8001da8:	9301      	str	r3, [sp, #4]
 8001daa:	f107 030f 	add.w	r3, r7, #15
 8001dae:	9300      	str	r3, [sp, #0]
 8001db0:	2301      	movs	r3, #1
 8001db2:	4804      	ldr	r0, [pc, #16]	@ (8001dc4 <SENSOR_IO_Read+0x38>)
 8001db4:	f7ff ff5c 	bl	8001c70 <I2Cx_ReadMultiple>

  return read_value;
 8001db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20000730 	.word	0x20000730

08001dc8 <SENSOR_IO_ReadMultiple>:
>>>>>>> Stashed changes
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
<<<<<<< Updated upstream
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af02      	add	r7, sp, #8
 8001d82:	603a      	str	r2, [r7, #0]
 8001d84:	461a      	mov	r2, r3
 8001d86:	4603      	mov	r3, r0
 8001d88:	71fb      	strb	r3, [r7, #7]
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	71bb      	strb	r3, [r7, #6]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001d92:	79bb      	ldrb	r3, [r7, #6]
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	79f9      	ldrb	r1, [r7, #7]
 8001d98:	88bb      	ldrh	r3, [r7, #4]
 8001d9a:	9301      	str	r3, [sp, #4]
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	9300      	str	r3, [sp, #0]
 8001da0:	2301      	movs	r3, #1
 8001da2:	4804      	ldr	r0, [pc, #16]	@ (8001db4 <SENSOR_IO_ReadMultiple+0x38>)
 8001da4:	f7ff ff3e 	bl	8001c24 <I2Cx_ReadMultiple>
 8001da8:	4603      	mov	r3, r0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	2000072c 	.word	0x2000072c

08001db8 <BSP_ACCELERO_Init>:
=======
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af02      	add	r7, sp, #8
 8001dce:	603a      	str	r2, [r7, #0]
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	71fb      	strb	r3, [r7, #7]
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	71bb      	strb	r3, [r7, #6]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001dde:	79bb      	ldrb	r3, [r7, #6]
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	79f9      	ldrb	r1, [r7, #7]
 8001de4:	88bb      	ldrh	r3, [r7, #4]
 8001de6:	9301      	str	r3, [sp, #4]
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	2301      	movs	r3, #1
 8001dee:	4804      	ldr	r0, [pc, #16]	@ (8001e00 <SENSOR_IO_ReadMultiple+0x38>)
 8001df0:	f7ff ff3e 	bl	8001c70 <I2Cx_ReadMultiple>
 8001df4:	4603      	mov	r3, r0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000730 	.word	0x20000730

08001e04 <BSP_ACCELERO_Init>:
>>>>>>> Stashed changes
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
<<<<<<< Updated upstream
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8001dc6:	4b19      	ldr	r3, [pc, #100]	@ (8001e2c <BSP_ACCELERO_Init+0x74>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	4798      	blx	r3
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b6a      	cmp	r3, #106	@ 0x6a
 8001dd0:	d002      	beq.n	8001dd8 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	73fb      	strb	r3, [r7, #15]
 8001dd6:	e024      	b.n	8001e22 <BSP_ACCELERO_Init+0x6a>
=======
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8001e12:	4b19      	ldr	r3, [pc, #100]	@ (8001e78 <BSP_ACCELERO_Init+0x74>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	4798      	blx	r3
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b6a      	cmp	r3, #106	@ 0x6a
 8001e1c:	d002      	beq.n	8001e24 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	73fb      	strb	r3, [r7, #15]
 8001e22:	e024      	b.n	8001e6e <BSP_ACCELERO_Init+0x6a>
>>>>>>> Stashed changes
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
<<<<<<< Updated upstream
 8001dd8:	4b15      	ldr	r3, [pc, #84]	@ (8001e30 <BSP_ACCELERO_Init+0x78>)
 8001dda:	4a14      	ldr	r2, [pc, #80]	@ (8001e2c <BSP_ACCELERO_Init+0x74>)
 8001ddc:	601a      	str	r2, [r3, #0]
=======
 8001e24:	4b15      	ldr	r3, [pc, #84]	@ (8001e7c <BSP_ACCELERO_Init+0x78>)
 8001e26:	4a14      	ldr	r2, [pc, #80]	@ (8001e78 <BSP_ACCELERO_Init+0x74>)
 8001e28:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
<<<<<<< Updated upstream
 8001dde:	2330      	movs	r3, #48	@ 0x30
 8001de0:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8001de2:	2300      	movs	r3, #0
 8001de4:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8001de6:	2300      	movs	r3, #0
 8001de8:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8001dea:	2340      	movs	r3, #64	@ 0x40
 8001dec:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8001dee:	2300      	movs	r3, #0
 8001df0:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8001df2:	2300      	movs	r3, #0
 8001df4:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8001df6:	797a      	ldrb	r2, [r7, #5]
 8001df8:	7abb      	ldrb	r3, [r7, #10]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8001e00:	7a3b      	ldrb	r3, [r7, #8]
 8001e02:	f043 0304 	orr.w	r3, r3, #4
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	021b      	lsls	r3, r3, #8
 8001e0a:	b21a      	sxth	r2, r3
 8001e0c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	b21b      	sxth	r3, r3
 8001e14:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8001e16:	4b06      	ldr	r3, [pc, #24]	@ (8001e30 <BSP_ACCELERO_Init+0x78>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	89ba      	ldrh	r2, [r7, #12]
 8001e1e:	4610      	mov	r0, r2
 8001e20:	4798      	blx	r3
  }  

  return ret;
 8001e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3710      	adds	r7, #16
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	20000010 	.word	0x20000010
 8001e30:	20000780 	.word	0x20000780

08001e34 <BSP_ACCELERO_AccGetXYZ>:
=======
 8001e2a:	2330      	movs	r3, #48	@ 0x30
 8001e2c:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8001e32:	2300      	movs	r3, #0
 8001e34:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8001e36:	2340      	movs	r3, #64	@ 0x40
 8001e38:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8001e42:	797a      	ldrb	r2, [r7, #5]
 8001e44:	7abb      	ldrb	r3, [r7, #10]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8001e4c:	7a3b      	ldrb	r3, [r7, #8]
 8001e4e:	f043 0304 	orr.w	r3, r3, #4
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	021b      	lsls	r3, r3, #8
 8001e56:	b21a      	sxth	r2, r3
 8001e58:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	b21b      	sxth	r3, r3
 8001e60:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8001e62:	4b06      	ldr	r3, [pc, #24]	@ (8001e7c <BSP_ACCELERO_Init+0x78>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	89ba      	ldrh	r2, [r7, #12]
 8001e6a:	4610      	mov	r0, r2
 8001e6c:	4798      	blx	r3
  }  

  return ret;
 8001e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3710      	adds	r7, #16
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	20000010 	.word	0x20000010
 8001e7c:	20000784 	.word	0x20000784

08001e80 <BSP_ACCELERO_AccGetXYZ>:
>>>>>>> Stashed changes
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
<<<<<<< Updated upstream
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8001e3c:	4b08      	ldr	r3, [pc, #32]	@ (8001e60 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d009      	beq.n	8001e58 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8001e44:	4b06      	ldr	r3, [pc, #24]	@ (8001e60 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d004      	beq.n	8001e58 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8001e4e:	4b04      	ldr	r3, [pc, #16]	@ (8001e60 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	4798      	blx	r3
    }
  }
}
 8001e58:	bf00      	nop
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	20000780 	.word	0x20000780

08001e64 <HAL_MspInit>:
=======
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8001e88:	4b08      	ldr	r3, [pc, #32]	@ (8001eac <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d009      	beq.n	8001ea4 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8001e90:	4b06      	ldr	r3, [pc, #24]	@ (8001eac <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d004      	beq.n	8001ea4 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8001e9a:	4b04      	ldr	r3, [pc, #16]	@ (8001eac <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	4798      	blx	r3
    }
  }
}
 8001ea4:	bf00      	nop
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	20000784 	.word	0x20000784

08001eb0 <HAL_MspInit>:
>>>>>>> Stashed changes
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< Updated upstream
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
=======
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< Updated upstream
 8001e6a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ea8 <HAL_MspInit+0x44>)
 8001e6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e6e:	4a0e      	ldr	r2, [pc, #56]	@ (8001ea8 <HAL_MspInit+0x44>)
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e76:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea8 <HAL_MspInit+0x44>)
 8001e78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	607b      	str	r3, [r7, #4]
 8001e80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e82:	4b09      	ldr	r3, [pc, #36]	@ (8001ea8 <HAL_MspInit+0x44>)
 8001e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e86:	4a08      	ldr	r2, [pc, #32]	@ (8001ea8 <HAL_MspInit+0x44>)
 8001e88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e8e:	4b06      	ldr	r3, [pc, #24]	@ (8001ea8 <HAL_MspInit+0x44>)
 8001e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e96:	603b      	str	r3, [r7, #0]
 8001e98:	683b      	ldr	r3, [r7, #0]
=======
 8001eb6:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef4 <HAL_MspInit+0x44>)
 8001eb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eba:	4a0e      	ldr	r2, [pc, #56]	@ (8001ef4 <HAL_MspInit+0x44>)
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ec2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef4 <HAL_MspInit+0x44>)
 8001ec4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	607b      	str	r3, [r7, #4]
 8001ecc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ece:	4b09      	ldr	r3, [pc, #36]	@ (8001ef4 <HAL_MspInit+0x44>)
 8001ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ed2:	4a08      	ldr	r2, [pc, #32]	@ (8001ef4 <HAL_MspInit+0x44>)
 8001ed4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ed8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001eda:	4b06      	ldr	r3, [pc, #24]	@ (8001ef4 <HAL_MspInit+0x44>)
 8001edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ede:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ee2:	603b      	str	r3, [r7, #0]
 8001ee4:	683b      	ldr	r3, [r7, #0]
>>>>>>> Stashed changes
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< Updated upstream
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	40021000 	.word	0x40021000

08001eac <HAL_DAC_MspInit>:
=======
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	40021000 	.word	0x40021000

08001ef8 <HAL_DAC_MspInit>:
>>>>>>> Stashed changes
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
<<<<<<< Updated upstream
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b08a      	sub	sp, #40	@ 0x28
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb4:	f107 0314 	add.w	r3, r7, #20
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	60da      	str	r2, [r3, #12]
 8001ec2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a19      	ldr	r2, [pc, #100]	@ (8001f30 <HAL_DAC_MspInit+0x84>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d12c      	bne.n	8001f28 <HAL_DAC_MspInit+0x7c>
=======
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b08a      	sub	sp, #40	@ 0x28
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f00:	f107 0314 	add.w	r3, r7, #20
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	605a      	str	r2, [r3, #4]
 8001f0a:	609a      	str	r2, [r3, #8]
 8001f0c:	60da      	str	r2, [r3, #12]
 8001f0e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a19      	ldr	r2, [pc, #100]	@ (8001f7c <HAL_DAC_MspInit+0x84>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d12c      	bne.n	8001f74 <HAL_DAC_MspInit+0x7c>
>>>>>>> Stashed changes
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
<<<<<<< Updated upstream
 8001ece:	4b19      	ldr	r3, [pc, #100]	@ (8001f34 <HAL_DAC_MspInit+0x88>)
 8001ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ed2:	4a18      	ldr	r2, [pc, #96]	@ (8001f34 <HAL_DAC_MspInit+0x88>)
 8001ed4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001ed8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001eda:	4b16      	ldr	r3, [pc, #88]	@ (8001f34 <HAL_DAC_MspInit+0x88>)
 8001edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ede:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ee2:	613b      	str	r3, [r7, #16]
 8001ee4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee6:	4b13      	ldr	r3, [pc, #76]	@ (8001f34 <HAL_DAC_MspInit+0x88>)
 8001ee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eea:	4a12      	ldr	r2, [pc, #72]	@ (8001f34 <HAL_DAC_MspInit+0x88>)
 8001eec:	f043 0301 	orr.w	r3, r3, #1
 8001ef0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ef2:	4b10      	ldr	r3, [pc, #64]	@ (8001f34 <HAL_DAC_MspInit+0x88>)
 8001ef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	68fb      	ldr	r3, [r7, #12]
=======
 8001f1a:	4b19      	ldr	r3, [pc, #100]	@ (8001f80 <HAL_DAC_MspInit+0x88>)
 8001f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f1e:	4a18      	ldr	r2, [pc, #96]	@ (8001f80 <HAL_DAC_MspInit+0x88>)
 8001f20:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001f24:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f26:	4b16      	ldr	r3, [pc, #88]	@ (8001f80 <HAL_DAC_MspInit+0x88>)
 8001f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f2a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001f2e:	613b      	str	r3, [r7, #16]
 8001f30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f32:	4b13      	ldr	r3, [pc, #76]	@ (8001f80 <HAL_DAC_MspInit+0x88>)
 8001f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f36:	4a12      	ldr	r2, [pc, #72]	@ (8001f80 <HAL_DAC_MspInit+0x88>)
 8001f38:	f043 0301 	orr.w	r3, r3, #1
 8001f3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f3e:	4b10      	ldr	r3, [pc, #64]	@ (8001f80 <HAL_DAC_MspInit+0x88>)
 8001f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	68fb      	ldr	r3, [r7, #12]
>>>>>>> Stashed changes
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
<<<<<<< Updated upstream
 8001efe:	2310      	movs	r3, #16
 8001f00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f02:	2303      	movs	r3, #3
 8001f04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f0a:	f107 0314 	add.w	r3, r7, #20
 8001f0e:	4619      	mov	r1, r3
 8001f10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f14:	f001 f840 	bl	8002f98 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001f18:	2200      	movs	r2, #0
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	2036      	movs	r0, #54	@ 0x36
 8001f1e:	f000 fcf6 	bl	800290e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f22:	2036      	movs	r0, #54	@ 0x36
 8001f24:	f000 fd0f 	bl	8002946 <HAL_NVIC_EnableIRQ>
=======
 8001f4a:	2310      	movs	r3, #16
 8001f4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f52:	2300      	movs	r3, #0
 8001f54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f56:	f107 0314 	add.w	r3, r7, #20
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f60:	f001 f840 	bl	8002fe4 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001f64:	2200      	movs	r2, #0
 8001f66:	2100      	movs	r1, #0
 8001f68:	2036      	movs	r0, #54	@ 0x36
 8001f6a:	f000 fcf6 	bl	800295a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f6e:	2036      	movs	r0, #54	@ 0x36
 8001f70:	f000 fd0f 	bl	8002992 <HAL_NVIC_EnableIRQ>
>>>>>>> Stashed changes

  /* USER CODE END DAC1_MspInit 1 */

  }

}
<<<<<<< Updated upstream
 8001f28:	bf00      	nop
 8001f2a:	3728      	adds	r7, #40	@ 0x28
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40007400 	.word	0x40007400
 8001f34:	40021000 	.word	0x40021000

08001f38 <HAL_I2C_MspInit>:
=======
 8001f74:	bf00      	nop
 8001f76:	3728      	adds	r7, #40	@ 0x28
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40007400 	.word	0x40007400
 8001f80:	40021000 	.word	0x40021000

08001f84 <HAL_I2C_MspInit>:
>>>>>>> Stashed changes
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
<<<<<<< Updated upstream
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b0ae      	sub	sp, #184	@ 0xb8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f40:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
 8001f4c:	60da      	str	r2, [r3, #12]
 8001f4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f50:	f107 0310 	add.w	r3, r7, #16
 8001f54:	2294      	movs	r2, #148	@ 0x94
 8001f56:	2100      	movs	r1, #0
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f008 fa9d 	bl	800a498 <memset>
  if(hi2c->Instance==I2C2)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a21      	ldr	r2, [pc, #132]	@ (8001fe8 <HAL_I2C_MspInit+0xb0>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d13b      	bne.n	8001fe0 <HAL_I2C_MspInit+0xa8>
=======
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b0ae      	sub	sp, #184	@ 0xb8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	60da      	str	r2, [r3, #12]
 8001f9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f9c:	f107 0310 	add.w	r3, r7, #16
 8001fa0:	2294      	movs	r2, #148	@ 0x94
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f008 fa9b 	bl	800a4e0 <memset>
  if(hi2c->Instance==I2C2)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a21      	ldr	r2, [pc, #132]	@ (8002034 <HAL_I2C_MspInit+0xb0>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d13b      	bne.n	800202c <HAL_I2C_MspInit+0xa8>
>>>>>>> Stashed changes

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
<<<<<<< Updated upstream
 8001f68:	2380      	movs	r3, #128	@ 0x80
 8001f6a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f70:	f107 0310 	add.w	r3, r7, #16
 8001f74:	4618      	mov	r0, r3
 8001f76:	f003 f899 	bl	80050ac <HAL_RCCEx_PeriphCLKConfig>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001f80:	f7ff fdc4 	bl	8001b0c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f84:	4b19      	ldr	r3, [pc, #100]	@ (8001fec <HAL_I2C_MspInit+0xb4>)
 8001f86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f88:	4a18      	ldr	r2, [pc, #96]	@ (8001fec <HAL_I2C_MspInit+0xb4>)
 8001f8a:	f043 0302 	orr.w	r3, r3, #2
 8001f8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f90:	4b16      	ldr	r3, [pc, #88]	@ (8001fec <HAL_I2C_MspInit+0xb4>)
 8001f92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
=======
 8001fb4:	2380      	movs	r3, #128	@ 0x80
 8001fb6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fbc:	f107 0310 	add.w	r3, r7, #16
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f003 f899 	bl	80050f8 <HAL_RCCEx_PeriphCLKConfig>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001fcc:	f7ff fdc4 	bl	8001b58 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fd0:	4b19      	ldr	r3, [pc, #100]	@ (8002038 <HAL_I2C_MspInit+0xb4>)
 8001fd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fd4:	4a18      	ldr	r2, [pc, #96]	@ (8002038 <HAL_I2C_MspInit+0xb4>)
 8001fd6:	f043 0302 	orr.w	r3, r3, #2
 8001fda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fdc:	4b16      	ldr	r3, [pc, #88]	@ (8002038 <HAL_I2C_MspInit+0xb4>)
 8001fde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	60fb      	str	r3, [r7, #12]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
>>>>>>> Stashed changes
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
<<<<<<< Updated upstream
 8001f9c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001fa0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fa4:	2312      	movs	r3, #18
 8001fa6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001faa:	2300      	movs	r3, #0
 8001fac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001fb6:	2304      	movs	r3, #4
 8001fb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fbc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	480b      	ldr	r0, [pc, #44]	@ (8001ff0 <HAL_I2C_MspInit+0xb8>)
 8001fc4:	f000 ffe8 	bl	8002f98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001fc8:	4b08      	ldr	r3, [pc, #32]	@ (8001fec <HAL_I2C_MspInit+0xb4>)
 8001fca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fcc:	4a07      	ldr	r2, [pc, #28]	@ (8001fec <HAL_I2C_MspInit+0xb4>)
 8001fce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001fd2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fd4:	4b05      	ldr	r3, [pc, #20]	@ (8001fec <HAL_I2C_MspInit+0xb4>)
 8001fd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fd8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fdc:	60bb      	str	r3, [r7, #8]
 8001fde:	68bb      	ldr	r3, [r7, #8]
=======
 8001fe8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001fec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ff0:	2312      	movs	r3, #18
 8001ff2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002002:	2304      	movs	r3, #4
 8002004:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002008:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800200c:	4619      	mov	r1, r3
 800200e:	480b      	ldr	r0, [pc, #44]	@ (800203c <HAL_I2C_MspInit+0xb8>)
 8002010:	f000 ffe8 	bl	8002fe4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002014:	4b08      	ldr	r3, [pc, #32]	@ (8002038 <HAL_I2C_MspInit+0xb4>)
 8002016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002018:	4a07      	ldr	r2, [pc, #28]	@ (8002038 <HAL_I2C_MspInit+0xb4>)
 800201a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800201e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002020:	4b05      	ldr	r3, [pc, #20]	@ (8002038 <HAL_I2C_MspInit+0xb4>)
 8002022:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002024:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002028:	60bb      	str	r3, [r7, #8]
 800202a:	68bb      	ldr	r3, [r7, #8]
>>>>>>> Stashed changes

  /* USER CODE END I2C2_MspInit 1 */

  }

}
<<<<<<< Updated upstream
 8001fe0:	bf00      	nop
 8001fe2:	37b8      	adds	r7, #184	@ 0xb8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40005800 	.word	0x40005800
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	48000400 	.word	0x48000400

08001ff4 <HAL_I2C_MspDeInit>:
=======
 800202c:	bf00      	nop
 800202e:	37b8      	adds	r7, #184	@ 0xb8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40005800 	.word	0x40005800
 8002038:	40021000 	.word	0x40021000
 800203c:	48000400 	.word	0x48000400

08002040 <HAL_I2C_MspDeInit>:
>>>>>>> Stashed changes
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
<<<<<<< Updated upstream
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a0b      	ldr	r2, [pc, #44]	@ (8002030 <HAL_I2C_MspDeInit+0x3c>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d10f      	bne.n	8002026 <HAL_I2C_MspDeInit+0x32>
=======
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a0b      	ldr	r2, [pc, #44]	@ (800207c <HAL_I2C_MspDeInit+0x3c>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d10f      	bne.n	8002072 <HAL_I2C_MspDeInit+0x32>
>>>>>>> Stashed changes
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
<<<<<<< Updated upstream
 8002006:	4b0b      	ldr	r3, [pc, #44]	@ (8002034 <HAL_I2C_MspDeInit+0x40>)
 8002008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800200a:	4a0a      	ldr	r2, [pc, #40]	@ (8002034 <HAL_I2C_MspDeInit+0x40>)
 800200c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002010:	6593      	str	r3, [r2, #88]	@ 0x58
=======
 8002052:	4b0b      	ldr	r3, [pc, #44]	@ (8002080 <HAL_I2C_MspDeInit+0x40>)
 8002054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002056:	4a0a      	ldr	r2, [pc, #40]	@ (8002080 <HAL_I2C_MspDeInit+0x40>)
 8002058:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800205c:	6593      	str	r3, [r2, #88]	@ 0x58
>>>>>>> Stashed changes

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
<<<<<<< Updated upstream
 8002012:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002016:	4808      	ldr	r0, [pc, #32]	@ (8002038 <HAL_I2C_MspDeInit+0x44>)
 8002018:	f001 f950 	bl	80032bc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 800201c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002020:	4805      	ldr	r0, [pc, #20]	@ (8002038 <HAL_I2C_MspDeInit+0x44>)
 8002022:	f001 f94b 	bl	80032bc <HAL_GPIO_DeInit>
=======
 800205e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002062:	4808      	ldr	r0, [pc, #32]	@ (8002084 <HAL_I2C_MspDeInit+0x44>)
 8002064:	f001 f950 	bl	8003308 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8002068:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800206c:	4805      	ldr	r0, [pc, #20]	@ (8002084 <HAL_I2C_MspDeInit+0x44>)
 800206e:	f001 f94b 	bl	8003308 <HAL_GPIO_DeInit>
>>>>>>> Stashed changes
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
<<<<<<< Updated upstream
 8002026:	bf00      	nop
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40005800 	.word	0x40005800
 8002034:	40021000 	.word	0x40021000
 8002038:	48000400 	.word	0x48000400

0800203c <HAL_TIM_Base_MspInit>:
=======
 8002072:	bf00      	nop
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40005800 	.word	0x40005800
 8002080:	40021000 	.word	0x40021000
 8002084:	48000400 	.word	0x48000400

08002088 <HAL_TIM_Base_MspInit>:
>>>>>>> Stashed changes
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
<<<<<<< Updated upstream
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800204c:	d113      	bne.n	8002076 <HAL_TIM_Base_MspInit+0x3a>
=======
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002098:	d113      	bne.n	80020c2 <HAL_TIM_Base_MspInit+0x3a>
>>>>>>> Stashed changes
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
<<<<<<< Updated upstream
 800204e:	4b0c      	ldr	r3, [pc, #48]	@ (8002080 <HAL_TIM_Base_MspInit+0x44>)
 8002050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002052:	4a0b      	ldr	r2, [pc, #44]	@ (8002080 <HAL_TIM_Base_MspInit+0x44>)
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	6593      	str	r3, [r2, #88]	@ 0x58
 800205a:	4b09      	ldr	r3, [pc, #36]	@ (8002080 <HAL_TIM_Base_MspInit+0x44>)
 800205c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002066:	2200      	movs	r2, #0
 8002068:	2100      	movs	r1, #0
 800206a:	201c      	movs	r0, #28
 800206c:	f000 fc4f 	bl	800290e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002070:	201c      	movs	r0, #28
 8002072:	f000 fc68 	bl	8002946 <HAL_NVIC_EnableIRQ>
=======
 800209a:	4b0c      	ldr	r3, [pc, #48]	@ (80020cc <HAL_TIM_Base_MspInit+0x44>)
 800209c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800209e:	4a0b      	ldr	r2, [pc, #44]	@ (80020cc <HAL_TIM_Base_MspInit+0x44>)
 80020a0:	f043 0301 	orr.w	r3, r3, #1
 80020a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80020a6:	4b09      	ldr	r3, [pc, #36]	@ (80020cc <HAL_TIM_Base_MspInit+0x44>)
 80020a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80020b2:	2200      	movs	r2, #0
 80020b4:	2100      	movs	r1, #0
 80020b6:	201c      	movs	r0, #28
 80020b8:	f000 fc4f 	bl	800295a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020bc:	201c      	movs	r0, #28
 80020be:	f000 fc68 	bl	8002992 <HAL_NVIC_EnableIRQ>
>>>>>>> Stashed changes

  /* USER CODE END TIM2_MspInit 1 */

  }

}
<<<<<<< Updated upstream
 8002076:	bf00      	nop
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	40021000 	.word	0x40021000

08002084 <HAL_UART_MspInit>:
=======
 80020c2:	bf00      	nop
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40021000 	.word	0x40021000

080020d0 <HAL_UART_MspInit>:
>>>>>>> Stashed changes
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
<<<<<<< Updated upstream
 8002084:	b580      	push	{r7, lr}
 8002086:	b0ae      	sub	sp, #184	@ 0xb8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800208c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	60da      	str	r2, [r3, #12]
 800209a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800209c:	f107 0310 	add.w	r3, r7, #16
 80020a0:	2294      	movs	r2, #148	@ 0x94
 80020a2:	2100      	movs	r1, #0
 80020a4:	4618      	mov	r0, r3
 80020a6:	f008 f9f7 	bl	800a498 <memset>
  if(huart->Instance==USART1)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a25      	ldr	r2, [pc, #148]	@ (8002144 <HAL_UART_MspInit+0xc0>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d142      	bne.n	800213a <HAL_UART_MspInit+0xb6>
=======
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b0ae      	sub	sp, #184	@ 0xb8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	605a      	str	r2, [r3, #4]
 80020e2:	609a      	str	r2, [r3, #8]
 80020e4:	60da      	str	r2, [r3, #12]
 80020e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020e8:	f107 0310 	add.w	r3, r7, #16
 80020ec:	2294      	movs	r2, #148	@ 0x94
 80020ee:	2100      	movs	r1, #0
 80020f0:	4618      	mov	r0, r3
 80020f2:	f008 f9f5 	bl	800a4e0 <memset>
  if(huart->Instance==USART1)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a25      	ldr	r2, [pc, #148]	@ (8002190 <HAL_UART_MspInit+0xc0>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d142      	bne.n	8002186 <HAL_UART_MspInit+0xb6>
>>>>>>> Stashed changes

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
<<<<<<< Updated upstream
 80020b4:	2301      	movs	r3, #1
 80020b6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80020b8:	2300      	movs	r3, #0
 80020ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020bc:	f107 0310 	add.w	r3, r7, #16
 80020c0:	4618      	mov	r0, r3
 80020c2:	f002 fff3 	bl	80050ac <HAL_RCCEx_PeriphCLKConfig>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80020cc:	f7ff fd1e 	bl	8001b0c <Error_Handler>
=======
 8002100:	2301      	movs	r3, #1
 8002102:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002104:	2300      	movs	r3, #0
 8002106:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002108:	f107 0310 	add.w	r3, r7, #16
 800210c:	4618      	mov	r0, r3
 800210e:	f002 fff3 	bl	80050f8 <HAL_RCCEx_PeriphCLKConfig>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002118:	f7ff fd1e 	bl	8001b58 <Error_Handler>
>>>>>>> Stashed changes
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
<<<<<<< Updated upstream
 80020d0:	4b1d      	ldr	r3, [pc, #116]	@ (8002148 <HAL_UART_MspInit+0xc4>)
 80020d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020d4:	4a1c      	ldr	r2, [pc, #112]	@ (8002148 <HAL_UART_MspInit+0xc4>)
 80020d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020da:	6613      	str	r3, [r2, #96]	@ 0x60
 80020dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002148 <HAL_UART_MspInit+0xc4>)
 80020de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e8:	4b17      	ldr	r3, [pc, #92]	@ (8002148 <HAL_UART_MspInit+0xc4>)
 80020ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ec:	4a16      	ldr	r2, [pc, #88]	@ (8002148 <HAL_UART_MspInit+0xc4>)
 80020ee:	f043 0302 	orr.w	r3, r3, #2
 80020f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020f4:	4b14      	ldr	r3, [pc, #80]	@ (8002148 <HAL_UART_MspInit+0xc4>)
 80020f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	60bb      	str	r3, [r7, #8]
 80020fe:	68bb      	ldr	r3, [r7, #8]
=======
 800211c:	4b1d      	ldr	r3, [pc, #116]	@ (8002194 <HAL_UART_MspInit+0xc4>)
 800211e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002120:	4a1c      	ldr	r2, [pc, #112]	@ (8002194 <HAL_UART_MspInit+0xc4>)
 8002122:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002126:	6613      	str	r3, [r2, #96]	@ 0x60
 8002128:	4b1a      	ldr	r3, [pc, #104]	@ (8002194 <HAL_UART_MspInit+0xc4>)
 800212a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800212c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002134:	4b17      	ldr	r3, [pc, #92]	@ (8002194 <HAL_UART_MspInit+0xc4>)
 8002136:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002138:	4a16      	ldr	r2, [pc, #88]	@ (8002194 <HAL_UART_MspInit+0xc4>)
 800213a:	f043 0302 	orr.w	r3, r3, #2
 800213e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002140:	4b14      	ldr	r3, [pc, #80]	@ (8002194 <HAL_UART_MspInit+0xc4>)
 8002142:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	60bb      	str	r3, [r7, #8]
 800214a:	68bb      	ldr	r3, [r7, #8]
>>>>>>> Stashed changes
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
<<<<<<< Updated upstream
 8002100:	23c0      	movs	r3, #192	@ 0xc0
 8002102:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002106:	2302      	movs	r3, #2
 8002108:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210c:	2300      	movs	r3, #0
 800210e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002112:	2303      	movs	r3, #3
 8002114:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002118:	2307      	movs	r3, #7
 800211a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800211e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002122:	4619      	mov	r1, r3
 8002124:	4809      	ldr	r0, [pc, #36]	@ (800214c <HAL_UART_MspInit+0xc8>)
 8002126:	f000 ff37 	bl	8002f98 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800212a:	2200      	movs	r2, #0
 800212c:	2101      	movs	r1, #1
 800212e:	2025      	movs	r0, #37	@ 0x25
 8002130:	f000 fbed 	bl	800290e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002134:	2025      	movs	r0, #37	@ 0x25
 8002136:	f000 fc06 	bl	8002946 <HAL_NVIC_EnableIRQ>
=======
 800214c:	23c0      	movs	r3, #192	@ 0xc0
 800214e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002152:	2302      	movs	r3, #2
 8002154:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002158:	2300      	movs	r3, #0
 800215a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800215e:	2303      	movs	r3, #3
 8002160:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002164:	2307      	movs	r3, #7
 8002166:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800216a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800216e:	4619      	mov	r1, r3
 8002170:	4809      	ldr	r0, [pc, #36]	@ (8002198 <HAL_UART_MspInit+0xc8>)
 8002172:	f000 ff37 	bl	8002fe4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8002176:	2200      	movs	r2, #0
 8002178:	2101      	movs	r1, #1
 800217a:	2025      	movs	r0, #37	@ 0x25
 800217c:	f000 fbed 	bl	800295a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002180:	2025      	movs	r0, #37	@ 0x25
 8002182:	f000 fc06 	bl	8002992 <HAL_NVIC_EnableIRQ>
>>>>>>> Stashed changes

  /* USER CODE END USART1_MspInit 1 */

  }

}
<<<<<<< Updated upstream
 800213a:	bf00      	nop
 800213c:	37b8      	adds	r7, #184	@ 0xb8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40013800 	.word	0x40013800
 8002148:	40021000 	.word	0x40021000
 800214c:	48000400 	.word	0x48000400

08002150 <NMI_Handler>:
=======
 8002186:	bf00      	nop
 8002188:	37b8      	adds	r7, #184	@ 0xb8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40013800 	.word	0x40013800
 8002194:	40021000 	.word	0x40021000
 8002198:	48000400 	.word	0x48000400

0800219c <NMI_Handler>:
>>>>>>> Stashed changes
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< Updated upstream
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
=======
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
<<<<<<< Updated upstream
 8002154:	bf00      	nop
 8002156:	e7fd      	b.n	8002154 <NMI_Handler+0x4>

08002158 <HardFault_Handler>:
=======
 80021a0:	bf00      	nop
 80021a2:	e7fd      	b.n	80021a0 <NMI_Handler+0x4>

080021a4 <HardFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< Updated upstream
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
=======
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 800215c:	bf00      	nop
 800215e:	e7fd      	b.n	800215c <HardFault_Handler+0x4>

08002160 <MemManage_Handler>:
=======
 80021a8:	bf00      	nop
 80021aa:	e7fd      	b.n	80021a8 <HardFault_Handler+0x4>

080021ac <MemManage_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< Updated upstream
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
=======
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 8002164:	bf00      	nop
 8002166:	e7fd      	b.n	8002164 <MemManage_Handler+0x4>

08002168 <BusFault_Handler>:
=======
 80021b0:	bf00      	nop
 80021b2:	e7fd      	b.n	80021b0 <MemManage_Handler+0x4>

080021b4 <BusFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< Updated upstream
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
=======
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 800216c:	bf00      	nop
 800216e:	e7fd      	b.n	800216c <BusFault_Handler+0x4>

08002170 <UsageFault_Handler>:
=======
 80021b8:	bf00      	nop
 80021ba:	e7fd      	b.n	80021b8 <BusFault_Handler+0x4>

080021bc <UsageFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< Updated upstream
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
=======
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 8002174:	bf00      	nop
 8002176:	e7fd      	b.n	8002174 <UsageFault_Handler+0x4>

08002178 <SVC_Handler>:
=======
 80021c0:	bf00      	nop
 80021c2:	e7fd      	b.n	80021c0 <UsageFault_Handler+0x4>

080021c4 <SVC_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< Updated upstream
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
=======
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< Updated upstream
 800217c:	bf00      	nop
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <DebugMon_Handler>:
=======
 80021c8:	bf00      	nop
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr

080021d2 <DebugMon_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< Updated upstream
 8002186:	b480      	push	{r7}
 8002188:	af00      	add	r7, sp, #0
=======
 80021d2:	b480      	push	{r7}
 80021d4:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< Updated upstream
 800218a:	bf00      	nop
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <PendSV_Handler>:
=======
 80021d6:	bf00      	nop
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <PendSV_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< Updated upstream
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
=======
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< Updated upstream
 8002198:	bf00      	nop
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <SysTick_Handler>:
=======
 80021e4:	bf00      	nop
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <SysTick_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< Updated upstream
 80021a2:	b580      	push	{r7, lr}
 80021a4:	af00      	add	r7, sp, #0
=======
 80021ee:	b580      	push	{r7, lr}
 80021f0:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< Updated upstream
 80021a6:	f000 fa93 	bl	80026d0 <HAL_IncTick>
=======
 80021f2:	f000 fa93 	bl	800271c <HAL_IncTick>
>>>>>>> Stashed changes
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< Updated upstream
 80021aa:	bf00      	nop
 80021ac:	bd80      	pop	{r7, pc}
	...

080021b0 <TIM2_IRQHandler>:
=======
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
	...

080021fc <TIM2_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
<<<<<<< Updated upstream
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
=======
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
<<<<<<< Updated upstream
 80021b4:	4802      	ldr	r0, [pc, #8]	@ (80021c0 <TIM2_IRQHandler+0x10>)
 80021b6:	f003 fd88 	bl	8005cca <HAL_TIM_IRQHandler>
=======
 8002200:	4802      	ldr	r0, [pc, #8]	@ (800220c <TIM2_IRQHandler+0x10>)
 8002202:	f003 fd88 	bl	8005d16 <HAL_TIM_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
<<<<<<< Updated upstream
 80021ba:	bf00      	nop
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	2000064c 	.word	0x2000064c

080021c4 <USART1_IRQHandler>:
=======
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	2000064c 	.word	0x2000064c

08002210 <USART1_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
<<<<<<< Updated upstream
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
=======
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
<<<<<<< Updated upstream
 80021c8:	4802      	ldr	r0, [pc, #8]	@ (80021d4 <USART1_IRQHandler+0x10>)
 80021ca:	f004 fa87 	bl	80066dc <HAL_UART_IRQHandler>
=======
 8002214:	4802      	ldr	r0, [pc, #8]	@ (8002220 <USART1_IRQHandler+0x10>)
 8002216:	f004 fa87 	bl	8006728 <HAL_UART_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
<<<<<<< Updated upstream
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	20000698 	.word	0x20000698

080021d8 <EXTI15_10_IRQHandler>:
=======
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	20000698 	.word	0x20000698

08002224 <EXTI15_10_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
<<<<<<< Updated upstream
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
=======
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(myButton_Pin);
<<<<<<< Updated upstream
 80021dc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80021e0:	f001 f95e 	bl	80034a0 <HAL_GPIO_EXTI_IRQHandler>
=======
 8002228:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800222c:	f001 f95e 	bl	80034ec <HAL_GPIO_EXTI_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
<<<<<<< Updated upstream
 80021e4:	bf00      	nop
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <TIM6_DAC_IRQHandler>:
=======
 8002230:	bf00      	nop
 8002232:	bd80      	pop	{r7, pc}

08002234 <TIM6_DAC_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
<<<<<<< Updated upstream
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
=======
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
<<<<<<< Updated upstream
 80021ec:	4802      	ldr	r0, [pc, #8]	@ (80021f8 <TIM6_DAC_IRQHandler+0x10>)
 80021ee:	f000 fc38 	bl	8002a62 <HAL_DAC_IRQHandler>
=======
 8002238:	4802      	ldr	r0, [pc, #8]	@ (8002244 <TIM6_DAC_IRQHandler+0x10>)
 800223a:	f000 fc38 	bl	8002aae <HAL_DAC_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
<<<<<<< Updated upstream
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	200005e4 	.word	0x200005e4

080021fc <_getpid>:
=======
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	200005e4 	.word	0x200005e4

08002248 <_getpid>:
>>>>>>> Stashed changes
void initialise_monitor_handles()
{
}

int _getpid(void)
{
<<<<<<< Updated upstream
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  return 1;
 8002200:	2301      	movs	r3, #1
}
 8002202:	4618      	mov	r0, r3
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <_kill>:

int _kill(int pid, int sig)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002216:	f008 f94b 	bl	800a4b0 <__errno>
 800221a:	4603      	mov	r3, r0
 800221c:	2216      	movs	r2, #22
 800221e:	601a      	str	r2, [r3, #0]
  return -1;
 8002220:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002224:	4618      	mov	r0, r3
 8002226:	3708      	adds	r7, #8
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <_exit>:

void _exit (int status)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002234:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7ff ffe7 	bl	800220c <_kill>
  while (1) {}    /* Make sure we hang here */
 800223e:	bf00      	nop
 8002240:	e7fd      	b.n	800223e <_exit+0x12>

08002242 <_read>:
=======
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  return 1;
 800224c:	2301      	movs	r3, #1
}
 800224e:	4618      	mov	r0, r3
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <_kill>:

int _kill(int pid, int sig)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002262:	f008 f949 	bl	800a4f8 <__errno>
 8002266:	4603      	mov	r3, r0
 8002268:	2216      	movs	r2, #22
 800226a:	601a      	str	r2, [r3, #0]
  return -1;
 800226c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002270:	4618      	mov	r0, r3
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <_exit>:

void _exit (int status)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002280:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f7ff ffe7 	bl	8002258 <_kill>
  while (1) {}    /* Make sure we hang here */
 800228a:	bf00      	nop
 800228c:	e7fd      	b.n	800228a <_exit+0x12>

0800228e <_read>:
>>>>>>> Stashed changes
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
<<<<<<< Updated upstream
 8002242:	b580      	push	{r7, lr}
 8002244:	b086      	sub	sp, #24
 8002246:	af00      	add	r7, sp, #0
 8002248:	60f8      	str	r0, [r7, #12]
 800224a:	60b9      	str	r1, [r7, #8]
 800224c:	607a      	str	r2, [r7, #4]
=======
 800228e:	b580      	push	{r7, lr}
 8002290:	b086      	sub	sp, #24
 8002292:	af00      	add	r7, sp, #0
 8002294:	60f8      	str	r0, [r7, #12]
 8002296:	60b9      	str	r1, [r7, #8]
 8002298:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
<<<<<<< Updated upstream
 800224e:	2300      	movs	r3, #0
 8002250:	617b      	str	r3, [r7, #20]
 8002252:	e00a      	b.n	800226a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002254:	f3af 8000 	nop.w
 8002258:	4601      	mov	r1, r0
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	1c5a      	adds	r2, r3, #1
 800225e:	60ba      	str	r2, [r7, #8]
 8002260:	b2ca      	uxtb	r2, r1
 8002262:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	3301      	adds	r3, #1
 8002268:	617b      	str	r3, [r7, #20]
 800226a:	697a      	ldr	r2, [r7, #20]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	429a      	cmp	r2, r3
 8002270:	dbf0      	blt.n	8002254 <_read+0x12>
  }

  return len;
 8002272:	687b      	ldr	r3, [r7, #4]
}
 8002274:	4618      	mov	r0, r3
 8002276:	3718      	adds	r7, #24
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
=======
 800229a:	2300      	movs	r3, #0
 800229c:	617b      	str	r3, [r7, #20]
 800229e:	e00a      	b.n	80022b6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022a0:	f3af 8000 	nop.w
 80022a4:	4601      	mov	r1, r0
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	1c5a      	adds	r2, r3, #1
 80022aa:	60ba      	str	r2, [r7, #8]
 80022ac:	b2ca      	uxtb	r2, r1
 80022ae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	3301      	adds	r3, #1
 80022b4:	617b      	str	r3, [r7, #20]
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	dbf0      	blt.n	80022a0 <_read+0x12>
  }

  return len;
 80022be:	687b      	ldr	r3, [r7, #4]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3718      	adds	r7, #24
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
<<<<<<< Updated upstream
 8002288:	2300      	movs	r3, #0
 800228a:	617b      	str	r3, [r7, #20]
 800228c:	e009      	b.n	80022a2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	1c5a      	adds	r2, r3, #1
 8002292:	60ba      	str	r2, [r7, #8]
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	3301      	adds	r3, #1
 80022a0:	617b      	str	r3, [r7, #20]
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	dbf1      	blt.n	800228e <_write+0x12>
  }
  return len;
 80022aa:	687b      	ldr	r3, [r7, #4]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3718      	adds	r7, #24
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <_close>:

int _close(int file)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <_fstat>:
=======
 80022d4:	2300      	movs	r3, #0
 80022d6:	617b      	str	r3, [r7, #20]
 80022d8:	e009      	b.n	80022ee <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	1c5a      	adds	r2, r3, #1
 80022de:	60ba      	str	r2, [r7, #8]
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	3301      	adds	r3, #1
 80022ec:	617b      	str	r3, [r7, #20]
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	dbf1      	blt.n	80022da <_write+0x12>
  }
  return len;
 80022f6:	687b      	ldr	r3, [r7, #4]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3718      	adds	r7, #24
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <_close>:

int _close(int file)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002308:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800230c:	4618      	mov	r0, r3
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <_fstat>:
>>>>>>> Stashed changes


int _fstat(int file, struct stat *st)
{
<<<<<<< Updated upstream
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022dc:	605a      	str	r2, [r3, #4]
  return 0;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <_isatty>:

int _isatty(int file)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022f4:	2301      	movs	r3, #1
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002302:	b480      	push	{r7}
 8002304:	b085      	sub	sp, #20
 8002306:	af00      	add	r7, sp, #0
 8002308:	60f8      	str	r0, [r7, #12]
 800230a:	60b9      	str	r1, [r7, #8]
 800230c:	607a      	str	r2, [r7, #4]
=======
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002328:	605a      	str	r2, [r3, #4]
  return 0;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <_isatty>:

int _isatty(int file)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002340:	2301      	movs	r3, #1
}
 8002342:	4618      	mov	r0, r3
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800234e:	b480      	push	{r7}
 8002350:	b085      	sub	sp, #20
 8002352:	af00      	add	r7, sp, #0
 8002354:	60f8      	str	r0, [r7, #12]
 8002356:	60b9      	str	r1, [r7, #8]
 8002358:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
<<<<<<< Updated upstream
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <_sbrk>:
=======
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	3714      	adds	r7, #20
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <_sbrk>:
>>>>>>> Stashed changes
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
<<<<<<< Updated upstream
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
=======
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
<<<<<<< Updated upstream
 8002324:	4a14      	ldr	r2, [pc, #80]	@ (8002378 <_sbrk+0x5c>)
 8002326:	4b15      	ldr	r3, [pc, #84]	@ (800237c <_sbrk+0x60>)
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	613b      	str	r3, [r7, #16]
=======
 8002370:	4a14      	ldr	r2, [pc, #80]	@ (80023c4 <_sbrk+0x5c>)
 8002372:	4b15      	ldr	r3, [pc, #84]	@ (80023c8 <_sbrk+0x60>)
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
<<<<<<< Updated upstream
 8002330:	4b13      	ldr	r3, [pc, #76]	@ (8002380 <_sbrk+0x64>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d102      	bne.n	800233e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002338:	4b11      	ldr	r3, [pc, #68]	@ (8002380 <_sbrk+0x64>)
 800233a:	4a12      	ldr	r2, [pc, #72]	@ (8002384 <_sbrk+0x68>)
 800233c:	601a      	str	r2, [r3, #0]
=======
 800237c:	4b13      	ldr	r3, [pc, #76]	@ (80023cc <_sbrk+0x64>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d102      	bne.n	800238a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002384:	4b11      	ldr	r3, [pc, #68]	@ (80023cc <_sbrk+0x64>)
 8002386:	4a12      	ldr	r2, [pc, #72]	@ (80023d0 <_sbrk+0x68>)
 8002388:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
<<<<<<< Updated upstream
 800233e:	4b10      	ldr	r3, [pc, #64]	@ (8002380 <_sbrk+0x64>)
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4413      	add	r3, r2
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	429a      	cmp	r2, r3
 800234a:	d207      	bcs.n	800235c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800234c:	f008 f8b0 	bl	800a4b0 <__errno>
 8002350:	4603      	mov	r3, r0
 8002352:	220c      	movs	r2, #12
 8002354:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002356:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800235a:	e009      	b.n	8002370 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800235c:	4b08      	ldr	r3, [pc, #32]	@ (8002380 <_sbrk+0x64>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002362:	4b07      	ldr	r3, [pc, #28]	@ (8002380 <_sbrk+0x64>)
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4413      	add	r3, r2
 800236a:	4a05      	ldr	r2, [pc, #20]	@ (8002380 <_sbrk+0x64>)
 800236c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800236e:	68fb      	ldr	r3, [r7, #12]
}
 8002370:	4618      	mov	r0, r3
 8002372:	3718      	adds	r7, #24
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	200a0000 	.word	0x200a0000
 800237c:	00000400 	.word	0x00000400
 8002380:	20000784 	.word	0x20000784
 8002384:	200008d8 	.word	0x200008d8

08002388 <SystemInit>:
=======
 800238a:	4b10      	ldr	r3, [pc, #64]	@ (80023cc <_sbrk+0x64>)
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4413      	add	r3, r2
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	429a      	cmp	r2, r3
 8002396:	d207      	bcs.n	80023a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002398:	f008 f8ae 	bl	800a4f8 <__errno>
 800239c:	4603      	mov	r3, r0
 800239e:	220c      	movs	r2, #12
 80023a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80023a6:	e009      	b.n	80023bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023a8:	4b08      	ldr	r3, [pc, #32]	@ (80023cc <_sbrk+0x64>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ae:	4b07      	ldr	r3, [pc, #28]	@ (80023cc <_sbrk+0x64>)
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4413      	add	r3, r2
 80023b6:	4a05      	ldr	r2, [pc, #20]	@ (80023cc <_sbrk+0x64>)
 80023b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023ba:	68fb      	ldr	r3, [r7, #12]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3718      	adds	r7, #24
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	200a0000 	.word	0x200a0000
 80023c8:	00000400 	.word	0x00000400
 80023cc:	20000788 	.word	0x20000788
 80023d0:	200008e0 	.word	0x200008e0

080023d4 <SystemInit>:
>>>>>>> Stashed changes
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
<<<<<<< Updated upstream
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
=======
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
<<<<<<< Updated upstream
 800238c:	4b06      	ldr	r3, [pc, #24]	@ (80023a8 <SystemInit+0x20>)
 800238e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002392:	4a05      	ldr	r2, [pc, #20]	@ (80023a8 <SystemInit+0x20>)
 8002394:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002398:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800239c:	bf00      	nop
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	e000ed00 	.word	0xe000ed00

080023ac <Reset_Handler>:
 80023ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80023e4 <LoopForever+0x2>
 80023b0:	f7ff ffea 	bl	8002388 <SystemInit>
 80023b4:	480c      	ldr	r0, [pc, #48]	@ (80023e8 <LoopForever+0x6>)
 80023b6:	490d      	ldr	r1, [pc, #52]	@ (80023ec <LoopForever+0xa>)
 80023b8:	4a0d      	ldr	r2, [pc, #52]	@ (80023f0 <LoopForever+0xe>)
 80023ba:	2300      	movs	r3, #0
 80023bc:	e002      	b.n	80023c4 <LoopCopyDataInit>

080023be <CopyDataInit>:
 80023be:	58d4      	ldr	r4, [r2, r3]
 80023c0:	50c4      	str	r4, [r0, r3]
 80023c2:	3304      	adds	r3, #4

080023c4 <LoopCopyDataInit>:
 80023c4:	18c4      	adds	r4, r0, r3
 80023c6:	428c      	cmp	r4, r1
 80023c8:	d3f9      	bcc.n	80023be <CopyDataInit>
 80023ca:	4a0a      	ldr	r2, [pc, #40]	@ (80023f4 <LoopForever+0x12>)
 80023cc:	4c0a      	ldr	r4, [pc, #40]	@ (80023f8 <LoopForever+0x16>)
 80023ce:	2300      	movs	r3, #0
 80023d0:	e001      	b.n	80023d6 <LoopFillZerobss>

080023d2 <FillZerobss>:
 80023d2:	6013      	str	r3, [r2, #0]
 80023d4:	3204      	adds	r2, #4

080023d6 <LoopFillZerobss>:
 80023d6:	42a2      	cmp	r2, r4
 80023d8:	d3fb      	bcc.n	80023d2 <FillZerobss>
 80023da:	f008 f86f 	bl	800a4bc <__libc_init_array>
 80023de:	f7fe ffff 	bl	80013e0 <main>

080023e2 <LoopForever>:
 80023e2:	e7fe      	b.n	80023e2 <LoopForever>
 80023e4:	200a0000 	.word	0x200a0000
 80023e8:	20000000 	.word	0x20000000
 80023ec:	20000214 	.word	0x20000214
 80023f0:	0800e09c 	.word	0x0800e09c
 80023f4:	20000214 	.word	0x20000214
 80023f8:	200008d8 	.word	0x200008d8

080023fc <ADC1_IRQHandler>:
 80023fc:	e7fe      	b.n	80023fc <ADC1_IRQHandler>

080023fe <LSM6DSL_AccInit>:
=======
 80023d8:	4b06      	ldr	r3, [pc, #24]	@ (80023f4 <SystemInit+0x20>)
 80023da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023de:	4a05      	ldr	r2, [pc, #20]	@ (80023f4 <SystemInit+0x20>)
 80023e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80023e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80023e8:	bf00      	nop
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	e000ed00 	.word	0xe000ed00

080023f8 <Reset_Handler>:
 80023f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002430 <LoopForever+0x2>
 80023fc:	f7ff ffea 	bl	80023d4 <SystemInit>
 8002400:	480c      	ldr	r0, [pc, #48]	@ (8002434 <LoopForever+0x6>)
 8002402:	490d      	ldr	r1, [pc, #52]	@ (8002438 <LoopForever+0xa>)
 8002404:	4a0d      	ldr	r2, [pc, #52]	@ (800243c <LoopForever+0xe>)
 8002406:	2300      	movs	r3, #0
 8002408:	e002      	b.n	8002410 <LoopCopyDataInit>

0800240a <CopyDataInit>:
 800240a:	58d4      	ldr	r4, [r2, r3]
 800240c:	50c4      	str	r4, [r0, r3]
 800240e:	3304      	adds	r3, #4

08002410 <LoopCopyDataInit>:
 8002410:	18c4      	adds	r4, r0, r3
 8002412:	428c      	cmp	r4, r1
 8002414:	d3f9      	bcc.n	800240a <CopyDataInit>
 8002416:	4a0a      	ldr	r2, [pc, #40]	@ (8002440 <LoopForever+0x12>)
 8002418:	4c0a      	ldr	r4, [pc, #40]	@ (8002444 <LoopForever+0x16>)
 800241a:	2300      	movs	r3, #0
 800241c:	e001      	b.n	8002422 <LoopFillZerobss>

0800241e <FillZerobss>:
 800241e:	6013      	str	r3, [r2, #0]
 8002420:	3204      	adds	r2, #4

08002422 <LoopFillZerobss>:
 8002422:	42a2      	cmp	r2, r4
 8002424:	d3fb      	bcc.n	800241e <FillZerobss>
 8002426:	f008 f86d 	bl	800a504 <__libc_init_array>
 800242a:	f7fe ffeb 	bl	8001404 <main>

0800242e <LoopForever>:
 800242e:	e7fe      	b.n	800242e <LoopForever>
 8002430:	200a0000 	.word	0x200a0000
 8002434:	20000000 	.word	0x20000000
 8002438:	20000214 	.word	0x20000214
 800243c:	0800e0ec 	.word	0x0800e0ec
 8002440:	20000214 	.word	0x20000214
 8002444:	200008dc 	.word	0x200008dc

08002448 <ADC1_IRQHandler>:
 8002448:	e7fe      	b.n	8002448 <ADC1_IRQHandler>

0800244a <LSM6DSL_AccInit>:
>>>>>>> Stashed changes
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
<<<<<<< Updated upstream
 80023fe:	b580      	push	{r7, lr}
 8002400:	b084      	sub	sp, #16
 8002402:	af00      	add	r7, sp, #0
 8002404:	4603      	mov	r3, r0
 8002406:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002408:	2300      	movs	r3, #0
 800240a:	73fb      	strb	r3, [r7, #15]
=======
 800244a:	b580      	push	{r7, lr}
 800244c:	b084      	sub	sp, #16
 800244e:	af00      	add	r7, sp, #0
 8002450:	4603      	mov	r3, r0
 8002452:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002454:	2300      	movs	r3, #0
 8002456:	73fb      	strb	r3, [r7, #15]
>>>>>>> Stashed changes
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
<<<<<<< Updated upstream
 800240c:	2110      	movs	r1, #16
 800240e:	20d4      	movs	r0, #212	@ 0xd4
 8002410:	f7ff fc96 	bl	8001d40 <SENSOR_IO_Read>
 8002414:	4603      	mov	r3, r0
 8002416:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8002418:	88fb      	ldrh	r3, [r7, #6]
 800241a:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 800241c:	7bbb      	ldrb	r3, [r7, #14]
 800241e:	f003 0303 	and.w	r3, r3, #3
 8002422:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8002424:	7bba      	ldrb	r2, [r7, #14]
 8002426:	7bfb      	ldrb	r3, [r7, #15]
 8002428:	4313      	orrs	r3, r2
 800242a:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 800242c:	7bbb      	ldrb	r3, [r7, #14]
 800242e:	461a      	mov	r2, r3
 8002430:	2110      	movs	r1, #16
 8002432:	20d4      	movs	r0, #212	@ 0xd4
 8002434:	f7ff fc6a 	bl	8001d0c <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8002438:	2112      	movs	r1, #18
 800243a:	20d4      	movs	r0, #212	@ 0xd4
 800243c:	f7ff fc80 	bl	8001d40 <SENSOR_IO_Read>
 8002440:	4603      	mov	r3, r0
 8002442:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8002444:	88fb      	ldrh	r3, [r7, #6]
 8002446:	0a1b      	lsrs	r3, r3, #8
 8002448:	b29b      	uxth	r3, r3
 800244a:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800244c:	7bbb      	ldrb	r3, [r7, #14]
 800244e:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 8002452:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8002454:	7bba      	ldrb	r2, [r7, #14]
 8002456:	7bfb      	ldrb	r3, [r7, #15]
 8002458:	4313      	orrs	r3, r2
 800245a:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800245c:	7bbb      	ldrb	r3, [r7, #14]
 800245e:	461a      	mov	r2, r3
 8002460:	2112      	movs	r1, #18
 8002462:	20d4      	movs	r0, #212	@ 0xd4
 8002464:	f7ff fc52 	bl	8001d0c <SENSOR_IO_Write>
}
 8002468:	bf00      	nop
 800246a:	3710      	adds	r7, #16
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <LSM6DSL_AccDeInit>:
=======
 8002458:	2110      	movs	r1, #16
 800245a:	20d4      	movs	r0, #212	@ 0xd4
 800245c:	f7ff fc96 	bl	8001d8c <SENSOR_IO_Read>
 8002460:	4603      	mov	r3, r0
 8002462:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8002464:	88fb      	ldrh	r3, [r7, #6]
 8002466:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8002468:	7bbb      	ldrb	r3, [r7, #14]
 800246a:	f003 0303 	and.w	r3, r3, #3
 800246e:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8002470:	7bba      	ldrb	r2, [r7, #14]
 8002472:	7bfb      	ldrb	r3, [r7, #15]
 8002474:	4313      	orrs	r3, r2
 8002476:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8002478:	7bbb      	ldrb	r3, [r7, #14]
 800247a:	461a      	mov	r2, r3
 800247c:	2110      	movs	r1, #16
 800247e:	20d4      	movs	r0, #212	@ 0xd4
 8002480:	f7ff fc6a 	bl	8001d58 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8002484:	2112      	movs	r1, #18
 8002486:	20d4      	movs	r0, #212	@ 0xd4
 8002488:	f7ff fc80 	bl	8001d8c <SENSOR_IO_Read>
 800248c:	4603      	mov	r3, r0
 800248e:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8002490:	88fb      	ldrh	r3, [r7, #6]
 8002492:	0a1b      	lsrs	r3, r3, #8
 8002494:	b29b      	uxth	r3, r3
 8002496:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8002498:	7bbb      	ldrb	r3, [r7, #14]
 800249a:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 800249e:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 80024a0:	7bba      	ldrb	r2, [r7, #14]
 80024a2:	7bfb      	ldrb	r3, [r7, #15]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80024a8:	7bbb      	ldrb	r3, [r7, #14]
 80024aa:	461a      	mov	r2, r3
 80024ac:	2112      	movs	r1, #18
 80024ae:	20d4      	movs	r0, #212	@ 0xd4
 80024b0:	f7ff fc52 	bl	8001d58 <SENSOR_IO_Write>
}
 80024b4:	bf00      	nop
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <LSM6DSL_AccDeInit>:
>>>>>>> Stashed changes

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
<<<<<<< Updated upstream
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8002476:	2300      	movs	r3, #0
 8002478:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800247a:	2110      	movs	r1, #16
 800247c:	20d4      	movs	r0, #212	@ 0xd4
 800247e:	f7ff fc5f 	bl	8001d40 <SENSOR_IO_Read>
 8002482:	4603      	mov	r3, r0
 8002484:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8002486:	79fb      	ldrb	r3, [r7, #7]
 8002488:	f003 030f 	and.w	r3, r3, #15
 800248c:	71fb      	strb	r3, [r7, #7]
=======
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80024c2:	2300      	movs	r3, #0
 80024c4:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80024c6:	2110      	movs	r1, #16
 80024c8:	20d4      	movs	r0, #212	@ 0xd4
 80024ca:	f7ff fc5f 	bl	8001d8c <SENSOR_IO_Read>
 80024ce:	4603      	mov	r3, r0
 80024d0:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 80024d2:	79fb      	ldrb	r3, [r7, #7]
 80024d4:	f003 030f 	and.w	r3, r3, #15
 80024d8:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
<<<<<<< Updated upstream
 800248e:	79fb      	ldrb	r3, [r7, #7]
 8002490:	461a      	mov	r2, r3
 8002492:	2110      	movs	r1, #16
 8002494:	20d4      	movs	r0, #212	@ 0xd4
 8002496:	f7ff fc39 	bl	8001d0c <SENSOR_IO_Write>
}
 800249a:	bf00      	nop
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <LSM6DSL_AccReadID>:
=======
 80024da:	79fb      	ldrb	r3, [r7, #7]
 80024dc:	461a      	mov	r2, r3
 80024de:	2110      	movs	r1, #16
 80024e0:	20d4      	movs	r0, #212	@ 0xd4
 80024e2:	f7ff fc39 	bl	8001d58 <SENSOR_IO_Write>
}
 80024e6:	bf00      	nop
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <LSM6DSL_AccReadID>:
>>>>>>> Stashed changes
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
<<<<<<< Updated upstream
 80024a2:	b580      	push	{r7, lr}
 80024a4:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 80024a6:	f7ff fc27 	bl	8001cf8 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 80024aa:	210f      	movs	r1, #15
 80024ac:	20d4      	movs	r0, #212	@ 0xd4
 80024ae:	f7ff fc47 	bl	8001d40 <SENSOR_IO_Read>
 80024b2:	4603      	mov	r3, r0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <LSM6DSL_AccLowPower>:
=======
 80024ee:	b580      	push	{r7, lr}
 80024f0:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 80024f2:	f7ff fc27 	bl	8001d44 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 80024f6:	210f      	movs	r1, #15
 80024f8:	20d4      	movs	r0, #212	@ 0xd4
 80024fa:	f7ff fc47 	bl	8001d8c <SENSOR_IO_Read>
 80024fe:	4603      	mov	r3, r0
}
 8002500:	4618      	mov	r0, r3
 8002502:	bd80      	pop	{r7, pc}

08002504 <LSM6DSL_AccLowPower>:
>>>>>>> Stashed changes
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
<<<<<<< Updated upstream
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	4603      	mov	r3, r0
 80024c0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80024c2:	2300      	movs	r3, #0
 80024c4:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 80024c6:	2115      	movs	r1, #21
 80024c8:	20d4      	movs	r0, #212	@ 0xd4
 80024ca:	f7ff fc39 	bl	8001d40 <SENSOR_IO_Read>
 80024ce:	4603      	mov	r3, r0
 80024d0:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
 80024d4:	f023 0310 	bic.w	r3, r3, #16
 80024d8:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80024da:	88fb      	ldrh	r3, [r7, #6]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d003      	beq.n	80024e8 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80024e0:	7bfb      	ldrb	r3, [r7, #15]
 80024e2:	f043 0310 	orr.w	r3, r3, #16
 80024e6:	73fb      	strb	r3, [r7, #15]
=======
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	4603      	mov	r3, r0
 800250c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800250e:	2300      	movs	r3, #0
 8002510:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8002512:	2115      	movs	r1, #21
 8002514:	20d4      	movs	r0, #212	@ 0xd4
 8002516:	f7ff fc39 	bl	8001d8c <SENSOR_IO_Read>
 800251a:	4603      	mov	r3, r0
 800251c:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 800251e:	7bfb      	ldrb	r3, [r7, #15]
 8002520:	f023 0310 	bic.w	r3, r3, #16
 8002524:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8002526:	88fb      	ldrh	r3, [r7, #6]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d003      	beq.n	8002534 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 800252c:	7bfb      	ldrb	r3, [r7, #15]
 800252e:	f043 0310 	orr.w	r3, r3, #16
 8002532:	73fb      	strb	r3, [r7, #15]
>>>>>>> Stashed changes
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
<<<<<<< Updated upstream
 80024e8:	7bfb      	ldrb	r3, [r7, #15]
 80024ea:	461a      	mov	r2, r3
 80024ec:	2115      	movs	r1, #21
 80024ee:	20d4      	movs	r0, #212	@ 0xd4
 80024f0:	f7ff fc0c 	bl	8001d0c <SENSOR_IO_Write>
}
 80024f4:	bf00      	nop
 80024f6:	3710      	adds	r7, #16
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <LSM6DSL_AccReadXYZ>:
=======
 8002534:	7bfb      	ldrb	r3, [r7, #15]
 8002536:	461a      	mov	r2, r3
 8002538:	2115      	movs	r1, #21
 800253a:	20d4      	movs	r0, #212	@ 0xd4
 800253c:	f7ff fc0c 	bl	8001d58 <SENSOR_IO_Write>
}
 8002540:	bf00      	nop
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <LSM6DSL_AccReadXYZ>:
>>>>>>> Stashed changes
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
<<<<<<< Updated upstream
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b088      	sub	sp, #32
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8002504:	2300      	movs	r3, #0
 8002506:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002508:	2300      	movs	r3, #0
 800250a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 800250c:	f04f 0300 	mov.w	r3, #0
 8002510:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002512:	2110      	movs	r1, #16
 8002514:	20d4      	movs	r0, #212	@ 0xd4
 8002516:	f7ff fc13 	bl	8001d40 <SENSOR_IO_Read>
 800251a:	4603      	mov	r3, r0
 800251c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 800251e:	f107 0208 	add.w	r2, r7, #8
 8002522:	2306      	movs	r3, #6
 8002524:	2128      	movs	r1, #40	@ 0x28
 8002526:	20d4      	movs	r0, #212	@ 0xd4
 8002528:	f7ff fc28 	bl	8001d7c <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 800252c:	2300      	movs	r3, #0
 800252e:	77fb      	strb	r3, [r7, #31]
 8002530:	e01a      	b.n	8002568 <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002532:	7ffb      	ldrb	r3, [r7, #31]
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	3301      	adds	r3, #1
 8002538:	3320      	adds	r3, #32
 800253a:	443b      	add	r3, r7
 800253c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002540:	021b      	lsls	r3, r3, #8
 8002542:	b29b      	uxth	r3, r3
 8002544:	7ffa      	ldrb	r2, [r7, #31]
 8002546:	0052      	lsls	r2, r2, #1
 8002548:	3220      	adds	r2, #32
 800254a:	443a      	add	r2, r7
 800254c:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8002550:	4413      	add	r3, r2
 8002552:	b29a      	uxth	r2, r3
 8002554:	7ffb      	ldrb	r3, [r7, #31]
 8002556:	b212      	sxth	r2, r2
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	3320      	adds	r3, #32
 800255c:	443b      	add	r3, r7
 800255e:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8002562:	7ffb      	ldrb	r3, [r7, #31]
 8002564:	3301      	adds	r3, #1
 8002566:	77fb      	strb	r3, [r7, #31]
 8002568:	7ffb      	ldrb	r3, [r7, #31]
 800256a:	2b02      	cmp	r3, #2
 800256c:	d9e1      	bls.n	8002532 <LSM6DSL_AccReadXYZ+0x36>
=======
 8002548:	b580      	push	{r7, lr}
 800254a:	b088      	sub	sp, #32
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8002550:	2300      	movs	r3, #0
 8002552:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002554:	2300      	movs	r3, #0
 8002556:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8002558:	f04f 0300 	mov.w	r3, #0
 800255c:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800255e:	2110      	movs	r1, #16
 8002560:	20d4      	movs	r0, #212	@ 0xd4
 8002562:	f7ff fc13 	bl	8001d8c <SENSOR_IO_Read>
 8002566:	4603      	mov	r3, r0
 8002568:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 800256a:	f107 0208 	add.w	r2, r7, #8
 800256e:	2306      	movs	r3, #6
 8002570:	2128      	movs	r1, #40	@ 0x28
 8002572:	20d4      	movs	r0, #212	@ 0xd4
 8002574:	f7ff fc28 	bl	8001dc8 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002578:	2300      	movs	r3, #0
 800257a:	77fb      	strb	r3, [r7, #31]
 800257c:	e01a      	b.n	80025b4 <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800257e:	7ffb      	ldrb	r3, [r7, #31]
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	3301      	adds	r3, #1
 8002584:	3320      	adds	r3, #32
 8002586:	443b      	add	r3, r7
 8002588:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800258c:	021b      	lsls	r3, r3, #8
 800258e:	b29b      	uxth	r3, r3
 8002590:	7ffa      	ldrb	r2, [r7, #31]
 8002592:	0052      	lsls	r2, r2, #1
 8002594:	3220      	adds	r2, #32
 8002596:	443a      	add	r2, r7
 8002598:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 800259c:	4413      	add	r3, r2
 800259e:	b29a      	uxth	r2, r3
 80025a0:	7ffb      	ldrb	r3, [r7, #31]
 80025a2:	b212      	sxth	r2, r2
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	3320      	adds	r3, #32
 80025a8:	443b      	add	r3, r7
 80025aa:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80025ae:	7ffb      	ldrb	r3, [r7, #31]
 80025b0:	3301      	adds	r3, #1
 80025b2:	77fb      	strb	r3, [r7, #31]
 80025b4:	7ffb      	ldrb	r3, [r7, #31]
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d9e1      	bls.n	800257e <LSM6DSL_AccReadXYZ+0x36>
>>>>>>> Stashed changes
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
<<<<<<< Updated upstream
 800256e:	7dfb      	ldrb	r3, [r7, #23]
 8002570:	f003 030c 	and.w	r3, r3, #12
 8002574:	2b0c      	cmp	r3, #12
 8002576:	d829      	bhi.n	80025cc <LSM6DSL_AccReadXYZ+0xd0>
 8002578:	a201      	add	r2, pc, #4	@ (adr r2, 8002580 <LSM6DSL_AccReadXYZ+0x84>)
 800257a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800257e:	bf00      	nop
 8002580:	080025b5 	.word	0x080025b5
 8002584:	080025cd 	.word	0x080025cd
 8002588:	080025cd 	.word	0x080025cd
 800258c:	080025cd 	.word	0x080025cd
 8002590:	080025c7 	.word	0x080025c7
 8002594:	080025cd 	.word	0x080025cd
 8002598:	080025cd 	.word	0x080025cd
 800259c:	080025cd 	.word	0x080025cd
 80025a0:	080025bb 	.word	0x080025bb
 80025a4:	080025cd 	.word	0x080025cd
 80025a8:	080025cd 	.word	0x080025cd
 80025ac:	080025cd 	.word	0x080025cd
 80025b0:	080025c1 	.word	0x080025c1
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 80025b4:	4b18      	ldr	r3, [pc, #96]	@ (8002618 <LSM6DSL_AccReadXYZ+0x11c>)
 80025b6:	61bb      	str	r3, [r7, #24]
    break;
 80025b8:	e008      	b.n	80025cc <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80025ba:	4b18      	ldr	r3, [pc, #96]	@ (800261c <LSM6DSL_AccReadXYZ+0x120>)
 80025bc:	61bb      	str	r3, [r7, #24]
    break;
 80025be:	e005      	b.n	80025cc <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 80025c0:	4b17      	ldr	r3, [pc, #92]	@ (8002620 <LSM6DSL_AccReadXYZ+0x124>)
 80025c2:	61bb      	str	r3, [r7, #24]
    break;
 80025c4:	e002      	b.n	80025cc <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80025c6:	4b17      	ldr	r3, [pc, #92]	@ (8002624 <LSM6DSL_AccReadXYZ+0x128>)
 80025c8:	61bb      	str	r3, [r7, #24]
    break;    
 80025ca:	bf00      	nop
=======
 80025ba:	7dfb      	ldrb	r3, [r7, #23]
 80025bc:	f003 030c 	and.w	r3, r3, #12
 80025c0:	2b0c      	cmp	r3, #12
 80025c2:	d829      	bhi.n	8002618 <LSM6DSL_AccReadXYZ+0xd0>
 80025c4:	a201      	add	r2, pc, #4	@ (adr r2, 80025cc <LSM6DSL_AccReadXYZ+0x84>)
 80025c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ca:	bf00      	nop
 80025cc:	08002601 	.word	0x08002601
 80025d0:	08002619 	.word	0x08002619
 80025d4:	08002619 	.word	0x08002619
 80025d8:	08002619 	.word	0x08002619
 80025dc:	08002613 	.word	0x08002613
 80025e0:	08002619 	.word	0x08002619
 80025e4:	08002619 	.word	0x08002619
 80025e8:	08002619 	.word	0x08002619
 80025ec:	08002607 	.word	0x08002607
 80025f0:	08002619 	.word	0x08002619
 80025f4:	08002619 	.word	0x08002619
 80025f8:	08002619 	.word	0x08002619
 80025fc:	0800260d 	.word	0x0800260d
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8002600:	4b18      	ldr	r3, [pc, #96]	@ (8002664 <LSM6DSL_AccReadXYZ+0x11c>)
 8002602:	61bb      	str	r3, [r7, #24]
    break;
 8002604:	e008      	b.n	8002618 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8002606:	4b18      	ldr	r3, [pc, #96]	@ (8002668 <LSM6DSL_AccReadXYZ+0x120>)
 8002608:	61bb      	str	r3, [r7, #24]
    break;
 800260a:	e005      	b.n	8002618 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 800260c:	4b17      	ldr	r3, [pc, #92]	@ (800266c <LSM6DSL_AccReadXYZ+0x124>)
 800260e:	61bb      	str	r3, [r7, #24]
    break;
 8002610:	e002      	b.n	8002618 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8002612:	4b17      	ldr	r3, [pc, #92]	@ (8002670 <LSM6DSL_AccReadXYZ+0x128>)
 8002614:	61bb      	str	r3, [r7, #24]
    break;    
 8002616:	bf00      	nop
>>>>>>> Stashed changes
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
<<<<<<< Updated upstream
 80025cc:	2300      	movs	r3, #0
 80025ce:	77fb      	strb	r3, [r7, #31]
 80025d0:	e01a      	b.n	8002608 <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80025d2:	7ffb      	ldrb	r3, [r7, #31]
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	3320      	adds	r3, #32
 80025d8:	443b      	add	r3, r7
 80025da:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80025de:	ee07 3a90 	vmov	s15, r3
 80025e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80025ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ee:	7ffb      	ldrb	r3, [r7, #31]
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	4413      	add	r3, r2
 80025f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025fa:	ee17 2a90 	vmov	r2, s15
 80025fe:	b212      	sxth	r2, r2
 8002600:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8002602:	7ffb      	ldrb	r3, [r7, #31]
 8002604:	3301      	adds	r3, #1
 8002606:	77fb      	strb	r3, [r7, #31]
 8002608:	7ffb      	ldrb	r3, [r7, #31]
 800260a:	2b02      	cmp	r3, #2
 800260c:	d9e1      	bls.n	80025d2 <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 800260e:	bf00      	nop
 8002610:	bf00      	nop
 8002612:	3720      	adds	r7, #32
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	3d79db23 	.word	0x3d79db23
 800261c:	3df9db23 	.word	0x3df9db23
 8002620:	3e79db23 	.word	0x3e79db23
 8002624:	3ef9db23 	.word	0x3ef9db23

08002628 <HAL_Init>:
=======
 8002618:	2300      	movs	r3, #0
 800261a:	77fb      	strb	r3, [r7, #31]
 800261c:	e01a      	b.n	8002654 <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 800261e:	7ffb      	ldrb	r3, [r7, #31]
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	3320      	adds	r3, #32
 8002624:	443b      	add	r3, r7
 8002626:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800262a:	ee07 3a90 	vmov	s15, r3
 800262e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002632:	edd7 7a06 	vldr	s15, [r7, #24]
 8002636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800263a:	7ffb      	ldrb	r3, [r7, #31]
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	4413      	add	r3, r2
 8002642:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002646:	ee17 2a90 	vmov	r2, s15
 800264a:	b212      	sxth	r2, r2
 800264c:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800264e:	7ffb      	ldrb	r3, [r7, #31]
 8002650:	3301      	adds	r3, #1
 8002652:	77fb      	strb	r3, [r7, #31]
 8002654:	7ffb      	ldrb	r3, [r7, #31]
 8002656:	2b02      	cmp	r3, #2
 8002658:	d9e1      	bls.n	800261e <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 800265a:	bf00      	nop
 800265c:	bf00      	nop
 800265e:	3720      	adds	r7, #32
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	3d79db23 	.word	0x3d79db23
 8002668:	3df9db23 	.word	0x3df9db23
 800266c:	3e79db23 	.word	0x3e79db23
 8002670:	3ef9db23 	.word	0x3ef9db23

08002674 <HAL_Init>:
>>>>>>> Stashed changes
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< Updated upstream
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800262e:	2300      	movs	r3, #0
 8002630:	71fb      	strb	r3, [r7, #7]
=======
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800267a:	2300      	movs	r3, #0
 800267c:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< Updated upstream
 8002632:	2003      	movs	r0, #3
 8002634:	f000 f960 	bl	80028f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002638:	2000      	movs	r0, #0
 800263a:	f000 f80d 	bl	8002658 <HAL_InitTick>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d002      	beq.n	800264a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	71fb      	strb	r3, [r7, #7]
 8002648:	e001      	b.n	800264e <HAL_Init+0x26>
=======
 800267e:	2003      	movs	r0, #3
 8002680:	f000 f960 	bl	8002944 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002684:	2000      	movs	r0, #0
 8002686:	f000 f80d 	bl	80026a4 <HAL_InitTick>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d002      	beq.n	8002696 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	71fb      	strb	r3, [r7, #7]
 8002694:	e001      	b.n	800269a <HAL_Init+0x26>
>>>>>>> Stashed changes
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
<<<<<<< Updated upstream
 800264a:	f7ff fc0b 	bl	8001e64 <HAL_MspInit>
=======
 8002696:	f7ff fc0b 	bl	8001eb0 <HAL_MspInit>
>>>>>>> Stashed changes
  }

  /* Return function status */
  return status;
<<<<<<< Updated upstream
 800264e:	79fb      	ldrb	r3, [r7, #7]
}
 8002650:	4618      	mov	r0, r3
 8002652:	3708      	adds	r7, #8
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <HAL_InitTick>:
=======
 800269a:	79fb      	ldrb	r3, [r7, #7]
}
 800269c:	4618      	mov	r0, r3
 800269e:	3708      	adds	r7, #8
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <HAL_InitTick>:
>>>>>>> Stashed changes
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< Updated upstream
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002660:	2300      	movs	r3, #0
 8002662:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002664:	4b17      	ldr	r3, [pc, #92]	@ (80026c4 <HAL_InitTick+0x6c>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d023      	beq.n	80026b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800266c:	4b16      	ldr	r3, [pc, #88]	@ (80026c8 <HAL_InitTick+0x70>)
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	4b14      	ldr	r3, [pc, #80]	@ (80026c4 <HAL_InitTick+0x6c>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	4619      	mov	r1, r3
 8002676:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800267a:	fbb3 f3f1 	udiv	r3, r3, r1
 800267e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002682:	4618      	mov	r0, r3
 8002684:	f000 f96d 	bl	8002962 <HAL_SYSTICK_Config>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d10f      	bne.n	80026ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2b0f      	cmp	r3, #15
 8002692:	d809      	bhi.n	80026a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002694:	2200      	movs	r2, #0
 8002696:	6879      	ldr	r1, [r7, #4]
 8002698:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800269c:	f000 f937 	bl	800290e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026a0:	4a0a      	ldr	r2, [pc, #40]	@ (80026cc <HAL_InitTick+0x74>)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6013      	str	r3, [r2, #0]
 80026a6:	e007      	b.n	80026b8 <HAL_InitTick+0x60>
=======
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80026ac:	2300      	movs	r3, #0
 80026ae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80026b0:	4b17      	ldr	r3, [pc, #92]	@ (8002710 <HAL_InitTick+0x6c>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d023      	beq.n	8002700 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80026b8:	4b16      	ldr	r3, [pc, #88]	@ (8002714 <HAL_InitTick+0x70>)
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	4b14      	ldr	r3, [pc, #80]	@ (8002710 <HAL_InitTick+0x6c>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	4619      	mov	r1, r3
 80026c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80026ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ce:	4618      	mov	r0, r3
 80026d0:	f000 f96d 	bl	80029ae <HAL_SYSTICK_Config>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10f      	bne.n	80026fa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2b0f      	cmp	r3, #15
 80026de:	d809      	bhi.n	80026f4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026e0:	2200      	movs	r2, #0
 80026e2:	6879      	ldr	r1, [r7, #4]
 80026e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80026e8:	f000 f937 	bl	800295a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026ec:	4a0a      	ldr	r2, [pc, #40]	@ (8002718 <HAL_InitTick+0x74>)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6013      	str	r3, [r2, #0]
 80026f2:	e007      	b.n	8002704 <HAL_InitTick+0x60>
>>>>>>> Stashed changes
      }
      else
      {
        status = HAL_ERROR;
<<<<<<< Updated upstream
 80026a8:	2301      	movs	r3, #1
 80026aa:	73fb      	strb	r3, [r7, #15]
 80026ac:	e004      	b.n	80026b8 <HAL_InitTick+0x60>
=======
 80026f4:	2301      	movs	r3, #1
 80026f6:	73fb      	strb	r3, [r7, #15]
 80026f8:	e004      	b.n	8002704 <HAL_InitTick+0x60>
>>>>>>> Stashed changes
      }
    }
    else
    {
      status = HAL_ERROR;
<<<<<<< Updated upstream
 80026ae:	2301      	movs	r3, #1
 80026b0:	73fb      	strb	r3, [r7, #15]
 80026b2:	e001      	b.n	80026b8 <HAL_InitTick+0x60>
=======
 80026fa:	2301      	movs	r3, #1
 80026fc:	73fb      	strb	r3, [r7, #15]
 80026fe:	e001      	b.n	8002704 <HAL_InitTick+0x60>
>>>>>>> Stashed changes
    }
  }
  else
  {
    status = HAL_ERROR;
<<<<<<< Updated upstream
 80026b4:	2301      	movs	r3, #1
 80026b6:	73fb      	strb	r3, [r7, #15]
=======
 8002700:	2301      	movs	r3, #1
 8002702:	73fb      	strb	r3, [r7, #15]
>>>>>>> Stashed changes
  }

  /* Return function status */
  return status;
<<<<<<< Updated upstream
 80026b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	20000048 	.word	0x20000048
 80026c8:	2000000c 	.word	0x2000000c
 80026cc:	20000044 	.word	0x20000044

080026d0 <HAL_IncTick>:
=======
 8002704:	7bfb      	ldrb	r3, [r7, #15]
}
 8002706:	4618      	mov	r0, r3
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	20000048 	.word	0x20000048
 8002714:	2000000c 	.word	0x2000000c
 8002718:	20000044 	.word	0x20000044

0800271c <HAL_IncTick>:
>>>>>>> Stashed changes
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< Updated upstream
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80026d4:	4b06      	ldr	r3, [pc, #24]	@ (80026f0 <HAL_IncTick+0x20>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	461a      	mov	r2, r3
 80026da:	4b06      	ldr	r3, [pc, #24]	@ (80026f4 <HAL_IncTick+0x24>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4413      	add	r3, r2
 80026e0:	4a04      	ldr	r2, [pc, #16]	@ (80026f4 <HAL_IncTick+0x24>)
 80026e2:	6013      	str	r3, [r2, #0]
}
 80026e4:	bf00      	nop
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	20000048 	.word	0x20000048
 80026f4:	20000788 	.word	0x20000788

080026f8 <HAL_GetTick>:
=======
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002720:	4b06      	ldr	r3, [pc, #24]	@ (800273c <HAL_IncTick+0x20>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	461a      	mov	r2, r3
 8002726:	4b06      	ldr	r3, [pc, #24]	@ (8002740 <HAL_IncTick+0x24>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4413      	add	r3, r2
 800272c:	4a04      	ldr	r2, [pc, #16]	@ (8002740 <HAL_IncTick+0x24>)
 800272e:	6013      	str	r3, [r2, #0]
}
 8002730:	bf00      	nop
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	20000048 	.word	0x20000048
 8002740:	2000078c 	.word	0x2000078c

08002744 <HAL_GetTick>:
>>>>>>> Stashed changes
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< Updated upstream
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  return uwTick;
 80026fc:	4b03      	ldr	r3, [pc, #12]	@ (800270c <HAL_GetTick+0x14>)
 80026fe:	681b      	ldr	r3, [r3, #0]
}
 8002700:	4618      	mov	r0, r3
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	20000788 	.word	0x20000788

08002710 <HAL_Delay>:
=======
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  return uwTick;
 8002748:	4b03      	ldr	r3, [pc, #12]	@ (8002758 <HAL_GetTick+0x14>)
 800274a:	681b      	ldr	r3, [r3, #0]
}
 800274c:	4618      	mov	r0, r3
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	2000078c 	.word	0x2000078c

0800275c <HAL_Delay>:
>>>>>>> Stashed changes
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
<<<<<<< Updated upstream
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002718:	f7ff ffee 	bl	80026f8 <HAL_GetTick>
 800271c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002728:	d005      	beq.n	8002736 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800272a:	4b0a      	ldr	r3, [pc, #40]	@ (8002754 <HAL_Delay+0x44>)
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	461a      	mov	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	4413      	add	r3, r2
 8002734:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002736:	bf00      	nop
 8002738:	f7ff ffde 	bl	80026f8 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	429a      	cmp	r2, r3
 8002746:	d8f7      	bhi.n	8002738 <HAL_Delay+0x28>
  {
  }
}
 8002748:	bf00      	nop
 800274a:	bf00      	nop
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	20000048 	.word	0x20000048

08002758 <__NVIC_SetPriorityGrouping>:
=======
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002764:	f7ff ffee 	bl	8002744 <HAL_GetTick>
 8002768:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002774:	d005      	beq.n	8002782 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002776:	4b0a      	ldr	r3, [pc, #40]	@ (80027a0 <HAL_Delay+0x44>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	461a      	mov	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	4413      	add	r3, r2
 8002780:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002782:	bf00      	nop
 8002784:	f7ff ffde 	bl	8002744 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	429a      	cmp	r2, r3
 8002792:	d8f7      	bhi.n	8002784 <HAL_Delay+0x28>
  {
  }
}
 8002794:	bf00      	nop
 8002796:	bf00      	nop
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	20000048 	.word	0x20000048

080027a4 <__NVIC_SetPriorityGrouping>:
>>>>>>> Stashed changes
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< Updated upstream
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002768:	4b0c      	ldr	r3, [pc, #48]	@ (800279c <__NVIC_SetPriorityGrouping+0x44>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800276e:	68ba      	ldr	r2, [r7, #8]
 8002770:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002774:	4013      	ands	r3, r2
 8002776:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002780:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002784:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800278a:	4a04      	ldr	r2, [pc, #16]	@ (800279c <__NVIC_SetPriorityGrouping+0x44>)
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	60d3      	str	r3, [r2, #12]
}
 8002790:	bf00      	nop
 8002792:	3714      	adds	r7, #20
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr
 800279c:	e000ed00 	.word	0xe000ed00

080027a0 <__NVIC_GetPriorityGrouping>:
=======
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f003 0307 	and.w	r3, r3, #7
 80027b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027b4:	4b0c      	ldr	r3, [pc, #48]	@ (80027e8 <__NVIC_SetPriorityGrouping+0x44>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027ba:	68ba      	ldr	r2, [r7, #8]
 80027bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027c0:	4013      	ands	r3, r2
 80027c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027d6:	4a04      	ldr	r2, [pc, #16]	@ (80027e8 <__NVIC_SetPriorityGrouping+0x44>)
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	60d3      	str	r3, [r2, #12]
}
 80027dc:	bf00      	nop
 80027de:	3714      	adds	r7, #20
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	e000ed00 	.word	0xe000ed00

080027ec <__NVIC_GetPriorityGrouping>:
>>>>>>> Stashed changes
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< Updated upstream
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027a4:	4b04      	ldr	r3, [pc, #16]	@ (80027b8 <__NVIC_GetPriorityGrouping+0x18>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	0a1b      	lsrs	r3, r3, #8
 80027aa:	f003 0307 	and.w	r3, r3, #7
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	e000ed00 	.word	0xe000ed00

080027bc <__NVIC_EnableIRQ>:
=======
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027f0:	4b04      	ldr	r3, [pc, #16]	@ (8002804 <__NVIC_GetPriorityGrouping+0x18>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	0a1b      	lsrs	r3, r3, #8
 80027f6:	f003 0307 	and.w	r3, r3, #7
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	e000ed00 	.word	0xe000ed00

08002808 <__NVIC_EnableIRQ>:
>>>>>>> Stashed changes
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< Updated upstream
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	4603      	mov	r3, r0
 80027c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	db0b      	blt.n	80027e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027ce:	79fb      	ldrb	r3, [r7, #7]
 80027d0:	f003 021f 	and.w	r2, r3, #31
 80027d4:	4907      	ldr	r1, [pc, #28]	@ (80027f4 <__NVIC_EnableIRQ+0x38>)
 80027d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027da:	095b      	lsrs	r3, r3, #5
 80027dc:	2001      	movs	r0, #1
 80027de:	fa00 f202 	lsl.w	r2, r0, r2
 80027e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	e000e100 	.word	0xe000e100

080027f8 <__NVIC_SetPriority>:
=======
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	4603      	mov	r3, r0
 8002810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002816:	2b00      	cmp	r3, #0
 8002818:	db0b      	blt.n	8002832 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800281a:	79fb      	ldrb	r3, [r7, #7]
 800281c:	f003 021f 	and.w	r2, r3, #31
 8002820:	4907      	ldr	r1, [pc, #28]	@ (8002840 <__NVIC_EnableIRQ+0x38>)
 8002822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002826:	095b      	lsrs	r3, r3, #5
 8002828:	2001      	movs	r0, #1
 800282a:	fa00 f202 	lsl.w	r2, r0, r2
 800282e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002832:	bf00      	nop
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	e000e100 	.word	0xe000e100

08002844 <__NVIC_SetPriority>:
>>>>>>> Stashed changes
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< Updated upstream
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	4603      	mov	r3, r0
 8002800:	6039      	str	r1, [r7, #0]
 8002802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002808:	2b00      	cmp	r3, #0
 800280a:	db0a      	blt.n	8002822 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	b2da      	uxtb	r2, r3
 8002810:	490c      	ldr	r1, [pc, #48]	@ (8002844 <__NVIC_SetPriority+0x4c>)
 8002812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002816:	0112      	lsls	r2, r2, #4
 8002818:	b2d2      	uxtb	r2, r2
 800281a:	440b      	add	r3, r1
 800281c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
=======
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	4603      	mov	r3, r0
 800284c:	6039      	str	r1, [r7, #0]
 800284e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002854:	2b00      	cmp	r3, #0
 8002856:	db0a      	blt.n	800286e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	b2da      	uxtb	r2, r3
 800285c:	490c      	ldr	r1, [pc, #48]	@ (8002890 <__NVIC_SetPriority+0x4c>)
 800285e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002862:	0112      	lsls	r2, r2, #4
 8002864:	b2d2      	uxtb	r2, r2
 8002866:	440b      	add	r3, r1
 8002868:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
>>>>>>> Stashed changes
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< Updated upstream
 8002820:	e00a      	b.n	8002838 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	b2da      	uxtb	r2, r3
 8002826:	4908      	ldr	r1, [pc, #32]	@ (8002848 <__NVIC_SetPriority+0x50>)
 8002828:	79fb      	ldrb	r3, [r7, #7]
 800282a:	f003 030f 	and.w	r3, r3, #15
 800282e:	3b04      	subs	r3, #4
 8002830:	0112      	lsls	r2, r2, #4
 8002832:	b2d2      	uxtb	r2, r2
 8002834:	440b      	add	r3, r1
 8002836:	761a      	strb	r2, [r3, #24]
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	e000e100 	.word	0xe000e100
 8002848:	e000ed00 	.word	0xe000ed00

0800284c <NVIC_EncodePriority>:
=======
 800286c:	e00a      	b.n	8002884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	b2da      	uxtb	r2, r3
 8002872:	4908      	ldr	r1, [pc, #32]	@ (8002894 <__NVIC_SetPriority+0x50>)
 8002874:	79fb      	ldrb	r3, [r7, #7]
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	3b04      	subs	r3, #4
 800287c:	0112      	lsls	r2, r2, #4
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	440b      	add	r3, r1
 8002882:	761a      	strb	r2, [r3, #24]
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	e000e100 	.word	0xe000e100
 8002894:	e000ed00 	.word	0xe000ed00

08002898 <NVIC_EncodePriority>:
>>>>>>> Stashed changes
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< Updated upstream
 800284c:	b480      	push	{r7}
 800284e:	b089      	sub	sp, #36	@ 0x24
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f003 0307 	and.w	r3, r3, #7
 800285e:	61fb      	str	r3, [r7, #28]
=======
 8002898:	b480      	push	{r7}
 800289a:	b089      	sub	sp, #36	@ 0x24
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f003 0307 	and.w	r3, r3, #7
 80028aa:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< Updated upstream
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	f1c3 0307 	rsb	r3, r3, #7
 8002866:	2b04      	cmp	r3, #4
 8002868:	bf28      	it	cs
 800286a:	2304      	movcs	r3, #4
 800286c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	3304      	adds	r3, #4
 8002872:	2b06      	cmp	r3, #6
 8002874:	d902      	bls.n	800287c <NVIC_EncodePriority+0x30>
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	3b03      	subs	r3, #3
 800287a:	e000      	b.n	800287e <NVIC_EncodePriority+0x32>
 800287c:	2300      	movs	r3, #0
 800287e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002880:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	43da      	mvns	r2, r3
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	401a      	ands	r2, r3
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002894:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	fa01 f303 	lsl.w	r3, r1, r3
 800289e:	43d9      	mvns	r1, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a4:	4313      	orrs	r3, r2
         );
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3724      	adds	r7, #36	@ 0x24
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
	...

080028b4 <SysTick_Config>:
=======
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	f1c3 0307 	rsb	r3, r3, #7
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	bf28      	it	cs
 80028b6:	2304      	movcs	r3, #4
 80028b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	3304      	adds	r3, #4
 80028be:	2b06      	cmp	r3, #6
 80028c0:	d902      	bls.n	80028c8 <NVIC_EncodePriority+0x30>
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	3b03      	subs	r3, #3
 80028c6:	e000      	b.n	80028ca <NVIC_EncodePriority+0x32>
 80028c8:	2300      	movs	r3, #0
 80028ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	43da      	mvns	r2, r3
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	401a      	ands	r2, r3
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028e0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	fa01 f303 	lsl.w	r3, r1, r3
 80028ea:	43d9      	mvns	r1, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f0:	4313      	orrs	r3, r2
         );
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3724      	adds	r7, #36	@ 0x24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
	...

08002900 <SysTick_Config>:
>>>>>>> Stashed changes
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< Updated upstream
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3b01      	subs	r3, #1
 80028c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028c4:	d301      	bcc.n	80028ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028c6:	2301      	movs	r3, #1
 80028c8:	e00f      	b.n	80028ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028ca:	4a0a      	ldr	r2, [pc, #40]	@ (80028f4 <SysTick_Config+0x40>)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3b01      	subs	r3, #1
 80028d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028d2:	210f      	movs	r1, #15
 80028d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80028d8:	f7ff ff8e 	bl	80027f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028dc:	4b05      	ldr	r3, [pc, #20]	@ (80028f4 <SysTick_Config+0x40>)
 80028de:	2200      	movs	r2, #0
 80028e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028e2:	4b04      	ldr	r3, [pc, #16]	@ (80028f4 <SysTick_Config+0x40>)
 80028e4:	2207      	movs	r2, #7
 80028e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	e000e010 	.word	0xe000e010

080028f8 <HAL_NVIC_SetPriorityGrouping>:
=======
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	3b01      	subs	r3, #1
 800290c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002910:	d301      	bcc.n	8002916 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002912:	2301      	movs	r3, #1
 8002914:	e00f      	b.n	8002936 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002916:	4a0a      	ldr	r2, [pc, #40]	@ (8002940 <SysTick_Config+0x40>)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	3b01      	subs	r3, #1
 800291c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800291e:	210f      	movs	r1, #15
 8002920:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002924:	f7ff ff8e 	bl	8002844 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002928:	4b05      	ldr	r3, [pc, #20]	@ (8002940 <SysTick_Config+0x40>)
 800292a:	2200      	movs	r2, #0
 800292c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800292e:	4b04      	ldr	r3, [pc, #16]	@ (8002940 <SysTick_Config+0x40>)
 8002930:	2207      	movs	r2, #7
 8002932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	e000e010 	.word	0xe000e010

08002944 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> Stashed changes
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< Updated upstream
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
=======
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< Updated upstream
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f7ff ff29 	bl	8002758 <__NVIC_SetPriorityGrouping>
}
 8002906:	bf00      	nop
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <HAL_NVIC_SetPriority>:
=======
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f7ff ff29 	bl	80027a4 <__NVIC_SetPriorityGrouping>
}
 8002952:	bf00      	nop
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <HAL_NVIC_SetPriority>:
>>>>>>> Stashed changes
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< Updated upstream
 800290e:	b580      	push	{r7, lr}
 8002910:	b086      	sub	sp, #24
 8002912:	af00      	add	r7, sp, #0
 8002914:	4603      	mov	r3, r0
 8002916:	60b9      	str	r1, [r7, #8]
 8002918:	607a      	str	r2, [r7, #4]
 800291a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800291c:	2300      	movs	r3, #0
 800291e:	617b      	str	r3, [r7, #20]
=======
 800295a:	b580      	push	{r7, lr}
 800295c:	b086      	sub	sp, #24
 800295e:	af00      	add	r7, sp, #0
 8002960:	4603      	mov	r3, r0
 8002962:	60b9      	str	r1, [r7, #8]
 8002964:	607a      	str	r2, [r7, #4]
 8002966:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002968:	2300      	movs	r3, #0
 800296a:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< Updated upstream
 8002920:	f7ff ff3e 	bl	80027a0 <__NVIC_GetPriorityGrouping>
 8002924:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	68b9      	ldr	r1, [r7, #8]
 800292a:	6978      	ldr	r0, [r7, #20]
 800292c:	f7ff ff8e 	bl	800284c <NVIC_EncodePriority>
 8002930:	4602      	mov	r2, r0
 8002932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002936:	4611      	mov	r1, r2
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff ff5d 	bl	80027f8 <__NVIC_SetPriority>
}
 800293e:	bf00      	nop
 8002940:	3718      	adds	r7, #24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_NVIC_EnableIRQ>:
=======
 800296c:	f7ff ff3e 	bl	80027ec <__NVIC_GetPriorityGrouping>
 8002970:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	68b9      	ldr	r1, [r7, #8]
 8002976:	6978      	ldr	r0, [r7, #20]
 8002978:	f7ff ff8e 	bl	8002898 <NVIC_EncodePriority>
 800297c:	4602      	mov	r2, r0
 800297e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002982:	4611      	mov	r1, r2
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff ff5d 	bl	8002844 <__NVIC_SetPriority>
}
 800298a:	bf00      	nop
 800298c:	3718      	adds	r7, #24
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <HAL_NVIC_EnableIRQ>:
>>>>>>> Stashed changes
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< Updated upstream
 8002946:	b580      	push	{r7, lr}
 8002948:	b082      	sub	sp, #8
 800294a:	af00      	add	r7, sp, #0
 800294c:	4603      	mov	r3, r0
 800294e:	71fb      	strb	r3, [r7, #7]
=======
 8002992:	b580      	push	{r7, lr}
 8002994:	b082      	sub	sp, #8
 8002996:	af00      	add	r7, sp, #0
 8002998:	4603      	mov	r3, r0
 800299a:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< Updated upstream
 8002950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff ff31 	bl	80027bc <__NVIC_EnableIRQ>
}
 800295a:	bf00      	nop
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <HAL_SYSTICK_Config>:
=======
 800299c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff ff31 	bl	8002808 <__NVIC_EnableIRQ>
}
 80029a6:	bf00      	nop
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <HAL_SYSTICK_Config>:
>>>>>>> Stashed changes
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< Updated upstream
 8002962:	b580      	push	{r7, lr}
 8002964:	b082      	sub	sp, #8
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f7ff ffa2 	bl	80028b4 <SysTick_Config>
 8002970:	4603      	mov	r3, r0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <HAL_DAC_Init>:
=======
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b082      	sub	sp, #8
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7ff ffa2 	bl	8002900 <SysTick_Config>
 80029bc:	4603      	mov	r3, r0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <HAL_DAC_Init>:
>>>>>>> Stashed changes
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
<<<<<<< Updated upstream
 800297a:	b580      	push	{r7, lr}
 800297c:	b082      	sub	sp, #8
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d101      	bne.n	800298c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e014      	b.n	80029b6 <HAL_DAC_Init+0x3c>
=======
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b082      	sub	sp, #8
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e014      	b.n	8002a02 <HAL_DAC_Init+0x3c>
>>>>>>> Stashed changes
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
<<<<<<< Updated upstream
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	791b      	ldrb	r3, [r3, #4]
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d105      	bne.n	80029a2 <HAL_DAC_Init+0x28>
=======
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	791b      	ldrb	r3, [r3, #4]
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d105      	bne.n	80029ee <HAL_DAC_Init+0x28>
>>>>>>> Stashed changes
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
<<<<<<< Updated upstream
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	715a      	strb	r2, [r3, #5]
=======
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	715a      	strb	r2, [r3, #5]
>>>>>>> Stashed changes
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
<<<<<<< Updated upstream
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f7ff fa85 	bl	8001eac <HAL_DAC_MspInit>
=======
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f7ff fa85 	bl	8001ef8 <HAL_DAC_MspInit>
>>>>>>> Stashed changes
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
<<<<<<< Updated upstream
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2202      	movs	r2, #2
 80029a6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <HAL_DAC_Start>:
=======
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2202      	movs	r2, #2
 80029f2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2201      	movs	r2, #1
 80029fe:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <HAL_DAC_Start>:
>>>>>>> Stashed changes
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
<<<<<<< Updated upstream
 80029be:	b480      	push	{r7}
 80029c0:	b083      	sub	sp, #12
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
 80029c6:	6039      	str	r1, [r7, #0]
=======
 8002a0a:	b480      	push	{r7}
 8002a0c:	b083      	sub	sp, #12
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
 8002a12:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
<<<<<<< Updated upstream
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	795b      	ldrb	r3, [r3, #5]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d101      	bne.n	80029d4 <HAL_DAC_Start+0x16>
 80029d0:	2302      	movs	r3, #2
 80029d2:	e040      	b.n	8002a56 <HAL_DAC_Start+0x98>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2202      	movs	r2, #2
 80029de:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6819      	ldr	r1, [r3, #0]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	f003 0310 	and.w	r3, r3, #16
 80029ec:	2201      	movs	r2, #1
 80029ee:	409a      	lsls	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	430a      	orrs	r2, r1
 80029f6:	601a      	str	r2, [r3, #0]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (Channel == DAC_CHANNEL_1)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10f      	bne.n	8002a1e <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d11d      	bne.n	8002a48 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	685a      	ldr	r2, [r3, #4]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f042 0201 	orr.w	r2, r2, #1
 8002a1a:	605a      	str	r2, [r3, #4]
 8002a1c:	e014      	b.n	8002a48 <HAL_DAC_Start+0x8a>
=======
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	795b      	ldrb	r3, [r3, #5]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d101      	bne.n	8002a20 <HAL_DAC_Start+0x16>
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	e040      	b.n	8002aa2 <HAL_DAC_Start+0x98>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2202      	movs	r2, #2
 8002a2a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6819      	ldr	r1, [r3, #0]
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	f003 0310 	and.w	r3, r3, #16
 8002a38:	2201      	movs	r2, #1
 8002a3a:	409a      	lsls	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	430a      	orrs	r2, r1
 8002a42:	601a      	str	r2, [r3, #0]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (Channel == DAC_CHANNEL_1)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d10f      	bne.n	8002a6a <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d11d      	bne.n	8002a94 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	685a      	ldr	r2, [r3, #4]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f042 0201 	orr.w	r2, r2, #1
 8002a66:	605a      	str	r2, [r3, #4]
 8002a68:	e014      	b.n	8002a94 <HAL_DAC_Start+0x8a>
>>>>>>> Stashed changes
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
<<<<<<< Updated upstream
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	f003 0310 	and.w	r3, r3, #16
 8002a2e:	2102      	movs	r1, #2
 8002a30:	fa01 f303 	lsl.w	r3, r1, r3
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d107      	bne.n	8002a48 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f042 0202 	orr.w	r2, r2, #2
 8002a46:	605a      	str	r2, [r3, #4]
=======
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	f003 0310 	and.w	r3, r3, #16
 8002a7a:	2102      	movs	r1, #2
 8002a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d107      	bne.n	8002a94 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	685a      	ldr	r2, [r3, #4]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f042 0202 	orr.w	r2, r2, #2
 8002a92:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
<<<<<<< Updated upstream
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr

08002a62 <HAL_DAC_IRQHandler>:
=======
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr

08002aae <HAL_DAC_IRQHandler>:
>>>>>>> Stashed changes
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
<<<<<<< Updated upstream
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b082      	sub	sp, #8
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a78:	d120      	bne.n	8002abc <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a88:	d118      	bne.n	8002abc <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2204      	movs	r2, #4
 8002a8e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	f043 0201 	orr.w	r2, r3, #1
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002aa4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002ab4:	601a      	str	r2, [r3, #0]
=======
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b082      	sub	sp, #8
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ac0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ac4:	d120      	bne.n	8002b08 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002acc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ad0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ad4:	d118      	bne.n	8002b08 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2204      	movs	r2, #4
 8002ada:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	f043 0201 	orr.w	r2, r3, #1
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002af0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002b00:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
<<<<<<< Updated upstream
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 f852 	bl	8002b60 <HAL_DAC_DMAUnderrunCallbackCh1>
=======
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f852 	bl	8002bac <HAL_DAC_DMAUnderrunCallbackCh1>
>>>>>>> Stashed changes
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
<<<<<<< Updated upstream
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ac6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002aca:	d120      	bne.n	8002b0e <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ad2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ad6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ada:	d118      	bne.n	8002b0e <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2204      	movs	r2, #4
 8002ae0:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	f043 0202 	orr.w	r2, r3, #2
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002af6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8002b06:	601a      	str	r2, [r3, #0]
=======
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b16:	d120      	bne.n	8002b5a <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b1e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b26:	d118      	bne.n	8002b5a <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2204      	movs	r2, #4
 8002b2c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	f043 0202 	orr.w	r2, r3, #2
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002b42:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8002b52:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
<<<<<<< Updated upstream
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 f97f 	bl	8002e0c <HAL_DACEx_DMAUnderrunCallbackCh2>
=======
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 f97f 	bl	8002e58 <HAL_DACEx_DMAUnderrunCallbackCh2>
>>>>>>> Stashed changes
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
<<<<<<< Updated upstream
 8002b0e:	bf00      	nop
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HAL_DAC_SetValue>:
=======
 8002b5a:	bf00      	nop
 8002b5c:	3708      	adds	r7, #8
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <HAL_DAC_SetValue>:
>>>>>>> Stashed changes
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
<<<<<<< Updated upstream
 8002b16:	b480      	push	{r7}
 8002b18:	b087      	sub	sp, #28
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	60f8      	str	r0, [r7, #12]
 8002b1e:	60b9      	str	r1, [r7, #8]
 8002b20:	607a      	str	r2, [r7, #4]
 8002b22:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8002b24:	2300      	movs	r3, #0
 8002b26:	617b      	str	r3, [r7, #20]
=======
 8002b62:	b480      	push	{r7}
 8002b64:	b087      	sub	sp, #28
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	60f8      	str	r0, [r7, #12]
 8002b6a:	60b9      	str	r1, [r7, #8]
 8002b6c:	607a      	str	r2, [r7, #4]
 8002b6e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8002b70:	2300      	movs	r3, #0
 8002b72:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
<<<<<<< Updated upstream
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d105      	bne.n	8002b40 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4413      	add	r3, r2
 8002b3a:	3308      	adds	r3, #8
 8002b3c:	617b      	str	r3, [r7, #20]
 8002b3e:	e004      	b.n	8002b4a <HAL_DAC_SetValue+0x34>
=======
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d105      	bne.n	8002b8c <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002b80:	697a      	ldr	r2, [r7, #20]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4413      	add	r3, r2
 8002b86:	3308      	adds	r3, #8
 8002b88:	617b      	str	r3, [r7, #20]
 8002b8a:	e004      	b.n	8002b96 <HAL_DAC_SetValue+0x34>
>>>>>>> Stashed changes
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
<<<<<<< Updated upstream
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4413      	add	r3, r2
 8002b46:	3314      	adds	r3, #20
 8002b48:	617b      	str	r3, [r7, #20]
=======
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4413      	add	r3, r2
 8002b92:	3314      	adds	r3, #20
 8002b94:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
<<<<<<< Updated upstream
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	371c      	adds	r7, #28
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <HAL_DAC_DMAUnderrunCallbackCh1>:
=======
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	461a      	mov	r2, r3
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	371c      	adds	r7, #28
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <HAL_DAC_DMAUnderrunCallbackCh1>:
>>>>>>> Stashed changes
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
<<<<<<< Updated upstream
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
=======
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <HAL_DAC_ConfigChannel>:
=======
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <HAL_DAC_ConfigChannel>:
>>>>>>> Stashed changes
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
<<<<<<< Updated upstream
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b088      	sub	sp, #32
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002b80:	2300      	movs	r3, #0
 8002b82:	61bb      	str	r3, [r7, #24]
=======
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b088      	sub	sp, #32
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
<<<<<<< Updated upstream
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	795b      	ldrb	r3, [r3, #5]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d101      	bne.n	8002b90 <HAL_DAC_ConfigChannel+0x1c>
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	e137      	b.n	8002e00 <HAL_DAC_ConfigChannel+0x28c>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2201      	movs	r2, #1
 8002b94:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2202      	movs	r2, #2
 8002b9a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	2b04      	cmp	r3, #4
 8002ba2:	f040 8081 	bne.w	8002ca8 <HAL_DAC_ConfigChannel+0x134>
=======
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	795b      	ldrb	r3, [r3, #5]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d101      	bne.n	8002bdc <HAL_DAC_ConfigChannel+0x1c>
 8002bd8:	2302      	movs	r3, #2
 8002bda:	e137      	b.n	8002e4c <HAL_DAC_ConfigChannel+0x28c>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2201      	movs	r2, #1
 8002be0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2202      	movs	r2, #2
 8002be6:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	2b04      	cmp	r3, #4
 8002bee:	f040 8081 	bne.w	8002cf4 <HAL_DAC_ConfigChannel+0x134>
>>>>>>> Stashed changes
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 8002ba6:	f7ff fda7 	bl	80026f8 <HAL_GetTick>
 8002baa:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d140      	bne.n	8002c34 <HAL_DAC_ConfigChannel+0xc0>
=======
 8002bf2:	f7ff fda7 	bl	8002744 <HAL_GetTick>
 8002bf6:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d140      	bne.n	8002c80 <HAL_DAC_ConfigChannel+0xc0>
>>>>>>> Stashed changes
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
<<<<<<< Updated upstream
 8002bb2:	e018      	b.n	8002be6 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002bb4:	f7ff fda0 	bl	80026f8 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d911      	bls.n	8002be6 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bc8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00a      	beq.n	8002be6 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	f043 0208 	orr.w	r2, r3, #8
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2203      	movs	r2, #3
 8002be0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e10c      	b.n	8002e00 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1df      	bne.n	8002bb4 <HAL_DAC_ConfigChannel+0x40>
=======
 8002bfe:	e018      	b.n	8002c32 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002c00:	f7ff fda0 	bl	8002744 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d911      	bls.n	8002c32 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00a      	beq.n	8002c32 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	f043 0208 	orr.w	r2, r3, #8
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2203      	movs	r2, #3
 8002c2c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e10c      	b.n	8002e4c <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1df      	bne.n	8002c00 <HAL_DAC_ConfigChannel+0x40>
>>>>>>> Stashed changes
          }
        }
      }
      HAL_Delay(1);
<<<<<<< Updated upstream
 8002bf4:	2001      	movs	r0, #1
 8002bf6:	f7ff fd8b 	bl	8002710 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68ba      	ldr	r2, [r7, #8]
 8002c00:	69d2      	ldr	r2, [r2, #28]
 8002c02:	641a      	str	r2, [r3, #64]	@ 0x40
 8002c04:	e023      	b.n	8002c4e <HAL_DAC_ConfigChannel+0xda>
=======
 8002c40:	2001      	movs	r0, #1
 8002c42:	f7ff fd8b 	bl	800275c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68ba      	ldr	r2, [r7, #8]
 8002c4c:	69d2      	ldr	r2, [r2, #28]
 8002c4e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002c50:	e023      	b.n	8002c9a <HAL_DAC_ConfigChannel+0xda>
>>>>>>> Stashed changes
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
<<<<<<< Updated upstream
 8002c06:	f7ff fd77 	bl	80026f8 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d90f      	bls.n	8002c34 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	da0a      	bge.n	8002c34 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	f043 0208 	orr.w	r2, r3, #8
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2203      	movs	r2, #3
 8002c2e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e0e5      	b.n	8002e00 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	dbe3      	blt.n	8002c06 <HAL_DAC_ConfigChannel+0x92>
=======
 8002c52:	f7ff fd77 	bl	8002744 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d90f      	bls.n	8002c80 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	da0a      	bge.n	8002c80 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	f043 0208 	orr.w	r2, r3, #8
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2203      	movs	r2, #3
 8002c7a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e0e5      	b.n	8002e4c <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	dbe3      	blt.n	8002c52 <HAL_DAC_ConfigChannel+0x92>
>>>>>>> Stashed changes
          }
        }
      }
      HAL_Delay(1U);
<<<<<<< Updated upstream
 8002c3e:	2001      	movs	r0, #1
 8002c40:	f7ff fd66 	bl	8002710 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68ba      	ldr	r2, [r7, #8]
 8002c4a:	69d2      	ldr	r2, [r2, #28]
 8002c4c:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 8002c8a:	2001      	movs	r0, #1
 8002c8c:	f7ff fd66 	bl	800275c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68ba      	ldr	r2, [r7, #8]
 8002c96:	69d2      	ldr	r2, [r2, #28]
 8002c98:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> Stashed changes
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
<<<<<<< Updated upstream
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f003 0310 	and.w	r3, r3, #16
 8002c5a:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8002c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c62:	43db      	mvns	r3, r3
 8002c64:	ea02 0103 	and.w	r1, r2, r3
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	6a1a      	ldr	r2, [r3, #32]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f003 0310 	and.w	r3, r3, #16
 8002c72:	409a      	lsls	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f003 0310 	and.w	r3, r3, #16
 8002c88:	21ff      	movs	r1, #255	@ 0xff
 8002c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c8e:	43db      	mvns	r3, r3
 8002c90:	ea02 0103 	and.w	r1, r2, r3
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f003 0310 	and.w	r3, r3, #16
 8002c9e:	409a      	lsls	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	695b      	ldr	r3, [r3, #20]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d11d      	bne.n	8002cec <HAL_DAC_ConfigChannel+0x178>
=======
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f003 0310 	and.w	r3, r3, #16
 8002ca6:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8002caa:	fa01 f303 	lsl.w	r3, r1, r3
 8002cae:	43db      	mvns	r3, r3
 8002cb0:	ea02 0103 	and.w	r1, r2, r3
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	6a1a      	ldr	r2, [r3, #32]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f003 0310 	and.w	r3, r3, #16
 8002cbe:	409a      	lsls	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f003 0310 	and.w	r3, r3, #16
 8002cd4:	21ff      	movs	r1, #255	@ 0xff
 8002cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cda:	43db      	mvns	r3, r3
 8002cdc:	ea02 0103 	and.w	r1, r2, r3
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f003 0310 	and.w	r3, r3, #16
 8002cea:	409a      	lsls	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d11d      	bne.n	8002d38 <HAL_DAC_ConfigChannel+0x178>
>>>>>>> Stashed changes
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
<<<<<<< Updated upstream
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cb6:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f003 0310 	and.w	r3, r3, #16
 8002cbe:	221f      	movs	r2, #31
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	69fa      	ldr	r2, [r7, #28]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f003 0310 	and.w	r3, r3, #16
 8002cd8:	697a      	ldr	r2, [r7, #20]
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	69fa      	ldr	r2, [r7, #28]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	69fa      	ldr	r2, [r7, #28]
 8002cea:	639a      	str	r2, [r3, #56]	@ 0x38
=======
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d02:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f003 0310 	and.w	r3, r3, #16
 8002d0a:	221f      	movs	r2, #31
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	43db      	mvns	r3, r3
 8002d12:	69fa      	ldr	r2, [r7, #28]
 8002d14:	4013      	ands	r3, r2
 8002d16:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f003 0310 	and.w	r3, r3, #16
 8002d24:	697a      	ldr	r2, [r7, #20]
 8002d26:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2a:	69fa      	ldr	r2, [r7, #28]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	69fa      	ldr	r2, [r7, #28]
 8002d36:	639a      	str	r2, [r3, #56]	@ 0x38
>>>>>>> Stashed changes
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
<<<<<<< Updated upstream
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cf2:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f003 0310 	and.w	r3, r3, #16
 8002cfa:	2207      	movs	r2, #7
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	43db      	mvns	r3, r3
 8002d02:	69fa      	ldr	r2, [r7, #28]
 8002d04:	4013      	ands	r3, r2
 8002d06:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	685a      	ldr	r2, [r3, #4]
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	431a      	orrs	r2, r3
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f003 0310 	and.w	r3, r3, #16
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	fa02 f303 	lsl.w	r3, r2, r3
 8002d26:	69fa      	ldr	r2, [r7, #28]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	69fa      	ldr	r2, [r7, #28]
 8002d32:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6819      	ldr	r1, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f003 0310 	and.w	r3, r3, #16
 8002d40:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	43da      	mvns	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	400a      	ands	r2, r1
 8002d50:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f003 0310 	and.w	r3, r3, #16
 8002d60:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	69fa      	ldr	r2, [r7, #28]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f003 0310 	and.w	r3, r3, #16
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	69fa      	ldr	r2, [r7, #28]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d90:	d104      	bne.n	8002d9c <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d98:	61fb      	str	r3, [r7, #28]
 8002d9a:	e018      	b.n	8002dce <HAL_DAC_ConfigChannel+0x25a>
=======
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d3e:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f003 0310 	and.w	r3, r3, #16
 8002d46:	2207      	movs	r2, #7
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	69fa      	ldr	r2, [r7, #28]
 8002d50:	4013      	ands	r3, r2
 8002d52:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	685a      	ldr	r2, [r3, #4]
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f003 0310 	and.w	r3, r3, #16
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	69fa      	ldr	r2, [r7, #28]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	69fa      	ldr	r2, [r7, #28]
 8002d7e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6819      	ldr	r1, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f003 0310 	and.w	r3, r3, #16
 8002d8c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	43da      	mvns	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	400a      	ands	r2, r1
 8002d9c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f003 0310 	and.w	r3, r3, #16
 8002dac:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	43db      	mvns	r3, r3
 8002db6:	69fa      	ldr	r2, [r7, #28]
 8002db8:	4013      	ands	r3, r2
 8002dba:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f003 0310 	and.w	r3, r3, #16
 8002dc8:	697a      	ldr	r2, [r7, #20]
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	69fa      	ldr	r2, [r7, #28]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ddc:	d104      	bne.n	8002de8 <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002de4:	61fb      	str	r3, [r7, #28]
 8002de6:	e018      	b.n	8002e1a <HAL_DAC_ConfigChannel+0x25a>
>>>>>>> Stashed changes
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
<<<<<<< Updated upstream
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d104      	bne.n	8002dae <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002daa:	61fb      	str	r3, [r7, #28]
 8002dac:	e00f      	b.n	8002dce <HAL_DAC_ConfigChannel+0x25a>
=======
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d104      	bne.n	8002dfa <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002df6:	61fb      	str	r3, [r7, #28]
 8002df8:	e00f      	b.n	8002e1a <HAL_DAC_ConfigChannel+0x25a>
>>>>>>> Stashed changes
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
<<<<<<< Updated upstream
 8002dae:	f002 f885 	bl	8004ebc <HAL_RCC_GetHCLKFreq>
 8002db2:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	4a14      	ldr	r2, [pc, #80]	@ (8002e08 <HAL_DAC_ConfigChannel+0x294>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d904      	bls.n	8002dc6 <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002dc2:	61fb      	str	r3, [r7, #28]
 8002dc4:	e003      	b.n	8002dce <HAL_DAC_ConfigChannel+0x25a>
=======
 8002dfa:	f002 f885 	bl	8004f08 <HAL_RCC_GetHCLKFreq>
 8002dfe:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	4a14      	ldr	r2, [pc, #80]	@ (8002e54 <HAL_DAC_ConfigChannel+0x294>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d904      	bls.n	8002e12 <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e0e:	61fb      	str	r3, [r7, #28]
 8002e10:	e003      	b.n	8002e1a <HAL_DAC_ConfigChannel+0x25a>
>>>>>>> Stashed changes
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
<<<<<<< Updated upstream
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002dcc:	61fb      	str	r3, [r7, #28]
=======
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002e18:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
<<<<<<< Updated upstream
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	69fa      	ldr	r2, [r7, #28]
 8002dd4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6819      	ldr	r1, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f003 0310 	and.w	r3, r3, #16
 8002de2:	22c0      	movs	r2, #192	@ 0xc0
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	43da      	mvns	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	400a      	ands	r2, r1
 8002df0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2201      	movs	r2, #1
 8002df6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3720      	adds	r7, #32
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	04c4b400 	.word	0x04c4b400

08002e0c <HAL_DACEx_DMAUnderrunCallbackCh2>:
=======
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	69fa      	ldr	r2, [r7, #28]
 8002e20:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6819      	ldr	r1, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f003 0310 	and.w	r3, r3, #16
 8002e2e:	22c0      	movs	r2, #192	@ 0xc0
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	43da      	mvns	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	400a      	ands	r2, r1
 8002e3c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2201      	movs	r2, #1
 8002e42:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3720      	adds	r7, #32
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	04c4b400 	.word	0x04c4b400

08002e58 <HAL_DACEx_DMAUnderrunCallbackCh2>:
>>>>>>> Stashed changes
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
<<<<<<< Updated upstream
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
=======
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <HAL_DMA_Abort>:
=======
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <HAL_DMA_Abort>:
>>>>>>> Stashed changes
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8002e20:	b480      	push	{r7}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d008      	beq.n	8002e4a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2204      	movs	r2, #4
 8002e3c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e040      	b.n	8002ecc <HAL_DMA_Abort+0xac>
=======
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e74:	2300      	movs	r3, #0
 8002e76:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d008      	beq.n	8002e96 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2204      	movs	r2, #4
 8002e88:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e040      	b.n	8002f18 <HAL_DMA_Abort+0xac>
>>>>>>> Stashed changes
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
<<<<<<< Updated upstream
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 020e 	bic.w	r2, r2, #14
 8002e58:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e64:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e68:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 0201 	bic.w	r2, r2, #1
 8002e78:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e7e:	f003 021c 	and.w	r2, r3, #28
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e86:	2101      	movs	r1, #1
 8002e88:	fa01 f202 	lsl.w	r2, r1, r2
 8002e8c:	605a      	str	r2, [r3, #4]
=======
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 020e 	bic.w	r2, r2, #14
 8002ea4:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002eb0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002eb4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 0201 	bic.w	r2, r2, #1
 8002ec4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eca:	f003 021c 	and.w	r2, r3, #28
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed2:	2101      	movs	r1, #1
 8002ed4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ed8:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
<<<<<<< Updated upstream
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002e96:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00c      	beq.n	8002eba <HAL_DMA_Abort+0x9a>
=======
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002ee2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00c      	beq.n	8002f06 <HAL_DMA_Abort+0x9a>
>>>>>>> Stashed changes
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
<<<<<<< Updated upstream
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eaa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002eae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002eb8:	605a      	str	r2, [r3, #4]
=======
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ef6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002efa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002f04:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
<<<<<<< Updated upstream
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002eca:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <HAL_DMA_Abort_IT>:
=======
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002f16:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3714      	adds	r7, #20
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <HAL_DMA_Abort_IT>:
>>>>>>> Stashed changes
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d005      	beq.n	8002efc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2204      	movs	r2, #4
 8002ef4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	73fb      	strb	r3, [r7, #15]
 8002efa:	e047      	b.n	8002f8c <HAL_DMA_Abort_IT+0xb4>
=======
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d005      	beq.n	8002f48 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2204      	movs	r2, #4
 8002f40:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	73fb      	strb	r3, [r7, #15]
 8002f46:	e047      	b.n	8002fd8 <HAL_DMA_Abort_IT+0xb4>
>>>>>>> Stashed changes
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
<<<<<<< Updated upstream
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f022 020e 	bic.w	r2, r2, #14
 8002f0a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 0201 	bic.w	r2, r2, #1
 8002f1a:	601a      	str	r2, [r3, #0]
=======
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 020e 	bic.w	r2, r2, #14
 8002f56:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f022 0201 	bic.w	r2, r2, #1
 8002f66:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
<<<<<<< Updated upstream
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f26:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f30:	f003 021c 	and.w	r2, r3, #28
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f38:	2101      	movs	r1, #1
 8002f3a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f3e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002f48:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00c      	beq.n	8002f6c <HAL_DMA_Abort_IT+0x94>
=======
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f72:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f7c:	f003 021c 	and.w	r2, r3, #28
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f84:	2101      	movs	r1, #1
 8002f86:	fa01 f202 	lsl.w	r2, r1, r2
 8002f8a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002f94:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00c      	beq.n	8002fb8 <HAL_DMA_Abort_IT+0x94>
>>>>>>> Stashed changes
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
<<<<<<< Updated upstream
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f5c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f60:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002f6a:	605a      	str	r2, [r3, #4]
=======
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fa8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002fac:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002fb6:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
<<<<<<< Updated upstream
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d003      	beq.n	8002f8c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	4798      	blx	r3
    }
  }
  return status;
 8002f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
	...

08002f98 <HAL_GPIO_Init>:
=======
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d003      	beq.n	8002fd8 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	4798      	blx	r3
    }
  }
  return status;
 8002fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
	...

08002fe4 <HAL_GPIO_Init>:
>>>>>>> Stashed changes
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< Updated upstream
 8002f98:	b480      	push	{r7}
 8002f9a:	b087      	sub	sp, #28
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	617b      	str	r3, [r7, #20]
=======
 8002fe4:	b480      	push	{r7}
 8002fe6:	b087      	sub	sp, #28
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
<<<<<<< Updated upstream
 8002fa6:	e166      	b.n	8003276 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	2101      	movs	r1, #1
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f000 8158 	beq.w	8003270 <HAL_GPIO_Init+0x2d8>
=======
 8002ff2:	e166      	b.n	80032c2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	2101      	movs	r1, #1
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8003000:	4013      	ands	r3, r2
 8003002:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2b00      	cmp	r3, #0
 8003008:	f000 8158 	beq.w	80032bc <HAL_GPIO_Init+0x2d8>
>>>>>>> Stashed changes
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
<<<<<<< Updated upstream
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f003 0303 	and.w	r3, r3, #3
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d005      	beq.n	8002fd8 <HAL_GPIO_Init+0x40>
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f003 0303 	and.w	r3, r3, #3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d130      	bne.n	800303a <HAL_GPIO_Init+0xa2>
=======
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f003 0303 	and.w	r3, r3, #3
 8003014:	2b01      	cmp	r3, #1
 8003016:	d005      	beq.n	8003024 <HAL_GPIO_Init+0x40>
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f003 0303 	and.w	r3, r3, #3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d130      	bne.n	8003086 <HAL_GPIO_Init+0xa2>
>>>>>>> Stashed changes
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
<<<<<<< Updated upstream
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	2203      	movs	r2, #3
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	4013      	ands	r3, r2
 8002fee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	68da      	ldr	r2, [r3, #12]
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800300e:	2201      	movs	r2, #1
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	fa02 f303 	lsl.w	r3, r2, r3
 8003016:	43db      	mvns	r3, r3
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	4013      	ands	r3, r2
 800301c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	091b      	lsrs	r3, r3, #4
 8003024:	f003 0201 	and.w	r2, r3, #1
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	fa02 f303 	lsl.w	r3, r2, r3
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	4313      	orrs	r3, r2
 8003032:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	605a      	str	r2, [r3, #4]
=======
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	2203      	movs	r2, #3
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	43db      	mvns	r3, r3
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	4013      	ands	r3, r2
 800303a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	68da      	ldr	r2, [r3, #12]
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	4313      	orrs	r3, r2
 800304c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800305a:	2201      	movs	r2, #1
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	fa02 f303 	lsl.w	r3, r2, r3
 8003062:	43db      	mvns	r3, r3
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	4013      	ands	r3, r2
 8003068:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	091b      	lsrs	r3, r3, #4
 8003070:	f003 0201 	and.w	r2, r3, #1
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	fa02 f303 	lsl.w	r3, r2, r3
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	4313      	orrs	r3, r2
 800307e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
<<<<<<< Updated upstream
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f003 0303 	and.w	r3, r3, #3
 8003042:	2b03      	cmp	r3, #3
 8003044:	d017      	beq.n	8003076 <HAL_GPIO_Init+0xde>
=======
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	2b03      	cmp	r3, #3
 8003090:	d017      	beq.n	80030c2 <HAL_GPIO_Init+0xde>
>>>>>>> Stashed changes
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
<<<<<<< Updated upstream
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	2203      	movs	r2, #3
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	43db      	mvns	r3, r3
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	4013      	ands	r3, r2
 800305c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	689a      	ldr	r2, [r3, #8]
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	fa02 f303 	lsl.w	r3, r2, r3
 800306a:	693a      	ldr	r2, [r7, #16]
 800306c:	4313      	orrs	r3, r2
 800306e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	60da      	str	r2, [r3, #12]
=======
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	2203      	movs	r2, #3
 800309e:	fa02 f303 	lsl.w	r3, r2, r3
 80030a2:	43db      	mvns	r3, r3
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	4013      	ands	r3, r2
 80030a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	689a      	ldr	r2, [r3, #8]
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	fa02 f303 	lsl.w	r3, r2, r3
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
<<<<<<< Updated upstream
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f003 0303 	and.w	r3, r3, #3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d123      	bne.n	80030ca <HAL_GPIO_Init+0x132>
=======
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f003 0303 	and.w	r3, r3, #3
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d123      	bne.n	8003116 <HAL_GPIO_Init+0x132>
>>>>>>> Stashed changes
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
<<<<<<< Updated upstream
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	08da      	lsrs	r2, r3, #3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	3208      	adds	r2, #8
 800308a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800308e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	f003 0307 	and.w	r3, r3, #7
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	220f      	movs	r2, #15
 800309a:	fa02 f303 	lsl.w	r3, r2, r3
 800309e:	43db      	mvns	r3, r3
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	4013      	ands	r3, r2
 80030a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	691a      	ldr	r2, [r3, #16]
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	f003 0307 	and.w	r3, r3, #7
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	fa02 f303 	lsl.w	r3, r2, r3
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	08da      	lsrs	r2, r3, #3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	3208      	adds	r2, #8
 80030c4:	6939      	ldr	r1, [r7, #16]
 80030c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	08da      	lsrs	r2, r3, #3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	3208      	adds	r2, #8
 80030d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	f003 0307 	and.w	r3, r3, #7
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	220f      	movs	r2, #15
 80030e6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ea:	43db      	mvns	r3, r3
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	4013      	ands	r3, r2
 80030f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	691a      	ldr	r2, [r3, #16]
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	4313      	orrs	r3, r2
 8003106:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	08da      	lsrs	r2, r3, #3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	3208      	adds	r2, #8
 8003110:	6939      	ldr	r1, [r7, #16]
 8003112:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> Stashed changes
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< Updated upstream
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	2203      	movs	r2, #3
 80030d6:	fa02 f303 	lsl.w	r3, r2, r3
 80030da:	43db      	mvns	r3, r3
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	4013      	ands	r3, r2
 80030e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f003 0203 	and.w	r2, r3, #3
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	601a      	str	r2, [r3, #0]
=======
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	2203      	movs	r2, #3
 8003122:	fa02 f303 	lsl.w	r3, r2, r3
 8003126:	43db      	mvns	r3, r3
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	4013      	ands	r3, r2
 800312c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f003 0203 	and.w	r2, r3, #3
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	fa02 f303 	lsl.w	r3, r2, r3
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	4313      	orrs	r3, r2
 8003142:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
<<<<<<< Updated upstream
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003106:	2b00      	cmp	r3, #0
 8003108:	f000 80b2 	beq.w	8003270 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800310c:	4b61      	ldr	r3, [pc, #388]	@ (8003294 <HAL_GPIO_Init+0x2fc>)
 800310e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003110:	4a60      	ldr	r2, [pc, #384]	@ (8003294 <HAL_GPIO_Init+0x2fc>)
 8003112:	f043 0301 	orr.w	r3, r3, #1
 8003116:	6613      	str	r3, [r2, #96]	@ 0x60
 8003118:	4b5e      	ldr	r3, [pc, #376]	@ (8003294 <HAL_GPIO_Init+0x2fc>)
 800311a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	60bb      	str	r3, [r7, #8]
 8003122:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003124:	4a5c      	ldr	r2, [pc, #368]	@ (8003298 <HAL_GPIO_Init+0x300>)
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	089b      	lsrs	r3, r3, #2
 800312a:	3302      	adds	r3, #2
 800312c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003130:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	f003 0303 	and.w	r3, r3, #3
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	220f      	movs	r2, #15
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	43db      	mvns	r3, r3
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	4013      	ands	r3, r2
 8003146:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800314e:	d02b      	beq.n	80031a8 <HAL_GPIO_Init+0x210>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a52      	ldr	r2, [pc, #328]	@ (800329c <HAL_GPIO_Init+0x304>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d025      	beq.n	80031a4 <HAL_GPIO_Init+0x20c>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a51      	ldr	r2, [pc, #324]	@ (80032a0 <HAL_GPIO_Init+0x308>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d01f      	beq.n	80031a0 <HAL_GPIO_Init+0x208>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a50      	ldr	r2, [pc, #320]	@ (80032a4 <HAL_GPIO_Init+0x30c>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d019      	beq.n	800319c <HAL_GPIO_Init+0x204>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a4f      	ldr	r2, [pc, #316]	@ (80032a8 <HAL_GPIO_Init+0x310>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d013      	beq.n	8003198 <HAL_GPIO_Init+0x200>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a4e      	ldr	r2, [pc, #312]	@ (80032ac <HAL_GPIO_Init+0x314>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d00d      	beq.n	8003194 <HAL_GPIO_Init+0x1fc>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a4d      	ldr	r2, [pc, #308]	@ (80032b0 <HAL_GPIO_Init+0x318>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d007      	beq.n	8003190 <HAL_GPIO_Init+0x1f8>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a4c      	ldr	r2, [pc, #304]	@ (80032b4 <HAL_GPIO_Init+0x31c>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d101      	bne.n	800318c <HAL_GPIO_Init+0x1f4>
 8003188:	2307      	movs	r3, #7
 800318a:	e00e      	b.n	80031aa <HAL_GPIO_Init+0x212>
 800318c:	2308      	movs	r3, #8
 800318e:	e00c      	b.n	80031aa <HAL_GPIO_Init+0x212>
 8003190:	2306      	movs	r3, #6
 8003192:	e00a      	b.n	80031aa <HAL_GPIO_Init+0x212>
 8003194:	2305      	movs	r3, #5
 8003196:	e008      	b.n	80031aa <HAL_GPIO_Init+0x212>
 8003198:	2304      	movs	r3, #4
 800319a:	e006      	b.n	80031aa <HAL_GPIO_Init+0x212>
 800319c:	2303      	movs	r3, #3
 800319e:	e004      	b.n	80031aa <HAL_GPIO_Init+0x212>
 80031a0:	2302      	movs	r3, #2
 80031a2:	e002      	b.n	80031aa <HAL_GPIO_Init+0x212>
 80031a4:	2301      	movs	r3, #1
 80031a6:	e000      	b.n	80031aa <HAL_GPIO_Init+0x212>
 80031a8:	2300      	movs	r3, #0
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	f002 0203 	and.w	r2, r2, #3
 80031b0:	0092      	lsls	r2, r2, #2
 80031b2:	4093      	lsls	r3, r2
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80031ba:	4937      	ldr	r1, [pc, #220]	@ (8003298 <HAL_GPIO_Init+0x300>)
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	089b      	lsrs	r3, r3, #2
 80031c0:	3302      	adds	r3, #2
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80031c8:	4b3b      	ldr	r3, [pc, #236]	@ (80032b8 <HAL_GPIO_Init+0x320>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	43db      	mvns	r3, r3
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	4013      	ands	r3, r2
 80031d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d003      	beq.n	80031ec <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80031ec:	4a32      	ldr	r2, [pc, #200]	@ (80032b8 <HAL_GPIO_Init+0x320>)
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80031f2:	4b31      	ldr	r3, [pc, #196]	@ (80032b8 <HAL_GPIO_Init+0x320>)
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	43db      	mvns	r3, r3
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	4013      	ands	r3, r2
 8003200:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d003      	beq.n	8003216 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	4313      	orrs	r3, r2
 8003214:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003216:	4a28      	ldr	r2, [pc, #160]	@ (80032b8 <HAL_GPIO_Init+0x320>)
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800321c:	4b26      	ldr	r3, [pc, #152]	@ (80032b8 <HAL_GPIO_Init+0x320>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	43db      	mvns	r3, r3
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	4013      	ands	r3, r2
 800322a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d003      	beq.n	8003240 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	4313      	orrs	r3, r2
 800323e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003240:	4a1d      	ldr	r2, [pc, #116]	@ (80032b8 <HAL_GPIO_Init+0x320>)
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003246:	4b1c      	ldr	r3, [pc, #112]	@ (80032b8 <HAL_GPIO_Init+0x320>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	43db      	mvns	r3, r3
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	4013      	ands	r3, r2
 8003254:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d003      	beq.n	800326a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	4313      	orrs	r3, r2
 8003268:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800326a:	4a13      	ldr	r2, [pc, #76]	@ (80032b8 <HAL_GPIO_Init+0x320>)
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	6013      	str	r3, [r2, #0]
=======
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003152:	2b00      	cmp	r3, #0
 8003154:	f000 80b2 	beq.w	80032bc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003158:	4b61      	ldr	r3, [pc, #388]	@ (80032e0 <HAL_GPIO_Init+0x2fc>)
 800315a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800315c:	4a60      	ldr	r2, [pc, #384]	@ (80032e0 <HAL_GPIO_Init+0x2fc>)
 800315e:	f043 0301 	orr.w	r3, r3, #1
 8003162:	6613      	str	r3, [r2, #96]	@ 0x60
 8003164:	4b5e      	ldr	r3, [pc, #376]	@ (80032e0 <HAL_GPIO_Init+0x2fc>)
 8003166:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	60bb      	str	r3, [r7, #8]
 800316e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003170:	4a5c      	ldr	r2, [pc, #368]	@ (80032e4 <HAL_GPIO_Init+0x300>)
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	089b      	lsrs	r3, r3, #2
 8003176:	3302      	adds	r3, #2
 8003178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800317c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	f003 0303 	and.w	r3, r3, #3
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	220f      	movs	r2, #15
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	43db      	mvns	r3, r3
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	4013      	ands	r3, r2
 8003192:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800319a:	d02b      	beq.n	80031f4 <HAL_GPIO_Init+0x210>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a52      	ldr	r2, [pc, #328]	@ (80032e8 <HAL_GPIO_Init+0x304>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d025      	beq.n	80031f0 <HAL_GPIO_Init+0x20c>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a51      	ldr	r2, [pc, #324]	@ (80032ec <HAL_GPIO_Init+0x308>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d01f      	beq.n	80031ec <HAL_GPIO_Init+0x208>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a50      	ldr	r2, [pc, #320]	@ (80032f0 <HAL_GPIO_Init+0x30c>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d019      	beq.n	80031e8 <HAL_GPIO_Init+0x204>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a4f      	ldr	r2, [pc, #316]	@ (80032f4 <HAL_GPIO_Init+0x310>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d013      	beq.n	80031e4 <HAL_GPIO_Init+0x200>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a4e      	ldr	r2, [pc, #312]	@ (80032f8 <HAL_GPIO_Init+0x314>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d00d      	beq.n	80031e0 <HAL_GPIO_Init+0x1fc>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a4d      	ldr	r2, [pc, #308]	@ (80032fc <HAL_GPIO_Init+0x318>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d007      	beq.n	80031dc <HAL_GPIO_Init+0x1f8>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a4c      	ldr	r2, [pc, #304]	@ (8003300 <HAL_GPIO_Init+0x31c>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d101      	bne.n	80031d8 <HAL_GPIO_Init+0x1f4>
 80031d4:	2307      	movs	r3, #7
 80031d6:	e00e      	b.n	80031f6 <HAL_GPIO_Init+0x212>
 80031d8:	2308      	movs	r3, #8
 80031da:	e00c      	b.n	80031f6 <HAL_GPIO_Init+0x212>
 80031dc:	2306      	movs	r3, #6
 80031de:	e00a      	b.n	80031f6 <HAL_GPIO_Init+0x212>
 80031e0:	2305      	movs	r3, #5
 80031e2:	e008      	b.n	80031f6 <HAL_GPIO_Init+0x212>
 80031e4:	2304      	movs	r3, #4
 80031e6:	e006      	b.n	80031f6 <HAL_GPIO_Init+0x212>
 80031e8:	2303      	movs	r3, #3
 80031ea:	e004      	b.n	80031f6 <HAL_GPIO_Init+0x212>
 80031ec:	2302      	movs	r3, #2
 80031ee:	e002      	b.n	80031f6 <HAL_GPIO_Init+0x212>
 80031f0:	2301      	movs	r3, #1
 80031f2:	e000      	b.n	80031f6 <HAL_GPIO_Init+0x212>
 80031f4:	2300      	movs	r3, #0
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	f002 0203 	and.w	r2, r2, #3
 80031fc:	0092      	lsls	r2, r2, #2
 80031fe:	4093      	lsls	r3, r2
 8003200:	693a      	ldr	r2, [r7, #16]
 8003202:	4313      	orrs	r3, r2
 8003204:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003206:	4937      	ldr	r1, [pc, #220]	@ (80032e4 <HAL_GPIO_Init+0x300>)
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	089b      	lsrs	r3, r3, #2
 800320c:	3302      	adds	r3, #2
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003214:	4b3b      	ldr	r3, [pc, #236]	@ (8003304 <HAL_GPIO_Init+0x320>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	43db      	mvns	r3, r3
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	4013      	ands	r3, r2
 8003222:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d003      	beq.n	8003238 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	4313      	orrs	r3, r2
 8003236:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003238:	4a32      	ldr	r2, [pc, #200]	@ (8003304 <HAL_GPIO_Init+0x320>)
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800323e:	4b31      	ldr	r3, [pc, #196]	@ (8003304 <HAL_GPIO_Init+0x320>)
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	43db      	mvns	r3, r3
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	4013      	ands	r3, r2
 800324c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	4313      	orrs	r3, r2
 8003260:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003262:	4a28      	ldr	r2, [pc, #160]	@ (8003304 <HAL_GPIO_Init+0x320>)
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003268:	4b26      	ldr	r3, [pc, #152]	@ (8003304 <HAL_GPIO_Init+0x320>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	43db      	mvns	r3, r3
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	4013      	ands	r3, r2
 8003276:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d003      	beq.n	800328c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003284:	693a      	ldr	r2, [r7, #16]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	4313      	orrs	r3, r2
 800328a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800328c:	4a1d      	ldr	r2, [pc, #116]	@ (8003304 <HAL_GPIO_Init+0x320>)
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003292:	4b1c      	ldr	r3, [pc, #112]	@ (8003304 <HAL_GPIO_Init+0x320>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	43db      	mvns	r3, r3
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	4013      	ands	r3, r2
 80032a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d003      	beq.n	80032b6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80032b6:	4a13      	ldr	r2, [pc, #76]	@ (8003304 <HAL_GPIO_Init+0x320>)
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
      }
    }

    position++;
<<<<<<< Updated upstream
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	3301      	adds	r3, #1
 8003274:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	fa22 f303 	lsr.w	r3, r2, r3
 8003280:	2b00      	cmp	r3, #0
 8003282:	f47f ae91 	bne.w	8002fa8 <HAL_GPIO_Init+0x10>
  }
}
 8003286:	bf00      	nop
 8003288:	bf00      	nop
 800328a:	371c      	adds	r7, #28
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr
 8003294:	40021000 	.word	0x40021000
 8003298:	40010000 	.word	0x40010000
 800329c:	48000400 	.word	0x48000400
 80032a0:	48000800 	.word	0x48000800
 80032a4:	48000c00 	.word	0x48000c00
 80032a8:	48001000 	.word	0x48001000
 80032ac:	48001400 	.word	0x48001400
 80032b0:	48001800 	.word	0x48001800
 80032b4:	48001c00 	.word	0x48001c00
 80032b8:	40010400 	.word	0x40010400

080032bc <HAL_GPIO_DeInit>:
=======
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	3301      	adds	r3, #1
 80032c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	fa22 f303 	lsr.w	r3, r2, r3
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f47f ae91 	bne.w	8002ff4 <HAL_GPIO_Init+0x10>
  }
}
 80032d2:	bf00      	nop
 80032d4:	bf00      	nop
 80032d6:	371c      	adds	r7, #28
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr
 80032e0:	40021000 	.word	0x40021000
 80032e4:	40010000 	.word	0x40010000
 80032e8:	48000400 	.word	0x48000400
 80032ec:	48000800 	.word	0x48000800
 80032f0:	48000c00 	.word	0x48000c00
 80032f4:	48001000 	.word	0x48001000
 80032f8:	48001400 	.word	0x48001400
 80032fc:	48001800 	.word	0x48001800
 8003300:	48001c00 	.word	0x48001c00
 8003304:	40010400 	.word	0x40010400

08003308 <HAL_GPIO_DeInit>:
>>>>>>> Stashed changes
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
<<<<<<< Updated upstream
 80032bc:	b480      	push	{r7}
 80032be:	b087      	sub	sp, #28
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032c6:	2300      	movs	r3, #0
 80032c8:	617b      	str	r3, [r7, #20]
=======
 8003308:	b480      	push	{r7}
 800330a:	b087      	sub	sp, #28
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003312:	2300      	movs	r3, #0
 8003314:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
<<<<<<< Updated upstream
 80032ca:	e0c9      	b.n	8003460 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80032cc:	2201      	movs	r2, #1
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	4013      	ands	r3, r2
 80032d8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f000 80bc 	beq.w	800345a <HAL_GPIO_DeInit+0x19e>
=======
 8003316:	e0c9      	b.n	80034ac <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003318:	2201      	movs	r2, #1
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	fa02 f303 	lsl.w	r3, r2, r3
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	4013      	ands	r3, r2
 8003324:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 80bc 	beq.w	80034a6 <HAL_GPIO_DeInit+0x19e>
>>>>>>> Stashed changes
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
<<<<<<< Updated upstream
 80032e2:	4a66      	ldr	r2, [pc, #408]	@ (800347c <HAL_GPIO_DeInit+0x1c0>)
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	089b      	lsrs	r3, r3, #2
 80032e8:	3302      	adds	r3, #2
 80032ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032ee:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	f003 0303 	and.w	r3, r3, #3
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	220f      	movs	r2, #15
 80032fa:	fa02 f303 	lsl.w	r3, r2, r3
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	4013      	ands	r3, r2
 8003302:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800330a:	d02b      	beq.n	8003364 <HAL_GPIO_DeInit+0xa8>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a5c      	ldr	r2, [pc, #368]	@ (8003480 <HAL_GPIO_DeInit+0x1c4>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d025      	beq.n	8003360 <HAL_GPIO_DeInit+0xa4>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a5b      	ldr	r2, [pc, #364]	@ (8003484 <HAL_GPIO_DeInit+0x1c8>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d01f      	beq.n	800335c <HAL_GPIO_DeInit+0xa0>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4a5a      	ldr	r2, [pc, #360]	@ (8003488 <HAL_GPIO_DeInit+0x1cc>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d019      	beq.n	8003358 <HAL_GPIO_DeInit+0x9c>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a59      	ldr	r2, [pc, #356]	@ (800348c <HAL_GPIO_DeInit+0x1d0>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d013      	beq.n	8003354 <HAL_GPIO_DeInit+0x98>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a58      	ldr	r2, [pc, #352]	@ (8003490 <HAL_GPIO_DeInit+0x1d4>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d00d      	beq.n	8003350 <HAL_GPIO_DeInit+0x94>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a57      	ldr	r2, [pc, #348]	@ (8003494 <HAL_GPIO_DeInit+0x1d8>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d007      	beq.n	800334c <HAL_GPIO_DeInit+0x90>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a56      	ldr	r2, [pc, #344]	@ (8003498 <HAL_GPIO_DeInit+0x1dc>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d101      	bne.n	8003348 <HAL_GPIO_DeInit+0x8c>
 8003344:	2307      	movs	r3, #7
 8003346:	e00e      	b.n	8003366 <HAL_GPIO_DeInit+0xaa>
 8003348:	2308      	movs	r3, #8
 800334a:	e00c      	b.n	8003366 <HAL_GPIO_DeInit+0xaa>
 800334c:	2306      	movs	r3, #6
 800334e:	e00a      	b.n	8003366 <HAL_GPIO_DeInit+0xaa>
 8003350:	2305      	movs	r3, #5
 8003352:	e008      	b.n	8003366 <HAL_GPIO_DeInit+0xaa>
 8003354:	2304      	movs	r3, #4
 8003356:	e006      	b.n	8003366 <HAL_GPIO_DeInit+0xaa>
 8003358:	2303      	movs	r3, #3
 800335a:	e004      	b.n	8003366 <HAL_GPIO_DeInit+0xaa>
 800335c:	2302      	movs	r3, #2
 800335e:	e002      	b.n	8003366 <HAL_GPIO_DeInit+0xaa>
 8003360:	2301      	movs	r3, #1
 8003362:	e000      	b.n	8003366 <HAL_GPIO_DeInit+0xaa>
 8003364:	2300      	movs	r3, #0
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	f002 0203 	and.w	r2, r2, #3
 800336c:	0092      	lsls	r2, r2, #2
 800336e:	4093      	lsls	r3, r2
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	429a      	cmp	r2, r3
 8003374:	d132      	bne.n	80033dc <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003376:	4b49      	ldr	r3, [pc, #292]	@ (800349c <HAL_GPIO_DeInit+0x1e0>)
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	43db      	mvns	r3, r3
 800337e:	4947      	ldr	r1, [pc, #284]	@ (800349c <HAL_GPIO_DeInit+0x1e0>)
 8003380:	4013      	ands	r3, r2
 8003382:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003384:	4b45      	ldr	r3, [pc, #276]	@ (800349c <HAL_GPIO_DeInit+0x1e0>)
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	43db      	mvns	r3, r3
 800338c:	4943      	ldr	r1, [pc, #268]	@ (800349c <HAL_GPIO_DeInit+0x1e0>)
 800338e:	4013      	ands	r3, r2
 8003390:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003392:	4b42      	ldr	r3, [pc, #264]	@ (800349c <HAL_GPIO_DeInit+0x1e0>)
 8003394:	68da      	ldr	r2, [r3, #12]
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	43db      	mvns	r3, r3
 800339a:	4940      	ldr	r1, [pc, #256]	@ (800349c <HAL_GPIO_DeInit+0x1e0>)
 800339c:	4013      	ands	r3, r2
 800339e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80033a0:	4b3e      	ldr	r3, [pc, #248]	@ (800349c <HAL_GPIO_DeInit+0x1e0>)
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	43db      	mvns	r3, r3
 80033a8:	493c      	ldr	r1, [pc, #240]	@ (800349c <HAL_GPIO_DeInit+0x1e0>)
 80033aa:	4013      	ands	r3, r2
 80033ac:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f003 0303 	and.w	r3, r3, #3
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	220f      	movs	r2, #15
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80033be:	4a2f      	ldr	r2, [pc, #188]	@ (800347c <HAL_GPIO_DeInit+0x1c0>)
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	089b      	lsrs	r3, r3, #2
 80033c4:	3302      	adds	r3, #2
 80033c6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	43da      	mvns	r2, r3
 80033ce:	482b      	ldr	r0, [pc, #172]	@ (800347c <HAL_GPIO_DeInit+0x1c0>)
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	089b      	lsrs	r3, r3, #2
 80033d4:	400a      	ands	r2, r1
 80033d6:	3302      	adds	r3, #2
 80033d8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
=======
 800332e:	4a66      	ldr	r2, [pc, #408]	@ (80034c8 <HAL_GPIO_DeInit+0x1c0>)
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	089b      	lsrs	r3, r3, #2
 8003334:	3302      	adds	r3, #2
 8003336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800333a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	f003 0303 	and.w	r3, r3, #3
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	220f      	movs	r2, #15
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	4013      	ands	r3, r2
 800334e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003356:	d02b      	beq.n	80033b0 <HAL_GPIO_DeInit+0xa8>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a5c      	ldr	r2, [pc, #368]	@ (80034cc <HAL_GPIO_DeInit+0x1c4>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d025      	beq.n	80033ac <HAL_GPIO_DeInit+0xa4>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a5b      	ldr	r2, [pc, #364]	@ (80034d0 <HAL_GPIO_DeInit+0x1c8>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d01f      	beq.n	80033a8 <HAL_GPIO_DeInit+0xa0>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a5a      	ldr	r2, [pc, #360]	@ (80034d4 <HAL_GPIO_DeInit+0x1cc>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d019      	beq.n	80033a4 <HAL_GPIO_DeInit+0x9c>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a59      	ldr	r2, [pc, #356]	@ (80034d8 <HAL_GPIO_DeInit+0x1d0>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d013      	beq.n	80033a0 <HAL_GPIO_DeInit+0x98>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a58      	ldr	r2, [pc, #352]	@ (80034dc <HAL_GPIO_DeInit+0x1d4>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d00d      	beq.n	800339c <HAL_GPIO_DeInit+0x94>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a57      	ldr	r2, [pc, #348]	@ (80034e0 <HAL_GPIO_DeInit+0x1d8>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d007      	beq.n	8003398 <HAL_GPIO_DeInit+0x90>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a56      	ldr	r2, [pc, #344]	@ (80034e4 <HAL_GPIO_DeInit+0x1dc>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d101      	bne.n	8003394 <HAL_GPIO_DeInit+0x8c>
 8003390:	2307      	movs	r3, #7
 8003392:	e00e      	b.n	80033b2 <HAL_GPIO_DeInit+0xaa>
 8003394:	2308      	movs	r3, #8
 8003396:	e00c      	b.n	80033b2 <HAL_GPIO_DeInit+0xaa>
 8003398:	2306      	movs	r3, #6
 800339a:	e00a      	b.n	80033b2 <HAL_GPIO_DeInit+0xaa>
 800339c:	2305      	movs	r3, #5
 800339e:	e008      	b.n	80033b2 <HAL_GPIO_DeInit+0xaa>
 80033a0:	2304      	movs	r3, #4
 80033a2:	e006      	b.n	80033b2 <HAL_GPIO_DeInit+0xaa>
 80033a4:	2303      	movs	r3, #3
 80033a6:	e004      	b.n	80033b2 <HAL_GPIO_DeInit+0xaa>
 80033a8:	2302      	movs	r3, #2
 80033aa:	e002      	b.n	80033b2 <HAL_GPIO_DeInit+0xaa>
 80033ac:	2301      	movs	r3, #1
 80033ae:	e000      	b.n	80033b2 <HAL_GPIO_DeInit+0xaa>
 80033b0:	2300      	movs	r3, #0
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	f002 0203 	and.w	r2, r2, #3
 80033b8:	0092      	lsls	r2, r2, #2
 80033ba:	4093      	lsls	r3, r2
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d132      	bne.n	8003428 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80033c2:	4b49      	ldr	r3, [pc, #292]	@ (80034e8 <HAL_GPIO_DeInit+0x1e0>)
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	43db      	mvns	r3, r3
 80033ca:	4947      	ldr	r1, [pc, #284]	@ (80034e8 <HAL_GPIO_DeInit+0x1e0>)
 80033cc:	4013      	ands	r3, r2
 80033ce:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80033d0:	4b45      	ldr	r3, [pc, #276]	@ (80034e8 <HAL_GPIO_DeInit+0x1e0>)
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	43db      	mvns	r3, r3
 80033d8:	4943      	ldr	r1, [pc, #268]	@ (80034e8 <HAL_GPIO_DeInit+0x1e0>)
 80033da:	4013      	ands	r3, r2
 80033dc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80033de:	4b42      	ldr	r3, [pc, #264]	@ (80034e8 <HAL_GPIO_DeInit+0x1e0>)
 80033e0:	68da      	ldr	r2, [r3, #12]
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	43db      	mvns	r3, r3
 80033e6:	4940      	ldr	r1, [pc, #256]	@ (80034e8 <HAL_GPIO_DeInit+0x1e0>)
 80033e8:	4013      	ands	r3, r2
 80033ea:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80033ec:	4b3e      	ldr	r3, [pc, #248]	@ (80034e8 <HAL_GPIO_DeInit+0x1e0>)
 80033ee:	689a      	ldr	r2, [r3, #8]
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	43db      	mvns	r3, r3
 80033f4:	493c      	ldr	r1, [pc, #240]	@ (80034e8 <HAL_GPIO_DeInit+0x1e0>)
 80033f6:	4013      	ands	r3, r2
 80033f8:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	f003 0303 	and.w	r3, r3, #3
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	220f      	movs	r2, #15
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800340a:	4a2f      	ldr	r2, [pc, #188]	@ (80034c8 <HAL_GPIO_DeInit+0x1c0>)
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	089b      	lsrs	r3, r3, #2
 8003410:	3302      	adds	r3, #2
 8003412:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	43da      	mvns	r2, r3
 800341a:	482b      	ldr	r0, [pc, #172]	@ (80034c8 <HAL_GPIO_DeInit+0x1c0>)
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	089b      	lsrs	r3, r3, #2
 8003420:	400a      	ands	r2, r1
 8003422:	3302      	adds	r3, #2
 8003424:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
>>>>>>> Stashed changes
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
<<<<<<< Updated upstream
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	2103      	movs	r1, #3
 80033e6:	fa01 f303 	lsl.w	r3, r1, r3
 80033ea:	431a      	orrs	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	08da      	lsrs	r2, r3, #3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	3208      	adds	r2, #8
 80033f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	f003 0307 	and.w	r3, r3, #7
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	220f      	movs	r2, #15
 8003406:	fa02 f303 	lsl.w	r3, r2, r3
 800340a:	43db      	mvns	r3, r3
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	08d2      	lsrs	r2, r2, #3
 8003410:	4019      	ands	r1, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	3208      	adds	r2, #8
 8003416:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	689a      	ldr	r2, [r3, #8]
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	2103      	movs	r1, #3
 8003424:	fa01 f303 	lsl.w	r3, r1, r3
 8003428:	43db      	mvns	r3, r3
 800342a:	401a      	ands	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685a      	ldr	r2, [r3, #4]
 8003434:	2101      	movs	r1, #1
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	fa01 f303 	lsl.w	r3, r1, r3
 800343c:	43db      	mvns	r3, r3
 800343e:	401a      	ands	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68da      	ldr	r2, [r3, #12]
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	2103      	movs	r1, #3
 800344e:	fa01 f303 	lsl.w	r3, r1, r3
 8003452:	43db      	mvns	r3, r3
 8003454:	401a      	ands	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	60da      	str	r2, [r3, #12]
=======
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	2103      	movs	r1, #3
 8003432:	fa01 f303 	lsl.w	r3, r1, r3
 8003436:	431a      	orrs	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	08da      	lsrs	r2, r3, #3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	3208      	adds	r2, #8
 8003444:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	f003 0307 	and.w	r3, r3, #7
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	220f      	movs	r2, #15
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	43db      	mvns	r3, r3
 8003458:	697a      	ldr	r2, [r7, #20]
 800345a:	08d2      	lsrs	r2, r2, #3
 800345c:	4019      	ands	r1, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	3208      	adds	r2, #8
 8003462:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	689a      	ldr	r2, [r3, #8]
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	2103      	movs	r1, #3
 8003470:	fa01 f303 	lsl.w	r3, r1, r3
 8003474:	43db      	mvns	r3, r3
 8003476:	401a      	ands	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	2101      	movs	r1, #1
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	fa01 f303 	lsl.w	r3, r1, r3
 8003488:	43db      	mvns	r3, r3
 800348a:	401a      	ands	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	68da      	ldr	r2, [r3, #12]
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	2103      	movs	r1, #3
 800349a:	fa01 f303 	lsl.w	r3, r1, r3
 800349e:	43db      	mvns	r3, r3
 80034a0:	401a      	ands	r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
<<<<<<< Updated upstream
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	3301      	adds	r3, #1
 800345e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003460:	683a      	ldr	r2, [r7, #0]
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	fa22 f303 	lsr.w	r3, r2, r3
 8003468:	2b00      	cmp	r3, #0
 800346a:	f47f af2f 	bne.w	80032cc <HAL_GPIO_DeInit+0x10>
  }
}
 800346e:	bf00      	nop
 8003470:	bf00      	nop
 8003472:	371c      	adds	r7, #28
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr
 800347c:	40010000 	.word	0x40010000
 8003480:	48000400 	.word	0x48000400
 8003484:	48000800 	.word	0x48000800
 8003488:	48000c00 	.word	0x48000c00
 800348c:	48001000 	.word	0x48001000
 8003490:	48001400 	.word	0x48001400
 8003494:	48001800 	.word	0x48001800
 8003498:	48001c00 	.word	0x48001c00
 800349c:	40010400 	.word	0x40010400

080034a0 <HAL_GPIO_EXTI_IRQHandler>:
=======
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	3301      	adds	r3, #1
 80034aa:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	fa22 f303 	lsr.w	r3, r2, r3
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f47f af2f 	bne.w	8003318 <HAL_GPIO_DeInit+0x10>
  }
}
 80034ba:	bf00      	nop
 80034bc:	bf00      	nop
 80034be:	371c      	adds	r7, #28
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr
 80034c8:	40010000 	.word	0x40010000
 80034cc:	48000400 	.word	0x48000400
 80034d0:	48000800 	.word	0x48000800
 80034d4:	48000c00 	.word	0x48000c00
 80034d8:	48001000 	.word	0x48001000
 80034dc:	48001400 	.word	0x48001400
 80034e0:	48001800 	.word	0x48001800
 80034e4:	48001c00 	.word	0x48001c00
 80034e8:	40010400 	.word	0x40010400

080034ec <HAL_GPIO_EXTI_IRQHandler>:
>>>>>>> Stashed changes
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
<<<<<<< Updated upstream
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	4603      	mov	r3, r0
 80034a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80034aa:	4b08      	ldr	r3, [pc, #32]	@ (80034cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034ac:	695a      	ldr	r2, [r3, #20]
 80034ae:	88fb      	ldrh	r3, [r7, #6]
 80034b0:	4013      	ands	r3, r2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d006      	beq.n	80034c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80034b6:	4a05      	ldr	r2, [pc, #20]	@ (80034cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034b8:	88fb      	ldrh	r3, [r7, #6]
 80034ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80034bc:	88fb      	ldrh	r3, [r7, #6]
 80034be:	4618      	mov	r0, r3
 80034c0:	f7fd fe9a 	bl	80011f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80034c4:	bf00      	nop
 80034c6:	3708      	adds	r7, #8
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	40010400 	.word	0x40010400

080034d0 <HAL_I2C_Init>:
=======
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	4603      	mov	r3, r0
 80034f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80034f6:	4b08      	ldr	r3, [pc, #32]	@ (8003518 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034f8:	695a      	ldr	r2, [r3, #20]
 80034fa:	88fb      	ldrh	r3, [r7, #6]
 80034fc:	4013      	ands	r3, r2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d006      	beq.n	8003510 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003502:	4a05      	ldr	r2, [pc, #20]	@ (8003518 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003504:	88fb      	ldrh	r3, [r7, #6]
 8003506:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003508:	88fb      	ldrh	r3, [r7, #6]
 800350a:	4618      	mov	r0, r3
 800350c:	f7fd fe76 	bl	80011fc <HAL_GPIO_EXTI_Callback>
  }
}
 8003510:	bf00      	nop
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	40010400 	.word	0x40010400

0800351c <HAL_I2C_Init>:
>>>>>>> Stashed changes
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
<<<<<<< Updated upstream
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e08d      	b.n	80035fe <HAL_I2C_Init+0x12e>
=======
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e08d      	b.n	800364a <HAL_I2C_Init+0x12e>
>>>>>>> Stashed changes
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
<<<<<<< Updated upstream
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d106      	bne.n	80034fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
=======
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d106      	bne.n	8003548 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
>>>>>>> Stashed changes

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
<<<<<<< Updated upstream
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7fe fd1e 	bl	8001f38 <HAL_I2C_MspInit>
=======
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f7fe fd1e 	bl	8001f84 <HAL_I2C_MspInit>
>>>>>>> Stashed changes
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
<<<<<<< Updated upstream
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2224      	movs	r2, #36	@ 0x24
 8003500:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f022 0201 	bic.w	r2, r2, #1
 8003512:	601a      	str	r2, [r3, #0]
=======
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2224      	movs	r2, #36	@ 0x24
 800354c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0201 	bic.w	r2, r2, #1
 800355e:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
<<<<<<< Updated upstream
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685a      	ldr	r2, [r3, #4]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003520:	611a      	str	r2, [r3, #16]
=======
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800356c:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
<<<<<<< Updated upstream
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003530:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d107      	bne.n	800354a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	689a      	ldr	r2, [r3, #8]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003546:	609a      	str	r2, [r3, #8]
 8003548:	e006      	b.n	8003558 <HAL_I2C_Init+0x88>
=======
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	689a      	ldr	r2, [r3, #8]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800357c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d107      	bne.n	8003596 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	689a      	ldr	r2, [r3, #8]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003592:	609a      	str	r2, [r3, #8]
 8003594:	e006      	b.n	80035a4 <HAL_I2C_Init+0x88>
>>>>>>> Stashed changes
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
<<<<<<< Updated upstream
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	689a      	ldr	r2, [r3, #8]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003556:	609a      	str	r2, [r3, #8]
=======
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	689a      	ldr	r2, [r3, #8]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80035a2:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
<<<<<<< Updated upstream
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	2b02      	cmp	r3, #2
 800355e:	d108      	bne.n	8003572 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800356e:	605a      	str	r2, [r3, #4]
 8003570:	e007      	b.n	8003582 <HAL_I2C_Init+0xb2>
=======
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d108      	bne.n	80035be <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	685a      	ldr	r2, [r3, #4]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035ba:	605a      	str	r2, [r3, #4]
 80035bc:	e007      	b.n	80035ce <HAL_I2C_Init+0xb2>
>>>>>>> Stashed changes
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
<<<<<<< Updated upstream
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	685a      	ldr	r2, [r3, #4]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003580:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	6812      	ldr	r2, [r2, #0]
 800358c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003590:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003594:	6053      	str	r3, [r2, #4]
=======
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	6812      	ldr	r2, [r2, #0]
 80035d8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80035dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80035e0:	6053      	str	r3, [r2, #4]
>>>>>>> Stashed changes

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
<<<<<<< Updated upstream
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68da      	ldr	r2, [r3, #12]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80035a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	691a      	ldr	r2, [r3, #16]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	430a      	orrs	r2, r1
 80035be:	60da      	str	r2, [r3, #12]
=======
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68da      	ldr	r2, [r3, #12]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80035f0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	691a      	ldr	r2, [r3, #16]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	430a      	orrs	r2, r1
 800360a:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
<<<<<<< Updated upstream
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	69d9      	ldr	r1, [r3, #28]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a1a      	ldr	r2, [r3, #32]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	430a      	orrs	r2, r1
 80035ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f042 0201 	orr.w	r2, r2, #1
 80035de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2220      	movs	r2, #32
 80035ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <HAL_I2C_DeInit>:
=======
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	69d9      	ldr	r1, [r3, #28]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a1a      	ldr	r2, [r3, #32]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	430a      	orrs	r2, r1
 800361a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f042 0201 	orr.w	r2, r2, #1
 800362a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2220      	movs	r2, #32
 8003636:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3708      	adds	r7, #8
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <HAL_I2C_DeInit>:
>>>>>>> Stashed changes
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
<<<<<<< Updated upstream
 8003606:	b580      	push	{r7, lr}
 8003608:	b082      	sub	sp, #8
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d101      	bne.n	8003618 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e021      	b.n	800365c <HAL_I2C_DeInit+0x56>
=======
 8003652:	b580      	push	{r7, lr}
 8003654:	b082      	sub	sp, #8
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d101      	bne.n	8003664 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e021      	b.n	80036a8 <HAL_I2C_DeInit+0x56>
>>>>>>> Stashed changes
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
<<<<<<< Updated upstream
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2224      	movs	r2, #36	@ 0x24
 800361c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 0201 	bic.w	r2, r2, #1
 800362e:	601a      	str	r2, [r3, #0]
=======
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2224      	movs	r2, #36	@ 0x24
 8003668:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 0201 	bic.w	r2, r2, #1
 800367a:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
<<<<<<< Updated upstream
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f7fe fcdf 	bl	8001ff4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800365a:	2300      	movs	r3, #0
}
 800365c:	4618      	mov	r0, r3
 800365e:	3708      	adds	r7, #8
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <HAL_I2C_Mem_Write>:
=======
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f7fe fcdf 	bl	8002040 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3708      	adds	r7, #8
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <HAL_I2C_Mem_Write>:
>>>>>>> Stashed changes
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< Updated upstream
 8003664:	b580      	push	{r7, lr}
 8003666:	b088      	sub	sp, #32
 8003668:	af02      	add	r7, sp, #8
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	4608      	mov	r0, r1
 800366e:	4611      	mov	r1, r2
 8003670:	461a      	mov	r2, r3
 8003672:	4603      	mov	r3, r0
 8003674:	817b      	strh	r3, [r7, #10]
 8003676:	460b      	mov	r3, r1
 8003678:	813b      	strh	r3, [r7, #8]
 800367a:	4613      	mov	r3, r2
 800367c:	80fb      	strh	r3, [r7, #6]
=======
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b088      	sub	sp, #32
 80036b4:	af02      	add	r7, sp, #8
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	4608      	mov	r0, r1
 80036ba:	4611      	mov	r1, r2
 80036bc:	461a      	mov	r2, r3
 80036be:	4603      	mov	r3, r0
 80036c0:	817b      	strh	r3, [r7, #10]
 80036c2:	460b      	mov	r3, r1
 80036c4:	813b      	strh	r3, [r7, #8]
 80036c6:	4613      	mov	r3, r2
 80036c8:	80fb      	strh	r3, [r7, #6]
>>>>>>> Stashed changes
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
<<<<<<< Updated upstream
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b20      	cmp	r3, #32
 8003688:	f040 80f9 	bne.w	800387e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800368c:	6a3b      	ldr	r3, [r7, #32]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d002      	beq.n	8003698 <HAL_I2C_Mem_Write+0x34>
 8003692:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003694:	2b00      	cmp	r3, #0
 8003696:	d105      	bne.n	80036a4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800369e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e0ed      	b.n	8003880 <HAL_I2C_Mem_Write+0x21c>
=======
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b20      	cmp	r3, #32
 80036d4:	f040 80f9 	bne.w	80038ca <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80036d8:	6a3b      	ldr	r3, [r7, #32]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d002      	beq.n	80036e4 <HAL_I2C_Mem_Write+0x34>
 80036de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d105      	bne.n	80036f0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036ea:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e0ed      	b.n	80038cc <HAL_I2C_Mem_Write+0x21c>
>>>>>>> Stashed changes
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
<<<<<<< Updated upstream
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d101      	bne.n	80036b2 <HAL_I2C_Mem_Write+0x4e>
 80036ae:	2302      	movs	r3, #2
 80036b0:	e0e6      	b.n	8003880 <HAL_I2C_Mem_Write+0x21c>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80036ba:	f7ff f81d 	bl	80026f8 <HAL_GetTick>
 80036be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	2319      	movs	r3, #25
 80036c6:	2201      	movs	r2, #1
 80036c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80036cc:	68f8      	ldr	r0, [r7, #12]
 80036ce:	f000 fac3 	bl	8003c58 <I2C_WaitOnFlagUntilTimeout>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d001      	beq.n	80036dc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e0d1      	b.n	8003880 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2221      	movs	r2, #33	@ 0x21
 80036e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2240      	movs	r2, #64	@ 0x40
 80036e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6a3a      	ldr	r2, [r7, #32]
 80036f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80036fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003704:	88f8      	ldrh	r0, [r7, #6]
 8003706:	893a      	ldrh	r2, [r7, #8]
 8003708:	8979      	ldrh	r1, [r7, #10]
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	9301      	str	r3, [sp, #4]
 800370e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003710:	9300      	str	r3, [sp, #0]
 8003712:	4603      	mov	r3, r0
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f000 f9d3 	bl	8003ac0 <I2C_RequestMemoryWrite>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d005      	beq.n	800372c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e0a9      	b.n	8003880 <HAL_I2C_Mem_Write+0x21c>
=======
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d101      	bne.n	80036fe <HAL_I2C_Mem_Write+0x4e>
 80036fa:	2302      	movs	r3, #2
 80036fc:	e0e6      	b.n	80038cc <HAL_I2C_Mem_Write+0x21c>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003706:	f7ff f81d 	bl	8002744 <HAL_GetTick>
 800370a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	2319      	movs	r3, #25
 8003712:	2201      	movs	r2, #1
 8003714:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f000 fac3 	bl	8003ca4 <I2C_WaitOnFlagUntilTimeout>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d001      	beq.n	8003728 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e0d1      	b.n	80038cc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2221      	movs	r2, #33	@ 0x21
 800372c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2240      	movs	r2, #64	@ 0x40
 8003734:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6a3a      	ldr	r2, [r7, #32]
 8003742:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003748:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003750:	88f8      	ldrh	r0, [r7, #6]
 8003752:	893a      	ldrh	r2, [r7, #8]
 8003754:	8979      	ldrh	r1, [r7, #10]
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	9301      	str	r3, [sp, #4]
 800375a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800375c:	9300      	str	r3, [sp, #0]
 800375e:	4603      	mov	r3, r0
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f000 f9d3 	bl	8003b0c <I2C_RequestMemoryWrite>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d005      	beq.n	8003778 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e0a9      	b.n	80038cc <HAL_I2C_Mem_Write+0x21c>
>>>>>>> Stashed changes
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
<<<<<<< Updated upstream
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003730:	b29b      	uxth	r3, r3
 8003732:	2bff      	cmp	r3, #255	@ 0xff
 8003734:	d90e      	bls.n	8003754 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	22ff      	movs	r2, #255	@ 0xff
 800373a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003740:	b2da      	uxtb	r2, r3
 8003742:	8979      	ldrh	r1, [r7, #10]
 8003744:	2300      	movs	r3, #0
 8003746:	9300      	str	r3, [sp, #0]
 8003748:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f000 fc47 	bl	8003fe0 <I2C_TransferConfig>
 8003752:	e00f      	b.n	8003774 <HAL_I2C_Mem_Write+0x110>
=======
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800377c:	b29b      	uxth	r3, r3
 800377e:	2bff      	cmp	r3, #255	@ 0xff
 8003780:	d90e      	bls.n	80037a0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	22ff      	movs	r2, #255	@ 0xff
 8003786:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800378c:	b2da      	uxtb	r2, r3
 800378e:	8979      	ldrh	r1, [r7, #10]
 8003790:	2300      	movs	r3, #0
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003798:	68f8      	ldr	r0, [r7, #12]
 800379a:	f000 fc47 	bl	800402c <I2C_TransferConfig>
 800379e:	e00f      	b.n	80037c0 <HAL_I2C_Mem_Write+0x110>
>>>>>>> Stashed changes
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
<<<<<<< Updated upstream
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003758:	b29a      	uxth	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003762:	b2da      	uxtb	r2, r3
 8003764:	8979      	ldrh	r1, [r7, #10]
 8003766:	2300      	movs	r3, #0
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	f000 fc36 	bl	8003fe0 <I2C_TransferConfig>
=======
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037ae:	b2da      	uxtb	r2, r3
 80037b0:	8979      	ldrh	r1, [r7, #10]
 80037b2:	2300      	movs	r3, #0
 80037b4:	9300      	str	r3, [sp, #0]
 80037b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f000 fc36 	bl	800402c <I2C_TransferConfig>
>>>>>>> Stashed changes
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
<<<<<<< Updated upstream
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f000 fac6 	bl	8003d0a <I2C_WaitOnTXISFlagUntilTimeout>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e07b      	b.n	8003880 <HAL_I2C_Mem_Write+0x21c>
=======
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f000 fac6 	bl	8003d56 <I2C_WaitOnTXISFlagUntilTimeout>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d001      	beq.n	80037d4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e07b      	b.n	80038cc <HAL_I2C_Mem_Write+0x21c>
>>>>>>> Stashed changes
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
<<<<<<< Updated upstream
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800378c:	781a      	ldrb	r2, [r3, #0]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003798:	1c5a      	adds	r2, r3, #1
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	3b01      	subs	r3, #1
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037b0:	3b01      	subs	r3, #1
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037bc:	b29b      	uxth	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d034      	beq.n	800382c <HAL_I2C_Mem_Write+0x1c8>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d130      	bne.n	800382c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037d0:	2200      	movs	r2, #0
 80037d2:	2180      	movs	r1, #128	@ 0x80
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f000 fa3f 	bl	8003c58 <I2C_WaitOnFlagUntilTimeout>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e04d      	b.n	8003880 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	2bff      	cmp	r3, #255	@ 0xff
 80037ec:	d90e      	bls.n	800380c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	22ff      	movs	r2, #255	@ 0xff
 80037f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037f8:	b2da      	uxtb	r2, r3
 80037fa:	8979      	ldrh	r1, [r7, #10]
 80037fc:	2300      	movs	r3, #0
 80037fe:	9300      	str	r3, [sp, #0]
 8003800:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f000 fbeb 	bl	8003fe0 <I2C_TransferConfig>
 800380a:	e00f      	b.n	800382c <HAL_I2C_Mem_Write+0x1c8>
=======
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d8:	781a      	ldrb	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e4:	1c5a      	adds	r2, r3, #1
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	3b01      	subs	r3, #1
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037fc:	3b01      	subs	r3, #1
 80037fe:	b29a      	uxth	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003808:	b29b      	uxth	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d034      	beq.n	8003878 <HAL_I2C_Mem_Write+0x1c8>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003812:	2b00      	cmp	r3, #0
 8003814:	d130      	bne.n	8003878 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800381c:	2200      	movs	r2, #0
 800381e:	2180      	movs	r1, #128	@ 0x80
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f000 fa3f 	bl	8003ca4 <I2C_WaitOnFlagUntilTimeout>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e04d      	b.n	80038cc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003834:	b29b      	uxth	r3, r3
 8003836:	2bff      	cmp	r3, #255	@ 0xff
 8003838:	d90e      	bls.n	8003858 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	22ff      	movs	r2, #255	@ 0xff
 800383e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003844:	b2da      	uxtb	r2, r3
 8003846:	8979      	ldrh	r1, [r7, #10]
 8003848:	2300      	movs	r3, #0
 800384a:	9300      	str	r3, [sp, #0]
 800384c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	f000 fbeb 	bl	800402c <I2C_TransferConfig>
 8003856:	e00f      	b.n	8003878 <HAL_I2C_Mem_Write+0x1c8>
>>>>>>> Stashed changes
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
<<<<<<< Updated upstream
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003810:	b29a      	uxth	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800381a:	b2da      	uxtb	r2, r3
 800381c:	8979      	ldrh	r1, [r7, #10]
 800381e:	2300      	movs	r3, #0
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003826:	68f8      	ldr	r0, [r7, #12]
 8003828:	f000 fbda 	bl	8003fe0 <I2C_TransferConfig>
=======
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800385c:	b29a      	uxth	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003866:	b2da      	uxtb	r2, r3
 8003868:	8979      	ldrh	r1, [r7, #10]
 800386a:	2300      	movs	r3, #0
 800386c:	9300      	str	r3, [sp, #0]
 800386e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f000 fbda 	bl	800402c <I2C_TransferConfig>
>>>>>>> Stashed changes
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
<<<<<<< Updated upstream
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003830:	b29b      	uxth	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d19e      	bne.n	8003774 <HAL_I2C_Mem_Write+0x110>
=======
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800387c:	b29b      	uxth	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d19e      	bne.n	80037c0 <HAL_I2C_Mem_Write+0x110>
>>>>>>> Stashed changes

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
<<<<<<< Updated upstream
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800383a:	68f8      	ldr	r0, [r7, #12]
 800383c:	f000 faac 	bl	8003d98 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e01a      	b.n	8003880 <HAL_I2C_Mem_Write+0x21c>
=======
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003886:	68f8      	ldr	r0, [r7, #12]
 8003888:	f000 faac 	bl	8003de4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e01a      	b.n	80038cc <HAL_I2C_Mem_Write+0x21c>
>>>>>>> Stashed changes
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
<<<<<<< Updated upstream
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2220      	movs	r2, #32
 8003850:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	6859      	ldr	r1, [r3, #4]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	4b0a      	ldr	r3, [pc, #40]	@ (8003888 <HAL_I2C_Mem_Write+0x224>)
 800385e:	400b      	ands	r3, r1
 8003860:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2220      	movs	r2, #32
 8003866:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800387a:	2300      	movs	r3, #0
 800387c:	e000      	b.n	8003880 <HAL_I2C_Mem_Write+0x21c>
=======
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2220      	movs	r2, #32
 800389c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	6859      	ldr	r1, [r3, #4]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	4b0a      	ldr	r3, [pc, #40]	@ (80038d4 <HAL_I2C_Mem_Write+0x224>)
 80038aa:	400b      	ands	r3, r1
 80038ac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2220      	movs	r2, #32
 80038b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80038c6:	2300      	movs	r3, #0
 80038c8:	e000      	b.n	80038cc <HAL_I2C_Mem_Write+0x21c>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
 800387e:	2302      	movs	r3, #2
  }
}
 8003880:	4618      	mov	r0, r3
 8003882:	3718      	adds	r7, #24
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	fe00e800 	.word	0xfe00e800

0800388c <HAL_I2C_Mem_Read>:
=======
 80038ca:	2302      	movs	r3, #2
  }
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3718      	adds	r7, #24
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	fe00e800 	.word	0xfe00e800

080038d8 <HAL_I2C_Mem_Read>:
>>>>>>> Stashed changes
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< Updated upstream
 800388c:	b580      	push	{r7, lr}
 800388e:	b088      	sub	sp, #32
 8003890:	af02      	add	r7, sp, #8
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	4608      	mov	r0, r1
 8003896:	4611      	mov	r1, r2
 8003898:	461a      	mov	r2, r3
 800389a:	4603      	mov	r3, r0
 800389c:	817b      	strh	r3, [r7, #10]
 800389e:	460b      	mov	r3, r1
 80038a0:	813b      	strh	r3, [r7, #8]
 80038a2:	4613      	mov	r3, r2
 80038a4:	80fb      	strh	r3, [r7, #6]
=======
 80038d8:	b580      	push	{r7, lr}
 80038da:	b088      	sub	sp, #32
 80038dc:	af02      	add	r7, sp, #8
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	4608      	mov	r0, r1
 80038e2:	4611      	mov	r1, r2
 80038e4:	461a      	mov	r2, r3
 80038e6:	4603      	mov	r3, r0
 80038e8:	817b      	strh	r3, [r7, #10]
 80038ea:	460b      	mov	r3, r1
 80038ec:	813b      	strh	r3, [r7, #8]
 80038ee:	4613      	mov	r3, r2
 80038f0:	80fb      	strh	r3, [r7, #6]
>>>>>>> Stashed changes
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
<<<<<<< Updated upstream
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b20      	cmp	r3, #32
 80038b0:	f040 80fd 	bne.w	8003aae <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80038b4:	6a3b      	ldr	r3, [r7, #32]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d002      	beq.n	80038c0 <HAL_I2C_Mem_Read+0x34>
 80038ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d105      	bne.n	80038cc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038c6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e0f1      	b.n	8003ab0 <HAL_I2C_Mem_Read+0x224>
=======
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b20      	cmp	r3, #32
 80038fc:	f040 80fd 	bne.w	8003afa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003900:	6a3b      	ldr	r3, [r7, #32]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d002      	beq.n	800390c <HAL_I2C_Mem_Read+0x34>
 8003906:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003908:	2b00      	cmp	r3, #0
 800390a:	d105      	bne.n	8003918 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003912:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e0f1      	b.n	8003afc <HAL_I2C_Mem_Read+0x224>
>>>>>>> Stashed changes
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
<<<<<<< Updated upstream
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d101      	bne.n	80038da <HAL_I2C_Mem_Read+0x4e>
 80038d6:	2302      	movs	r3, #2
 80038d8:	e0ea      	b.n	8003ab0 <HAL_I2C_Mem_Read+0x224>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80038e2:	f7fe ff09 	bl	80026f8 <HAL_GetTick>
 80038e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	2319      	movs	r3, #25
 80038ee:	2201      	movs	r2, #1
 80038f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f000 f9af 	bl	8003c58 <I2C_WaitOnFlagUntilTimeout>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e0d5      	b.n	8003ab0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2222      	movs	r2, #34	@ 0x22
 8003908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2240      	movs	r2, #64	@ 0x40
 8003910:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6a3a      	ldr	r2, [r7, #32]
 800391e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003924:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800392c:	88f8      	ldrh	r0, [r7, #6]
 800392e:	893a      	ldrh	r2, [r7, #8]
 8003930:	8979      	ldrh	r1, [r7, #10]
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	9301      	str	r3, [sp, #4]
 8003936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003938:	9300      	str	r3, [sp, #0]
 800393a:	4603      	mov	r3, r0
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f000 f913 	bl	8003b68 <I2C_RequestMemoryRead>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d005      	beq.n	8003954 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e0ad      	b.n	8003ab0 <HAL_I2C_Mem_Read+0x224>
=======
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800391e:	2b01      	cmp	r3, #1
 8003920:	d101      	bne.n	8003926 <HAL_I2C_Mem_Read+0x4e>
 8003922:	2302      	movs	r3, #2
 8003924:	e0ea      	b.n	8003afc <HAL_I2C_Mem_Read+0x224>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800392e:	f7fe ff09 	bl	8002744 <HAL_GetTick>
 8003932:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	2319      	movs	r3, #25
 800393a:	2201      	movs	r2, #1
 800393c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f000 f9af 	bl	8003ca4 <I2C_WaitOnFlagUntilTimeout>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e0d5      	b.n	8003afc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2222      	movs	r2, #34	@ 0x22
 8003954:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2240      	movs	r2, #64	@ 0x40
 800395c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2200      	movs	r2, #0
 8003964:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6a3a      	ldr	r2, [r7, #32]
 800396a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003970:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003978:	88f8      	ldrh	r0, [r7, #6]
 800397a:	893a      	ldrh	r2, [r7, #8]
 800397c:	8979      	ldrh	r1, [r7, #10]
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	9301      	str	r3, [sp, #4]
 8003982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003984:	9300      	str	r3, [sp, #0]
 8003986:	4603      	mov	r3, r0
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	f000 f913 	bl	8003bb4 <I2C_RequestMemoryRead>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d005      	beq.n	80039a0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e0ad      	b.n	8003afc <HAL_I2C_Mem_Read+0x224>
>>>>>>> Stashed changes
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
<<<<<<< Updated upstream
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003958:	b29b      	uxth	r3, r3
 800395a:	2bff      	cmp	r3, #255	@ 0xff
 800395c:	d90e      	bls.n	800397c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2201      	movs	r2, #1
 8003962:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003968:	b2da      	uxtb	r2, r3
 800396a:	8979      	ldrh	r1, [r7, #10]
 800396c:	4b52      	ldr	r3, [pc, #328]	@ (8003ab8 <HAL_I2C_Mem_Read+0x22c>)
 800396e:	9300      	str	r3, [sp, #0]
 8003970:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f000 fb33 	bl	8003fe0 <I2C_TransferConfig>
 800397a:	e00f      	b.n	800399c <HAL_I2C_Mem_Read+0x110>
=======
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	2bff      	cmp	r3, #255	@ 0xff
 80039a8:	d90e      	bls.n	80039c8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2201      	movs	r2, #1
 80039ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039b4:	b2da      	uxtb	r2, r3
 80039b6:	8979      	ldrh	r1, [r7, #10]
 80039b8:	4b52      	ldr	r3, [pc, #328]	@ (8003b04 <HAL_I2C_Mem_Read+0x22c>)
 80039ba:	9300      	str	r3, [sp, #0]
 80039bc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f000 fb33 	bl	800402c <I2C_TransferConfig>
 80039c6:	e00f      	b.n	80039e8 <HAL_I2C_Mem_Read+0x110>
>>>>>>> Stashed changes
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
<<<<<<< Updated upstream
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003980:	b29a      	uxth	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800398a:	b2da      	uxtb	r2, r3
 800398c:	8979      	ldrh	r1, [r7, #10]
 800398e:	4b4a      	ldr	r3, [pc, #296]	@ (8003ab8 <HAL_I2C_Mem_Read+0x22c>)
 8003990:	9300      	str	r3, [sp, #0]
 8003992:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f000 fb22 	bl	8003fe0 <I2C_TransferConfig>
=======
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039d6:	b2da      	uxtb	r2, r3
 80039d8:	8979      	ldrh	r1, [r7, #10]
 80039da:	4b4a      	ldr	r3, [pc, #296]	@ (8003b04 <HAL_I2C_Mem_Read+0x22c>)
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80039e2:	68f8      	ldr	r0, [r7, #12]
 80039e4:	f000 fb22 	bl	800402c <I2C_TransferConfig>
>>>>>>> Stashed changes
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
<<<<<<< Updated upstream
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	9300      	str	r3, [sp, #0]
 80039a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039a2:	2200      	movs	r2, #0
 80039a4:	2104      	movs	r1, #4
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f000 f956 	bl	8003c58 <I2C_WaitOnFlagUntilTimeout>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e07c      	b.n	8003ab0 <HAL_I2C_Mem_Read+0x224>
=======
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	9300      	str	r3, [sp, #0]
 80039ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ee:	2200      	movs	r2, #0
 80039f0:	2104      	movs	r1, #4
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	f000 f956 	bl	8003ca4 <I2C_WaitOnFlagUntilTimeout>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e07c      	b.n	8003afc <HAL_I2C_Mem_Read+0x224>
>>>>>>> Stashed changes
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
<<<<<<< Updated upstream
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c0:	b2d2      	uxtb	r2, r2
 80039c2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c8:	1c5a      	adds	r2, r3, #1
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039d2:	3b01      	subs	r3, #1
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039de:	b29b      	uxth	r3, r3
 80039e0:	3b01      	subs	r3, #1
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d034      	beq.n	8003a5c <HAL_I2C_Mem_Read+0x1d0>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d130      	bne.n	8003a5c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	9300      	str	r3, [sp, #0]
 80039fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a00:	2200      	movs	r2, #0
 8003a02:	2180      	movs	r1, #128	@ 0x80
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f000 f927 	bl	8003c58 <I2C_WaitOnFlagUntilTimeout>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d001      	beq.n	8003a14 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e04d      	b.n	8003ab0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	2bff      	cmp	r3, #255	@ 0xff
 8003a1c:	d90e      	bls.n	8003a3c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2201      	movs	r2, #1
 8003a22:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a28:	b2da      	uxtb	r2, r3
 8003a2a:	8979      	ldrh	r1, [r7, #10]
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	9300      	str	r3, [sp, #0]
 8003a30:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003a34:	68f8      	ldr	r0, [r7, #12]
 8003a36:	f000 fad3 	bl	8003fe0 <I2C_TransferConfig>
 8003a3a:	e00f      	b.n	8003a5c <HAL_I2C_Mem_Read+0x1d0>
=======
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0c:	b2d2      	uxtb	r2, r2
 8003a0e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a14:	1c5a      	adds	r2, r3, #1
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d034      	beq.n	8003aa8 <HAL_I2C_Mem_Read+0x1d0>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d130      	bne.n	8003aa8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	9300      	str	r3, [sp, #0]
 8003a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	2180      	movs	r1, #128	@ 0x80
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f000 f927 	bl	8003ca4 <I2C_WaitOnFlagUntilTimeout>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d001      	beq.n	8003a60 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e04d      	b.n	8003afc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	2bff      	cmp	r3, #255	@ 0xff
 8003a68:	d90e      	bls.n	8003a88 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a74:	b2da      	uxtb	r2, r3
 8003a76:	8979      	ldrh	r1, [r7, #10]
 8003a78:	2300      	movs	r3, #0
 8003a7a:	9300      	str	r3, [sp, #0]
 8003a7c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003a80:	68f8      	ldr	r0, [r7, #12]
 8003a82:	f000 fad3 	bl	800402c <I2C_TransferConfig>
 8003a86:	e00f      	b.n	8003aa8 <HAL_I2C_Mem_Read+0x1d0>
>>>>>>> Stashed changes
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
<<<<<<< Updated upstream
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a4a:	b2da      	uxtb	r2, r3
 8003a4c:	8979      	ldrh	r1, [r7, #10]
 8003a4e:	2300      	movs	r3, #0
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a56:	68f8      	ldr	r0, [r7, #12]
 8003a58:	f000 fac2 	bl	8003fe0 <I2C_TransferConfig>
=======
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a96:	b2da      	uxtb	r2, r3
 8003a98:	8979      	ldrh	r1, [r7, #10]
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	9300      	str	r3, [sp, #0]
 8003a9e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f000 fac2 	bl	800402c <I2C_TransferConfig>
>>>>>>> Stashed changes
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
<<<<<<< Updated upstream
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d19a      	bne.n	800399c <HAL_I2C_Mem_Read+0x110>
=======
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d19a      	bne.n	80039e8 <HAL_I2C_Mem_Read+0x110>
>>>>>>> Stashed changes

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
<<<<<<< Updated upstream
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a6a:	68f8      	ldr	r0, [r7, #12]
 8003a6c:	f000 f994 	bl	8003d98 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e01a      	b.n	8003ab0 <HAL_I2C_Mem_Read+0x224>
=======
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f000 f994 	bl	8003de4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e01a      	b.n	8003afc <HAL_I2C_Mem_Read+0x224>
>>>>>>> Stashed changes
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
<<<<<<< Updated upstream
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2220      	movs	r2, #32
 8003a80:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	6859      	ldr	r1, [r3, #4]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8003abc <HAL_I2C_Mem_Read+0x230>)
 8003a8e:	400b      	ands	r3, r1
 8003a90:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2220      	movs	r2, #32
 8003a96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	e000      	b.n	8003ab0 <HAL_I2C_Mem_Read+0x224>
=======
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2220      	movs	r2, #32
 8003acc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	6859      	ldr	r1, [r3, #4]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8003b08 <HAL_I2C_Mem_Read+0x230>)
 8003ada:	400b      	ands	r3, r1
 8003adc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003af6:	2300      	movs	r3, #0
 8003af8:	e000      	b.n	8003afc <HAL_I2C_Mem_Read+0x224>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
 8003aae:	2302      	movs	r3, #2
  }
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3718      	adds	r7, #24
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	80002400 	.word	0x80002400
 8003abc:	fe00e800 	.word	0xfe00e800

08003ac0 <I2C_RequestMemoryWrite>:
=======
 8003afa:	2302      	movs	r3, #2
  }
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3718      	adds	r7, #24
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	80002400 	.word	0x80002400
 8003b08:	fe00e800 	.word	0xfe00e800

08003b0c <I2C_RequestMemoryWrite>:
>>>>>>> Stashed changes
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
<<<<<<< Updated upstream
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af02      	add	r7, sp, #8
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	4608      	mov	r0, r1
 8003aca:	4611      	mov	r1, r2
 8003acc:	461a      	mov	r2, r3
 8003ace:	4603      	mov	r3, r0
 8003ad0:	817b      	strh	r3, [r7, #10]
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	813b      	strh	r3, [r7, #8]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003ada:	88fb      	ldrh	r3, [r7, #6]
 8003adc:	b2da      	uxtb	r2, r3
 8003ade:	8979      	ldrh	r1, [r7, #10]
 8003ae0:	4b20      	ldr	r3, [pc, #128]	@ (8003b64 <I2C_RequestMemoryWrite+0xa4>)
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f000 fa79 	bl	8003fe0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aee:	69fa      	ldr	r2, [r7, #28]
 8003af0:	69b9      	ldr	r1, [r7, #24]
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f000 f909 	bl	8003d0a <I2C_WaitOnTXISFlagUntilTimeout>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e02c      	b.n	8003b5c <I2C_RequestMemoryWrite+0x9c>
=======
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b086      	sub	sp, #24
 8003b10:	af02      	add	r7, sp, #8
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	4608      	mov	r0, r1
 8003b16:	4611      	mov	r1, r2
 8003b18:	461a      	mov	r2, r3
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	817b      	strh	r3, [r7, #10]
 8003b1e:	460b      	mov	r3, r1
 8003b20:	813b      	strh	r3, [r7, #8]
 8003b22:	4613      	mov	r3, r2
 8003b24:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003b26:	88fb      	ldrh	r3, [r7, #6]
 8003b28:	b2da      	uxtb	r2, r3
 8003b2a:	8979      	ldrh	r1, [r7, #10]
 8003b2c:	4b20      	ldr	r3, [pc, #128]	@ (8003bb0 <I2C_RequestMemoryWrite+0xa4>)
 8003b2e:	9300      	str	r3, [sp, #0]
 8003b30:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f000 fa79 	bl	800402c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b3a:	69fa      	ldr	r2, [r7, #28]
 8003b3c:	69b9      	ldr	r1, [r7, #24]
 8003b3e:	68f8      	ldr	r0, [r7, #12]
 8003b40:	f000 f909 	bl	8003d56 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e02c      	b.n	8003ba8 <I2C_RequestMemoryWrite+0x9c>
>>>>>>> Stashed changes
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
<<<<<<< Updated upstream
 8003b02:	88fb      	ldrh	r3, [r7, #6]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d105      	bne.n	8003b14 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b08:	893b      	ldrh	r3, [r7, #8]
 8003b0a:	b2da      	uxtb	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b12:	e015      	b.n	8003b40 <I2C_RequestMemoryWrite+0x80>
=======
 8003b4e:	88fb      	ldrh	r3, [r7, #6]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d105      	bne.n	8003b60 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b54:	893b      	ldrh	r3, [r7, #8]
 8003b56:	b2da      	uxtb	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b5e:	e015      	b.n	8003b8c <I2C_RequestMemoryWrite+0x80>
>>>>>>> Stashed changes
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
<<<<<<< Updated upstream
 8003b14:	893b      	ldrh	r3, [r7, #8]
 8003b16:	0a1b      	lsrs	r3, r3, #8
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	b2da      	uxtb	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b22:	69fa      	ldr	r2, [r7, #28]
 8003b24:	69b9      	ldr	r1, [r7, #24]
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f000 f8ef 	bl	8003d0a <I2C_WaitOnTXISFlagUntilTimeout>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e012      	b.n	8003b5c <I2C_RequestMemoryWrite+0x9c>
=======
 8003b60:	893b      	ldrh	r3, [r7, #8]
 8003b62:	0a1b      	lsrs	r3, r3, #8
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	b2da      	uxtb	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b6e:	69fa      	ldr	r2, [r7, #28]
 8003b70:	69b9      	ldr	r1, [r7, #24]
 8003b72:	68f8      	ldr	r0, [r7, #12]
 8003b74:	f000 f8ef 	bl	8003d56 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e012      	b.n	8003ba8 <I2C_RequestMemoryWrite+0x9c>
>>>>>>> Stashed changes
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
<<<<<<< Updated upstream
 8003b36:	893b      	ldrh	r3, [r7, #8]
 8003b38:	b2da      	uxtb	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	629a      	str	r2, [r3, #40]	@ 0x28
=======
 8003b82:	893b      	ldrh	r3, [r7, #8]
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	629a      	str	r2, [r3, #40]	@ 0x28
>>>>>>> Stashed changes
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
<<<<<<< Updated upstream
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	9300      	str	r3, [sp, #0]
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	2200      	movs	r2, #0
 8003b48:	2180      	movs	r1, #128	@ 0x80
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	f000 f884 	bl	8003c58 <I2C_WaitOnFlagUntilTimeout>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d001      	beq.n	8003b5a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e000      	b.n	8003b5c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	80002000 	.word	0x80002000

08003b68 <I2C_RequestMemoryRead>:
=======
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	9300      	str	r3, [sp, #0]
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	2200      	movs	r2, #0
 8003b94:	2180      	movs	r1, #128	@ 0x80
 8003b96:	68f8      	ldr	r0, [r7, #12]
 8003b98:	f000 f884 	bl	8003ca4 <I2C_WaitOnFlagUntilTimeout>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e000      	b.n	8003ba8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	80002000 	.word	0x80002000

08003bb4 <I2C_RequestMemoryRead>:
>>>>>>> Stashed changes
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
<<<<<<< Updated upstream
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b086      	sub	sp, #24
 8003b6c:	af02      	add	r7, sp, #8
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	4608      	mov	r0, r1
 8003b72:	4611      	mov	r1, r2
 8003b74:	461a      	mov	r2, r3
 8003b76:	4603      	mov	r3, r0
 8003b78:	817b      	strh	r3, [r7, #10]
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	813b      	strh	r3, [r7, #8]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003b82:	88fb      	ldrh	r3, [r7, #6]
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	8979      	ldrh	r1, [r7, #10]
 8003b88:	4b20      	ldr	r3, [pc, #128]	@ (8003c0c <I2C_RequestMemoryRead+0xa4>)
 8003b8a:	9300      	str	r3, [sp, #0]
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	68f8      	ldr	r0, [r7, #12]
 8003b90:	f000 fa26 	bl	8003fe0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b94:	69fa      	ldr	r2, [r7, #28]
 8003b96:	69b9      	ldr	r1, [r7, #24]
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f000 f8b6 	bl	8003d0a <I2C_WaitOnTXISFlagUntilTimeout>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e02c      	b.n	8003c02 <I2C_RequestMemoryRead+0x9a>
=======
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af02      	add	r7, sp, #8
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	4608      	mov	r0, r1
 8003bbe:	4611      	mov	r1, r2
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	817b      	strh	r3, [r7, #10]
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	813b      	strh	r3, [r7, #8]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003bce:	88fb      	ldrh	r3, [r7, #6]
 8003bd0:	b2da      	uxtb	r2, r3
 8003bd2:	8979      	ldrh	r1, [r7, #10]
 8003bd4:	4b20      	ldr	r3, [pc, #128]	@ (8003c58 <I2C_RequestMemoryRead+0xa4>)
 8003bd6:	9300      	str	r3, [sp, #0]
 8003bd8:	2300      	movs	r3, #0
 8003bda:	68f8      	ldr	r0, [r7, #12]
 8003bdc:	f000 fa26 	bl	800402c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003be0:	69fa      	ldr	r2, [r7, #28]
 8003be2:	69b9      	ldr	r1, [r7, #24]
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f000 f8b6 	bl	8003d56 <I2C_WaitOnTXISFlagUntilTimeout>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d001      	beq.n	8003bf4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e02c      	b.n	8003c4e <I2C_RequestMemoryRead+0x9a>
>>>>>>> Stashed changes
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
<<<<<<< Updated upstream
 8003ba8:	88fb      	ldrh	r3, [r7, #6]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d105      	bne.n	8003bba <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003bae:	893b      	ldrh	r3, [r7, #8]
 8003bb0:	b2da      	uxtb	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	629a      	str	r2, [r3, #40]	@ 0x28
 8003bb8:	e015      	b.n	8003be6 <I2C_RequestMemoryRead+0x7e>
=======
 8003bf4:	88fb      	ldrh	r3, [r7, #6]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d105      	bne.n	8003c06 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003bfa:	893b      	ldrh	r3, [r7, #8]
 8003bfc:	b2da      	uxtb	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	629a      	str	r2, [r3, #40]	@ 0x28
 8003c04:	e015      	b.n	8003c32 <I2C_RequestMemoryRead+0x7e>
>>>>>>> Stashed changes
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
<<<<<<< Updated upstream
 8003bba:	893b      	ldrh	r3, [r7, #8]
 8003bbc:	0a1b      	lsrs	r3, r3, #8
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	b2da      	uxtb	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bc8:	69fa      	ldr	r2, [r7, #28]
 8003bca:	69b9      	ldr	r1, [r7, #24]
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f000 f89c 	bl	8003d0a <I2C_WaitOnTXISFlagUntilTimeout>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d001      	beq.n	8003bdc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e012      	b.n	8003c02 <I2C_RequestMemoryRead+0x9a>
=======
 8003c06:	893b      	ldrh	r3, [r7, #8]
 8003c08:	0a1b      	lsrs	r3, r3, #8
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	b2da      	uxtb	r2, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c14:	69fa      	ldr	r2, [r7, #28]
 8003c16:	69b9      	ldr	r1, [r7, #24]
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f000 f89c 	bl	8003d56 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d001      	beq.n	8003c28 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e012      	b.n	8003c4e <I2C_RequestMemoryRead+0x9a>
>>>>>>> Stashed changes
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
<<<<<<< Updated upstream
 8003bdc:	893b      	ldrh	r3, [r7, #8]
 8003bde:	b2da      	uxtb	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	629a      	str	r2, [r3, #40]	@ 0x28
=======
 8003c28:	893b      	ldrh	r3, [r7, #8]
 8003c2a:	b2da      	uxtb	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	629a      	str	r2, [r3, #40]	@ 0x28
>>>>>>> Stashed changes
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
<<<<<<< Updated upstream
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	2200      	movs	r2, #0
 8003bee:	2140      	movs	r1, #64	@ 0x40
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	f000 f831 	bl	8003c58 <I2C_WaitOnFlagUntilTimeout>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d001      	beq.n	8003c00 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e000      	b.n	8003c02 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	80002000 	.word	0x80002000

08003c10 <I2C_Flush_TXDR>:
=======
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	9300      	str	r3, [sp, #0]
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	2140      	movs	r1, #64	@ 0x40
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f000 f831 	bl	8003ca4 <I2C_WaitOnFlagUntilTimeout>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d001      	beq.n	8003c4c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e000      	b.n	8003c4e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	80002000 	.word	0x80002000

08003c5c <I2C_Flush_TXDR>:
>>>>>>> Stashed changes
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
<<<<<<< Updated upstream
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d103      	bne.n	8003c2e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	629a      	str	r2, [r3, #40]	@ 0x28
=======
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d103      	bne.n	8003c7a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2200      	movs	r2, #0
 8003c78:	629a      	str	r2, [r3, #40]	@ 0x28
>>>>>>> Stashed changes
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
<<<<<<< Updated upstream
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d007      	beq.n	8003c4c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	699a      	ldr	r2, [r3, #24]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f042 0201 	orr.w	r2, r2, #1
 8003c4a:	619a      	str	r2, [r3, #24]
  }
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <I2C_WaitOnFlagUntilTimeout>:
=======
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	f003 0301 	and.w	r3, r3, #1
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d007      	beq.n	8003c98 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	699a      	ldr	r2, [r3, #24]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f042 0201 	orr.w	r2, r2, #1
 8003c96:	619a      	str	r2, [r3, #24]
  }
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <I2C_WaitOnFlagUntilTimeout>:
>>>>>>> Stashed changes
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< Updated upstream
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	603b      	str	r3, [r7, #0]
 8003c64:	4613      	mov	r3, r2
 8003c66:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c68:	e03b      	b.n	8003ce2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c6a:	69ba      	ldr	r2, [r7, #24]
 8003c6c:	6839      	ldr	r1, [r7, #0]
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	f000 f8d6 	bl	8003e20 <I2C_IsErrorOccurred>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e041      	b.n	8003d02 <I2C_WaitOnFlagUntilTimeout+0xaa>
=======
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	603b      	str	r3, [r7, #0]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cb4:	e03b      	b.n	8003d2e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	6839      	ldr	r1, [r7, #0]
 8003cba:	68f8      	ldr	r0, [r7, #12]
 8003cbc:	f000 f8d6 	bl	8003e6c <I2C_IsErrorOccurred>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e041      	b.n	8003d4e <I2C_WaitOnFlagUntilTimeout+0xaa>
>>>>>>> Stashed changes
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
<<<<<<< Updated upstream
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c84:	d02d      	beq.n	8003ce2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c86:	f7fe fd37 	bl	80026f8 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	683a      	ldr	r2, [r7, #0]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d302      	bcc.n	8003c9c <I2C_WaitOnFlagUntilTimeout+0x44>
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d122      	bne.n	8003ce2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	699a      	ldr	r2, [r3, #24]
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	68ba      	ldr	r2, [r7, #8]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	bf0c      	ite	eq
 8003cac:	2301      	moveq	r3, #1
 8003cae:	2300      	movne	r3, #0
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	79fb      	ldrb	r3, [r7, #7]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d113      	bne.n	8003ce2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cbe:	f043 0220 	orr.w	r2, r3, #32
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2220      	movs	r2, #32
 8003cca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e00f      	b.n	8003d02 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	699a      	ldr	r2, [r3, #24]
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	4013      	ands	r3, r2
 8003cec:	68ba      	ldr	r2, [r7, #8]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	bf0c      	ite	eq
 8003cf2:	2301      	moveq	r3, #1
 8003cf4:	2300      	movne	r3, #0
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	79fb      	ldrb	r3, [r7, #7]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d0b4      	beq.n	8003c6a <I2C_WaitOnFlagUntilTimeout+0x12>
=======
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003cd0:	d02d      	beq.n	8003d2e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cd2:	f7fe fd37 	bl	8002744 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	683a      	ldr	r2, [r7, #0]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d302      	bcc.n	8003ce8 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d122      	bne.n	8003d2e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	699a      	ldr	r2, [r3, #24]
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	68ba      	ldr	r2, [r7, #8]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	bf0c      	ite	eq
 8003cf8:	2301      	moveq	r3, #1
 8003cfa:	2300      	movne	r3, #0
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	461a      	mov	r2, r3
 8003d00:	79fb      	ldrb	r3, [r7, #7]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d113      	bne.n	8003d2e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d0a:	f043 0220 	orr.w	r2, r3, #32
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2220      	movs	r2, #32
 8003d16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e00f      	b.n	8003d4e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	699a      	ldr	r2, [r3, #24]
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	4013      	ands	r3, r2
 8003d38:	68ba      	ldr	r2, [r7, #8]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	bf0c      	ite	eq
 8003d3e:	2301      	moveq	r3, #1
 8003d40:	2300      	movne	r3, #0
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	461a      	mov	r2, r3
 8003d46:	79fb      	ldrb	r3, [r7, #7]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d0b4      	beq.n	8003cb6 <I2C_WaitOnFlagUntilTimeout+0x12>
>>>>>>> Stashed changes
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< Updated upstream
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <I2C_WaitOnTXISFlagUntilTimeout>:
=======
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <I2C_WaitOnTXISFlagUntilTimeout>:
>>>>>>> Stashed changes
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
<<<<<<< Updated upstream
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b084      	sub	sp, #16
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	60f8      	str	r0, [r7, #12]
 8003d12:	60b9      	str	r1, [r7, #8]
 8003d14:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d16:	e033      	b.n	8003d80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	68b9      	ldr	r1, [r7, #8]
 8003d1c:	68f8      	ldr	r0, [r7, #12]
 8003d1e:	f000 f87f 	bl	8003e20 <I2C_IsErrorOccurred>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d001      	beq.n	8003d2c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e031      	b.n	8003d90 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
=======
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b084      	sub	sp, #16
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	60f8      	str	r0, [r7, #12]
 8003d5e:	60b9      	str	r1, [r7, #8]
 8003d60:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d62:	e033      	b.n	8003dcc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	68b9      	ldr	r1, [r7, #8]
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f000 f87f 	bl	8003e6c <I2C_IsErrorOccurred>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d001      	beq.n	8003d78 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e031      	b.n	8003ddc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
>>>>>>> Stashed changes
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
<<<<<<< Updated upstream
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d32:	d025      	beq.n	8003d80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d34:	f7fe fce0 	bl	80026f8 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	68ba      	ldr	r2, [r7, #8]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d302      	bcc.n	8003d4a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d11a      	bne.n	8003d80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d013      	beq.n	8003d80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d5c:	f043 0220 	orr.w	r2, r3, #32
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2220      	movs	r2, #32
 8003d68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e007      	b.n	8003d90 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d1c4      	bne.n	8003d18 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
=======
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d7e:	d025      	beq.n	8003dcc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d80:	f7fe fce0 	bl	8002744 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	68ba      	ldr	r2, [r7, #8]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d302      	bcc.n	8003d96 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d11a      	bne.n	8003dcc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	f003 0302 	and.w	r3, r3, #2
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d013      	beq.n	8003dcc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003da8:	f043 0220 	orr.w	r2, r3, #32
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2220      	movs	r2, #32
 8003db4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e007      	b.n	8003ddc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d1c4      	bne.n	8003d64 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
>>>>>>> Stashed changes
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< Updated upstream
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3710      	adds	r7, #16
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <I2C_WaitOnSTOPFlagUntilTimeout>:
=======
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3710      	adds	r7, #16
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <I2C_WaitOnSTOPFlagUntilTimeout>:
>>>>>>> Stashed changes
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
<<<<<<< Updated upstream
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003da4:	e02f      	b.n	8003e06 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	68b9      	ldr	r1, [r7, #8]
 8003daa:	68f8      	ldr	r0, [r7, #12]
 8003dac:	f000 f838 	bl	8003e20 <I2C_IsErrorOccurred>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e02d      	b.n	8003e16 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
=======
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003df0:	e02f      	b.n	8003e52 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	68b9      	ldr	r1, [r7, #8]
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f000 f838 	bl	8003e6c <I2C_IsErrorOccurred>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e02d      	b.n	8003e62 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
>>>>>>> Stashed changes
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
<<<<<<< Updated upstream
 8003dba:	f7fe fc9d 	bl	80026f8 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	68ba      	ldr	r2, [r7, #8]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d302      	bcc.n	8003dd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d11a      	bne.n	8003e06 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	f003 0320 	and.w	r3, r3, #32
 8003dda:	2b20      	cmp	r3, #32
 8003ddc:	d013      	beq.n	8003e06 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003de2:	f043 0220 	orr.w	r2, r3, #32
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2220      	movs	r2, #32
 8003dee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e007      	b.n	8003e16 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	f003 0320 	and.w	r3, r3, #32
 8003e10:	2b20      	cmp	r3, #32
 8003e12:	d1c8      	bne.n	8003da6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
=======
 8003e06:	f7fe fc9d 	bl	8002744 <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	68ba      	ldr	r2, [r7, #8]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d302      	bcc.n	8003e1c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d11a      	bne.n	8003e52 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	f003 0320 	and.w	r3, r3, #32
 8003e26:	2b20      	cmp	r3, #32
 8003e28:	d013      	beq.n	8003e52 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e2e:	f043 0220 	orr.w	r2, r3, #32
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2220      	movs	r2, #32
 8003e3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e007      	b.n	8003e62 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	f003 0320 	and.w	r3, r3, #32
 8003e5c:	2b20      	cmp	r3, #32
 8003e5e:	d1c8      	bne.n	8003df2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
>>>>>>> Stashed changes
      }
    }
  }
  return HAL_OK;
<<<<<<< Updated upstream
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
	...

08003e20 <I2C_IsErrorOccurred>:
=======
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3710      	adds	r7, #16
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
	...

08003e6c <I2C_IsErrorOccurred>:
>>>>>>> Stashed changes
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< Updated upstream
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b08a      	sub	sp, #40	@ 0x28
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	61fb      	str	r3, [r7, #28]
=======
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b08a      	sub	sp, #40	@ 0x28
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003e86:	2300      	movs	r3, #0
 8003e88:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
<<<<<<< Updated upstream
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	f003 0310 	and.w	r3, r3, #16
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d068      	beq.n	8003f1e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2210      	movs	r2, #16
 8003e52:	61da      	str	r2, [r3, #28]
=======
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	f003 0310 	and.w	r3, r3, #16
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d068      	beq.n	8003f6a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2210      	movs	r2, #16
 8003e9e:	61da      	str	r2, [r3, #28]
>>>>>>> Stashed changes

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
<<<<<<< Updated upstream
 8003e54:	e049      	b.n	8003eea <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e5c:	d045      	beq.n	8003eea <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003e5e:	f7fe fc4b 	bl	80026f8 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	68ba      	ldr	r2, [r7, #8]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d302      	bcc.n	8003e74 <I2C_IsErrorOccurred+0x54>
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d13a      	bne.n	8003eea <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e7e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e86:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e96:	d121      	bne.n	8003edc <I2C_IsErrorOccurred+0xbc>
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e9e:	d01d      	beq.n	8003edc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003ea0:	7cfb      	ldrb	r3, [r7, #19]
 8003ea2:	2b20      	cmp	r3, #32
 8003ea4:	d01a      	beq.n	8003edc <I2C_IsErrorOccurred+0xbc>
=======
 8003ea0:	e049      	b.n	8003f36 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ea8:	d045      	beq.n	8003f36 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003eaa:	f7fe fc4b 	bl	8002744 <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	68ba      	ldr	r2, [r7, #8]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d302      	bcc.n	8003ec0 <I2C_IsErrorOccurred+0x54>
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d13a      	bne.n	8003f36 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003eca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ed2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ede:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ee2:	d121      	bne.n	8003f28 <I2C_IsErrorOccurred+0xbc>
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003eea:	d01d      	beq.n	8003f28 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003eec:	7cfb      	ldrb	r3, [r7, #19]
 8003eee:	2b20      	cmp	r3, #32
 8003ef0:	d01a      	beq.n	8003f28 <I2C_IsErrorOccurred+0xbc>
>>>>>>> Stashed changes
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
<<<<<<< Updated upstream
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003eb4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003eb6:	f7fe fc1f 	bl	80026f8 <HAL_GetTick>
 8003eba:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ebc:	e00e      	b.n	8003edc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003ebe:	f7fe fc1b 	bl	80026f8 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	2b19      	cmp	r3, #25
 8003eca:	d907      	bls.n	8003edc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003ecc:	6a3b      	ldr	r3, [r7, #32]
 8003ece:	f043 0320 	orr.w	r3, r3, #32
 8003ed2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003eda:	e006      	b.n	8003eea <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	f003 0320 	and.w	r3, r3, #32
 8003ee6:	2b20      	cmp	r3, #32
 8003ee8:	d1e9      	bne.n	8003ebe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	f003 0320 	and.w	r3, r3, #32
 8003ef4:	2b20      	cmp	r3, #32
 8003ef6:	d003      	beq.n	8003f00 <I2C_IsErrorOccurred+0xe0>
 8003ef8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d0aa      	beq.n	8003e56 <I2C_IsErrorOccurred+0x36>
=======
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	685a      	ldr	r2, [r3, #4]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f00:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003f02:	f7fe fc1f 	bl	8002744 <HAL_GetTick>
 8003f06:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f08:	e00e      	b.n	8003f28 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003f0a:	f7fe fc1b 	bl	8002744 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	2b19      	cmp	r3, #25
 8003f16:	d907      	bls.n	8003f28 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003f18:	6a3b      	ldr	r3, [r7, #32]
 8003f1a:	f043 0320 	orr.w	r3, r3, #32
 8003f1e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003f26:	e006      	b.n	8003f36 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	f003 0320 	and.w	r3, r3, #32
 8003f32:	2b20      	cmp	r3, #32
 8003f34:	d1e9      	bne.n	8003f0a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	f003 0320 	and.w	r3, r3, #32
 8003f40:	2b20      	cmp	r3, #32
 8003f42:	d003      	beq.n	8003f4c <I2C_IsErrorOccurred+0xe0>
 8003f44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d0aa      	beq.n	8003ea2 <I2C_IsErrorOccurred+0x36>
>>>>>>> Stashed changes
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
<<<<<<< Updated upstream
 8003f00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d103      	bne.n	8003f10 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2220      	movs	r2, #32
 8003f0e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003f10:	6a3b      	ldr	r3, [r7, #32]
 8003f12:	f043 0304 	orr.w	r3, r3, #4
 8003f16:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
=======
 8003f4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d103      	bne.n	8003f5c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2220      	movs	r2, #32
 8003f5a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003f5c:	6a3b      	ldr	r3, [r7, #32]
 8003f5e:	f043 0304 	orr.w	r3, r3, #4
 8003f62:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
>>>>>>> Stashed changes
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
<<<<<<< Updated upstream
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	61bb      	str	r3, [r7, #24]
=======
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
<<<<<<< Updated upstream
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00b      	beq.n	8003f48 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003f30:	6a3b      	ldr	r3, [r7, #32]
 8003f32:	f043 0301 	orr.w	r3, r3, #1
 8003f36:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003f40:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
=======
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00b      	beq.n	8003f94 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003f7c:	6a3b      	ldr	r3, [r7, #32]
 8003f7e:	f043 0301 	orr.w	r3, r3, #1
 8003f82:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003f8c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
>>>>>>> Stashed changes
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
<<<<<<< Updated upstream
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00b      	beq.n	8003f6a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003f52:	6a3b      	ldr	r3, [r7, #32]
 8003f54:	f043 0308 	orr.w	r3, r3, #8
 8003f58:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f62:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
=======
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00b      	beq.n	8003fb6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003f9e:	6a3b      	ldr	r3, [r7, #32]
 8003fa0:	f043 0308 	orr.w	r3, r3, #8
 8003fa4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003fae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
>>>>>>> Stashed changes
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
<<<<<<< Updated upstream
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00b      	beq.n	8003f8c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003f74:	6a3b      	ldr	r3, [r7, #32]
 8003f76:	f043 0302 	orr.w	r3, r3, #2
 8003f7a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f84:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003f8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d01c      	beq.n	8003fce <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f7ff fe3b 	bl	8003c10 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	6859      	ldr	r1, [r3, #4]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	4b0d      	ldr	r3, [pc, #52]	@ (8003fdc <I2C_IsErrorOccurred+0x1bc>)
 8003fa6:	400b      	ands	r3, r1
 8003fa8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003fae:	6a3b      	ldr	r3, [r7, #32]
 8003fb0:	431a      	orrs	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2220      	movs	r2, #32
 8003fba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003fce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3728      	adds	r7, #40	@ 0x28
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	fe00e800 	.word	0xfe00e800

08003fe0 <I2C_TransferConfig>:
=======
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d00b      	beq.n	8003fd8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003fc0:	6a3b      	ldr	r3, [r7, #32]
 8003fc2:	f043 0302 	orr.w	r3, r3, #2
 8003fc6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fd0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003fd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d01c      	beq.n	800401a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	f7ff fe3b 	bl	8003c5c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6859      	ldr	r1, [r3, #4]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	4b0d      	ldr	r3, [pc, #52]	@ (8004028 <I2C_IsErrorOccurred+0x1bc>)
 8003ff2:	400b      	ands	r3, r1
 8003ff4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ffa:	6a3b      	ldr	r3, [r7, #32]
 8003ffc:	431a      	orrs	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2220      	movs	r2, #32
 8004006:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800401a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800401e:	4618      	mov	r0, r3
 8004020:	3728      	adds	r7, #40	@ 0x28
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	fe00e800 	.word	0xfe00e800

0800402c <I2C_TransferConfig>:
>>>>>>> Stashed changes
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
<<<<<<< Updated upstream
 8003fe0:	b480      	push	{r7}
 8003fe2:	b087      	sub	sp, #28
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	607b      	str	r3, [r7, #4]
 8003fea:	460b      	mov	r3, r1
 8003fec:	817b      	strh	r3, [r7, #10]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	727b      	strb	r3, [r7, #9]
=======
 800402c:	b480      	push	{r7}
 800402e:	b087      	sub	sp, #28
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	607b      	str	r3, [r7, #4]
 8004036:	460b      	mov	r3, r1
 8004038:	817b      	strh	r3, [r7, #10]
 800403a:	4613      	mov	r3, r2
 800403c:	727b      	strb	r3, [r7, #9]
>>>>>>> Stashed changes
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
<<<<<<< Updated upstream
 8003ff2:	897b      	ldrh	r3, [r7, #10]
 8003ff4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003ff8:	7a7b      	ldrb	r3, [r7, #9]
 8003ffa:	041b      	lsls	r3, r3, #16
 8003ffc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004000:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004006:	6a3b      	ldr	r3, [r7, #32]
 8004008:	4313      	orrs	r3, r2
 800400a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800400e:	617b      	str	r3, [r7, #20]
=======
 800403e:	897b      	ldrh	r3, [r7, #10]
 8004040:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004044:	7a7b      	ldrb	r3, [r7, #9]
 8004046:	041b      	lsls	r3, r3, #16
 8004048:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800404c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004052:	6a3b      	ldr	r3, [r7, #32]
 8004054:	4313      	orrs	r3, r2
 8004056:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800405a:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
<<<<<<< Updated upstream
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685a      	ldr	r2, [r3, #4]
 8004016:	6a3b      	ldr	r3, [r7, #32]
 8004018:	0d5b      	lsrs	r3, r3, #21
 800401a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800401e:	4b08      	ldr	r3, [pc, #32]	@ (8004040 <I2C_TransferConfig+0x60>)
 8004020:	430b      	orrs	r3, r1
 8004022:	43db      	mvns	r3, r3
 8004024:	ea02 0103 	and.w	r1, r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	430a      	orrs	r2, r1
 8004030:	605a      	str	r2, [r3, #4]
=======
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	6a3b      	ldr	r3, [r7, #32]
 8004064:	0d5b      	lsrs	r3, r3, #21
 8004066:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800406a:	4b08      	ldr	r3, [pc, #32]	@ (800408c <I2C_TransferConfig+0x60>)
 800406c:	430b      	orrs	r3, r1
 800406e:	43db      	mvns	r3, r3
 8004070:	ea02 0103 	and.w	r1, r2, r3
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	430a      	orrs	r2, r1
 800407c:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
<<<<<<< Updated upstream
 8004032:	bf00      	nop
 8004034:	371c      	adds	r7, #28
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	03ff63ff 	.word	0x03ff63ff

08004044 <HAL_I2CEx_ConfigAnalogFilter>:
=======
 800407e:	bf00      	nop
 8004080:	371c      	adds	r7, #28
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	03ff63ff 	.word	0x03ff63ff

08004090 <HAL_I2CEx_ConfigAnalogFilter>:
>>>>>>> Stashed changes
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
<<<<<<< Updated upstream
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
=======
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
<<<<<<< Updated upstream
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b20      	cmp	r3, #32
 8004058:	d138      	bne.n	80040cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004060:	2b01      	cmp	r3, #1
 8004062:	d101      	bne.n	8004068 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004064:	2302      	movs	r3, #2
 8004066:	e032      	b.n	80040ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2224      	movs	r2, #36	@ 0x24
 8004074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f022 0201 	bic.w	r2, r2, #1
 8004086:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004096:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	6819      	ldr	r1, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	683a      	ldr	r2, [r7, #0]
 80040a4:	430a      	orrs	r2, r1
 80040a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f042 0201 	orr.w	r2, r2, #1
 80040b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2220      	movs	r2, #32
 80040bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80040c8:	2300      	movs	r3, #0
 80040ca:	e000      	b.n	80040ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
=======
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b20      	cmp	r3, #32
 80040a4:	d138      	bne.n	8004118 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d101      	bne.n	80040b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80040b0:	2302      	movs	r3, #2
 80040b2:	e032      	b.n	800411a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2224      	movs	r2, #36	@ 0x24
 80040c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f022 0201 	bic.w	r2, r2, #1
 80040d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80040e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6819      	ldr	r1, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	683a      	ldr	r2, [r7, #0]
 80040f0:	430a      	orrs	r2, r1
 80040f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f042 0201 	orr.w	r2, r2, #1
 8004102:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2220      	movs	r2, #32
 8004108:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004114:	2300      	movs	r3, #0
 8004116:	e000      	b.n	800411a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
 80040cc:	2302      	movs	r3, #2
  }
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr

080040da <HAL_I2CEx_ConfigDigitalFilter>:
=======
 8004118:	2302      	movs	r3, #2
  }
}
 800411a:	4618      	mov	r0, r3
 800411c:	370c      	adds	r7, #12
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr

08004126 <HAL_I2CEx_ConfigDigitalFilter>:
>>>>>>> Stashed changes
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
<<<<<<< Updated upstream
 80040da:	b480      	push	{r7}
 80040dc:	b085      	sub	sp, #20
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
 80040e2:	6039      	str	r1, [r7, #0]
=======
 8004126:	b480      	push	{r7}
 8004128:	b085      	sub	sp, #20
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
 800412e:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
<<<<<<< Updated upstream
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	2b20      	cmp	r3, #32
 80040ee:	d139      	bne.n	8004164 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d101      	bne.n	80040fe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80040fa:	2302      	movs	r3, #2
 80040fc:	e033      	b.n	8004166 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2224      	movs	r2, #36	@ 0x24
 800410a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f022 0201 	bic.w	r2, r2, #1
 800411c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800412c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	021b      	lsls	r3, r3, #8
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	4313      	orrs	r3, r2
 8004136:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f042 0201 	orr.w	r2, r2, #1
 800414e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2220      	movs	r2, #32
 8004154:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004160:	2300      	movs	r3, #0
 8004162:	e000      	b.n	8004166 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
=======
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004136:	b2db      	uxtb	r3, r3
 8004138:	2b20      	cmp	r3, #32
 800413a:	d139      	bne.n	80041b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004142:	2b01      	cmp	r3, #1
 8004144:	d101      	bne.n	800414a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004146:	2302      	movs	r3, #2
 8004148:	e033      	b.n	80041b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2224      	movs	r2, #36	@ 0x24
 8004156:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f022 0201 	bic.w	r2, r2, #1
 8004168:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004178:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	021b      	lsls	r3, r3, #8
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	4313      	orrs	r3, r2
 8004182:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f042 0201 	orr.w	r2, r2, #1
 800419a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2220      	movs	r2, #32
 80041a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80041ac:	2300      	movs	r3, #0
 80041ae:	e000      	b.n	80041b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
 8004164:	2302      	movs	r3, #2
  }
}
 8004166:	4618      	mov	r0, r3
 8004168:	3714      	adds	r7, #20
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
	...

08004174 <HAL_PWREx_GetVoltageRange>:
=======
 80041b0:	2302      	movs	r3, #2
  }
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3714      	adds	r7, #20
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
	...

080041c0 <HAL_PWREx_GetVoltageRange>:
>>>>>>> Stashed changes
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
<<<<<<< Updated upstream
 8004174:	b480      	push	{r7}
 8004176:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004178:	4b0d      	ldr	r3, [pc, #52]	@ (80041b0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004180:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004184:	d102      	bne.n	800418c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004186:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800418a:	e00b      	b.n	80041a4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800418c:	4b08      	ldr	r3, [pc, #32]	@ (80041b0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800418e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004192:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004196:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800419a:	d102      	bne.n	80041a2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800419c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80041a0:	e000      	b.n	80041a4 <HAL_PWREx_GetVoltageRange+0x30>
=======
 80041c0:	b480      	push	{r7}
 80041c2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80041c4:	4b0d      	ldr	r3, [pc, #52]	@ (80041fc <HAL_PWREx_GetVoltageRange+0x3c>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80041cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041d0:	d102      	bne.n	80041d8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80041d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80041d6:	e00b      	b.n	80041f0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80041d8:	4b08      	ldr	r3, [pc, #32]	@ (80041fc <HAL_PWREx_GetVoltageRange+0x3c>)
 80041da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041e6:	d102      	bne.n	80041ee <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80041e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80041ec:	e000      	b.n	80041f0 <HAL_PWREx_GetVoltageRange+0x30>
>>>>>>> Stashed changes
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
<<<<<<< Updated upstream
 80041a2:	2300      	movs	r3, #0
=======
 80041ee:	2300      	movs	r3, #0
>>>>>>> Stashed changes
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
<<<<<<< Updated upstream
 80041a4:	4618      	mov	r0, r3
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	40007000 	.word	0x40007000

080041b4 <HAL_PWREx_ControlVoltageScaling>:
=======
 80041f0:	4618      	mov	r0, r3
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	40007000 	.word	0x40007000

08004200 <HAL_PWREx_ControlVoltageScaling>:
>>>>>>> Stashed changes
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
<<<<<<< Updated upstream
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
=======
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
<<<<<<< Updated upstream
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d141      	bne.n	8004246 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80041c2:	4b4b      	ldr	r3, [pc, #300]	@ (80042f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80041ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041ce:	d131      	bne.n	8004234 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80041d0:	4b47      	ldr	r3, [pc, #284]	@ (80042f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041d6:	4a46      	ldr	r2, [pc, #280]	@ (80042f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80041e0:	4b43      	ldr	r3, [pc, #268]	@ (80042f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80041e8:	4a41      	ldr	r2, [pc, #260]	@ (80042f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80041ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80041f0:	4b40      	ldr	r3, [pc, #256]	@ (80042f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2232      	movs	r2, #50	@ 0x32
 80041f6:	fb02 f303 	mul.w	r3, r2, r3
 80041fa:	4a3f      	ldr	r2, [pc, #252]	@ (80042f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80041fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004200:	0c9b      	lsrs	r3, r3, #18
 8004202:	3301      	adds	r3, #1
 8004204:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004206:	e002      	b.n	800420e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	3b01      	subs	r3, #1
 800420c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800420e:	4b38      	ldr	r3, [pc, #224]	@ (80042f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004216:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800421a:	d102      	bne.n	8004222 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1f2      	bne.n	8004208 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004222:	4b33      	ldr	r3, [pc, #204]	@ (80042f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800422a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800422e:	d158      	bne.n	80042e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e057      	b.n	80042e4 <HAL_PWREx_ControlVoltageScaling+0x130>
=======
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d141      	bne.n	8004292 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800420e:	4b4b      	ldr	r3, [pc, #300]	@ (800433c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004216:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800421a:	d131      	bne.n	8004280 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800421c:	4b47      	ldr	r3, [pc, #284]	@ (800433c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800421e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004222:	4a46      	ldr	r2, [pc, #280]	@ (800433c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004224:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004228:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800422c:	4b43      	ldr	r3, [pc, #268]	@ (800433c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004234:	4a41      	ldr	r2, [pc, #260]	@ (800433c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004236:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800423a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800423c:	4b40      	ldr	r3, [pc, #256]	@ (8004340 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2232      	movs	r2, #50	@ 0x32
 8004242:	fb02 f303 	mul.w	r3, r2, r3
 8004246:	4a3f      	ldr	r2, [pc, #252]	@ (8004344 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004248:	fba2 2303 	umull	r2, r3, r2, r3
 800424c:	0c9b      	lsrs	r3, r3, #18
 800424e:	3301      	adds	r3, #1
 8004250:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004252:	e002      	b.n	800425a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	3b01      	subs	r3, #1
 8004258:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800425a:	4b38      	ldr	r3, [pc, #224]	@ (800433c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004262:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004266:	d102      	bne.n	800426e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1f2      	bne.n	8004254 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800426e:	4b33      	ldr	r3, [pc, #204]	@ (800433c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004276:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800427a:	d158      	bne.n	800432e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e057      	b.n	8004330 <HAL_PWREx_ControlVoltageScaling+0x130>
>>>>>>> Stashed changes
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
<<<<<<< Updated upstream
 8004234:	4b2e      	ldr	r3, [pc, #184]	@ (80042f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004236:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800423a:	4a2d      	ldr	r2, [pc, #180]	@ (80042f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800423c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004240:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004244:	e04d      	b.n	80042e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800424c:	d141      	bne.n	80042d2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800424e:	4b28      	ldr	r3, [pc, #160]	@ (80042f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004256:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800425a:	d131      	bne.n	80042c0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800425c:	4b24      	ldr	r3, [pc, #144]	@ (80042f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800425e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004262:	4a23      	ldr	r2, [pc, #140]	@ (80042f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004264:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004268:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800426c:	4b20      	ldr	r3, [pc, #128]	@ (80042f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004274:	4a1e      	ldr	r2, [pc, #120]	@ (80042f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004276:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800427a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800427c:	4b1d      	ldr	r3, [pc, #116]	@ (80042f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2232      	movs	r2, #50	@ 0x32
 8004282:	fb02 f303 	mul.w	r3, r2, r3
 8004286:	4a1c      	ldr	r2, [pc, #112]	@ (80042f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004288:	fba2 2303 	umull	r2, r3, r2, r3
 800428c:	0c9b      	lsrs	r3, r3, #18
 800428e:	3301      	adds	r3, #1
 8004290:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004292:	e002      	b.n	800429a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	3b01      	subs	r3, #1
 8004298:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800429a:	4b15      	ldr	r3, [pc, #84]	@ (80042f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042a6:	d102      	bne.n	80042ae <HAL_PWREx_ControlVoltageScaling+0xfa>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1f2      	bne.n	8004294 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80042ae:	4b10      	ldr	r3, [pc, #64]	@ (80042f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042ba:	d112      	bne.n	80042e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e011      	b.n	80042e4 <HAL_PWREx_ControlVoltageScaling+0x130>
=======
 8004280:	4b2e      	ldr	r3, [pc, #184]	@ (800433c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004282:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004286:	4a2d      	ldr	r2, [pc, #180]	@ (800433c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004288:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800428c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004290:	e04d      	b.n	800432e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004298:	d141      	bne.n	800431e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800429a:	4b28      	ldr	r3, [pc, #160]	@ (800433c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80042a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042a6:	d131      	bne.n	800430c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80042a8:	4b24      	ldr	r3, [pc, #144]	@ (800433c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042ae:	4a23      	ldr	r2, [pc, #140]	@ (800433c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80042b8:	4b20      	ldr	r3, [pc, #128]	@ (800433c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80042c0:	4a1e      	ldr	r2, [pc, #120]	@ (800433c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80042c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80042c8:	4b1d      	ldr	r3, [pc, #116]	@ (8004340 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2232      	movs	r2, #50	@ 0x32
 80042ce:	fb02 f303 	mul.w	r3, r2, r3
 80042d2:	4a1c      	ldr	r2, [pc, #112]	@ (8004344 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80042d4:	fba2 2303 	umull	r2, r3, r2, r3
 80042d8:	0c9b      	lsrs	r3, r3, #18
 80042da:	3301      	adds	r3, #1
 80042dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042de:	e002      	b.n	80042e6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	3b01      	subs	r3, #1
 80042e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042e6:	4b15      	ldr	r3, [pc, #84]	@ (800433c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042f2:	d102      	bne.n	80042fa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1f2      	bne.n	80042e0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80042fa:	4b10      	ldr	r3, [pc, #64]	@ (800433c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004302:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004306:	d112      	bne.n	800432e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e011      	b.n	8004330 <HAL_PWREx_ControlVoltageScaling+0x130>
>>>>>>> Stashed changes
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
<<<<<<< Updated upstream
 80042c0:	4b0b      	ldr	r3, [pc, #44]	@ (80042f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042c6:	4a0a      	ldr	r2, [pc, #40]	@ (80042f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80042d0:	e007      	b.n	80042e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
=======
 800430c:	4b0b      	ldr	r3, [pc, #44]	@ (800433c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800430e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004312:	4a0a      	ldr	r2, [pc, #40]	@ (800433c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004314:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004318:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800431c:	e007      	b.n	800432e <HAL_PWREx_ControlVoltageScaling+0x12e>
>>>>>>> Stashed changes
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
<<<<<<< Updated upstream
 80042d2:	4b07      	ldr	r3, [pc, #28]	@ (80042f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80042da:	4a05      	ldr	r2, [pc, #20]	@ (80042f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042dc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80042e0:	6013      	str	r3, [r2, #0]
=======
 800431e:	4b07      	ldr	r3, [pc, #28]	@ (800433c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004326:	4a05      	ldr	r2, [pc, #20]	@ (800433c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004328:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800432c:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
<<<<<<< Updated upstream
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3714      	adds	r7, #20
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr
 80042f0:	40007000 	.word	0x40007000
 80042f4:	2000000c 	.word	0x2000000c
 80042f8:	431bde83 	.word	0x431bde83

080042fc <HAL_RCC_OscConfig>:
=======
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	3714      	adds	r7, #20
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr
 800433c:	40007000 	.word	0x40007000
 8004340:	2000000c 	.word	0x2000000c
 8004344:	431bde83 	.word	0x431bde83

08004348 <HAL_RCC_OscConfig>:
>>>>>>> Stashed changes
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< Updated upstream
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b088      	sub	sp, #32
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
=======
 8004348:	b580      	push	{r7, lr}
 800434a:	b088      	sub	sp, #32
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
<<<<<<< Updated upstream
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d102      	bne.n	8004310 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	f000 bc08 	b.w	8004b20 <HAL_RCC_OscConfig+0x824>
=======
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d102      	bne.n	800435c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	f000 bc08 	b.w	8004b6c <HAL_RCC_OscConfig+0x824>
>>>>>>> Stashed changes
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
<<<<<<< Updated upstream
 8004310:	4b96      	ldr	r3, [pc, #600]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f003 030c 	and.w	r3, r3, #12
 8004318:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800431a:	4b94      	ldr	r3, [pc, #592]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	f003 0303 	and.w	r3, r3, #3
 8004322:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0310 	and.w	r3, r3, #16
 800432c:	2b00      	cmp	r3, #0
 800432e:	f000 80e4 	beq.w	80044fa <HAL_RCC_OscConfig+0x1fe>
=======
 800435c:	4b96      	ldr	r3, [pc, #600]	@ (80045b8 <HAL_RCC_OscConfig+0x270>)
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f003 030c 	and.w	r3, r3, #12
 8004364:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004366:	4b94      	ldr	r3, [pc, #592]	@ (80045b8 <HAL_RCC_OscConfig+0x270>)
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	f003 0303 	and.w	r3, r3, #3
 800436e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0310 	and.w	r3, r3, #16
 8004378:	2b00      	cmp	r3, #0
 800437a:	f000 80e4 	beq.w	8004546 <HAL_RCC_OscConfig+0x1fe>
>>>>>>> Stashed changes
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
<<<<<<< Updated upstream
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d007      	beq.n	8004348 <HAL_RCC_OscConfig+0x4c>
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	2b0c      	cmp	r3, #12
 800433c:	f040 808b 	bne.w	8004456 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	2b01      	cmp	r3, #1
 8004344:	f040 8087 	bne.w	8004456 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004348:	4b88      	ldr	r3, [pc, #544]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	2b00      	cmp	r3, #0
 8004352:	d005      	beq.n	8004360 <HAL_RCC_OscConfig+0x64>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d101      	bne.n	8004360 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e3df      	b.n	8004b20 <HAL_RCC_OscConfig+0x824>
=======
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d007      	beq.n	8004394 <HAL_RCC_OscConfig+0x4c>
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	2b0c      	cmp	r3, #12
 8004388:	f040 808b 	bne.w	80044a2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	2b01      	cmp	r3, #1
 8004390:	f040 8087 	bne.w	80044a2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004394:	4b88      	ldr	r3, [pc, #544]	@ (80045b8 <HAL_RCC_OscConfig+0x270>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0302 	and.w	r3, r3, #2
 800439c:	2b00      	cmp	r3, #0
 800439e:	d005      	beq.n	80043ac <HAL_RCC_OscConfig+0x64>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d101      	bne.n	80043ac <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e3df      	b.n	8004b6c <HAL_RCC_OscConfig+0x824>
>>>>>>> Stashed changes
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
<<<<<<< Updated upstream
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a1a      	ldr	r2, [r3, #32]
 8004364:	4b81      	ldr	r3, [pc, #516]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0308 	and.w	r3, r3, #8
 800436c:	2b00      	cmp	r3, #0
 800436e:	d004      	beq.n	800437a <HAL_RCC_OscConfig+0x7e>
 8004370:	4b7e      	ldr	r3, [pc, #504]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004378:	e005      	b.n	8004386 <HAL_RCC_OscConfig+0x8a>
 800437a:	4b7c      	ldr	r3, [pc, #496]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 800437c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004380:	091b      	lsrs	r3, r3, #4
 8004382:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004386:	4293      	cmp	r3, r2
 8004388:	d223      	bcs.n	80043d2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	4618      	mov	r0, r3
 8004390:	f000 fdcc 	bl	8004f2c <RCC_SetFlashLatencyFromMSIRange>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d001      	beq.n	800439e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e3c0      	b.n	8004b20 <HAL_RCC_OscConfig+0x824>
=======
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a1a      	ldr	r2, [r3, #32]
 80043b0:	4b81      	ldr	r3, [pc, #516]	@ (80045b8 <HAL_RCC_OscConfig+0x270>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0308 	and.w	r3, r3, #8
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d004      	beq.n	80043c6 <HAL_RCC_OscConfig+0x7e>
 80043bc:	4b7e      	ldr	r3, [pc, #504]	@ (80045b8 <HAL_RCC_OscConfig+0x270>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043c4:	e005      	b.n	80043d2 <HAL_RCC_OscConfig+0x8a>
 80043c6:	4b7c      	ldr	r3, [pc, #496]	@ (80045b8 <HAL_RCC_OscConfig+0x270>)
 80043c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043cc:	091b      	lsrs	r3, r3, #4
 80043ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d223      	bcs.n	800441e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	4618      	mov	r0, r3
 80043dc:	f000 fdcc 	bl	8004f78 <RCC_SetFlashLatencyFromMSIRange>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d001      	beq.n	80043ea <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e3c0      	b.n	8004b6c <HAL_RCC_OscConfig+0x824>
>>>>>>> Stashed changes
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
<<<<<<< Updated upstream
 800439e:	4b73      	ldr	r3, [pc, #460]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a72      	ldr	r2, [pc, #456]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 80043a4:	f043 0308 	orr.w	r3, r3, #8
 80043a8:	6013      	str	r3, [r2, #0]
 80043aa:	4b70      	ldr	r3, [pc, #448]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	496d      	ldr	r1, [pc, #436]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043bc:	4b6b      	ldr	r3, [pc, #428]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	69db      	ldr	r3, [r3, #28]
 80043c8:	021b      	lsls	r3, r3, #8
 80043ca:	4968      	ldr	r1, [pc, #416]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	604b      	str	r3, [r1, #4]
 80043d0:	e025      	b.n	800441e <HAL_RCC_OscConfig+0x122>
=======
 80043ea:	4b73      	ldr	r3, [pc, #460]	@ (80045b8 <HAL_RCC_OscConfig+0x270>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a72      	ldr	r2, [pc, #456]	@ (80045b8 <HAL_RCC_OscConfig+0x270>)
 80043f0:	f043 0308 	orr.w	r3, r3, #8
 80043f4:	6013      	str	r3, [r2, #0]
 80043f6:	4b70      	ldr	r3, [pc, #448]	@ (80045b8 <HAL_RCC_OscConfig+0x270>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	496d      	ldr	r1, [pc, #436]	@ (80045b8 <HAL_RCC_OscConfig+0x270>)
 8004404:	4313      	orrs	r3, r2
 8004406:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004408:	4b6b      	ldr	r3, [pc, #428]	@ (80045b8 <HAL_RCC_OscConfig+0x270>)
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	69db      	ldr	r3, [r3, #28]
 8004414:	021b      	lsls	r3, r3, #8
 8004416:	4968      	ldr	r1, [pc, #416]	@ (80045b8 <HAL_RCC_OscConfig+0x270>)
 8004418:	4313      	orrs	r3, r2
 800441a:	604b      	str	r3, [r1, #4]
 800441c:	e025      	b.n	800446a <HAL_RCC_OscConfig+0x122>
>>>>>>> Stashed changes
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
<<<<<<< Updated upstream
 80043d2:	4b66      	ldr	r3, [pc, #408]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a65      	ldr	r2, [pc, #404]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 80043d8:	f043 0308 	orr.w	r3, r3, #8
 80043dc:	6013      	str	r3, [r2, #0]
 80043de:	4b63      	ldr	r3, [pc, #396]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a1b      	ldr	r3, [r3, #32]
 80043ea:	4960      	ldr	r1, [pc, #384]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043f0:	4b5e      	ldr	r3, [pc, #376]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	69db      	ldr	r3, [r3, #28]
 80043fc:	021b      	lsls	r3, r3, #8
 80043fe:	495b      	ldr	r1, [pc, #364]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 8004400:	4313      	orrs	r3, r2
 8004402:	604b      	str	r3, [r1, #4]
=======
 800441e:	4b66      	ldr	r3, [pc, #408]	@ (80045b8 <HAL_RCC_OscConfig+0x270>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a65      	ldr	r2, [pc, #404]	@ (80045b8 <HAL_RCC_OscConfig+0x270>)
 8004424:	f043 0308 	orr.w	r3, r3, #8
 8004428:	6013      	str	r3, [r2, #0]
 800442a:	4b63      	ldr	r3, [pc, #396]	@ (80045b8 <HAL_RCC_OscConfig+0x270>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a1b      	ldr	r3, [r3, #32]
 8004436:	4960      	ldr	r1, [pc, #384]	@ (80045b8 <HAL_RCC_OscConfig+0x270>)
 8004438:	4313      	orrs	r3, r2
 800443a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800443c:	4b5e      	ldr	r3, [pc, #376]	@ (80045b8 <HAL_RCC_OscConfig+0x270>)
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	69db      	ldr	r3, [r3, #28]
 8004448:	021b      	lsls	r3, r3, #8
 800444a:	495b      	ldr	r1, [pc, #364]	@ (80045b8 <HAL_RCC_OscConfig+0x270>)
 800444c:	4313      	orrs	r3, r2
 800444e:	604b      	str	r3, [r1, #4]
>>>>>>> Stashed changes

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
<<<<<<< Updated upstream
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d109      	bne.n	800441e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	4618      	mov	r0, r3
 8004410:	f000 fd8c 	bl	8004f2c <RCC_SetFlashLatencyFromMSIRange>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d001      	beq.n	800441e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e380      	b.n	8004b20 <HAL_RCC_OscConfig+0x824>
=======
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d109      	bne.n	800446a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a1b      	ldr	r3, [r3, #32]
 800445a:	4618      	mov	r0, r3
 800445c:	f000 fd8c 	bl	8004f78 <RCC_SetFlashLatencyFromMSIRange>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d001      	beq.n	800446a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e380      	b.n	8004b6c <HAL_RCC_OscConfig+0x824>
>>>>>>> Stashed changes
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
<<<<<<< Updated upstream
 800441e:	f000 fcc1 	bl	8004da4 <HAL_RCC_GetSysClockFreq>
 8004422:	4602      	mov	r2, r0
 8004424:	4b51      	ldr	r3, [pc, #324]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	091b      	lsrs	r3, r3, #4
 800442a:	f003 030f 	and.w	r3, r3, #15
 800442e:	4950      	ldr	r1, [pc, #320]	@ (8004570 <HAL_RCC_OscConfig+0x274>)
 8004430:	5ccb      	ldrb	r3, [r1, r3]
 8004432:	f003 031f 	and.w	r3, r3, #31
 8004436:	fa22 f303 	lsr.w	r3, r2, r3
 800443a:	4a4e      	ldr	r2, [pc, #312]	@ (8004574 <HAL_RCC_OscConfig+0x278>)
 800443c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800443e:	4b4e      	ldr	r3, [pc, #312]	@ (8004578 <HAL_RCC_OscConfig+0x27c>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4618      	mov	r0, r3
 8004444:	f7fe f908 	bl	8002658 <HAL_InitTick>
 8004448:	4603      	mov	r3, r0
 800444a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800444c:	7bfb      	ldrb	r3, [r7, #15]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d052      	beq.n	80044f8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004452:	7bfb      	ldrb	r3, [r7, #15]
 8004454:	e364      	b.n	8004b20 <HAL_RCC_OscConfig+0x824>
=======
 800446a:	f000 fcc1 	bl	8004df0 <HAL_RCC_GetSysClockFreq>
 800446e:	4602      	mov	r2, r0
 8004470:	4b51      	ldr	r3, [pc, #324]	@ (80045b8 <HAL_RCC_OscConfig+0x270>)
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	091b      	lsrs	r3, r3, #4
 8004476:	f003 030f 	and.w	r3, r3, #15
 800447a:	4950      	ldr	r1, [pc, #320]	@ (80045bc <HAL_RCC_OscConfig+0x274>)
 800447c:	5ccb      	ldrb	r3, [r1, r3]
 800447e:	f003 031f 	and.w	r3, r3, #31
 8004482:	fa22 f303 	lsr.w	r3, r2, r3
 8004486:	4a4e      	ldr	r2, [pc, #312]	@ (80045c0 <HAL_RCC_OscConfig+0x278>)
 8004488:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800448a:	4b4e      	ldr	r3, [pc, #312]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4618      	mov	r0, r3
 8004490:	f7fe f908 	bl	80026a4 <HAL_InitTick>
 8004494:	4603      	mov	r3, r0
 8004496:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004498:	7bfb      	ldrb	r3, [r7, #15]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d052      	beq.n	8004544 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800449e:	7bfb      	ldrb	r3, [r7, #15]
 80044a0:	e364      	b.n	8004b6c <HAL_RCC_OscConfig+0x824>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
<<<<<<< Updated upstream
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d032      	beq.n	80044c4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800445e:	4b43      	ldr	r3, [pc, #268]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a42      	ldr	r2, [pc, #264]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 8004464:	f043 0301 	orr.w	r3, r3, #1
 8004468:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800446a:	f7fe f945 	bl	80026f8 <HAL_GetTick>
 800446e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004470:	e008      	b.n	8004484 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004472:	f7fe f941 	bl	80026f8 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	2b02      	cmp	r3, #2
 800447e:	d901      	bls.n	8004484 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e34d      	b.n	8004b20 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004484:	4b39      	ldr	r3, [pc, #228]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b00      	cmp	r3, #0
 800448e:	d0f0      	beq.n	8004472 <HAL_RCC_OscConfig+0x176>
=======
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d032      	beq.n	8004510 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80044aa:	4b43      	ldr	r3, [pc, #268]	@ (80045b8 <HAL_RCC_OscConfig+0x270>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a42      	ldr	r2, [pc, #264]	@ (80045b8 <HAL_RCC_OscConfig+0x270>)
 80044b0:	f043 0301 	orr.w	r3, r3, #1
 80044b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044b6:	f7fe f945 	bl	8002744 <HAL_GetTick>
 80044ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044bc:	e008      	b.n	80044d0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044be:	f7fe f941 	bl	8002744 <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d901      	bls.n	80044d0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e34d      	b.n	8004b6c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044d0:	4b39      	ldr	r3, [pc, #228]	@ (80045b8 <HAL_RCC_OscConfig+0x270>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d0f0      	beq.n	80044be <HAL_RCC_OscConfig+0x176>
>>>>>>> Stashed changes
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
<<<<<<< Updated upstream
 8004490:	4b36      	ldr	r3, [pc, #216]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a35      	ldr	r2, [pc, #212]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 8004496:	f043 0308 	orr.w	r3, r3, #8
 800449a:	6013      	str	r3, [r2, #0]
 800449c:	4b33      	ldr	r3, [pc, #204]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a1b      	ldr	r3, [r3, #32]
 80044a8:	4930      	ldr	r1, [pc, #192]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044ae:	4b2f      	ldr	r3, [pc, #188]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	69db      	ldr	r3, [r3, #28]
 80044ba:	021b      	lsls	r3, r3, #8
 80044bc:	492b      	ldr	r1, [pc, #172]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	604b      	str	r3, [r1, #4]
 80044c2:	e01a      	b.n	80044fa <HAL_RCC_OscConfig+0x1fe>
=======
 80044dc:	4b36      	ldr	r3, [pc, #216]	@ (80045b8 <HAL_RCC_OscConfig+0x270>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a35      	ldr	r2, [pc, #212]	@ (80045b8 <HAL_RCC_OscConfig+0x270>)
 80044e2:	f043 0308 	orr.w	r3, r3, #8
 80044e6:	6013      	str	r3, [r2, #0]
 80044e8:	4b33      	ldr	r3, [pc, #204]	@ (80045b8 <HAL_RCC_OscConfig+0x270>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a1b      	ldr	r3, [r3, #32]
 80044f4:	4930      	ldr	r1, [pc, #192]	@ (80045b8 <HAL_RCC_OscConfig+0x270>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044fa:	4b2f      	ldr	r3, [pc, #188]	@ (80045b8 <HAL_RCC_OscConfig+0x270>)
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	69db      	ldr	r3, [r3, #28]
 8004506:	021b      	lsls	r3, r3, #8
 8004508:	492b      	ldr	r1, [pc, #172]	@ (80045b8 <HAL_RCC_OscConfig+0x270>)
 800450a:	4313      	orrs	r3, r2
 800450c:	604b      	str	r3, [r1, #4]
 800450e:	e01a      	b.n	8004546 <HAL_RCC_OscConfig+0x1fe>
>>>>>>> Stashed changes

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
<<<<<<< Updated upstream
 80044c4:	4b29      	ldr	r3, [pc, #164]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a28      	ldr	r2, [pc, #160]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 80044ca:	f023 0301 	bic.w	r3, r3, #1
 80044ce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044d0:	f7fe f912 	bl	80026f8 <HAL_GetTick>
 80044d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044d8:	f7fe f90e 	bl	80026f8 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e31a      	b.n	8004b20 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80044ea:	4b20      	ldr	r3, [pc, #128]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1f0      	bne.n	80044d8 <HAL_RCC_OscConfig+0x1dc>
 80044f6:	e000      	b.n	80044fa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044f8:	bf00      	nop
=======
 8004510:	4b29      	ldr	r3, [pc, #164]	@ (80045b8 <HAL_RCC_OscConfig+0x270>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a28      	ldr	r2, [pc, #160]	@ (80045b8 <HAL_RCC_OscConfig+0x270>)
 8004516:	f023 0301 	bic.w	r3, r3, #1
 800451a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800451c:	f7fe f912 	bl	8002744 <HAL_GetTick>
 8004520:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004522:	e008      	b.n	8004536 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004524:	f7fe f90e 	bl	8002744 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b02      	cmp	r3, #2
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e31a      	b.n	8004b6c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004536:	4b20      	ldr	r3, [pc, #128]	@ (80045b8 <HAL_RCC_OscConfig+0x270>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1f0      	bne.n	8004524 <HAL_RCC_OscConfig+0x1dc>
 8004542:	e000      	b.n	8004546 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004544:	bf00      	nop
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< Updated upstream
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	2b00      	cmp	r3, #0
 8004504:	d073      	beq.n	80045ee <HAL_RCC_OscConfig+0x2f2>
=======
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b00      	cmp	r3, #0
 8004550:	d073      	beq.n	800463a <HAL_RCC_OscConfig+0x2f2>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
<<<<<<< Updated upstream
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	2b08      	cmp	r3, #8
 800450a:	d005      	beq.n	8004518 <HAL_RCC_OscConfig+0x21c>
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	2b0c      	cmp	r3, #12
 8004510:	d10e      	bne.n	8004530 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	2b03      	cmp	r3, #3
 8004516:	d10b      	bne.n	8004530 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004518:	4b14      	ldr	r3, [pc, #80]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d063      	beq.n	80045ec <HAL_RCC_OscConfig+0x2f0>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d15f      	bne.n	80045ec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e2f7      	b.n	8004b20 <HAL_RCC_OscConfig+0x824>
=======
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	2b08      	cmp	r3, #8
 8004556:	d005      	beq.n	8004564 <HAL_RCC_OscConfig+0x21c>
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	2b0c      	cmp	r3, #12
 800455c:	d10e      	bne.n	800457c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	2b03      	cmp	r3, #3
 8004562:	d10b      	bne.n	800457c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004564:	4b14      	ldr	r3, [pc, #80]	@ (80045b8 <HAL_RCC_OscConfig+0x270>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d063      	beq.n	8004638 <HAL_RCC_OscConfig+0x2f0>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d15f      	bne.n	8004638 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e2f7      	b.n	8004b6c <HAL_RCC_OscConfig+0x824>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< Updated upstream
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004538:	d106      	bne.n	8004548 <HAL_RCC_OscConfig+0x24c>
 800453a:	4b0c      	ldr	r3, [pc, #48]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a0b      	ldr	r2, [pc, #44]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 8004540:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004544:	6013      	str	r3, [r2, #0]
 8004546:	e025      	b.n	8004594 <HAL_RCC_OscConfig+0x298>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004550:	d114      	bne.n	800457c <HAL_RCC_OscConfig+0x280>
 8004552:	4b06      	ldr	r3, [pc, #24]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a05      	ldr	r2, [pc, #20]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 8004558:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800455c:	6013      	str	r3, [r2, #0]
 800455e:	4b03      	ldr	r3, [pc, #12]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a02      	ldr	r2, [pc, #8]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 8004564:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004568:	6013      	str	r3, [r2, #0]
 800456a:	e013      	b.n	8004594 <HAL_RCC_OscConfig+0x298>
 800456c:	40021000 	.word	0x40021000
 8004570:	0800d3b4 	.word	0x0800d3b4
 8004574:	2000000c 	.word	0x2000000c
 8004578:	20000044 	.word	0x20000044
 800457c:	4ba0      	ldr	r3, [pc, #640]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a9f      	ldr	r2, [pc, #636]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 8004582:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004586:	6013      	str	r3, [r2, #0]
 8004588:	4b9d      	ldr	r3, [pc, #628]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a9c      	ldr	r2, [pc, #624]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 800458e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004592:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d013      	beq.n	80045c4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800459c:	f7fe f8ac 	bl	80026f8 <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045a2:	e008      	b.n	80045b6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045a4:	f7fe f8a8 	bl	80026f8 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b64      	cmp	r3, #100	@ 0x64
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e2b4      	b.n	8004b20 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045b6:	4b92      	ldr	r3, [pc, #584]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d0f0      	beq.n	80045a4 <HAL_RCC_OscConfig+0x2a8>
 80045c2:	e014      	b.n	80045ee <HAL_RCC_OscConfig+0x2f2>
=======
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004584:	d106      	bne.n	8004594 <HAL_RCC_OscConfig+0x24c>
 8004586:	4b0c      	ldr	r3, [pc, #48]	@ (80045b8 <HAL_RCC_OscConfig+0x270>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a0b      	ldr	r2, [pc, #44]	@ (80045b8 <HAL_RCC_OscConfig+0x270>)
 800458c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004590:	6013      	str	r3, [r2, #0]
 8004592:	e025      	b.n	80045e0 <HAL_RCC_OscConfig+0x298>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800459c:	d114      	bne.n	80045c8 <HAL_RCC_OscConfig+0x280>
 800459e:	4b06      	ldr	r3, [pc, #24]	@ (80045b8 <HAL_RCC_OscConfig+0x270>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a05      	ldr	r2, [pc, #20]	@ (80045b8 <HAL_RCC_OscConfig+0x270>)
 80045a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045a8:	6013      	str	r3, [r2, #0]
 80045aa:	4b03      	ldr	r3, [pc, #12]	@ (80045b8 <HAL_RCC_OscConfig+0x270>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a02      	ldr	r2, [pc, #8]	@ (80045b8 <HAL_RCC_OscConfig+0x270>)
 80045b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045b4:	6013      	str	r3, [r2, #0]
 80045b6:	e013      	b.n	80045e0 <HAL_RCC_OscConfig+0x298>
 80045b8:	40021000 	.word	0x40021000
 80045bc:	0800d408 	.word	0x0800d408
 80045c0:	2000000c 	.word	0x2000000c
 80045c4:	20000044 	.word	0x20000044
 80045c8:	4ba0      	ldr	r3, [pc, #640]	@ (800484c <HAL_RCC_OscConfig+0x504>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a9f      	ldr	r2, [pc, #636]	@ (800484c <HAL_RCC_OscConfig+0x504>)
 80045ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045d2:	6013      	str	r3, [r2, #0]
 80045d4:	4b9d      	ldr	r3, [pc, #628]	@ (800484c <HAL_RCC_OscConfig+0x504>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a9c      	ldr	r2, [pc, #624]	@ (800484c <HAL_RCC_OscConfig+0x504>)
 80045da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d013      	beq.n	8004610 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e8:	f7fe f8ac 	bl	8002744 <HAL_GetTick>
 80045ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045ee:	e008      	b.n	8004602 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045f0:	f7fe f8a8 	bl	8002744 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b64      	cmp	r3, #100	@ 0x64
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e2b4      	b.n	8004b6c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004602:	4b92      	ldr	r3, [pc, #584]	@ (800484c <HAL_RCC_OscConfig+0x504>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d0f0      	beq.n	80045f0 <HAL_RCC_OscConfig+0x2a8>
 800460e:	e014      	b.n	800463a <HAL_RCC_OscConfig+0x2f2>
>>>>>>> Stashed changes
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 80045c4:	f7fe f898 	bl	80026f8 <HAL_GetTick>
 80045c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045cc:	f7fe f894 	bl	80026f8 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b64      	cmp	r3, #100	@ 0x64
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e2a0      	b.n	8004b20 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045de:	4b88      	ldr	r3, [pc, #544]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1f0      	bne.n	80045cc <HAL_RCC_OscConfig+0x2d0>
 80045ea:	e000      	b.n	80045ee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045ec:	bf00      	nop
=======
 8004610:	f7fe f898 	bl	8002744 <HAL_GetTick>
 8004614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004616:	e008      	b.n	800462a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004618:	f7fe f894 	bl	8002744 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	2b64      	cmp	r3, #100	@ 0x64
 8004624:	d901      	bls.n	800462a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e2a0      	b.n	8004b6c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800462a:	4b88      	ldr	r3, [pc, #544]	@ (800484c <HAL_RCC_OscConfig+0x504>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1f0      	bne.n	8004618 <HAL_RCC_OscConfig+0x2d0>
 8004636:	e000      	b.n	800463a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004638:	bf00      	nop
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< Updated upstream
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d060      	beq.n	80046bc <HAL_RCC_OscConfig+0x3c0>
=======
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	2b00      	cmp	r3, #0
 8004644:	d060      	beq.n	8004708 <HAL_RCC_OscConfig+0x3c0>
>>>>>>> Stashed changes
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
<<<<<<< Updated upstream
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	2b04      	cmp	r3, #4
 80045fe:	d005      	beq.n	800460c <HAL_RCC_OscConfig+0x310>
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	2b0c      	cmp	r3, #12
 8004604:	d119      	bne.n	800463a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	2b02      	cmp	r3, #2
 800460a:	d116      	bne.n	800463a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800460c:	4b7c      	ldr	r3, [pc, #496]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004614:	2b00      	cmp	r3, #0
 8004616:	d005      	beq.n	8004624 <HAL_RCC_OscConfig+0x328>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d101      	bne.n	8004624 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e27d      	b.n	8004b20 <HAL_RCC_OscConfig+0x824>
=======
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	2b04      	cmp	r3, #4
 800464a:	d005      	beq.n	8004658 <HAL_RCC_OscConfig+0x310>
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	2b0c      	cmp	r3, #12
 8004650:	d119      	bne.n	8004686 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	2b02      	cmp	r3, #2
 8004656:	d116      	bne.n	8004686 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004658:	4b7c      	ldr	r3, [pc, #496]	@ (800484c <HAL_RCC_OscConfig+0x504>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004660:	2b00      	cmp	r3, #0
 8004662:	d005      	beq.n	8004670 <HAL_RCC_OscConfig+0x328>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d101      	bne.n	8004670 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e27d      	b.n	8004b6c <HAL_RCC_OscConfig+0x824>
>>>>>>> Stashed changes
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< Updated upstream
 8004624:	4b76      	ldr	r3, [pc, #472]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	691b      	ldr	r3, [r3, #16]
 8004630:	061b      	lsls	r3, r3, #24
 8004632:	4973      	ldr	r1, [pc, #460]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 8004634:	4313      	orrs	r3, r2
 8004636:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004638:	e040      	b.n	80046bc <HAL_RCC_OscConfig+0x3c0>
=======
 8004670:	4b76      	ldr	r3, [pc, #472]	@ (800484c <HAL_RCC_OscConfig+0x504>)
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	061b      	lsls	r3, r3, #24
 800467e:	4973      	ldr	r1, [pc, #460]	@ (800484c <HAL_RCC_OscConfig+0x504>)
 8004680:	4313      	orrs	r3, r2
 8004682:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004684:	e040      	b.n	8004708 <HAL_RCC_OscConfig+0x3c0>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
<<<<<<< Updated upstream
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d023      	beq.n	800468a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004642:	4b6f      	ldr	r3, [pc, #444]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a6e      	ldr	r2, [pc, #440]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 8004648:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800464c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800464e:	f7fe f853 	bl	80026f8 <HAL_GetTick>
 8004652:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004654:	e008      	b.n	8004668 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004656:	f7fe f84f 	bl	80026f8 <HAL_GetTick>
 800465a:	4602      	mov	r2, r0
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	2b02      	cmp	r3, #2
 8004662:	d901      	bls.n	8004668 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e25b      	b.n	8004b20 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004668:	4b65      	ldr	r3, [pc, #404]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004670:	2b00      	cmp	r3, #0
 8004672:	d0f0      	beq.n	8004656 <HAL_RCC_OscConfig+0x35a>
=======
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d023      	beq.n	80046d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800468e:	4b6f      	ldr	r3, [pc, #444]	@ (800484c <HAL_RCC_OscConfig+0x504>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a6e      	ldr	r2, [pc, #440]	@ (800484c <HAL_RCC_OscConfig+0x504>)
 8004694:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004698:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800469a:	f7fe f853 	bl	8002744 <HAL_GetTick>
 800469e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046a0:	e008      	b.n	80046b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046a2:	f7fe f84f 	bl	8002744 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d901      	bls.n	80046b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e25b      	b.n	8004b6c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046b4:	4b65      	ldr	r3, [pc, #404]	@ (800484c <HAL_RCC_OscConfig+0x504>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d0f0      	beq.n	80046a2 <HAL_RCC_OscConfig+0x35a>
>>>>>>> Stashed changes
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< Updated upstream
 8004674:	4b62      	ldr	r3, [pc, #392]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	061b      	lsls	r3, r3, #24
 8004682:	495f      	ldr	r1, [pc, #380]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 8004684:	4313      	orrs	r3, r2
 8004686:	604b      	str	r3, [r1, #4]
 8004688:	e018      	b.n	80046bc <HAL_RCC_OscConfig+0x3c0>
=======
 80046c0:	4b62      	ldr	r3, [pc, #392]	@ (800484c <HAL_RCC_OscConfig+0x504>)
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	061b      	lsls	r3, r3, #24
 80046ce:	495f      	ldr	r1, [pc, #380]	@ (800484c <HAL_RCC_OscConfig+0x504>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	604b      	str	r3, [r1, #4]
 80046d4:	e018      	b.n	8004708 <HAL_RCC_OscConfig+0x3c0>
>>>>>>> Stashed changes
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< Updated upstream
 800468a:	4b5d      	ldr	r3, [pc, #372]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a5c      	ldr	r2, [pc, #368]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 8004690:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004694:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004696:	f7fe f82f 	bl	80026f8 <HAL_GetTick>
 800469a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800469c:	e008      	b.n	80046b0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800469e:	f7fe f82b 	bl	80026f8 <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d901      	bls.n	80046b0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e237      	b.n	8004b20 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046b0:	4b53      	ldr	r3, [pc, #332]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1f0      	bne.n	800469e <HAL_RCC_OscConfig+0x3a2>
=======
 80046d6:	4b5d      	ldr	r3, [pc, #372]	@ (800484c <HAL_RCC_OscConfig+0x504>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a5c      	ldr	r2, [pc, #368]	@ (800484c <HAL_RCC_OscConfig+0x504>)
 80046dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e2:	f7fe f82f 	bl	8002744 <HAL_GetTick>
 80046e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046e8:	e008      	b.n	80046fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046ea:	f7fe f82b 	bl	8002744 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d901      	bls.n	80046fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e237      	b.n	8004b6c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046fc:	4b53      	ldr	r3, [pc, #332]	@ (800484c <HAL_RCC_OscConfig+0x504>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004704:	2b00      	cmp	r3, #0
 8004706:	d1f0      	bne.n	80046ea <HAL_RCC_OscConfig+0x3a2>
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< Updated upstream
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0308 	and.w	r3, r3, #8
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d03c      	beq.n	8004742 <HAL_RCC_OscConfig+0x446>
=======
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0308 	and.w	r3, r3, #8
 8004710:	2b00      	cmp	r3, #0
 8004712:	d03c      	beq.n	800478e <HAL_RCC_OscConfig+0x446>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
<<<<<<< Updated upstream
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	695b      	ldr	r3, [r3, #20]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d01c      	beq.n	800470a <HAL_RCC_OscConfig+0x40e>
=======
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	695b      	ldr	r3, [r3, #20]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d01c      	beq.n	8004756 <HAL_RCC_OscConfig+0x40e>
>>>>>>> Stashed changes
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
<<<<<<< Updated upstream
 80046d0:	4b4b      	ldr	r3, [pc, #300]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 80046d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046d6:	4a4a      	ldr	r2, [pc, #296]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 80046d8:	f043 0301 	orr.w	r3, r3, #1
 80046dc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046e0:	f7fe f80a 	bl	80026f8 <HAL_GetTick>
 80046e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046e6:	e008      	b.n	80046fa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046e8:	f7fe f806 	bl	80026f8 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e212      	b.n	8004b20 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046fa:	4b41      	ldr	r3, [pc, #260]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 80046fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004700:	f003 0302 	and.w	r3, r3, #2
 8004704:	2b00      	cmp	r3, #0
 8004706:	d0ef      	beq.n	80046e8 <HAL_RCC_OscConfig+0x3ec>
 8004708:	e01b      	b.n	8004742 <HAL_RCC_OscConfig+0x446>
=======
 800471c:	4b4b      	ldr	r3, [pc, #300]	@ (800484c <HAL_RCC_OscConfig+0x504>)
 800471e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004722:	4a4a      	ldr	r2, [pc, #296]	@ (800484c <HAL_RCC_OscConfig+0x504>)
 8004724:	f043 0301 	orr.w	r3, r3, #1
 8004728:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800472c:	f7fe f80a 	bl	8002744 <HAL_GetTick>
 8004730:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004732:	e008      	b.n	8004746 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004734:	f7fe f806 	bl	8002744 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b02      	cmp	r3, #2
 8004740:	d901      	bls.n	8004746 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e212      	b.n	8004b6c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004746:	4b41      	ldr	r3, [pc, #260]	@ (800484c <HAL_RCC_OscConfig+0x504>)
 8004748:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800474c:	f003 0302 	and.w	r3, r3, #2
 8004750:	2b00      	cmp	r3, #0
 8004752:	d0ef      	beq.n	8004734 <HAL_RCC_OscConfig+0x3ec>
 8004754:	e01b      	b.n	800478e <HAL_RCC_OscConfig+0x446>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< Updated upstream
 800470a:	4b3d      	ldr	r3, [pc, #244]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 800470c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004710:	4a3b      	ldr	r2, [pc, #236]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 8004712:	f023 0301 	bic.w	r3, r3, #1
 8004716:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800471a:	f7fd ffed 	bl	80026f8 <HAL_GetTick>
 800471e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004720:	e008      	b.n	8004734 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004722:	f7fd ffe9 	bl	80026f8 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	2b02      	cmp	r3, #2
 800472e:	d901      	bls.n	8004734 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e1f5      	b.n	8004b20 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004734:	4b32      	ldr	r3, [pc, #200]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 8004736:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1ef      	bne.n	8004722 <HAL_RCC_OscConfig+0x426>
=======
 8004756:	4b3d      	ldr	r3, [pc, #244]	@ (800484c <HAL_RCC_OscConfig+0x504>)
 8004758:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800475c:	4a3b      	ldr	r2, [pc, #236]	@ (800484c <HAL_RCC_OscConfig+0x504>)
 800475e:	f023 0301 	bic.w	r3, r3, #1
 8004762:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004766:	f7fd ffed 	bl	8002744 <HAL_GetTick>
 800476a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800476c:	e008      	b.n	8004780 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800476e:	f7fd ffe9 	bl	8002744 <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	2b02      	cmp	r3, #2
 800477a:	d901      	bls.n	8004780 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e1f5      	b.n	8004b6c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004780:	4b32      	ldr	r3, [pc, #200]	@ (800484c <HAL_RCC_OscConfig+0x504>)
 8004782:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004786:	f003 0302 	and.w	r3, r3, #2
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1ef      	bne.n	800476e <HAL_RCC_OscConfig+0x426>
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< Updated upstream
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0304 	and.w	r3, r3, #4
 800474a:	2b00      	cmp	r3, #0
 800474c:	f000 80a6 	beq.w	800489c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004750:	2300      	movs	r3, #0
 8004752:	77fb      	strb	r3, [r7, #31]
=======
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0304 	and.w	r3, r3, #4
 8004796:	2b00      	cmp	r3, #0
 8004798:	f000 80a6 	beq.w	80048e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800479c:	2300      	movs	r3, #0
 800479e:	77fb      	strb	r3, [r7, #31]
>>>>>>> Stashed changes
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
<<<<<<< Updated upstream
 8004754:	4b2a      	ldr	r3, [pc, #168]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 8004756:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004758:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d10d      	bne.n	800477c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004760:	4b27      	ldr	r3, [pc, #156]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 8004762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004764:	4a26      	ldr	r2, [pc, #152]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 8004766:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800476a:	6593      	str	r3, [r2, #88]	@ 0x58
 800476c:	4b24      	ldr	r3, [pc, #144]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 800476e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004770:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004774:	60bb      	str	r3, [r7, #8]
 8004776:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004778:	2301      	movs	r3, #1
 800477a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800477c:	4b21      	ldr	r3, [pc, #132]	@ (8004804 <HAL_RCC_OscConfig+0x508>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004784:	2b00      	cmp	r3, #0
 8004786:	d118      	bne.n	80047ba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004788:	4b1e      	ldr	r3, [pc, #120]	@ (8004804 <HAL_RCC_OscConfig+0x508>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a1d      	ldr	r2, [pc, #116]	@ (8004804 <HAL_RCC_OscConfig+0x508>)
 800478e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004792:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004794:	f7fd ffb0 	bl	80026f8 <HAL_GetTick>
 8004798:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800479c:	f7fd ffac 	bl	80026f8 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e1b8      	b.n	8004b20 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047ae:	4b15      	ldr	r3, [pc, #84]	@ (8004804 <HAL_RCC_OscConfig+0x508>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d0f0      	beq.n	800479c <HAL_RCC_OscConfig+0x4a0>
=======
 80047a0:	4b2a      	ldr	r3, [pc, #168]	@ (800484c <HAL_RCC_OscConfig+0x504>)
 80047a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d10d      	bne.n	80047c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ac:	4b27      	ldr	r3, [pc, #156]	@ (800484c <HAL_RCC_OscConfig+0x504>)
 80047ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047b0:	4a26      	ldr	r2, [pc, #152]	@ (800484c <HAL_RCC_OscConfig+0x504>)
 80047b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80047b8:	4b24      	ldr	r3, [pc, #144]	@ (800484c <HAL_RCC_OscConfig+0x504>)
 80047ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047c0:	60bb      	str	r3, [r7, #8]
 80047c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047c4:	2301      	movs	r3, #1
 80047c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047c8:	4b21      	ldr	r3, [pc, #132]	@ (8004850 <HAL_RCC_OscConfig+0x508>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d118      	bne.n	8004806 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047d4:	4b1e      	ldr	r3, [pc, #120]	@ (8004850 <HAL_RCC_OscConfig+0x508>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a1d      	ldr	r2, [pc, #116]	@ (8004850 <HAL_RCC_OscConfig+0x508>)
 80047da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047e0:	f7fd ffb0 	bl	8002744 <HAL_GetTick>
 80047e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047e6:	e008      	b.n	80047fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047e8:	f7fd ffac 	bl	8002744 <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d901      	bls.n	80047fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e1b8      	b.n	8004b6c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047fa:	4b15      	ldr	r3, [pc, #84]	@ (8004850 <HAL_RCC_OscConfig+0x508>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004802:	2b00      	cmp	r3, #0
 8004804:	d0f0      	beq.n	80047e8 <HAL_RCC_OscConfig+0x4a0>
>>>>>>> Stashed changes
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< Updated upstream
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d108      	bne.n	80047d4 <HAL_RCC_OscConfig+0x4d8>
 80047c2:	4b0f      	ldr	r3, [pc, #60]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 80047c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047c8:	4a0d      	ldr	r2, [pc, #52]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 80047ca:	f043 0301 	orr.w	r3, r3, #1
 80047ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047d2:	e029      	b.n	8004828 <HAL_RCC_OscConfig+0x52c>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	2b05      	cmp	r3, #5
 80047da:	d115      	bne.n	8004808 <HAL_RCC_OscConfig+0x50c>
 80047dc:	4b08      	ldr	r3, [pc, #32]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 80047de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047e2:	4a07      	ldr	r2, [pc, #28]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 80047e4:	f043 0304 	orr.w	r3, r3, #4
 80047e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047ec:	4b04      	ldr	r3, [pc, #16]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 80047ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047f2:	4a03      	ldr	r2, [pc, #12]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 80047f4:	f043 0301 	orr.w	r3, r3, #1
 80047f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047fc:	e014      	b.n	8004828 <HAL_RCC_OscConfig+0x52c>
 80047fe:	bf00      	nop
 8004800:	40021000 	.word	0x40021000
 8004804:	40007000 	.word	0x40007000
 8004808:	4b9d      	ldr	r3, [pc, #628]	@ (8004a80 <HAL_RCC_OscConfig+0x784>)
 800480a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800480e:	4a9c      	ldr	r2, [pc, #624]	@ (8004a80 <HAL_RCC_OscConfig+0x784>)
 8004810:	f023 0301 	bic.w	r3, r3, #1
 8004814:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004818:	4b99      	ldr	r3, [pc, #612]	@ (8004a80 <HAL_RCC_OscConfig+0x784>)
 800481a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800481e:	4a98      	ldr	r2, [pc, #608]	@ (8004a80 <HAL_RCC_OscConfig+0x784>)
 8004820:	f023 0304 	bic.w	r3, r3, #4
 8004824:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
=======
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	2b01      	cmp	r3, #1
 800480c:	d108      	bne.n	8004820 <HAL_RCC_OscConfig+0x4d8>
 800480e:	4b0f      	ldr	r3, [pc, #60]	@ (800484c <HAL_RCC_OscConfig+0x504>)
 8004810:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004814:	4a0d      	ldr	r2, [pc, #52]	@ (800484c <HAL_RCC_OscConfig+0x504>)
 8004816:	f043 0301 	orr.w	r3, r3, #1
 800481a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800481e:	e029      	b.n	8004874 <HAL_RCC_OscConfig+0x52c>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	2b05      	cmp	r3, #5
 8004826:	d115      	bne.n	8004854 <HAL_RCC_OscConfig+0x50c>
 8004828:	4b08      	ldr	r3, [pc, #32]	@ (800484c <HAL_RCC_OscConfig+0x504>)
 800482a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800482e:	4a07      	ldr	r2, [pc, #28]	@ (800484c <HAL_RCC_OscConfig+0x504>)
 8004830:	f043 0304 	orr.w	r3, r3, #4
 8004834:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004838:	4b04      	ldr	r3, [pc, #16]	@ (800484c <HAL_RCC_OscConfig+0x504>)
 800483a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800483e:	4a03      	ldr	r2, [pc, #12]	@ (800484c <HAL_RCC_OscConfig+0x504>)
 8004840:	f043 0301 	orr.w	r3, r3, #1
 8004844:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004848:	e014      	b.n	8004874 <HAL_RCC_OscConfig+0x52c>
 800484a:	bf00      	nop
 800484c:	40021000 	.word	0x40021000
 8004850:	40007000 	.word	0x40007000
 8004854:	4b9d      	ldr	r3, [pc, #628]	@ (8004acc <HAL_RCC_OscConfig+0x784>)
 8004856:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800485a:	4a9c      	ldr	r2, [pc, #624]	@ (8004acc <HAL_RCC_OscConfig+0x784>)
 800485c:	f023 0301 	bic.w	r3, r3, #1
 8004860:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004864:	4b99      	ldr	r3, [pc, #612]	@ (8004acc <HAL_RCC_OscConfig+0x784>)
 8004866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800486a:	4a98      	ldr	r2, [pc, #608]	@ (8004acc <HAL_RCC_OscConfig+0x784>)
 800486c:	f023 0304 	bic.w	r3, r3, #4
 8004870:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
>>>>>>> Stashed changes
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
<<<<<<< Updated upstream
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d016      	beq.n	800485e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004830:	f7fd ff62 	bl	80026f8 <HAL_GetTick>
 8004834:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004836:	e00a      	b.n	800484e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004838:	f7fd ff5e 	bl	80026f8 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004846:	4293      	cmp	r3, r2
 8004848:	d901      	bls.n	800484e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e168      	b.n	8004b20 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800484e:	4b8c      	ldr	r3, [pc, #560]	@ (8004a80 <HAL_RCC_OscConfig+0x784>)
 8004850:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004854:	f003 0302 	and.w	r3, r3, #2
 8004858:	2b00      	cmp	r3, #0
 800485a:	d0ed      	beq.n	8004838 <HAL_RCC_OscConfig+0x53c>
 800485c:	e015      	b.n	800488a <HAL_RCC_OscConfig+0x58e>
=======
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d016      	beq.n	80048aa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800487c:	f7fd ff62 	bl	8002744 <HAL_GetTick>
 8004880:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004882:	e00a      	b.n	800489a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004884:	f7fd ff5e 	bl	8002744 <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004892:	4293      	cmp	r3, r2
 8004894:	d901      	bls.n	800489a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e168      	b.n	8004b6c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800489a:	4b8c      	ldr	r3, [pc, #560]	@ (8004acc <HAL_RCC_OscConfig+0x784>)
 800489c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048a0:	f003 0302 	and.w	r3, r3, #2
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d0ed      	beq.n	8004884 <HAL_RCC_OscConfig+0x53c>
 80048a8:	e015      	b.n	80048d6 <HAL_RCC_OscConfig+0x58e>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 800485e:	f7fd ff4b 	bl	80026f8 <HAL_GetTick>
 8004862:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004864:	e00a      	b.n	800487c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004866:	f7fd ff47 	bl	80026f8 <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004874:	4293      	cmp	r3, r2
 8004876:	d901      	bls.n	800487c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e151      	b.n	8004b20 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800487c:	4b80      	ldr	r3, [pc, #512]	@ (8004a80 <HAL_RCC_OscConfig+0x784>)
 800487e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1ed      	bne.n	8004866 <HAL_RCC_OscConfig+0x56a>
=======
 80048aa:	f7fd ff4b 	bl	8002744 <HAL_GetTick>
 80048ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048b0:	e00a      	b.n	80048c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048b2:	f7fd ff47 	bl	8002744 <HAL_GetTick>
 80048b6:	4602      	mov	r2, r0
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d901      	bls.n	80048c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e151      	b.n	8004b6c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048c8:	4b80      	ldr	r3, [pc, #512]	@ (8004acc <HAL_RCC_OscConfig+0x784>)
 80048ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1ed      	bne.n	80048b2 <HAL_RCC_OscConfig+0x56a>
>>>>>>> Stashed changes
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
<<<<<<< Updated upstream
 800488a:	7ffb      	ldrb	r3, [r7, #31]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d105      	bne.n	800489c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004890:	4b7b      	ldr	r3, [pc, #492]	@ (8004a80 <HAL_RCC_OscConfig+0x784>)
 8004892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004894:	4a7a      	ldr	r2, [pc, #488]	@ (8004a80 <HAL_RCC_OscConfig+0x784>)
 8004896:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800489a:	6593      	str	r3, [r2, #88]	@ 0x58
=======
 80048d6:	7ffb      	ldrb	r3, [r7, #31]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d105      	bne.n	80048e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048dc:	4b7b      	ldr	r3, [pc, #492]	@ (8004acc <HAL_RCC_OscConfig+0x784>)
 80048de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048e0:	4a7a      	ldr	r2, [pc, #488]	@ (8004acc <HAL_RCC_OscConfig+0x784>)
 80048e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048e6:	6593      	str	r3, [r2, #88]	@ 0x58
>>>>>>> Stashed changes
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
<<<<<<< Updated upstream
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0320 	and.w	r3, r3, #32
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d03c      	beq.n	8004922 <HAL_RCC_OscConfig+0x626>
=======
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0320 	and.w	r3, r3, #32
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d03c      	beq.n	800496e <HAL_RCC_OscConfig+0x626>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
<<<<<<< Updated upstream
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d01c      	beq.n	80048ea <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80048b0:	4b73      	ldr	r3, [pc, #460]	@ (8004a80 <HAL_RCC_OscConfig+0x784>)
 80048b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048b6:	4a72      	ldr	r2, [pc, #456]	@ (8004a80 <HAL_RCC_OscConfig+0x784>)
 80048b8:	f043 0301 	orr.w	r3, r3, #1
 80048bc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048c0:	f7fd ff1a 	bl	80026f8 <HAL_GetTick>
 80048c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80048c6:	e008      	b.n	80048da <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048c8:	f7fd ff16 	bl	80026f8 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d901      	bls.n	80048da <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e122      	b.n	8004b20 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80048da:	4b69      	ldr	r3, [pc, #420]	@ (8004a80 <HAL_RCC_OscConfig+0x784>)
 80048dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048e0:	f003 0302 	and.w	r3, r3, #2
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d0ef      	beq.n	80048c8 <HAL_RCC_OscConfig+0x5cc>
 80048e8:	e01b      	b.n	8004922 <HAL_RCC_OscConfig+0x626>
=======
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d01c      	beq.n	8004936 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80048fc:	4b73      	ldr	r3, [pc, #460]	@ (8004acc <HAL_RCC_OscConfig+0x784>)
 80048fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004902:	4a72      	ldr	r2, [pc, #456]	@ (8004acc <HAL_RCC_OscConfig+0x784>)
 8004904:	f043 0301 	orr.w	r3, r3, #1
 8004908:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800490c:	f7fd ff1a 	bl	8002744 <HAL_GetTick>
 8004910:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004912:	e008      	b.n	8004926 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004914:	f7fd ff16 	bl	8002744 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	2b02      	cmp	r3, #2
 8004920:	d901      	bls.n	8004926 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e122      	b.n	8004b6c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004926:	4b69      	ldr	r3, [pc, #420]	@ (8004acc <HAL_RCC_OscConfig+0x784>)
 8004928:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800492c:	f003 0302 	and.w	r3, r3, #2
 8004930:	2b00      	cmp	r3, #0
 8004932:	d0ef      	beq.n	8004914 <HAL_RCC_OscConfig+0x5cc>
 8004934:	e01b      	b.n	800496e <HAL_RCC_OscConfig+0x626>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
<<<<<<< Updated upstream
 80048ea:	4b65      	ldr	r3, [pc, #404]	@ (8004a80 <HAL_RCC_OscConfig+0x784>)
 80048ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048f0:	4a63      	ldr	r2, [pc, #396]	@ (8004a80 <HAL_RCC_OscConfig+0x784>)
 80048f2:	f023 0301 	bic.w	r3, r3, #1
 80048f6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048fa:	f7fd fefd 	bl	80026f8 <HAL_GetTick>
 80048fe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004900:	e008      	b.n	8004914 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004902:	f7fd fef9 	bl	80026f8 <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	2b02      	cmp	r3, #2
 800490e:	d901      	bls.n	8004914 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e105      	b.n	8004b20 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004914:	4b5a      	ldr	r3, [pc, #360]	@ (8004a80 <HAL_RCC_OscConfig+0x784>)
 8004916:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800491a:	f003 0302 	and.w	r3, r3, #2
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1ef      	bne.n	8004902 <HAL_RCC_OscConfig+0x606>
=======
 8004936:	4b65      	ldr	r3, [pc, #404]	@ (8004acc <HAL_RCC_OscConfig+0x784>)
 8004938:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800493c:	4a63      	ldr	r2, [pc, #396]	@ (8004acc <HAL_RCC_OscConfig+0x784>)
 800493e:	f023 0301 	bic.w	r3, r3, #1
 8004942:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004946:	f7fd fefd 	bl	8002744 <HAL_GetTick>
 800494a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800494c:	e008      	b.n	8004960 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800494e:	f7fd fef9 	bl	8002744 <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	2b02      	cmp	r3, #2
 800495a:	d901      	bls.n	8004960 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e105      	b.n	8004b6c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004960:	4b5a      	ldr	r3, [pc, #360]	@ (8004acc <HAL_RCC_OscConfig+0x784>)
 8004962:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1ef      	bne.n	800494e <HAL_RCC_OscConfig+0x606>
>>>>>>> Stashed changes
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
<<<<<<< Updated upstream
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004926:	2b00      	cmp	r3, #0
 8004928:	f000 80f9 	beq.w	8004b1e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004930:	2b02      	cmp	r3, #2
 8004932:	f040 80cf 	bne.w	8004ad4 <HAL_RCC_OscConfig+0x7d8>
=======
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004972:	2b00      	cmp	r3, #0
 8004974:	f000 80f9 	beq.w	8004b6a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800497c:	2b02      	cmp	r3, #2
 800497e:	f040 80cf 	bne.w	8004b20 <HAL_RCC_OscConfig+0x7d8>
>>>>>>> Stashed changes
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
<<<<<<< Updated upstream
 8004936:	4b52      	ldr	r3, [pc, #328]	@ (8004a80 <HAL_RCC_OscConfig+0x784>)
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	f003 0203 	and.w	r2, r3, #3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004946:	429a      	cmp	r2, r3
 8004948:	d12c      	bne.n	80049a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004954:	3b01      	subs	r3, #1
 8004956:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004958:	429a      	cmp	r2, r3
 800495a:	d123      	bne.n	80049a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004966:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004968:	429a      	cmp	r2, r3
 800496a:	d11b      	bne.n	80049a4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004976:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004978:	429a      	cmp	r2, r3
 800497a:	d113      	bne.n	80049a4 <HAL_RCC_OscConfig+0x6a8>
=======
 8004982:	4b52      	ldr	r3, [pc, #328]	@ (8004acc <HAL_RCC_OscConfig+0x784>)
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	f003 0203 	and.w	r2, r3, #3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004992:	429a      	cmp	r2, r3
 8004994:	d12c      	bne.n	80049f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049a0:	3b01      	subs	r3, #1
 80049a2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d123      	bne.n	80049f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049b2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d11b      	bne.n	80049f0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049c2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d113      	bne.n	80049f0 <HAL_RCC_OscConfig+0x6a8>
>>>>>>> Stashed changes
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
<<<<<<< Updated upstream
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004986:	085b      	lsrs	r3, r3, #1
 8004988:	3b01      	subs	r3, #1
 800498a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800498c:	429a      	cmp	r2, r3
 800498e:	d109      	bne.n	80049a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800499a:	085b      	lsrs	r3, r3, #1
 800499c:	3b01      	subs	r3, #1
 800499e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d071      	beq.n	8004a88 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	2b0c      	cmp	r3, #12
 80049a8:	d068      	beq.n	8004a7c <HAL_RCC_OscConfig+0x780>
=======
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049d2:	085b      	lsrs	r3, r3, #1
 80049d4:	3b01      	subs	r3, #1
 80049d6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80049d8:	429a      	cmp	r2, r3
 80049da:	d109      	bne.n	80049f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e6:	085b      	lsrs	r3, r3, #1
 80049e8:	3b01      	subs	r3, #1
 80049ea:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d071      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	2b0c      	cmp	r3, #12
 80049f4:	d068      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x780>
>>>>>>> Stashed changes
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
<<<<<<< Updated upstream
 80049aa:	4b35      	ldr	r3, [pc, #212]	@ (8004a80 <HAL_RCC_OscConfig+0x784>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d105      	bne.n	80049c2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80049b6:	4b32      	ldr	r3, [pc, #200]	@ (8004a80 <HAL_RCC_OscConfig+0x784>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d001      	beq.n	80049c6 <HAL_RCC_OscConfig+0x6ca>
=======
 80049f6:	4b35      	ldr	r3, [pc, #212]	@ (8004acc <HAL_RCC_OscConfig+0x784>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d105      	bne.n	8004a0e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004a02:	4b32      	ldr	r3, [pc, #200]	@ (8004acc <HAL_RCC_OscConfig+0x784>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d001      	beq.n	8004a12 <HAL_RCC_OscConfig+0x6ca>
>>>>>>> Stashed changes
#endif
            )
          {
            return HAL_ERROR;
<<<<<<< Updated upstream
 80049c2:	2301      	movs	r3, #1
 80049c4:	e0ac      	b.n	8004b20 <HAL_RCC_OscConfig+0x824>
=======
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e0ac      	b.n	8004b6c <HAL_RCC_OscConfig+0x824>
>>>>>>> Stashed changes
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
<<<<<<< Updated upstream
 80049c6:	4b2e      	ldr	r3, [pc, #184]	@ (8004a80 <HAL_RCC_OscConfig+0x784>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a2d      	ldr	r2, [pc, #180]	@ (8004a80 <HAL_RCC_OscConfig+0x784>)
 80049cc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049d0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80049d2:	f7fd fe91 	bl	80026f8 <HAL_GetTick>
 80049d6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049d8:	e008      	b.n	80049ec <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049da:	f7fd fe8d 	bl	80026f8 <HAL_GetTick>
 80049de:	4602      	mov	r2, r0
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d901      	bls.n	80049ec <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e099      	b.n	8004b20 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049ec:	4b24      	ldr	r3, [pc, #144]	@ (8004a80 <HAL_RCC_OscConfig+0x784>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1f0      	bne.n	80049da <HAL_RCC_OscConfig+0x6de>
=======
 8004a12:	4b2e      	ldr	r3, [pc, #184]	@ (8004acc <HAL_RCC_OscConfig+0x784>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a2d      	ldr	r2, [pc, #180]	@ (8004acc <HAL_RCC_OscConfig+0x784>)
 8004a18:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a1c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a1e:	f7fd fe91 	bl	8002744 <HAL_GetTick>
 8004a22:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a24:	e008      	b.n	8004a38 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a26:	f7fd fe8d 	bl	8002744 <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d901      	bls.n	8004a38 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e099      	b.n	8004b6c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a38:	4b24      	ldr	r3, [pc, #144]	@ (8004acc <HAL_RCC_OscConfig+0x784>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d1f0      	bne.n	8004a26 <HAL_RCC_OscConfig+0x6de>
>>>>>>> Stashed changes
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
<<<<<<< Updated upstream
 80049f8:	4b21      	ldr	r3, [pc, #132]	@ (8004a80 <HAL_RCC_OscConfig+0x784>)
 80049fa:	68da      	ldr	r2, [r3, #12]
 80049fc:	4b21      	ldr	r3, [pc, #132]	@ (8004a84 <HAL_RCC_OscConfig+0x788>)
 80049fe:	4013      	ands	r3, r2
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004a08:	3a01      	subs	r2, #1
 8004a0a:	0112      	lsls	r2, r2, #4
 8004a0c:	4311      	orrs	r1, r2
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004a12:	0212      	lsls	r2, r2, #8
 8004a14:	4311      	orrs	r1, r2
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004a1a:	0852      	lsrs	r2, r2, #1
 8004a1c:	3a01      	subs	r2, #1
 8004a1e:	0552      	lsls	r2, r2, #21
 8004a20:	4311      	orrs	r1, r2
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004a26:	0852      	lsrs	r2, r2, #1
 8004a28:	3a01      	subs	r2, #1
 8004a2a:	0652      	lsls	r2, r2, #25
 8004a2c:	4311      	orrs	r1, r2
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004a32:	06d2      	lsls	r2, r2, #27
 8004a34:	430a      	orrs	r2, r1
 8004a36:	4912      	ldr	r1, [pc, #72]	@ (8004a80 <HAL_RCC_OscConfig+0x784>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	60cb      	str	r3, [r1, #12]
=======
 8004a44:	4b21      	ldr	r3, [pc, #132]	@ (8004acc <HAL_RCC_OscConfig+0x784>)
 8004a46:	68da      	ldr	r2, [r3, #12]
 8004a48:	4b21      	ldr	r3, [pc, #132]	@ (8004ad0 <HAL_RCC_OscConfig+0x788>)
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004a54:	3a01      	subs	r2, #1
 8004a56:	0112      	lsls	r2, r2, #4
 8004a58:	4311      	orrs	r1, r2
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004a5e:	0212      	lsls	r2, r2, #8
 8004a60:	4311      	orrs	r1, r2
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004a66:	0852      	lsrs	r2, r2, #1
 8004a68:	3a01      	subs	r2, #1
 8004a6a:	0552      	lsls	r2, r2, #21
 8004a6c:	4311      	orrs	r1, r2
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004a72:	0852      	lsrs	r2, r2, #1
 8004a74:	3a01      	subs	r2, #1
 8004a76:	0652      	lsls	r2, r2, #25
 8004a78:	4311      	orrs	r1, r2
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004a7e:	06d2      	lsls	r2, r2, #27
 8004a80:	430a      	orrs	r2, r1
 8004a82:	4912      	ldr	r1, [pc, #72]	@ (8004acc <HAL_RCC_OscConfig+0x784>)
 8004a84:	4313      	orrs	r3, r2
 8004a86:	60cb      	str	r3, [r1, #12]
>>>>>>> Stashed changes
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
<<<<<<< Updated upstream
 8004a3c:	4b10      	ldr	r3, [pc, #64]	@ (8004a80 <HAL_RCC_OscConfig+0x784>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a0f      	ldr	r2, [pc, #60]	@ (8004a80 <HAL_RCC_OscConfig+0x784>)
 8004a42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a46:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a48:	4b0d      	ldr	r3, [pc, #52]	@ (8004a80 <HAL_RCC_OscConfig+0x784>)
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	4a0c      	ldr	r2, [pc, #48]	@ (8004a80 <HAL_RCC_OscConfig+0x784>)
 8004a4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a52:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a54:	f7fd fe50 	bl	80026f8 <HAL_GetTick>
 8004a58:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a5a:	e008      	b.n	8004a6e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a5c:	f7fd fe4c 	bl	80026f8 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e058      	b.n	8004b20 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a6e:	4b04      	ldr	r3, [pc, #16]	@ (8004a80 <HAL_RCC_OscConfig+0x784>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d0f0      	beq.n	8004a5c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a7a:	e050      	b.n	8004b1e <HAL_RCC_OscConfig+0x822>
=======
 8004a88:	4b10      	ldr	r3, [pc, #64]	@ (8004acc <HAL_RCC_OscConfig+0x784>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a0f      	ldr	r2, [pc, #60]	@ (8004acc <HAL_RCC_OscConfig+0x784>)
 8004a8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a92:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a94:	4b0d      	ldr	r3, [pc, #52]	@ (8004acc <HAL_RCC_OscConfig+0x784>)
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	4a0c      	ldr	r2, [pc, #48]	@ (8004acc <HAL_RCC_OscConfig+0x784>)
 8004a9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a9e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004aa0:	f7fd fe50 	bl	8002744 <HAL_GetTick>
 8004aa4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aa6:	e008      	b.n	8004aba <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aa8:	f7fd fe4c 	bl	8002744 <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d901      	bls.n	8004aba <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e058      	b.n	8004b6c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aba:	4b04      	ldr	r3, [pc, #16]	@ (8004acc <HAL_RCC_OscConfig+0x784>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d0f0      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ac6:	e050      	b.n	8004b6a <HAL_RCC_OscConfig+0x822>
>>>>>>> Stashed changes
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
<<<<<<< Updated upstream
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e04f      	b.n	8004b20 <HAL_RCC_OscConfig+0x824>
 8004a80:	40021000 	.word	0x40021000
 8004a84:	019d800c 	.word	0x019d800c
=======
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e04f      	b.n	8004b6c <HAL_RCC_OscConfig+0x824>
 8004acc:	40021000 	.word	0x40021000
 8004ad0:	019d800c 	.word	0x019d800c
>>>>>>> Stashed changes
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
<<<<<<< Updated upstream
 8004a88:	4b27      	ldr	r3, [pc, #156]	@ (8004b28 <HAL_RCC_OscConfig+0x82c>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d144      	bne.n	8004b1e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004a94:	4b24      	ldr	r3, [pc, #144]	@ (8004b28 <HAL_RCC_OscConfig+0x82c>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a23      	ldr	r2, [pc, #140]	@ (8004b28 <HAL_RCC_OscConfig+0x82c>)
 8004a9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a9e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004aa0:	4b21      	ldr	r3, [pc, #132]	@ (8004b28 <HAL_RCC_OscConfig+0x82c>)
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	4a20      	ldr	r2, [pc, #128]	@ (8004b28 <HAL_RCC_OscConfig+0x82c>)
 8004aa6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004aaa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004aac:	f7fd fe24 	bl	80026f8 <HAL_GetTick>
 8004ab0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ab2:	e008      	b.n	8004ac6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ab4:	f7fd fe20 	bl	80026f8 <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e02c      	b.n	8004b20 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ac6:	4b18      	ldr	r3, [pc, #96]	@ (8004b28 <HAL_RCC_OscConfig+0x82c>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d0f0      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x7b8>
 8004ad2:	e024      	b.n	8004b1e <HAL_RCC_OscConfig+0x822>
=======
 8004ad4:	4b27      	ldr	r3, [pc, #156]	@ (8004b74 <HAL_RCC_OscConfig+0x82c>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d144      	bne.n	8004b6a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004ae0:	4b24      	ldr	r3, [pc, #144]	@ (8004b74 <HAL_RCC_OscConfig+0x82c>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a23      	ldr	r2, [pc, #140]	@ (8004b74 <HAL_RCC_OscConfig+0x82c>)
 8004ae6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004aea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004aec:	4b21      	ldr	r3, [pc, #132]	@ (8004b74 <HAL_RCC_OscConfig+0x82c>)
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	4a20      	ldr	r2, [pc, #128]	@ (8004b74 <HAL_RCC_OscConfig+0x82c>)
 8004af2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004af6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004af8:	f7fd fe24 	bl	8002744 <HAL_GetTick>
 8004afc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004afe:	e008      	b.n	8004b12 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b00:	f7fd fe20 	bl	8002744 <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e02c      	b.n	8004b6c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b12:	4b18      	ldr	r3, [pc, #96]	@ (8004b74 <HAL_RCC_OscConfig+0x82c>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d0f0      	beq.n	8004b00 <HAL_RCC_OscConfig+0x7b8>
 8004b1e:	e024      	b.n	8004b6a <HAL_RCC_OscConfig+0x822>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
<<<<<<< Updated upstream
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	2b0c      	cmp	r3, #12
 8004ad8:	d01f      	beq.n	8004b1a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ada:	4b13      	ldr	r3, [pc, #76]	@ (8004b28 <HAL_RCC_OscConfig+0x82c>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a12      	ldr	r2, [pc, #72]	@ (8004b28 <HAL_RCC_OscConfig+0x82c>)
 8004ae0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ae4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae6:	f7fd fe07 	bl	80026f8 <HAL_GetTick>
 8004aea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004aec:	e008      	b.n	8004b00 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aee:	f7fd fe03 	bl	80026f8 <HAL_GetTick>
 8004af2:	4602      	mov	r2, r0
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d901      	bls.n	8004b00 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e00f      	b.n	8004b20 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b00:	4b09      	ldr	r3, [pc, #36]	@ (8004b28 <HAL_RCC_OscConfig+0x82c>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1f0      	bne.n	8004aee <HAL_RCC_OscConfig+0x7f2>
=======
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	2b0c      	cmp	r3, #12
 8004b24:	d01f      	beq.n	8004b66 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b26:	4b13      	ldr	r3, [pc, #76]	@ (8004b74 <HAL_RCC_OscConfig+0x82c>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a12      	ldr	r2, [pc, #72]	@ (8004b74 <HAL_RCC_OscConfig+0x82c>)
 8004b2c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b32:	f7fd fe07 	bl	8002744 <HAL_GetTick>
 8004b36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b38:	e008      	b.n	8004b4c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b3a:	f7fd fe03 	bl	8002744 <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d901      	bls.n	8004b4c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e00f      	b.n	8004b6c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b4c:	4b09      	ldr	r3, [pc, #36]	@ (8004b74 <HAL_RCC_OscConfig+0x82c>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1f0      	bne.n	8004b3a <HAL_RCC_OscConfig+0x7f2>
>>>>>>> Stashed changes
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
<<<<<<< Updated upstream
 8004b0c:	4b06      	ldr	r3, [pc, #24]	@ (8004b28 <HAL_RCC_OscConfig+0x82c>)
 8004b0e:	68da      	ldr	r2, [r3, #12]
 8004b10:	4905      	ldr	r1, [pc, #20]	@ (8004b28 <HAL_RCC_OscConfig+0x82c>)
 8004b12:	4b06      	ldr	r3, [pc, #24]	@ (8004b2c <HAL_RCC_OscConfig+0x830>)
 8004b14:	4013      	ands	r3, r2
 8004b16:	60cb      	str	r3, [r1, #12]
 8004b18:	e001      	b.n	8004b1e <HAL_RCC_OscConfig+0x822>
=======
 8004b58:	4b06      	ldr	r3, [pc, #24]	@ (8004b74 <HAL_RCC_OscConfig+0x82c>)
 8004b5a:	68da      	ldr	r2, [r3, #12]
 8004b5c:	4905      	ldr	r1, [pc, #20]	@ (8004b74 <HAL_RCC_OscConfig+0x82c>)
 8004b5e:	4b06      	ldr	r3, [pc, #24]	@ (8004b78 <HAL_RCC_OscConfig+0x830>)
 8004b60:	4013      	ands	r3, r2
 8004b62:	60cb      	str	r3, [r1, #12]
 8004b64:	e001      	b.n	8004b6a <HAL_RCC_OscConfig+0x822>
>>>>>>> Stashed changes
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
<<<<<<< Updated upstream
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e000      	b.n	8004b20 <HAL_RCC_OscConfig+0x824>
=======
 8004b66:	2301      	movs	r3, #1
 8004b68:	e000      	b.n	8004b6c <HAL_RCC_OscConfig+0x824>
>>>>>>> Stashed changes
      }
    }
  }
  return HAL_OK;
<<<<<<< Updated upstream
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3720      	adds	r7, #32
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	40021000 	.word	0x40021000
 8004b2c:	feeefffc 	.word	0xfeeefffc

08004b30 <HAL_RCC_ClockConfig>:
=======
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3720      	adds	r7, #32
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	40021000 	.word	0x40021000
 8004b78:	feeefffc 	.word	0xfeeefffc

08004b7c <HAL_RCC_ClockConfig>:
>>>>>>> Stashed changes
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< Updated upstream
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
=======
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b086      	sub	sp, #24
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
<<<<<<< Updated upstream
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	617b      	str	r3, [r7, #20]
=======
 8004b86:	2300      	movs	r3, #0
 8004b88:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
<<<<<<< Updated upstream
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d101      	bne.n	8004b48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e11d      	b.n	8004d84 <HAL_RCC_ClockConfig+0x254>
=======
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d101      	bne.n	8004b94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e11d      	b.n	8004dd0 <HAL_RCC_ClockConfig+0x254>
>>>>>>> Stashed changes
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< Updated upstream
 8004b48:	4b90      	ldr	r3, [pc, #576]	@ (8004d8c <HAL_RCC_ClockConfig+0x25c>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 030f 	and.w	r3, r3, #15
 8004b50:	683a      	ldr	r2, [r7, #0]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d910      	bls.n	8004b78 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b56:	4b8d      	ldr	r3, [pc, #564]	@ (8004d8c <HAL_RCC_ClockConfig+0x25c>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f023 020f 	bic.w	r2, r3, #15
 8004b5e:	498b      	ldr	r1, [pc, #556]	@ (8004d8c <HAL_RCC_ClockConfig+0x25c>)
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	600b      	str	r3, [r1, #0]
=======
 8004b94:	4b90      	ldr	r3, [pc, #576]	@ (8004dd8 <HAL_RCC_ClockConfig+0x25c>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 030f 	and.w	r3, r3, #15
 8004b9c:	683a      	ldr	r2, [r7, #0]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d910      	bls.n	8004bc4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ba2:	4b8d      	ldr	r3, [pc, #564]	@ (8004dd8 <HAL_RCC_ClockConfig+0x25c>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f023 020f 	bic.w	r2, r3, #15
 8004baa:	498b      	ldr	r1, [pc, #556]	@ (8004dd8 <HAL_RCC_ClockConfig+0x25c>)
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	600b      	str	r3, [r1, #0]
>>>>>>> Stashed changes

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< Updated upstream
 8004b66:	4b89      	ldr	r3, [pc, #548]	@ (8004d8c <HAL_RCC_ClockConfig+0x25c>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 030f 	and.w	r3, r3, #15
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d001      	beq.n	8004b78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e105      	b.n	8004d84 <HAL_RCC_ClockConfig+0x254>
=======
 8004bb2:	4b89      	ldr	r3, [pc, #548]	@ (8004dd8 <HAL_RCC_ClockConfig+0x25c>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 030f 	and.w	r3, r3, #15
 8004bba:	683a      	ldr	r2, [r7, #0]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d001      	beq.n	8004bc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e105      	b.n	8004dd0 <HAL_RCC_ClockConfig+0x254>
>>>>>>> Stashed changes
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< Updated upstream
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0302 	and.w	r3, r3, #2
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d010      	beq.n	8004ba6 <HAL_RCC_ClockConfig+0x76>
=======
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0302 	and.w	r3, r3, #2
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d010      	beq.n	8004bf2 <HAL_RCC_ClockConfig+0x76>
>>>>>>> Stashed changes
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
<<<<<<< Updated upstream
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689a      	ldr	r2, [r3, #8]
 8004b88:	4b81      	ldr	r3, [pc, #516]	@ (8004d90 <HAL_RCC_ClockConfig+0x260>)
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d908      	bls.n	8004ba6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b94:	4b7e      	ldr	r3, [pc, #504]	@ (8004d90 <HAL_RCC_ClockConfig+0x260>)
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	497b      	ldr	r1, [pc, #492]	@ (8004d90 <HAL_RCC_ClockConfig+0x260>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	608b      	str	r3, [r1, #8]
=======
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	689a      	ldr	r2, [r3, #8]
 8004bd4:	4b81      	ldr	r3, [pc, #516]	@ (8004ddc <HAL_RCC_ClockConfig+0x260>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d908      	bls.n	8004bf2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004be0:	4b7e      	ldr	r3, [pc, #504]	@ (8004ddc <HAL_RCC_ClockConfig+0x260>)
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	497b      	ldr	r1, [pc, #492]	@ (8004ddc <HAL_RCC_ClockConfig+0x260>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	608b      	str	r3, [r1, #8]
>>>>>>> Stashed changes
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< Updated upstream
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d079      	beq.n	8004ca6 <HAL_RCC_ClockConfig+0x176>
=======
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0301 	and.w	r3, r3, #1
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d079      	beq.n	8004cf2 <HAL_RCC_ClockConfig+0x176>
>>>>>>> Stashed changes
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
<<<<<<< Updated upstream
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	2b03      	cmp	r3, #3
 8004bb8:	d11e      	bne.n	8004bf8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bba:	4b75      	ldr	r3, [pc, #468]	@ (8004d90 <HAL_RCC_ClockConfig+0x260>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d101      	bne.n	8004bca <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e0dc      	b.n	8004d84 <HAL_RCC_ClockConfig+0x254>
=======
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	2b03      	cmp	r3, #3
 8004c04:	d11e      	bne.n	8004c44 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c06:	4b75      	ldr	r3, [pc, #468]	@ (8004ddc <HAL_RCC_ClockConfig+0x260>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d101      	bne.n	8004c16 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e0dc      	b.n	8004dd0 <HAL_RCC_ClockConfig+0x254>
>>>>>>> Stashed changes
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
<<<<<<< Updated upstream
 8004bca:	f000 fa09 	bl	8004fe0 <RCC_GetSysClockFreqFromPLLSource>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	4a70      	ldr	r2, [pc, #448]	@ (8004d94 <HAL_RCC_ClockConfig+0x264>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d946      	bls.n	8004c64 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004bd6:	4b6e      	ldr	r3, [pc, #440]	@ (8004d90 <HAL_RCC_ClockConfig+0x260>)
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d140      	bne.n	8004c64 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004be2:	4b6b      	ldr	r3, [pc, #428]	@ (8004d90 <HAL_RCC_ClockConfig+0x260>)
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004bea:	4a69      	ldr	r2, [pc, #420]	@ (8004d90 <HAL_RCC_ClockConfig+0x260>)
 8004bec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bf0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004bf2:	2380      	movs	r3, #128	@ 0x80
 8004bf4:	617b      	str	r3, [r7, #20]
 8004bf6:	e035      	b.n	8004c64 <HAL_RCC_ClockConfig+0x134>
=======
 8004c16:	f000 fa09 	bl	800502c <RCC_GetSysClockFreqFromPLLSource>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	4a70      	ldr	r2, [pc, #448]	@ (8004de0 <HAL_RCC_ClockConfig+0x264>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d946      	bls.n	8004cb0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004c22:	4b6e      	ldr	r3, [pc, #440]	@ (8004ddc <HAL_RCC_ClockConfig+0x260>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d140      	bne.n	8004cb0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004c2e:	4b6b      	ldr	r3, [pc, #428]	@ (8004ddc <HAL_RCC_ClockConfig+0x260>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c36:	4a69      	ldr	r2, [pc, #420]	@ (8004ddc <HAL_RCC_ClockConfig+0x260>)
 8004c38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c3c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004c3e:	2380      	movs	r3, #128	@ 0x80
 8004c40:	617b      	str	r3, [r7, #20]
 8004c42:	e035      	b.n	8004cb0 <HAL_RCC_ClockConfig+0x134>
>>>>>>> Stashed changes
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< Updated upstream
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d107      	bne.n	8004c10 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c00:	4b63      	ldr	r3, [pc, #396]	@ (8004d90 <HAL_RCC_ClockConfig+0x260>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d115      	bne.n	8004c38 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e0b9      	b.n	8004d84 <HAL_RCC_ClockConfig+0x254>
=======
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d107      	bne.n	8004c5c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c4c:	4b63      	ldr	r3, [pc, #396]	@ (8004ddc <HAL_RCC_ClockConfig+0x260>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d115      	bne.n	8004c84 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e0b9      	b.n	8004dd0 <HAL_RCC_ClockConfig+0x254>
>>>>>>> Stashed changes
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
<<<<<<< Updated upstream
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d107      	bne.n	8004c28 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c18:	4b5d      	ldr	r3, [pc, #372]	@ (8004d90 <HAL_RCC_ClockConfig+0x260>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d109      	bne.n	8004c38 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e0ad      	b.n	8004d84 <HAL_RCC_ClockConfig+0x254>
=======
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d107      	bne.n	8004c74 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c64:	4b5d      	ldr	r3, [pc, #372]	@ (8004ddc <HAL_RCC_ClockConfig+0x260>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0302 	and.w	r3, r3, #2
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d109      	bne.n	8004c84 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e0ad      	b.n	8004dd0 <HAL_RCC_ClockConfig+0x254>
>>>>>>> Stashed changes
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
<<<<<<< Updated upstream
 8004c28:	4b59      	ldr	r3, [pc, #356]	@ (8004d90 <HAL_RCC_ClockConfig+0x260>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d101      	bne.n	8004c38 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e0a5      	b.n	8004d84 <HAL_RCC_ClockConfig+0x254>
=======
 8004c74:	4b59      	ldr	r3, [pc, #356]	@ (8004ddc <HAL_RCC_ClockConfig+0x260>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d101      	bne.n	8004c84 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e0a5      	b.n	8004dd0 <HAL_RCC_ClockConfig+0x254>
>>>>>>> Stashed changes
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
<<<<<<< Updated upstream
 8004c38:	f000 f8b4 	bl	8004da4 <HAL_RCC_GetSysClockFreq>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	4a55      	ldr	r2, [pc, #340]	@ (8004d94 <HAL_RCC_ClockConfig+0x264>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d90f      	bls.n	8004c64 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004c44:	4b52      	ldr	r3, [pc, #328]	@ (8004d90 <HAL_RCC_ClockConfig+0x260>)
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d109      	bne.n	8004c64 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004c50:	4b4f      	ldr	r3, [pc, #316]	@ (8004d90 <HAL_RCC_ClockConfig+0x260>)
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c58:	4a4d      	ldr	r2, [pc, #308]	@ (8004d90 <HAL_RCC_ClockConfig+0x260>)
 8004c5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c5e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004c60:	2380      	movs	r3, #128	@ 0x80
 8004c62:	617b      	str	r3, [r7, #20]
=======
 8004c84:	f000 f8b4 	bl	8004df0 <HAL_RCC_GetSysClockFreq>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	4a55      	ldr	r2, [pc, #340]	@ (8004de0 <HAL_RCC_ClockConfig+0x264>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d90f      	bls.n	8004cb0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004c90:	4b52      	ldr	r3, [pc, #328]	@ (8004ddc <HAL_RCC_ClockConfig+0x260>)
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d109      	bne.n	8004cb0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004c9c:	4b4f      	ldr	r3, [pc, #316]	@ (8004ddc <HAL_RCC_ClockConfig+0x260>)
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ca4:	4a4d      	ldr	r2, [pc, #308]	@ (8004ddc <HAL_RCC_ClockConfig+0x260>)
 8004ca6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004caa:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004cac:	2380      	movs	r3, #128	@ 0x80
 8004cae:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< Updated upstream
 8004c64:	4b4a      	ldr	r3, [pc, #296]	@ (8004d90 <HAL_RCC_ClockConfig+0x260>)
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f023 0203 	bic.w	r2, r3, #3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	4947      	ldr	r1, [pc, #284]	@ (8004d90 <HAL_RCC_ClockConfig+0x260>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c76:	f7fd fd3f 	bl	80026f8 <HAL_GetTick>
 8004c7a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c7c:	e00a      	b.n	8004c94 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c7e:	f7fd fd3b 	bl	80026f8 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d901      	bls.n	8004c94 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e077      	b.n	8004d84 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c94:	4b3e      	ldr	r3, [pc, #248]	@ (8004d90 <HAL_RCC_ClockConfig+0x260>)
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f003 020c 	and.w	r2, r3, #12
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d1eb      	bne.n	8004c7e <HAL_RCC_ClockConfig+0x14e>
=======
 8004cb0:	4b4a      	ldr	r3, [pc, #296]	@ (8004ddc <HAL_RCC_ClockConfig+0x260>)
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f023 0203 	bic.w	r2, r3, #3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	4947      	ldr	r1, [pc, #284]	@ (8004ddc <HAL_RCC_ClockConfig+0x260>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cc2:	f7fd fd3f 	bl	8002744 <HAL_GetTick>
 8004cc6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cc8:	e00a      	b.n	8004ce0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cca:	f7fd fd3b 	bl	8002744 <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d901      	bls.n	8004ce0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e077      	b.n	8004dd0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ce0:	4b3e      	ldr	r3, [pc, #248]	@ (8004ddc <HAL_RCC_ClockConfig+0x260>)
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f003 020c 	and.w	r2, r3, #12
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d1eb      	bne.n	8004cca <HAL_RCC_ClockConfig+0x14e>
>>>>>>> Stashed changes
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
<<<<<<< Updated upstream
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	2b80      	cmp	r3, #128	@ 0x80
 8004caa:	d105      	bne.n	8004cb8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004cac:	4b38      	ldr	r3, [pc, #224]	@ (8004d90 <HAL_RCC_ClockConfig+0x260>)
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	4a37      	ldr	r2, [pc, #220]	@ (8004d90 <HAL_RCC_ClockConfig+0x260>)
 8004cb2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004cb6:	6093      	str	r3, [r2, #8]
=======
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	2b80      	cmp	r3, #128	@ 0x80
 8004cf6:	d105      	bne.n	8004d04 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004cf8:	4b38      	ldr	r3, [pc, #224]	@ (8004ddc <HAL_RCC_ClockConfig+0x260>)
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	4a37      	ldr	r2, [pc, #220]	@ (8004ddc <HAL_RCC_ClockConfig+0x260>)
 8004cfe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d02:	6093      	str	r3, [r2, #8]
>>>>>>> Stashed changes
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< Updated upstream
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0302 	and.w	r3, r3, #2
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d010      	beq.n	8004ce6 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	689a      	ldr	r2, [r3, #8]
 8004cc8:	4b31      	ldr	r3, [pc, #196]	@ (8004d90 <HAL_RCC_ClockConfig+0x260>)
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d208      	bcs.n	8004ce6 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cd4:	4b2e      	ldr	r3, [pc, #184]	@ (8004d90 <HAL_RCC_ClockConfig+0x260>)
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	492b      	ldr	r1, [pc, #172]	@ (8004d90 <HAL_RCC_ClockConfig+0x260>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	608b      	str	r3, [r1, #8]
=======
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0302 	and.w	r3, r3, #2
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d010      	beq.n	8004d32 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	689a      	ldr	r2, [r3, #8]
 8004d14:	4b31      	ldr	r3, [pc, #196]	@ (8004ddc <HAL_RCC_ClockConfig+0x260>)
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d208      	bcs.n	8004d32 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d20:	4b2e      	ldr	r3, [pc, #184]	@ (8004ddc <HAL_RCC_ClockConfig+0x260>)
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	492b      	ldr	r1, [pc, #172]	@ (8004ddc <HAL_RCC_ClockConfig+0x260>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	608b      	str	r3, [r1, #8]
>>>>>>> Stashed changes
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< Updated upstream
 8004ce6:	4b29      	ldr	r3, [pc, #164]	@ (8004d8c <HAL_RCC_ClockConfig+0x25c>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 030f 	and.w	r3, r3, #15
 8004cee:	683a      	ldr	r2, [r7, #0]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d210      	bcs.n	8004d16 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cf4:	4b25      	ldr	r3, [pc, #148]	@ (8004d8c <HAL_RCC_ClockConfig+0x25c>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f023 020f 	bic.w	r2, r3, #15
 8004cfc:	4923      	ldr	r1, [pc, #140]	@ (8004d8c <HAL_RCC_ClockConfig+0x25c>)
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	600b      	str	r3, [r1, #0]
=======
 8004d32:	4b29      	ldr	r3, [pc, #164]	@ (8004dd8 <HAL_RCC_ClockConfig+0x25c>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 030f 	and.w	r3, r3, #15
 8004d3a:	683a      	ldr	r2, [r7, #0]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d210      	bcs.n	8004d62 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d40:	4b25      	ldr	r3, [pc, #148]	@ (8004dd8 <HAL_RCC_ClockConfig+0x25c>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f023 020f 	bic.w	r2, r3, #15
 8004d48:	4923      	ldr	r1, [pc, #140]	@ (8004dd8 <HAL_RCC_ClockConfig+0x25c>)
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	600b      	str	r3, [r1, #0]
>>>>>>> Stashed changes

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< Updated upstream
 8004d04:	4b21      	ldr	r3, [pc, #132]	@ (8004d8c <HAL_RCC_ClockConfig+0x25c>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 030f 	and.w	r3, r3, #15
 8004d0c:	683a      	ldr	r2, [r7, #0]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d001      	beq.n	8004d16 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e036      	b.n	8004d84 <HAL_RCC_ClockConfig+0x254>
=======
 8004d50:	4b21      	ldr	r3, [pc, #132]	@ (8004dd8 <HAL_RCC_ClockConfig+0x25c>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 030f 	and.w	r3, r3, #15
 8004d58:	683a      	ldr	r2, [r7, #0]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d001      	beq.n	8004d62 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e036      	b.n	8004dd0 <HAL_RCC_ClockConfig+0x254>
>>>>>>> Stashed changes
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< Updated upstream
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0304 	and.w	r3, r3, #4
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d008      	beq.n	8004d34 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d22:	4b1b      	ldr	r3, [pc, #108]	@ (8004d90 <HAL_RCC_ClockConfig+0x260>)
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	4918      	ldr	r1, [pc, #96]	@ (8004d90 <HAL_RCC_ClockConfig+0x260>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	608b      	str	r3, [r1, #8]
=======
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0304 	and.w	r3, r3, #4
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d008      	beq.n	8004d80 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d6e:	4b1b      	ldr	r3, [pc, #108]	@ (8004ddc <HAL_RCC_ClockConfig+0x260>)
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	4918      	ldr	r1, [pc, #96]	@ (8004ddc <HAL_RCC_ClockConfig+0x260>)
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	608b      	str	r3, [r1, #8]
>>>>>>> Stashed changes
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< Updated upstream
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0308 	and.w	r3, r3, #8
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d009      	beq.n	8004d54 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d40:	4b13      	ldr	r3, [pc, #76]	@ (8004d90 <HAL_RCC_ClockConfig+0x260>)
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	00db      	lsls	r3, r3, #3
 8004d4e:	4910      	ldr	r1, [pc, #64]	@ (8004d90 <HAL_RCC_ClockConfig+0x260>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	608b      	str	r3, [r1, #8]
=======
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0308 	and.w	r3, r3, #8
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d009      	beq.n	8004da0 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d8c:	4b13      	ldr	r3, [pc, #76]	@ (8004ddc <HAL_RCC_ClockConfig+0x260>)
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	00db      	lsls	r3, r3, #3
 8004d9a:	4910      	ldr	r1, [pc, #64]	@ (8004ddc <HAL_RCC_ClockConfig+0x260>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	608b      	str	r3, [r1, #8]
>>>>>>> Stashed changes
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
<<<<<<< Updated upstream
 8004d54:	f000 f826 	bl	8004da4 <HAL_RCC_GetSysClockFreq>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8004d90 <HAL_RCC_ClockConfig+0x260>)
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	091b      	lsrs	r3, r3, #4
 8004d60:	f003 030f 	and.w	r3, r3, #15
 8004d64:	490c      	ldr	r1, [pc, #48]	@ (8004d98 <HAL_RCC_ClockConfig+0x268>)
 8004d66:	5ccb      	ldrb	r3, [r1, r3]
 8004d68:	f003 031f 	and.w	r3, r3, #31
 8004d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d70:	4a0a      	ldr	r2, [pc, #40]	@ (8004d9c <HAL_RCC_ClockConfig+0x26c>)
 8004d72:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004d74:	4b0a      	ldr	r3, [pc, #40]	@ (8004da0 <HAL_RCC_ClockConfig+0x270>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7fd fc6d 	bl	8002658 <HAL_InitTick>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	73fb      	strb	r3, [r7, #15]

  return status;
 8004d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3718      	adds	r7, #24
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	40022000 	.word	0x40022000
 8004d90:	40021000 	.word	0x40021000
 8004d94:	04c4b400 	.word	0x04c4b400
 8004d98:	0800d3b4 	.word	0x0800d3b4
 8004d9c:	2000000c 	.word	0x2000000c
 8004da0:	20000044 	.word	0x20000044

08004da4 <HAL_RCC_GetSysClockFreq>:
=======
 8004da0:	f000 f826 	bl	8004df0 <HAL_RCC_GetSysClockFreq>
 8004da4:	4602      	mov	r2, r0
 8004da6:	4b0d      	ldr	r3, [pc, #52]	@ (8004ddc <HAL_RCC_ClockConfig+0x260>)
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	091b      	lsrs	r3, r3, #4
 8004dac:	f003 030f 	and.w	r3, r3, #15
 8004db0:	490c      	ldr	r1, [pc, #48]	@ (8004de4 <HAL_RCC_ClockConfig+0x268>)
 8004db2:	5ccb      	ldrb	r3, [r1, r3]
 8004db4:	f003 031f 	and.w	r3, r3, #31
 8004db8:	fa22 f303 	lsr.w	r3, r2, r3
 8004dbc:	4a0a      	ldr	r2, [pc, #40]	@ (8004de8 <HAL_RCC_ClockConfig+0x26c>)
 8004dbe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004dc0:	4b0a      	ldr	r3, [pc, #40]	@ (8004dec <HAL_RCC_ClockConfig+0x270>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f7fd fc6d 	bl	80026a4 <HAL_InitTick>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	73fb      	strb	r3, [r7, #15]

  return status;
 8004dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3718      	adds	r7, #24
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	40022000 	.word	0x40022000
 8004ddc:	40021000 	.word	0x40021000
 8004de0:	04c4b400 	.word	0x04c4b400
 8004de4:	0800d408 	.word	0x0800d408
 8004de8:	2000000c 	.word	0x2000000c
 8004dec:	20000044 	.word	0x20000044

08004df0 <HAL_RCC_GetSysClockFreq>:
>>>>>>> Stashed changes
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< Updated upstream
 8004da4:	b480      	push	{r7}
 8004da6:	b089      	sub	sp, #36	@ 0x24
 8004da8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004daa:	2300      	movs	r3, #0
 8004dac:	61fb      	str	r3, [r7, #28]
 8004dae:	2300      	movs	r3, #0
 8004db0:	61bb      	str	r3, [r7, #24]
=======
 8004df0:	b480      	push	{r7}
 8004df2:	b089      	sub	sp, #36	@ 0x24
 8004df4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004df6:	2300      	movs	r3, #0
 8004df8:	61fb      	str	r3, [r7, #28]
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
<<<<<<< Updated upstream
 8004db2:	4b3e      	ldr	r3, [pc, #248]	@ (8004eac <HAL_RCC_GetSysClockFreq+0x108>)
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f003 030c 	and.w	r3, r3, #12
 8004dba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004dbc:	4b3b      	ldr	r3, [pc, #236]	@ (8004eac <HAL_RCC_GetSysClockFreq+0x108>)
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	f003 0303 	and.w	r3, r3, #3
 8004dc4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d005      	beq.n	8004dd8 <HAL_RCC_GetSysClockFreq+0x34>
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	2b0c      	cmp	r3, #12
 8004dd0:	d121      	bne.n	8004e16 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d11e      	bne.n	8004e16 <HAL_RCC_GetSysClockFreq+0x72>
=======
 8004dfe:	4b3e      	ldr	r3, [pc, #248]	@ (8004ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f003 030c 	and.w	r3, r3, #12
 8004e06:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e08:	4b3b      	ldr	r3, [pc, #236]	@ (8004ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	f003 0303 	and.w	r3, r3, #3
 8004e10:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d005      	beq.n	8004e24 <HAL_RCC_GetSysClockFreq+0x34>
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	2b0c      	cmp	r3, #12
 8004e1c:	d121      	bne.n	8004e62 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d11e      	bne.n	8004e62 <HAL_RCC_GetSysClockFreq+0x72>
>>>>>>> Stashed changes
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
<<<<<<< Updated upstream
 8004dd8:	4b34      	ldr	r3, [pc, #208]	@ (8004eac <HAL_RCC_GetSysClockFreq+0x108>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0308 	and.w	r3, r3, #8
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d107      	bne.n	8004df4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004de4:	4b31      	ldr	r3, [pc, #196]	@ (8004eac <HAL_RCC_GetSysClockFreq+0x108>)
 8004de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dea:	0a1b      	lsrs	r3, r3, #8
 8004dec:	f003 030f 	and.w	r3, r3, #15
 8004df0:	61fb      	str	r3, [r7, #28]
 8004df2:	e005      	b.n	8004e00 <HAL_RCC_GetSysClockFreq+0x5c>
=======
 8004e24:	4b34      	ldr	r3, [pc, #208]	@ (8004ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0308 	and.w	r3, r3, #8
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d107      	bne.n	8004e40 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004e30:	4b31      	ldr	r3, [pc, #196]	@ (8004ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e36:	0a1b      	lsrs	r3, r3, #8
 8004e38:	f003 030f 	and.w	r3, r3, #15
 8004e3c:	61fb      	str	r3, [r7, #28]
 8004e3e:	e005      	b.n	8004e4c <HAL_RCC_GetSysClockFreq+0x5c>
>>>>>>> Stashed changes
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
<<<<<<< Updated upstream
 8004df4:	4b2d      	ldr	r3, [pc, #180]	@ (8004eac <HAL_RCC_GetSysClockFreq+0x108>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	091b      	lsrs	r3, r3, #4
 8004dfa:	f003 030f 	and.w	r3, r3, #15
 8004dfe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004e00:	4a2b      	ldr	r2, [pc, #172]	@ (8004eb0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e08:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d10d      	bne.n	8004e2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e14:	e00a      	b.n	8004e2c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	2b04      	cmp	r3, #4
 8004e1a:	d102      	bne.n	8004e22 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004e1c:	4b25      	ldr	r3, [pc, #148]	@ (8004eb4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e1e:	61bb      	str	r3, [r7, #24]
 8004e20:	e004      	b.n	8004e2c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	2b08      	cmp	r3, #8
 8004e26:	d101      	bne.n	8004e2c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004e28:	4b23      	ldr	r3, [pc, #140]	@ (8004eb8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004e2a:	61bb      	str	r3, [r7, #24]
=======
 8004e40:	4b2d      	ldr	r3, [pc, #180]	@ (8004ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	091b      	lsrs	r3, r3, #4
 8004e46:	f003 030f 	and.w	r3, r3, #15
 8004e4a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004e4c:	4a2b      	ldr	r2, [pc, #172]	@ (8004efc <HAL_RCC_GetSysClockFreq+0x10c>)
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e54:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d10d      	bne.n	8004e78 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e60:	e00a      	b.n	8004e78 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	2b04      	cmp	r3, #4
 8004e66:	d102      	bne.n	8004e6e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004e68:	4b25      	ldr	r3, [pc, #148]	@ (8004f00 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e6a:	61bb      	str	r3, [r7, #24]
 8004e6c:	e004      	b.n	8004e78 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	2b08      	cmp	r3, #8
 8004e72:	d101      	bne.n	8004e78 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004e74:	4b23      	ldr	r3, [pc, #140]	@ (8004f04 <HAL_RCC_GetSysClockFreq+0x114>)
 8004e76:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
<<<<<<< Updated upstream
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	2b0c      	cmp	r3, #12
 8004e30:	d134      	bne.n	8004e9c <HAL_RCC_GetSysClockFreq+0xf8>
=======
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	2b0c      	cmp	r3, #12
 8004e7c:	d134      	bne.n	8004ee8 <HAL_RCC_GetSysClockFreq+0xf8>
>>>>>>> Stashed changes
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
<<<<<<< Updated upstream
 8004e32:	4b1e      	ldr	r3, [pc, #120]	@ (8004eac <HAL_RCC_GetSysClockFreq+0x108>)
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	f003 0303 	and.w	r3, r3, #3
 8004e3a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d003      	beq.n	8004e4a <HAL_RCC_GetSysClockFreq+0xa6>
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	2b03      	cmp	r3, #3
 8004e46:	d003      	beq.n	8004e50 <HAL_RCC_GetSysClockFreq+0xac>
 8004e48:	e005      	b.n	8004e56 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004e4a:	4b1a      	ldr	r3, [pc, #104]	@ (8004eb4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e4c:	617b      	str	r3, [r7, #20]
      break;
 8004e4e:	e005      	b.n	8004e5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004e50:	4b19      	ldr	r3, [pc, #100]	@ (8004eb8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004e52:	617b      	str	r3, [r7, #20]
      break;
 8004e54:	e002      	b.n	8004e5c <HAL_RCC_GetSysClockFreq+0xb8>
=======
 8004e7e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	f003 0303 	and.w	r3, r3, #3
 8004e86:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d003      	beq.n	8004e96 <HAL_RCC_GetSysClockFreq+0xa6>
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	2b03      	cmp	r3, #3
 8004e92:	d003      	beq.n	8004e9c <HAL_RCC_GetSysClockFreq+0xac>
 8004e94:	e005      	b.n	8004ea2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004e96:	4b1a      	ldr	r3, [pc, #104]	@ (8004f00 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e98:	617b      	str	r3, [r7, #20]
      break;
 8004e9a:	e005      	b.n	8004ea8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004e9c:	4b19      	ldr	r3, [pc, #100]	@ (8004f04 <HAL_RCC_GetSysClockFreq+0x114>)
 8004e9e:	617b      	str	r3, [r7, #20]
      break;
 8004ea0:	e002      	b.n	8004ea8 <HAL_RCC_GetSysClockFreq+0xb8>
>>>>>>> Stashed changes

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
<<<<<<< Updated upstream
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	617b      	str	r3, [r7, #20]
      break;
 8004e5a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e5c:	4b13      	ldr	r3, [pc, #76]	@ (8004eac <HAL_RCC_GetSysClockFreq+0x108>)
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	091b      	lsrs	r3, r3, #4
 8004e62:	f003 030f 	and.w	r3, r3, #15
 8004e66:	3301      	adds	r3, #1
 8004e68:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004e6a:	4b10      	ldr	r3, [pc, #64]	@ (8004eac <HAL_RCC_GetSysClockFreq+0x108>)
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	0a1b      	lsrs	r3, r3, #8
 8004e70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e74:	697a      	ldr	r2, [r7, #20]
 8004e76:	fb03 f202 	mul.w	r2, r3, r2
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e80:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e82:	4b0a      	ldr	r3, [pc, #40]	@ (8004eac <HAL_RCC_GetSysClockFreq+0x108>)
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	0e5b      	lsrs	r3, r3, #25
 8004e88:	f003 0303 	and.w	r3, r3, #3
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	005b      	lsls	r3, r3, #1
 8004e90:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004e92:	697a      	ldr	r2, [r7, #20]
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e9a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004e9c:	69bb      	ldr	r3, [r7, #24]
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3724      	adds	r7, #36	@ 0x24
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	40021000 	.word	0x40021000
 8004eb0:	0800d3cc 	.word	0x0800d3cc
 8004eb4:	00f42400 	.word	0x00f42400
 8004eb8:	007a1200 	.word	0x007a1200

08004ebc <HAL_RCC_GetHCLKFreq>:
=======
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	617b      	str	r3, [r7, #20]
      break;
 8004ea6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ea8:	4b13      	ldr	r3, [pc, #76]	@ (8004ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	091b      	lsrs	r3, r3, #4
 8004eae:	f003 030f 	and.w	r3, r3, #15
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004eb6:	4b10      	ldr	r3, [pc, #64]	@ (8004ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	0a1b      	lsrs	r3, r3, #8
 8004ebc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ec0:	697a      	ldr	r2, [r7, #20]
 8004ec2:	fb03 f202 	mul.w	r2, r3, r2
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ecc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ece:	4b0a      	ldr	r3, [pc, #40]	@ (8004ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	0e5b      	lsrs	r3, r3, #25
 8004ed4:	f003 0303 	and.w	r3, r3, #3
 8004ed8:	3301      	adds	r3, #1
 8004eda:	005b      	lsls	r3, r3, #1
 8004edc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004ede:	697a      	ldr	r2, [r7, #20]
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004ee8:	69bb      	ldr	r3, [r7, #24]
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3724      	adds	r7, #36	@ 0x24
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	40021000 	.word	0x40021000
 8004efc:	0800d420 	.word	0x0800d420
 8004f00:	00f42400 	.word	0x00f42400
 8004f04:	007a1200 	.word	0x007a1200

08004f08 <HAL_RCC_GetHCLKFreq>:
>>>>>>> Stashed changes
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< Updated upstream
 8004ebc:	b480      	push	{r7}
 8004ebe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ec0:	4b03      	ldr	r3, [pc, #12]	@ (8004ed0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	2000000c 	.word	0x2000000c

08004ed4 <HAL_RCC_GetPCLK1Freq>:
=======
 8004f08:	b480      	push	{r7}
 8004f0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f0c:	4b03      	ldr	r3, [pc, #12]	@ (8004f1c <HAL_RCC_GetHCLKFreq+0x14>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	2000000c 	.word	0x2000000c

08004f20 <HAL_RCC_GetPCLK1Freq>:
>>>>>>> Stashed changes
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< Updated upstream
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004ed8:	f7ff fff0 	bl	8004ebc <HAL_RCC_GetHCLKFreq>
 8004edc:	4602      	mov	r2, r0
 8004ede:	4b06      	ldr	r3, [pc, #24]	@ (8004ef8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	0a1b      	lsrs	r3, r3, #8
 8004ee4:	f003 0307 	and.w	r3, r3, #7
 8004ee8:	4904      	ldr	r1, [pc, #16]	@ (8004efc <HAL_RCC_GetPCLK1Freq+0x28>)
 8004eea:	5ccb      	ldrb	r3, [r1, r3]
 8004eec:	f003 031f 	and.w	r3, r3, #31
 8004ef0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	40021000 	.word	0x40021000
 8004efc:	0800d3c4 	.word	0x0800d3c4

08004f00 <HAL_RCC_GetPCLK2Freq>:
=======
 8004f20:	b580      	push	{r7, lr}
 8004f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004f24:	f7ff fff0 	bl	8004f08 <HAL_RCC_GetHCLKFreq>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	4b06      	ldr	r3, [pc, #24]	@ (8004f44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	0a1b      	lsrs	r3, r3, #8
 8004f30:	f003 0307 	and.w	r3, r3, #7
 8004f34:	4904      	ldr	r1, [pc, #16]	@ (8004f48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f36:	5ccb      	ldrb	r3, [r1, r3]
 8004f38:	f003 031f 	and.w	r3, r3, #31
 8004f3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	40021000 	.word	0x40021000
 8004f48:	0800d418 	.word	0x0800d418

08004f4c <HAL_RCC_GetPCLK2Freq>:
>>>>>>> Stashed changes
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< Updated upstream
 8004f00:	b580      	push	{r7, lr}
 8004f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004f04:	f7ff ffda 	bl	8004ebc <HAL_RCC_GetHCLKFreq>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	4b06      	ldr	r3, [pc, #24]	@ (8004f24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	0adb      	lsrs	r3, r3, #11
 8004f10:	f003 0307 	and.w	r3, r3, #7
 8004f14:	4904      	ldr	r1, [pc, #16]	@ (8004f28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004f16:	5ccb      	ldrb	r3, [r1, r3]
 8004f18:	f003 031f 	and.w	r3, r3, #31
 8004f1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	40021000 	.word	0x40021000
 8004f28:	0800d3c4 	.word	0x0800d3c4

08004f2c <RCC_SetFlashLatencyFromMSIRange>:
=======
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004f50:	f7ff ffda 	bl	8004f08 <HAL_RCC_GetHCLKFreq>
 8004f54:	4602      	mov	r2, r0
 8004f56:	4b06      	ldr	r3, [pc, #24]	@ (8004f70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	0adb      	lsrs	r3, r3, #11
 8004f5c:	f003 0307 	and.w	r3, r3, #7
 8004f60:	4904      	ldr	r1, [pc, #16]	@ (8004f74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004f62:	5ccb      	ldrb	r3, [r1, r3]
 8004f64:	f003 031f 	and.w	r3, r3, #31
 8004f68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	40021000 	.word	0x40021000
 8004f74:	0800d418 	.word	0x0800d418

08004f78 <RCC_SetFlashLatencyFromMSIRange>:
>>>>>>> Stashed changes
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
<<<<<<< Updated upstream
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b086      	sub	sp, #24
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004f34:	2300      	movs	r3, #0
 8004f36:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004f38:	4b27      	ldr	r3, [pc, #156]	@ (8004fd8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004f3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d003      	beq.n	8004f4c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004f44:	f7ff f916 	bl	8004174 <HAL_PWREx_GetVoltageRange>
 8004f48:	6178      	str	r0, [r7, #20]
 8004f4a:	e014      	b.n	8004f76 <RCC_SetFlashLatencyFromMSIRange+0x4a>
=======
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b086      	sub	sp, #24
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004f80:	2300      	movs	r3, #0
 8004f82:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004f84:	4b27      	ldr	r3, [pc, #156]	@ (8005024 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d003      	beq.n	8004f98 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004f90:	f7ff f916 	bl	80041c0 <HAL_PWREx_GetVoltageRange>
 8004f94:	6178      	str	r0, [r7, #20]
 8004f96:	e014      	b.n	8004fc2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
>>>>>>> Stashed changes
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< Updated upstream
 8004f4c:	4b22      	ldr	r3, [pc, #136]	@ (8004fd8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004f4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f50:	4a21      	ldr	r2, [pc, #132]	@ (8004fd8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004f52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f56:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f58:	4b1f      	ldr	r3, [pc, #124]	@ (8004fd8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f60:	60fb      	str	r3, [r7, #12]
 8004f62:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004f64:	f7ff f906 	bl	8004174 <HAL_PWREx_GetVoltageRange>
 8004f68:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004f6a:	4b1b      	ldr	r3, [pc, #108]	@ (8004fd8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f6e:	4a1a      	ldr	r2, [pc, #104]	@ (8004fd8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004f70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f74:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f7c:	d10b      	bne.n	8004f96 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2b80      	cmp	r3, #128	@ 0x80
 8004f82:	d913      	bls.n	8004fac <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2ba0      	cmp	r3, #160	@ 0xa0
 8004f88:	d902      	bls.n	8004f90 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f8a:	2302      	movs	r3, #2
 8004f8c:	613b      	str	r3, [r7, #16]
 8004f8e:	e00d      	b.n	8004fac <RCC_SetFlashLatencyFromMSIRange+0x80>
=======
 8004f98:	4b22      	ldr	r3, [pc, #136]	@ (8005024 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f9c:	4a21      	ldr	r2, [pc, #132]	@ (8005024 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004f9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fa2:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fa4:	4b1f      	ldr	r3, [pc, #124]	@ (8005024 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004fa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fa8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fac:	60fb      	str	r3, [r7, #12]
 8004fae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004fb0:	f7ff f906 	bl	80041c0 <HAL_PWREx_GetVoltageRange>
 8004fb4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004fb6:	4b1b      	ldr	r3, [pc, #108]	@ (8005024 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fba:	4a1a      	ldr	r2, [pc, #104]	@ (8005024 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004fbc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fc0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fc8:	d10b      	bne.n	8004fe2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2b80      	cmp	r3, #128	@ 0x80
 8004fce:	d913      	bls.n	8004ff8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2ba0      	cmp	r3, #160	@ 0xa0
 8004fd4:	d902      	bls.n	8004fdc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004fd6:	2302      	movs	r3, #2
 8004fd8:	613b      	str	r3, [r7, #16]
 8004fda:	e00d      	b.n	8004ff8 <RCC_SetFlashLatencyFromMSIRange+0x80>
>>>>>>> Stashed changes
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
<<<<<<< Updated upstream
 8004f90:	2301      	movs	r3, #1
 8004f92:	613b      	str	r3, [r7, #16]
 8004f94:	e00a      	b.n	8004fac <RCC_SetFlashLatencyFromMSIRange+0x80>
=======
 8004fdc:	2301      	movs	r3, #1
 8004fde:	613b      	str	r3, [r7, #16]
 8004fe0:	e00a      	b.n	8004ff8 <RCC_SetFlashLatencyFromMSIRange+0x80>
>>>>>>> Stashed changes
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
<<<<<<< Updated upstream
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f9a:	d902      	bls.n	8004fa2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004f9c:	2302      	movs	r3, #2
 8004f9e:	613b      	str	r3, [r7, #16]
 8004fa0:	e004      	b.n	8004fac <RCC_SetFlashLatencyFromMSIRange+0x80>
=======
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2b7f      	cmp	r3, #127	@ 0x7f
 8004fe6:	d902      	bls.n	8004fee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004fe8:	2302      	movs	r3, #2
 8004fea:	613b      	str	r3, [r7, #16]
 8004fec:	e004      	b.n	8004ff8 <RCC_SetFlashLatencyFromMSIRange+0x80>
>>>>>>> Stashed changes
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
<<<<<<< Updated upstream
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2b70      	cmp	r3, #112	@ 0x70
 8004fa6:	d101      	bne.n	8004fac <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004fa8:	2301      	movs	r3, #1
 8004faa:	613b      	str	r3, [r7, #16]
=======
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2b70      	cmp	r3, #112	@ 0x70
 8004ff2:	d101      	bne.n	8004ff8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
<<<<<<< Updated upstream
 8004fac:	4b0b      	ldr	r3, [pc, #44]	@ (8004fdc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f023 020f 	bic.w	r2, r3, #15
 8004fb4:	4909      	ldr	r1, [pc, #36]	@ (8004fdc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	600b      	str	r3, [r1, #0]
=======
 8004ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8005028 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f023 020f 	bic.w	r2, r3, #15
 8005000:	4909      	ldr	r1, [pc, #36]	@ (8005028 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	4313      	orrs	r3, r2
 8005006:	600b      	str	r3, [r1, #0]
>>>>>>> Stashed changes

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
<<<<<<< Updated upstream
 8004fbc:	4b07      	ldr	r3, [pc, #28]	@ (8004fdc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 030f 	and.w	r3, r3, #15
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d001      	beq.n	8004fce <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e000      	b.n	8004fd0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004fce:	2300      	movs	r3, #0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3718      	adds	r7, #24
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	40021000 	.word	0x40021000
 8004fdc:	40022000 	.word	0x40022000

08004fe0 <RCC_GetSysClockFreqFromPLLSource>:
=======
 8005008:	4b07      	ldr	r3, [pc, #28]	@ (8005028 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 030f 	and.w	r3, r3, #15
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	429a      	cmp	r2, r3
 8005014:	d001      	beq.n	800501a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e000      	b.n	800501c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	3718      	adds	r7, #24
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}
 8005024:	40021000 	.word	0x40021000
 8005028:	40022000 	.word	0x40022000

0800502c <RCC_GetSysClockFreqFromPLLSource>:
>>>>>>> Stashed changes
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
<<<<<<< Updated upstream
 8004fe0:	b480      	push	{r7}
 8004fe2:	b087      	sub	sp, #28
 8004fe4:	af00      	add	r7, sp, #0
=======
 800502c:	b480      	push	{r7}
 800502e:	b087      	sub	sp, #28
 8005030:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
<<<<<<< Updated upstream
 8004fe6:	4b2d      	ldr	r3, [pc, #180]	@ (800509c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	f003 0303 	and.w	r3, r3, #3
 8004fee:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2b03      	cmp	r3, #3
 8004ff4:	d00b      	beq.n	800500e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2b03      	cmp	r3, #3
 8004ffa:	d825      	bhi.n	8005048 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d008      	beq.n	8005014 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2b02      	cmp	r3, #2
 8005006:	d11f      	bne.n	8005048 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005008:	4b25      	ldr	r3, [pc, #148]	@ (80050a0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800500a:	613b      	str	r3, [r7, #16]
    break;
 800500c:	e01f      	b.n	800504e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800500e:	4b25      	ldr	r3, [pc, #148]	@ (80050a4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005010:	613b      	str	r3, [r7, #16]
    break;
 8005012:	e01c      	b.n	800504e <RCC_GetSysClockFreqFromPLLSource+0x6e>
=======
 8005032:	4b2d      	ldr	r3, [pc, #180]	@ (80050e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	f003 0303 	and.w	r3, r3, #3
 800503a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2b03      	cmp	r3, #3
 8005040:	d00b      	beq.n	800505a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2b03      	cmp	r3, #3
 8005046:	d825      	bhi.n	8005094 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2b01      	cmp	r3, #1
 800504c:	d008      	beq.n	8005060 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2b02      	cmp	r3, #2
 8005052:	d11f      	bne.n	8005094 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005054:	4b25      	ldr	r3, [pc, #148]	@ (80050ec <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005056:	613b      	str	r3, [r7, #16]
    break;
 8005058:	e01f      	b.n	800509a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800505a:	4b25      	ldr	r3, [pc, #148]	@ (80050f0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800505c:	613b      	str	r3, [r7, #16]
    break;
 800505e:	e01c      	b.n	800509a <RCC_GetSysClockFreqFromPLLSource+0x6e>
>>>>>>> Stashed changes

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
<<<<<<< Updated upstream
 8005014:	4b21      	ldr	r3, [pc, #132]	@ (800509c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0308 	and.w	r3, r3, #8
 800501c:	2b00      	cmp	r3, #0
 800501e:	d107      	bne.n	8005030 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005020:	4b1e      	ldr	r3, [pc, #120]	@ (800509c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005022:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005026:	0a1b      	lsrs	r3, r3, #8
 8005028:	f003 030f 	and.w	r3, r3, #15
 800502c:	617b      	str	r3, [r7, #20]
 800502e:	e005      	b.n	800503c <RCC_GetSysClockFreqFromPLLSource+0x5c>
=======
 8005060:	4b21      	ldr	r3, [pc, #132]	@ (80050e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0308 	and.w	r3, r3, #8
 8005068:	2b00      	cmp	r3, #0
 800506a:	d107      	bne.n	800507c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800506c:	4b1e      	ldr	r3, [pc, #120]	@ (80050e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800506e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005072:	0a1b      	lsrs	r3, r3, #8
 8005074:	f003 030f 	and.w	r3, r3, #15
 8005078:	617b      	str	r3, [r7, #20]
 800507a:	e005      	b.n	8005088 <RCC_GetSysClockFreqFromPLLSource+0x5c>
>>>>>>> Stashed changes
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
<<<<<<< Updated upstream
 8005030:	4b1a      	ldr	r3, [pc, #104]	@ (800509c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	091b      	lsrs	r3, r3, #4
 8005036:	f003 030f 	and.w	r3, r3, #15
 800503a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800503c:	4a1a      	ldr	r2, [pc, #104]	@ (80050a8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005044:	613b      	str	r3, [r7, #16]
    break;
 8005046:	e002      	b.n	800504e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005048:	2300      	movs	r3, #0
 800504a:	613b      	str	r3, [r7, #16]
    break;
 800504c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800504e:	4b13      	ldr	r3, [pc, #76]	@ (800509c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	091b      	lsrs	r3, r3, #4
 8005054:	f003 030f 	and.w	r3, r3, #15
 8005058:	3301      	adds	r3, #1
 800505a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800505c:	4b0f      	ldr	r3, [pc, #60]	@ (800509c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	0a1b      	lsrs	r3, r3, #8
 8005062:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	fb03 f202 	mul.w	r2, r3, r2
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005072:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005074:	4b09      	ldr	r3, [pc, #36]	@ (800509c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	0e5b      	lsrs	r3, r3, #25
 800507a:	f003 0303 	and.w	r3, r3, #3
 800507e:	3301      	adds	r3, #1
 8005080:	005b      	lsls	r3, r3, #1
 8005082:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005084:	693a      	ldr	r2, [r7, #16]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	fbb2 f3f3 	udiv	r3, r2, r3
 800508c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800508e:	683b      	ldr	r3, [r7, #0]
}
 8005090:	4618      	mov	r0, r3
 8005092:	371c      	adds	r7, #28
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr
 800509c:	40021000 	.word	0x40021000
 80050a0:	00f42400 	.word	0x00f42400
 80050a4:	007a1200 	.word	0x007a1200
 80050a8:	0800d3cc 	.word	0x0800d3cc

080050ac <HAL_RCCEx_PeriphCLKConfig>:
=======
 800507c:	4b1a      	ldr	r3, [pc, #104]	@ (80050e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	091b      	lsrs	r3, r3, #4
 8005082:	f003 030f 	and.w	r3, r3, #15
 8005086:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005088:	4a1a      	ldr	r2, [pc, #104]	@ (80050f4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005090:	613b      	str	r3, [r7, #16]
    break;
 8005092:	e002      	b.n	800509a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005094:	2300      	movs	r3, #0
 8005096:	613b      	str	r3, [r7, #16]
    break;
 8005098:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800509a:	4b13      	ldr	r3, [pc, #76]	@ (80050e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	091b      	lsrs	r3, r3, #4
 80050a0:	f003 030f 	and.w	r3, r3, #15
 80050a4:	3301      	adds	r3, #1
 80050a6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80050a8:	4b0f      	ldr	r3, [pc, #60]	@ (80050e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	0a1b      	lsrs	r3, r3, #8
 80050ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050b2:	693a      	ldr	r2, [r7, #16]
 80050b4:	fb03 f202 	mul.w	r2, r3, r2
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80050be:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80050c0:	4b09      	ldr	r3, [pc, #36]	@ (80050e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	0e5b      	lsrs	r3, r3, #25
 80050c6:	f003 0303 	and.w	r3, r3, #3
 80050ca:	3301      	adds	r3, #1
 80050cc:	005b      	lsls	r3, r3, #1
 80050ce:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80050d0:	693a      	ldr	r2, [r7, #16]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80050da:	683b      	ldr	r3, [r7, #0]
}
 80050dc:	4618      	mov	r0, r3
 80050de:	371c      	adds	r7, #28
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr
 80050e8:	40021000 	.word	0x40021000
 80050ec:	00f42400 	.word	0x00f42400
 80050f0:	007a1200 	.word	0x007a1200
 80050f4:	0800d420 	.word	0x0800d420

080050f8 <HAL_RCCEx_PeriphCLKConfig>:
>>>>>>> Stashed changes
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
<<<<<<< Updated upstream
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b086      	sub	sp, #24
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80050b4:	2300      	movs	r3, #0
 80050b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80050b8:	2300      	movs	r3, #0
 80050ba:	74bb      	strb	r3, [r7, #18]
=======
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b086      	sub	sp, #24
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005100:	2300      	movs	r3, #0
 8005102:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005104:	2300      	movs	r3, #0
 8005106:	74bb      	strb	r3, [r7, #18]
>>>>>>> Stashed changes
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
<<<<<<< Updated upstream
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d040      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x9e>
=======
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005110:	2b00      	cmp	r3, #0
 8005112:	d040      	beq.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x9e>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
<<<<<<< Updated upstream
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050cc:	2b80      	cmp	r3, #128	@ 0x80
 80050ce:	d02a      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80050d0:	2b80      	cmp	r3, #128	@ 0x80
 80050d2:	d825      	bhi.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80050d4:	2b60      	cmp	r3, #96	@ 0x60
 80050d6:	d026      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80050d8:	2b60      	cmp	r3, #96	@ 0x60
 80050da:	d821      	bhi.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80050dc:	2b40      	cmp	r3, #64	@ 0x40
 80050de:	d006      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x42>
 80050e0:	2b40      	cmp	r3, #64	@ 0x40
 80050e2:	d81d      	bhi.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d009      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x50>
 80050e8:	2b20      	cmp	r3, #32
 80050ea:	d010      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x62>
 80050ec:	e018      	b.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x74>
=======
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005118:	2b80      	cmp	r3, #128	@ 0x80
 800511a:	d02a      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800511c:	2b80      	cmp	r3, #128	@ 0x80
 800511e:	d825      	bhi.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005120:	2b60      	cmp	r3, #96	@ 0x60
 8005122:	d026      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005124:	2b60      	cmp	r3, #96	@ 0x60
 8005126:	d821      	bhi.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005128:	2b40      	cmp	r3, #64	@ 0x40
 800512a:	d006      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800512c:	2b40      	cmp	r3, #64	@ 0x40
 800512e:	d81d      	bhi.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005130:	2b00      	cmp	r3, #0
 8005132:	d009      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005134:	2b20      	cmp	r3, #32
 8005136:	d010      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005138:	e018      	b.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x74>
>>>>>>> Stashed changes
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
<<<<<<< Updated upstream
 80050ee:	4b89      	ldr	r3, [pc, #548]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	4a88      	ldr	r2, [pc, #544]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050f8:	60d3      	str	r3, [r2, #12]
=======
 800513a:	4b89      	ldr	r3, [pc, #548]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	4a88      	ldr	r2, [pc, #544]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005140:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005144:	60d3      	str	r3, [r2, #12]
>>>>>>> Stashed changes
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
<<<<<<< Updated upstream
 80050fa:	e015      	b.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x7c>
=======
 8005146:	e015      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x7c>
>>>>>>> Stashed changes

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
<<<<<<< Updated upstream
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	3304      	adds	r3, #4
 8005100:	2100      	movs	r1, #0
 8005102:	4618      	mov	r0, r3
 8005104:	f000 fb02 	bl	800570c <RCCEx_PLLSAI1_Config>
 8005108:	4603      	mov	r3, r0
 800510a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800510c:	e00c      	b.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x7c>
=======
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	3304      	adds	r3, #4
 800514c:	2100      	movs	r1, #0
 800514e:	4618      	mov	r0, r3
 8005150:	f000 fb02 	bl	8005758 <RCCEx_PLLSAI1_Config>
 8005154:	4603      	mov	r3, r0
 8005156:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005158:	e00c      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x7c>
>>>>>>> Stashed changes

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
<<<<<<< Updated upstream
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	3320      	adds	r3, #32
 8005112:	2100      	movs	r1, #0
 8005114:	4618      	mov	r0, r3
 8005116:	f000 fbed 	bl	80058f4 <RCCEx_PLLSAI2_Config>
 800511a:	4603      	mov	r3, r0
 800511c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800511e:	e003      	b.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x7c>
=======
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	3320      	adds	r3, #32
 800515e:	2100      	movs	r1, #0
 8005160:	4618      	mov	r0, r3
 8005162:	f000 fbed 	bl	8005940 <RCCEx_PLLSAI2_Config>
 8005166:	4603      	mov	r3, r0
 8005168:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800516a:	e003      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x7c>
>>>>>>> Stashed changes
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
<<<<<<< Updated upstream
 8005120:	2301      	movs	r3, #1
 8005122:	74fb      	strb	r3, [r7, #19]
      break;
 8005124:	e000      	b.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005126:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005128:	7cfb      	ldrb	r3, [r7, #19]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d10b      	bne.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800512e:	4b79      	ldr	r3, [pc, #484]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005130:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005134:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800513c:	4975      	ldr	r1, [pc, #468]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800513e:	4313      	orrs	r3, r2
 8005140:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005144:	e001      	b.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x9e>
=======
 800516c:	2301      	movs	r3, #1
 800516e:	74fb      	strb	r3, [r7, #19]
      break;
 8005170:	e000      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005172:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005174:	7cfb      	ldrb	r3, [r7, #19]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d10b      	bne.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800517a:	4b79      	ldr	r3, [pc, #484]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800517c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005180:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005188:	4975      	ldr	r1, [pc, #468]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800518a:	4313      	orrs	r3, r2
 800518c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005190:	e001      	b.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x9e>
>>>>>>> Stashed changes
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< Updated upstream
 8005146:	7cfb      	ldrb	r3, [r7, #19]
 8005148:	74bb      	strb	r3, [r7, #18]
=======
 8005192:	7cfb      	ldrb	r3, [r7, #19]
 8005194:	74bb      	strb	r3, [r7, #18]
>>>>>>> Stashed changes
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
<<<<<<< Updated upstream
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d047      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
=======
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d047      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x13a>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
<<<<<<< Updated upstream
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800515a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800515e:	d030      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005160:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005164:	d82a      	bhi.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005166:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800516a:	d02a      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800516c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005170:	d824      	bhi.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005172:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005176:	d008      	beq.n	800518a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005178:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800517c:	d81e      	bhi.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x110>
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00a      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005182:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005186:	d010      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005188:	e018      	b.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x110>
=======
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051aa:	d030      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80051ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051b0:	d82a      	bhi.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80051b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051b6:	d02a      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80051b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051bc:	d824      	bhi.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80051be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051c2:	d008      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80051c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051c8:	d81e      	bhi.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00a      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80051ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051d2:	d010      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80051d4:	e018      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x110>
>>>>>>> Stashed changes
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
<<<<<<< Updated upstream
 800518a:	4b62      	ldr	r3, [pc, #392]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	4a61      	ldr	r2, [pc, #388]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005190:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005194:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005196:	e015      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
=======
 80051d6:	4b62      	ldr	r3, [pc, #392]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	4a61      	ldr	r2, [pc, #388]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051e0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80051e2:	e015      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x118>
>>>>>>> Stashed changes

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
<<<<<<< Updated upstream
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	3304      	adds	r3, #4
 800519c:	2100      	movs	r1, #0
 800519e:	4618      	mov	r0, r3
 80051a0:	f000 fab4 	bl	800570c <RCCEx_PLLSAI1_Config>
 80051a4:	4603      	mov	r3, r0
 80051a6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80051a8:	e00c      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
=======
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	3304      	adds	r3, #4
 80051e8:	2100      	movs	r1, #0
 80051ea:	4618      	mov	r0, r3
 80051ec:	f000 fab4 	bl	8005758 <RCCEx_PLLSAI1_Config>
 80051f0:	4603      	mov	r3, r0
 80051f2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80051f4:	e00c      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x118>
>>>>>>> Stashed changes

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
<<<<<<< Updated upstream
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	3320      	adds	r3, #32
 80051ae:	2100      	movs	r1, #0
 80051b0:	4618      	mov	r0, r3
 80051b2:	f000 fb9f 	bl	80058f4 <RCCEx_PLLSAI2_Config>
 80051b6:	4603      	mov	r3, r0
 80051b8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80051ba:	e003      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
=======
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	3320      	adds	r3, #32
 80051fa:	2100      	movs	r1, #0
 80051fc:	4618      	mov	r0, r3
 80051fe:	f000 fb9f 	bl	8005940 <RCCEx_PLLSAI2_Config>
 8005202:	4603      	mov	r3, r0
 8005204:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005206:	e003      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x118>
>>>>>>> Stashed changes
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
<<<<<<< Updated upstream
 80051bc:	2301      	movs	r3, #1
 80051be:	74fb      	strb	r3, [r7, #19]
      break;
 80051c0:	e000      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80051c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051c4:	7cfb      	ldrb	r3, [r7, #19]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d10b      	bne.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80051ca:	4b52      	ldr	r3, [pc, #328]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80051d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051d8:	494e      	ldr	r1, [pc, #312]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80051e0:	e001      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
=======
 8005208:	2301      	movs	r3, #1
 800520a:	74fb      	strb	r3, [r7, #19]
      break;
 800520c:	e000      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800520e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005210:	7cfb      	ldrb	r3, [r7, #19]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10b      	bne.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005216:	4b52      	ldr	r3, [pc, #328]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005218:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800521c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005224:	494e      	ldr	r1, [pc, #312]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005226:	4313      	orrs	r3, r2
 8005228:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 800522c:	e001      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x13a>
>>>>>>> Stashed changes
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< Updated upstream
 80051e2:	7cfb      	ldrb	r3, [r7, #19]
 80051e4:	74bb      	strb	r3, [r7, #18]
=======
 800522e:	7cfb      	ldrb	r3, [r7, #19]
 8005230:	74bb      	strb	r3, [r7, #18]
>>>>>>> Stashed changes
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
<<<<<<< Updated upstream
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	f000 809f 	beq.w	8005332 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051f4:	2300      	movs	r3, #0
 80051f6:	747b      	strb	r3, [r7, #17]
=======
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800523a:	2b00      	cmp	r3, #0
 800523c:	f000 809f 	beq.w	800537e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005240:	2300      	movs	r3, #0
 8005242:	747b      	strb	r3, [r7, #17]
>>>>>>> Stashed changes

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
<<<<<<< Updated upstream
 80051f8:	4b46      	ldr	r3, [pc, #280]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d101      	bne.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005204:	2301      	movs	r3, #1
 8005206:	e000      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005208:	2300      	movs	r3, #0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00d      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800520e:	4b41      	ldr	r3, [pc, #260]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005212:	4a40      	ldr	r2, [pc, #256]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005214:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005218:	6593      	str	r3, [r2, #88]	@ 0x58
 800521a:	4b3e      	ldr	r3, [pc, #248]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800521c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800521e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005222:	60bb      	str	r3, [r7, #8]
 8005224:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005226:	2301      	movs	r3, #1
 8005228:	747b      	strb	r3, [r7, #17]
=======
 8005244:	4b46      	ldr	r3, [pc, #280]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005246:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005248:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d101      	bne.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005250:	2301      	movs	r3, #1
 8005252:	e000      	b.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005254:	2300      	movs	r3, #0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00d      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800525a:	4b41      	ldr	r3, [pc, #260]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800525c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800525e:	4a40      	ldr	r2, [pc, #256]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005260:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005264:	6593      	str	r3, [r2, #88]	@ 0x58
 8005266:	4b3e      	ldr	r3, [pc, #248]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800526a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800526e:	60bb      	str	r3, [r7, #8]
 8005270:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005272:	2301      	movs	r3, #1
 8005274:	747b      	strb	r3, [r7, #17]
>>>>>>> Stashed changes
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
<<<<<<< Updated upstream
 800522a:	4b3b      	ldr	r3, [pc, #236]	@ (8005318 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a3a      	ldr	r2, [pc, #232]	@ (8005318 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005230:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005234:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005236:	f7fd fa5f 	bl	80026f8 <HAL_GetTick>
 800523a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800523c:	e009      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800523e:	f7fd fa5b 	bl	80026f8 <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	2b02      	cmp	r3, #2
 800524a:	d902      	bls.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	74fb      	strb	r3, [r7, #19]
        break;
 8005250:	e005      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005252:	4b31      	ldr	r3, [pc, #196]	@ (8005318 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800525a:	2b00      	cmp	r3, #0
 800525c:	d0ef      	beq.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x192>
=======
 8005276:	4b3b      	ldr	r3, [pc, #236]	@ (8005364 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a3a      	ldr	r2, [pc, #232]	@ (8005364 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800527c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005280:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005282:	f7fd fa5f 	bl	8002744 <HAL_GetTick>
 8005286:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005288:	e009      	b.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800528a:	f7fd fa5b 	bl	8002744 <HAL_GetTick>
 800528e:	4602      	mov	r2, r0
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	2b02      	cmp	r3, #2
 8005296:	d902      	bls.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	74fb      	strb	r3, [r7, #19]
        break;
 800529c:	e005      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800529e:	4b31      	ldr	r3, [pc, #196]	@ (8005364 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d0ef      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x192>
>>>>>>> Stashed changes
      }
    }

    if(ret == HAL_OK)
<<<<<<< Updated upstream
 800525e:	7cfb      	ldrb	r3, [r7, #19]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d15b      	bne.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005264:	4b2b      	ldr	r3, [pc, #172]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005266:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800526a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800526e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d01f      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800527c:	697a      	ldr	r2, [r7, #20]
 800527e:	429a      	cmp	r2, r3
 8005280:	d019      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005282:	4b24      	ldr	r3, [pc, #144]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005284:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005288:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800528c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800528e:	4b21      	ldr	r3, [pc, #132]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005290:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005294:	4a1f      	ldr	r2, [pc, #124]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005296:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800529a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800529e:	4b1d      	ldr	r3, [pc, #116]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052a4:	4a1b      	ldr	r2, [pc, #108]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80052ae:	4a19      	ldr	r2, [pc, #100]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
=======
 80052aa:	7cfb      	ldrb	r3, [r7, #19]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d15b      	bne.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80052b0:	4b2b      	ldr	r3, [pc, #172]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052ba:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d01f      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d019      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80052ce:	4b24      	ldr	r3, [pc, #144]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052d8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80052da:	4b21      	ldr	r3, [pc, #132]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052e0:	4a1f      	ldr	r2, [pc, #124]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052ea:	4b1d      	ldr	r3, [pc, #116]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052f0:	4a1b      	ldr	r2, [pc, #108]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80052fa:	4a19      	ldr	r2, [pc, #100]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
>>>>>>> Stashed changes
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
<<<<<<< Updated upstream
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	f003 0301 	and.w	r3, r3, #1
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d016      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052c0:	f7fd fa1a 	bl	80026f8 <HAL_GetTick>
 80052c4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052c6:	e00b      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052c8:	f7fd fa16 	bl	80026f8 <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d902      	bls.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	74fb      	strb	r3, [r7, #19]
            break;
 80052de:	e006      	b.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052e0:	4b0c      	ldr	r3, [pc, #48]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052e6:	f003 0302 	and.w	r3, r3, #2
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d0ec      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
=======
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	f003 0301 	and.w	r3, r3, #1
 8005308:	2b00      	cmp	r3, #0
 800530a:	d016      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800530c:	f7fd fa1a 	bl	8002744 <HAL_GetTick>
 8005310:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005312:	e00b      	b.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005314:	f7fd fa16 	bl	8002744 <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005322:	4293      	cmp	r3, r2
 8005324:	d902      	bls.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	74fb      	strb	r3, [r7, #19]
            break;
 800532a:	e006      	b.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800532c:	4b0c      	ldr	r3, [pc, #48]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800532e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005332:	f003 0302 	and.w	r3, r3, #2
 8005336:	2b00      	cmp	r3, #0
 8005338:	d0ec      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x21c>
>>>>>>> Stashed changes
          }
        }
      }

      if(ret == HAL_OK)
<<<<<<< Updated upstream
 80052ee:	7cfb      	ldrb	r3, [r7, #19]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d10c      	bne.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052f4:	4b07      	ldr	r3, [pc, #28]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052fa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005304:	4903      	ldr	r1, [pc, #12]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005306:	4313      	orrs	r3, r2
 8005308:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800530c:	e008      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x274>
=======
 800533a:	7cfb      	ldrb	r3, [r7, #19]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d10c      	bne.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005340:	4b07      	ldr	r3, [pc, #28]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005342:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005346:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005350:	4903      	ldr	r1, [pc, #12]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005352:	4313      	orrs	r3, r2
 8005354:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005358:	e008      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x274>
>>>>>>> Stashed changes
      }
      else
      {
        /* set overall return value */
        status = ret;
<<<<<<< Updated upstream
 800530e:	7cfb      	ldrb	r3, [r7, #19]
 8005310:	74bb      	strb	r3, [r7, #18]
 8005312:	e005      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005314:	40021000 	.word	0x40021000
 8005318:	40007000 	.word	0x40007000
=======
 800535a:	7cfb      	ldrb	r3, [r7, #19]
 800535c:	74bb      	strb	r3, [r7, #18]
 800535e:	e005      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005360:	40021000 	.word	0x40021000
 8005364:	40007000 	.word	0x40007000
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< Updated upstream
 800531c:	7cfb      	ldrb	r3, [r7, #19]
 800531e:	74bb      	strb	r3, [r7, #18]
=======
 8005368:	7cfb      	ldrb	r3, [r7, #19]
 800536a:	74bb      	strb	r3, [r7, #18]
>>>>>>> Stashed changes
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
<<<<<<< Updated upstream
 8005320:	7c7b      	ldrb	r3, [r7, #17]
 8005322:	2b01      	cmp	r3, #1
 8005324:	d105      	bne.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005326:	4ba0      	ldr	r3, [pc, #640]	@ (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800532a:	4a9f      	ldr	r2, [pc, #636]	@ (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800532c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005330:	6593      	str	r3, [r2, #88]	@ 0x58
=======
 800536c:	7c7b      	ldrb	r3, [r7, #17]
 800536e:	2b01      	cmp	r3, #1
 8005370:	d105      	bne.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005372:	4ba0      	ldr	r3, [pc, #640]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005376:	4a9f      	ldr	r2, [pc, #636]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005378:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800537c:	6593      	str	r3, [r2, #88]	@ 0x58
>>>>>>> Stashed changes
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
<<<<<<< Updated upstream
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00a      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
=======
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00a      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
<<<<<<< Updated upstream
 800533e:	4b9a      	ldr	r3, [pc, #616]	@ (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005340:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005344:	f023 0203 	bic.w	r2, r3, #3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800534c:	4996      	ldr	r1, [pc, #600]	@ (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800534e:	4313      	orrs	r3, r2
 8005350:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 800538a:	4b9a      	ldr	r3, [pc, #616]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800538c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005390:	f023 0203 	bic.w	r2, r3, #3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005398:	4996      	ldr	r1, [pc, #600]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800539a:	4313      	orrs	r3, r2
 800539c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
<<<<<<< Updated upstream
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0302 	and.w	r3, r3, #2
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00a      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
=======
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0302 	and.w	r3, r3, #2
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00a      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
<<<<<<< Updated upstream
 8005360:	4b91      	ldr	r3, [pc, #580]	@ (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005362:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005366:	f023 020c 	bic.w	r2, r3, #12
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800536e:	498e      	ldr	r1, [pc, #568]	@ (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005370:	4313      	orrs	r3, r2
 8005372:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 80053ac:	4b91      	ldr	r3, [pc, #580]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053b2:	f023 020c 	bic.w	r2, r3, #12
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ba:	498e      	ldr	r1, [pc, #568]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053bc:	4313      	orrs	r3, r2
 80053be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
<<<<<<< Updated upstream
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0304 	and.w	r3, r3, #4
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00a      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
=======
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0304 	and.w	r3, r3, #4
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00a      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
<<<<<<< Updated upstream
 8005382:	4b89      	ldr	r3, [pc, #548]	@ (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005384:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005388:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005390:	4985      	ldr	r1, [pc, #532]	@ (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005392:	4313      	orrs	r3, r2
 8005394:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 80053ce:	4b89      	ldr	r3, [pc, #548]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053d4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053dc:	4985      	ldr	r1, [pc, #532]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
<<<<<<< Updated upstream
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0308 	and.w	r3, r3, #8
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00a      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x30e>
=======
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0308 	and.w	r3, r3, #8
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00a      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x30e>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
<<<<<<< Updated upstream
 80053a4:	4b80      	ldr	r3, [pc, #512]	@ (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053aa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053b2:	497d      	ldr	r1, [pc, #500]	@ (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 80053f0:	4b80      	ldr	r3, [pc, #512]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053f6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053fe:	497d      	ldr	r1, [pc, #500]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005400:	4313      	orrs	r3, r2
 8005402:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
<<<<<<< Updated upstream
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0310 	and.w	r3, r3, #16
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00a      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x330>
=======
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0310 	and.w	r3, r3, #16
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00a      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x330>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
<<<<<<< Updated upstream
 80053c6:	4b78      	ldr	r3, [pc, #480]	@ (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053d4:	4974      	ldr	r1, [pc, #464]	@ (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053d6:	4313      	orrs	r3, r2
 80053d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 8005412:	4b78      	ldr	r3, [pc, #480]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005414:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005418:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005420:	4974      	ldr	r1, [pc, #464]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005422:	4313      	orrs	r3, r2
 8005424:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
<<<<<<< Updated upstream
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0320 	and.w	r3, r3, #32
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00a      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x352>
=======
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0320 	and.w	r3, r3, #32
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00a      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x352>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
<<<<<<< Updated upstream
 80053e8:	4b6f      	ldr	r3, [pc, #444]	@ (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053ee:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053f6:	496c      	ldr	r1, [pc, #432]	@ (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053f8:	4313      	orrs	r3, r2
 80053fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 8005434:	4b6f      	ldr	r3, [pc, #444]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800543a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005442:	496c      	ldr	r1, [pc, #432]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005444:	4313      	orrs	r3, r2
 8005446:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
<<<<<<< Updated upstream
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00a      	beq.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800540a:	4b67      	ldr	r3, [pc, #412]	@ (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800540c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005410:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005418:	4963      	ldr	r1, [pc, #396]	@ (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800541a:	4313      	orrs	r3, r2
 800541c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00a      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005456:	4b67      	ldr	r3, [pc, #412]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005458:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800545c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005464:	4963      	ldr	r1, [pc, #396]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005466:	4313      	orrs	r3, r2
 8005468:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
<<<<<<< Updated upstream
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005428:	2b00      	cmp	r3, #0
 800542a:	d00a      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800542c:	4b5e      	ldr	r3, [pc, #376]	@ (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800542e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005432:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800543a:	495b      	ldr	r1, [pc, #364]	@ (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800543c:	4313      	orrs	r3, r2
 800543e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00a      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005478:	4b5e      	ldr	r3, [pc, #376]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800547a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800547e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005486:	495b      	ldr	r1, [pc, #364]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005488:	4313      	orrs	r3, r2
 800548a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
<<<<<<< Updated upstream
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00a      	beq.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
=======
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00a      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
<<<<<<< Updated upstream
 800544e:	4b56      	ldr	r3, [pc, #344]	@ (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005450:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005454:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800545c:	4952      	ldr	r1, [pc, #328]	@ (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800545e:	4313      	orrs	r3, r2
 8005460:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 800549a:	4b56      	ldr	r3, [pc, #344]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800549c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054a0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054a8:	4952      	ldr	r1, [pc, #328]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054aa:	4313      	orrs	r3, r2
 80054ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
<<<<<<< Updated upstream
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00a      	beq.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x3da>
=======
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00a      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
<<<<<<< Updated upstream
 8005470:	4b4d      	ldr	r3, [pc, #308]	@ (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005476:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800547e:	494a      	ldr	r1, [pc, #296]	@ (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005480:	4313      	orrs	r3, r2
 8005482:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 80054bc:	4b4d      	ldr	r3, [pc, #308]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054c2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054ca:	494a      	ldr	r1, [pc, #296]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
<<<<<<< Updated upstream
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00a      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
=======
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00a      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
<<<<<<< Updated upstream
 8005492:	4b45      	ldr	r3, [pc, #276]	@ (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005494:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005498:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054a0:	4941      	ldr	r1, [pc, #260]	@ (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054a2:	4313      	orrs	r3, r2
 80054a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 80054de:	4b45      	ldr	r3, [pc, #276]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054ec:	4941      	ldr	r1, [pc, #260]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
<<<<<<< Updated upstream
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d00a      	beq.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x41e>
=======
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d00a      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x41e>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
<<<<<<< Updated upstream
 80054b4:	4b3c      	ldr	r3, [pc, #240]	@ (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054ba:	f023 0203 	bic.w	r2, r3, #3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054c2:	4939      	ldr	r1, [pc, #228]	@ (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054c4:	4313      	orrs	r3, r2
 80054c6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
=======
 8005500:	4b3c      	ldr	r3, [pc, #240]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005502:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005506:	f023 0203 	bic.w	r2, r3, #3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800550e:	4939      	ldr	r1, [pc, #228]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005510:	4313      	orrs	r3, r2
 8005512:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
>>>>>>> Stashed changes
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
<<<<<<< Updated upstream
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d028      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054d6:	4b34      	ldr	r3, [pc, #208]	@ (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054dc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054e4:	4930      	ldr	r1, [pc, #192]	@ (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054e6:	4313      	orrs	r3, r2
 80054e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054f4:	d106      	bne.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054f6:	4b2c      	ldr	r3, [pc, #176]	@ (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	4a2b      	ldr	r2, [pc, #172]	@ (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005500:	60d3      	str	r3, [r2, #12]
 8005502:	e011      	b.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x47c>
=======
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d028      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005522:	4b34      	ldr	r3, [pc, #208]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005524:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005528:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005530:	4930      	ldr	r1, [pc, #192]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005532:	4313      	orrs	r3, r2
 8005534:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800553c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005540:	d106      	bne.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005542:	4b2c      	ldr	r3, [pc, #176]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	4a2b      	ldr	r2, [pc, #172]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005548:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800554c:	60d3      	str	r3, [r2, #12]
 800554e:	e011      	b.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x47c>
>>>>>>> Stashed changes
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
<<<<<<< Updated upstream
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005508:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800550c:	d10c      	bne.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	3304      	adds	r3, #4
 8005512:	2101      	movs	r1, #1
 8005514:	4618      	mov	r0, r3
 8005516:	f000 f8f9 	bl	800570c <RCCEx_PLLSAI1_Config>
 800551a:	4603      	mov	r3, r0
 800551c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800551e:	7cfb      	ldrb	r3, [r7, #19]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d001      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005524:	7cfb      	ldrb	r3, [r7, #19]
 8005526:	74bb      	strb	r3, [r7, #18]
=======
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005554:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005558:	d10c      	bne.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	3304      	adds	r3, #4
 800555e:	2101      	movs	r1, #1
 8005560:	4618      	mov	r0, r3
 8005562:	f000 f8f9 	bl	8005758 <RCCEx_PLLSAI1_Config>
 8005566:	4603      	mov	r3, r0
 8005568:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800556a:	7cfb      	ldrb	r3, [r7, #19]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d001      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005570:	7cfb      	ldrb	r3, [r7, #19]
 8005572:	74bb      	strb	r3, [r7, #18]
>>>>>>> Stashed changes
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
<<<<<<< Updated upstream
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005530:	2b00      	cmp	r3, #0
 8005532:	d04d      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005538:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800553c:	d108      	bne.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800553e:	4b1a      	ldr	r3, [pc, #104]	@ (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005540:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005544:	4a18      	ldr	r2, [pc, #96]	@ (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005546:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800554a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800554e:	e012      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005550:	4b15      	ldr	r3, [pc, #84]	@ (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005552:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005556:	4a14      	ldr	r2, [pc, #80]	@ (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005558:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800555c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8005560:	4b11      	ldr	r3, [pc, #68]	@ (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005562:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005566:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800556e:	490e      	ldr	r1, [pc, #56]	@ (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005570:	4313      	orrs	r3, r2
 8005572:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800557a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800557e:	d106      	bne.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005580:	4b09      	ldr	r3, [pc, #36]	@ (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	4a08      	ldr	r2, [pc, #32]	@ (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005586:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800558a:	60d3      	str	r3, [r2, #12]
 800558c:	e020      	b.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005592:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005596:	d109      	bne.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005598:	4b03      	ldr	r3, [pc, #12]	@ (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	4a02      	ldr	r2, [pc, #8]	@ (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800559e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055a2:	60d3      	str	r3, [r2, #12]
 80055a4:	e014      	b.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80055a6:	bf00      	nop
 80055a8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80055b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80055b4:	d10c      	bne.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	3304      	adds	r3, #4
 80055ba:	2101      	movs	r1, #1
 80055bc:	4618      	mov	r0, r3
 80055be:	f000 f8a5 	bl	800570c <RCCEx_PLLSAI1_Config>
 80055c2:	4603      	mov	r3, r0
 80055c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055c6:	7cfb      	ldrb	r3, [r7, #19]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d001      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80055cc:	7cfb      	ldrb	r3, [r7, #19]
 80055ce:	74bb      	strb	r3, [r7, #18]
=======
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d04d      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005584:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005588:	d108      	bne.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800558a:	4b1a      	ldr	r3, [pc, #104]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800558c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005590:	4a18      	ldr	r2, [pc, #96]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005592:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005596:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800559a:	e012      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800559c:	4b15      	ldr	r3, [pc, #84]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800559e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80055a2:	4a14      	ldr	r2, [pc, #80]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055a4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80055a8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80055ac:	4b11      	ldr	r3, [pc, #68]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80055ba:	490e      	ldr	r1, [pc, #56]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055bc:	4313      	orrs	r3, r2
 80055be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80055c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80055ca:	d106      	bne.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055cc:	4b09      	ldr	r3, [pc, #36]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	4a08      	ldr	r2, [pc, #32]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80055d6:	60d3      	str	r3, [r2, #12]
 80055d8:	e020      	b.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80055de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80055e2:	d109      	bne.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80055e4:	4b03      	ldr	r3, [pc, #12]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	4a02      	ldr	r2, [pc, #8]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055ee:	60d3      	str	r3, [r2, #12]
 80055f0:	e014      	b.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x524>
 80055f2:	bf00      	nop
 80055f4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80055fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005600:	d10c      	bne.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	3304      	adds	r3, #4
 8005606:	2101      	movs	r1, #1
 8005608:	4618      	mov	r0, r3
 800560a:	f000 f8a5 	bl	8005758 <RCCEx_PLLSAI1_Config>
 800560e:	4603      	mov	r3, r0
 8005610:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005612:	7cfb      	ldrb	r3, [r7, #19]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d001      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005618:	7cfb      	ldrb	r3, [r7, #19]
 800561a:	74bb      	strb	r3, [r7, #18]
>>>>>>> Stashed changes
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
<<<<<<< Updated upstream
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d028      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055dc:	4b4a      	ldr	r3, [pc, #296]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80055ea:	4947      	ldr	r1, [pc, #284]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055ec:	4313      	orrs	r3, r2
 80055ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80055f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80055fa:	d106      	bne.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055fc:	4b42      	ldr	r3, [pc, #264]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	4a41      	ldr	r2, [pc, #260]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005602:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005606:	60d3      	str	r3, [r2, #12]
 8005608:	e011      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800560e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005612:	d10c      	bne.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	3304      	adds	r3, #4
 8005618:	2101      	movs	r1, #1
 800561a:	4618      	mov	r0, r3
 800561c:	f000 f876 	bl	800570c <RCCEx_PLLSAI1_Config>
 8005620:	4603      	mov	r3, r0
 8005622:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005624:	7cfb      	ldrb	r3, [r7, #19]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d001      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800562a:	7cfb      	ldrb	r3, [r7, #19]
 800562c:	74bb      	strb	r3, [r7, #18]
=======
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005624:	2b00      	cmp	r3, #0
 8005626:	d028      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005628:	4b4a      	ldr	r3, [pc, #296]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800562a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800562e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005636:	4947      	ldr	r1, [pc, #284]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005638:	4313      	orrs	r3, r2
 800563a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005642:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005646:	d106      	bne.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005648:	4b42      	ldr	r3, [pc, #264]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	4a41      	ldr	r2, [pc, #260]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800564e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005652:	60d3      	str	r3, [r2, #12]
 8005654:	e011      	b.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800565a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800565e:	d10c      	bne.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	3304      	adds	r3, #4
 8005664:	2101      	movs	r1, #1
 8005666:	4618      	mov	r0, r3
 8005668:	f000 f876 	bl	8005758 <RCCEx_PLLSAI1_Config>
 800566c:	4603      	mov	r3, r0
 800566e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005670:	7cfb      	ldrb	r3, [r7, #19]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d001      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005676:	7cfb      	ldrb	r3, [r7, #19]
 8005678:	74bb      	strb	r3, [r7, #18]
>>>>>>> Stashed changes
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
<<<<<<< Updated upstream
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d01e      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
=======
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d01e      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
<<<<<<< Updated upstream
 800563a:	4b33      	ldr	r3, [pc, #204]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800563c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005640:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800564a:	492f      	ldr	r1, [pc, #188]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800564c:	4313      	orrs	r3, r2
 800564e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005658:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800565c:	d10c      	bne.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	3304      	adds	r3, #4
 8005662:	2102      	movs	r1, #2
 8005664:	4618      	mov	r0, r3
 8005666:	f000 f851 	bl	800570c <RCCEx_PLLSAI1_Config>
 800566a:	4603      	mov	r3, r0
 800566c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800566e:	7cfb      	ldrb	r3, [r7, #19]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d001      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005674:	7cfb      	ldrb	r3, [r7, #19]
 8005676:	74bb      	strb	r3, [r7, #18]
=======
 8005686:	4b33      	ldr	r3, [pc, #204]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005688:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800568c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005696:	492f      	ldr	r1, [pc, #188]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005698:	4313      	orrs	r3, r2
 800569a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80056a8:	d10c      	bne.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	3304      	adds	r3, #4
 80056ae:	2102      	movs	r1, #2
 80056b0:	4618      	mov	r0, r3
 80056b2:	f000 f851 	bl	8005758 <RCCEx_PLLSAI1_Config>
 80056b6:	4603      	mov	r3, r0
 80056b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80056ba:	7cfb      	ldrb	r3, [r7, #19]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d001      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80056c0:	7cfb      	ldrb	r3, [r7, #19]
 80056c2:	74bb      	strb	r3, [r7, #18]
>>>>>>> Stashed changes
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
<<<<<<< Updated upstream
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005680:	2b00      	cmp	r3, #0
 8005682:	d00b      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
=======
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00b      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
<<<<<<< Updated upstream
 8005684:	4b20      	ldr	r3, [pc, #128]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005686:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800568a:	f023 0204 	bic.w	r2, r3, #4
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005694:	491c      	ldr	r1, [pc, #112]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005696:	4313      	orrs	r3, r2
 8005698:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
=======
 80056d0:	4b20      	ldr	r3, [pc, #128]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80056d6:	f023 0204 	bic.w	r2, r3, #4
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056e0:	491c      	ldr	r1, [pc, #112]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056e2:	4313      	orrs	r3, r2
 80056e4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
>>>>>>> Stashed changes
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
<<<<<<< Updated upstream
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d00b      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x614>
=======
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d00b      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x614>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
<<<<<<< Updated upstream
 80056a8:	4b17      	ldr	r3, [pc, #92]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80056ae:	f023 0218 	bic.w	r2, r3, #24
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056b8:	4913      	ldr	r1, [pc, #76]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056ba:	4313      	orrs	r3, r2
 80056bc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
=======
 80056f4:	4b17      	ldr	r3, [pc, #92]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80056fa:	f023 0218 	bic.w	r2, r3, #24
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005704:	4913      	ldr	r1, [pc, #76]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005706:	4313      	orrs	r3, r2
 8005708:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
>>>>>>> Stashed changes
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
<<<<<<< Updated upstream
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d017      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x650>
=======
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d017      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x650>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
<<<<<<< Updated upstream
 80056cc:	4b0e      	ldr	r3, [pc, #56]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80056d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80056dc:	490a      	ldr	r1, [pc, #40]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056de:	4313      	orrs	r3, r2
 80056e0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80056ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80056ee:	d105      	bne.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056f0:	4b05      	ldr	r3, [pc, #20]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	4a04      	ldr	r2, [pc, #16]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056fa:	60d3      	str	r3, [r2, #12]
=======
 8005718:	4b0e      	ldr	r3, [pc, #56]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800571a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800571e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005728:	490a      	ldr	r1, [pc, #40]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800572a:	4313      	orrs	r3, r2
 800572c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005736:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800573a:	d105      	bne.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800573c:	4b05      	ldr	r3, [pc, #20]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	4a04      	ldr	r2, [pc, #16]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005742:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005746:	60d3      	str	r3, [r2, #12]
>>>>>>> Stashed changes
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
<<<<<<< Updated upstream
 80056fc:	7cbb      	ldrb	r3, [r7, #18]
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3718      	adds	r7, #24
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	40021000 	.word	0x40021000

0800570c <RCCEx_PLLSAI1_Config>:
=======
 8005748:	7cbb      	ldrb	r3, [r7, #18]
}
 800574a:	4618      	mov	r0, r3
 800574c:	3718      	adds	r7, #24
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	40021000 	.word	0x40021000

08005758 <RCCEx_PLLSAI1_Config>:
>>>>>>> Stashed changes
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
<<<<<<< Updated upstream
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005716:	2300      	movs	r3, #0
 8005718:	73fb      	strb	r3, [r7, #15]
=======
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005762:	2300      	movs	r3, #0
 8005764:	73fb      	strb	r3, [r7, #15]
>>>>>>> Stashed changes
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
<<<<<<< Updated upstream
 800571a:	4b72      	ldr	r3, [pc, #456]	@ (80058e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	f003 0303 	and.w	r3, r3, #3
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00e      	beq.n	8005744 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005726:	4b6f      	ldr	r3, [pc, #444]	@ (80058e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	f003 0203 	and.w	r2, r3, #3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	429a      	cmp	r2, r3
 8005734:	d103      	bne.n	800573e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
       ||
 800573a:	2b00      	cmp	r3, #0
 800573c:	d142      	bne.n	80057c4 <RCCEx_PLLSAI1_Config+0xb8>
=======
 8005766:	4b72      	ldr	r3, [pc, #456]	@ (8005930 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	f003 0303 	and.w	r3, r3, #3
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00e      	beq.n	8005790 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005772:	4b6f      	ldr	r3, [pc, #444]	@ (8005930 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	f003 0203 	and.w	r2, r3, #3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	429a      	cmp	r2, r3
 8005780:	d103      	bne.n	800578a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
       ||
 8005786:	2b00      	cmp	r3, #0
 8005788:	d142      	bne.n	8005810 <RCCEx_PLLSAI1_Config+0xb8>
>>>>>>> Stashed changes
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
<<<<<<< Updated upstream
 800573e:	2301      	movs	r3, #1
 8005740:	73fb      	strb	r3, [r7, #15]
 8005742:	e03f      	b.n	80057c4 <RCCEx_PLLSAI1_Config+0xb8>
=======
 800578a:	2301      	movs	r3, #1
 800578c:	73fb      	strb	r3, [r7, #15]
 800578e:	e03f      	b.n	8005810 <RCCEx_PLLSAI1_Config+0xb8>
>>>>>>> Stashed changes
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
<<<<<<< Updated upstream
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2b03      	cmp	r3, #3
 800574a:	d018      	beq.n	800577e <RCCEx_PLLSAI1_Config+0x72>
 800574c:	2b03      	cmp	r3, #3
 800574e:	d825      	bhi.n	800579c <RCCEx_PLLSAI1_Config+0x90>
 8005750:	2b01      	cmp	r3, #1
 8005752:	d002      	beq.n	800575a <RCCEx_PLLSAI1_Config+0x4e>
 8005754:	2b02      	cmp	r3, #2
 8005756:	d009      	beq.n	800576c <RCCEx_PLLSAI1_Config+0x60>
 8005758:	e020      	b.n	800579c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800575a:	4b62      	ldr	r3, [pc, #392]	@ (80058e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 0302 	and.w	r3, r3, #2
 8005762:	2b00      	cmp	r3, #0
 8005764:	d11d      	bne.n	80057a2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800576a:	e01a      	b.n	80057a2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800576c:	4b5d      	ldr	r3, [pc, #372]	@ (80058e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005774:	2b00      	cmp	r3, #0
 8005776:	d116      	bne.n	80057a6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800577c:	e013      	b.n	80057a6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800577e:	4b59      	ldr	r3, [pc, #356]	@ (80058e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d10f      	bne.n	80057aa <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800578a:	4b56      	ldr	r3, [pc, #344]	@ (80058e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005792:	2b00      	cmp	r3, #0
 8005794:	d109      	bne.n	80057aa <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800579a:	e006      	b.n	80057aa <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	73fb      	strb	r3, [r7, #15]
      break;
 80057a0:	e004      	b.n	80057ac <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80057a2:	bf00      	nop
 80057a4:	e002      	b.n	80057ac <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80057a6:	bf00      	nop
 80057a8:	e000      	b.n	80057ac <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80057aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80057ac:	7bfb      	ldrb	r3, [r7, #15]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d108      	bne.n	80057c4 <RCCEx_PLLSAI1_Config+0xb8>
=======
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2b03      	cmp	r3, #3
 8005796:	d018      	beq.n	80057ca <RCCEx_PLLSAI1_Config+0x72>
 8005798:	2b03      	cmp	r3, #3
 800579a:	d825      	bhi.n	80057e8 <RCCEx_PLLSAI1_Config+0x90>
 800579c:	2b01      	cmp	r3, #1
 800579e:	d002      	beq.n	80057a6 <RCCEx_PLLSAI1_Config+0x4e>
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d009      	beq.n	80057b8 <RCCEx_PLLSAI1_Config+0x60>
 80057a4:	e020      	b.n	80057e8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80057a6:	4b62      	ldr	r3, [pc, #392]	@ (8005930 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 0302 	and.w	r3, r3, #2
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d11d      	bne.n	80057ee <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057b6:	e01a      	b.n	80057ee <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80057b8:	4b5d      	ldr	r3, [pc, #372]	@ (8005930 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d116      	bne.n	80057f2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057c8:	e013      	b.n	80057f2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80057ca:	4b59      	ldr	r3, [pc, #356]	@ (8005930 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10f      	bne.n	80057f6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80057d6:	4b56      	ldr	r3, [pc, #344]	@ (8005930 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d109      	bne.n	80057f6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80057e6:	e006      	b.n	80057f6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	73fb      	strb	r3, [r7, #15]
      break;
 80057ec:	e004      	b.n	80057f8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80057ee:	bf00      	nop
 80057f0:	e002      	b.n	80057f8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80057f2:	bf00      	nop
 80057f4:	e000      	b.n	80057f8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80057f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80057f8:	7bfb      	ldrb	r3, [r7, #15]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d108      	bne.n	8005810 <RCCEx_PLLSAI1_Config+0xb8>
>>>>>>> Stashed changes
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
<<<<<<< Updated upstream
 80057b2:	4b4c      	ldr	r3, [pc, #304]	@ (80058e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	f023 0203 	bic.w	r2, r3, #3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4949      	ldr	r1, [pc, #292]	@ (80058e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057c0:	4313      	orrs	r3, r2
 80057c2:	60cb      	str	r3, [r1, #12]
=======
 80057fe:	4b4c      	ldr	r3, [pc, #304]	@ (8005930 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	f023 0203 	bic.w	r2, r3, #3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4949      	ldr	r1, [pc, #292]	@ (8005930 <RCCEx_PLLSAI1_Config+0x1d8>)
 800580c:	4313      	orrs	r3, r2
 800580e:	60cb      	str	r3, [r1, #12]
>>>>>>> Stashed changes
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
<<<<<<< Updated upstream
 80057c4:	7bfb      	ldrb	r3, [r7, #15]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	f040 8086 	bne.w	80058d8 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80057cc:	4b45      	ldr	r3, [pc, #276]	@ (80058e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a44      	ldr	r2, [pc, #272]	@ (80058e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80057d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057d8:	f7fc ff8e 	bl	80026f8 <HAL_GetTick>
 80057dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80057de:	e009      	b.n	80057f4 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80057e0:	f7fc ff8a 	bl	80026f8 <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d902      	bls.n	80057f4 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	73fb      	strb	r3, [r7, #15]
        break;
 80057f2:	e005      	b.n	8005800 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80057f4:	4b3b      	ldr	r3, [pc, #236]	@ (80058e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d1ef      	bne.n	80057e0 <RCCEx_PLLSAI1_Config+0xd4>
=======
 8005810:	7bfb      	ldrb	r3, [r7, #15]
 8005812:	2b00      	cmp	r3, #0
 8005814:	f040 8086 	bne.w	8005924 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005818:	4b45      	ldr	r3, [pc, #276]	@ (8005930 <RCCEx_PLLSAI1_Config+0x1d8>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a44      	ldr	r2, [pc, #272]	@ (8005930 <RCCEx_PLLSAI1_Config+0x1d8>)
 800581e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005822:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005824:	f7fc ff8e 	bl	8002744 <HAL_GetTick>
 8005828:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800582a:	e009      	b.n	8005840 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800582c:	f7fc ff8a 	bl	8002744 <HAL_GetTick>
 8005830:	4602      	mov	r2, r0
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	2b02      	cmp	r3, #2
 8005838:	d902      	bls.n	8005840 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	73fb      	strb	r3, [r7, #15]
        break;
 800583e:	e005      	b.n	800584c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005840:	4b3b      	ldr	r3, [pc, #236]	@ (8005930 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1ef      	bne.n	800582c <RCCEx_PLLSAI1_Config+0xd4>
>>>>>>> Stashed changes
      }
    }

    if(status == HAL_OK)
<<<<<<< Updated upstream
 8005800:	7bfb      	ldrb	r3, [r7, #15]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d168      	bne.n	80058d8 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d113      	bne.n	8005834 <RCCEx_PLLSAI1_Config+0x128>
=======
 800584c:	7bfb      	ldrb	r3, [r7, #15]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d168      	bne.n	8005924 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d113      	bne.n	8005880 <RCCEx_PLLSAI1_Config+0x128>
>>>>>>> Stashed changes
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
<<<<<<< Updated upstream
 800580c:	4b35      	ldr	r3, [pc, #212]	@ (80058e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800580e:	691a      	ldr	r2, [r3, #16]
 8005810:	4b35      	ldr	r3, [pc, #212]	@ (80058e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005812:	4013      	ands	r3, r2
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	6892      	ldr	r2, [r2, #8]
 8005818:	0211      	lsls	r1, r2, #8
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	68d2      	ldr	r2, [r2, #12]
 800581e:	06d2      	lsls	r2, r2, #27
 8005820:	4311      	orrs	r1, r2
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	6852      	ldr	r2, [r2, #4]
 8005826:	3a01      	subs	r2, #1
 8005828:	0112      	lsls	r2, r2, #4
 800582a:	430a      	orrs	r2, r1
 800582c:	492d      	ldr	r1, [pc, #180]	@ (80058e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800582e:	4313      	orrs	r3, r2
 8005830:	610b      	str	r3, [r1, #16]
 8005832:	e02d      	b.n	8005890 <RCCEx_PLLSAI1_Config+0x184>
=======
 8005858:	4b35      	ldr	r3, [pc, #212]	@ (8005930 <RCCEx_PLLSAI1_Config+0x1d8>)
 800585a:	691a      	ldr	r2, [r3, #16]
 800585c:	4b35      	ldr	r3, [pc, #212]	@ (8005934 <RCCEx_PLLSAI1_Config+0x1dc>)
 800585e:	4013      	ands	r3, r2
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	6892      	ldr	r2, [r2, #8]
 8005864:	0211      	lsls	r1, r2, #8
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	68d2      	ldr	r2, [r2, #12]
 800586a:	06d2      	lsls	r2, r2, #27
 800586c:	4311      	orrs	r1, r2
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	6852      	ldr	r2, [r2, #4]
 8005872:	3a01      	subs	r2, #1
 8005874:	0112      	lsls	r2, r2, #4
 8005876:	430a      	orrs	r2, r1
 8005878:	492d      	ldr	r1, [pc, #180]	@ (8005930 <RCCEx_PLLSAI1_Config+0x1d8>)
 800587a:	4313      	orrs	r3, r2
 800587c:	610b      	str	r3, [r1, #16]
 800587e:	e02d      	b.n	80058dc <RCCEx_PLLSAI1_Config+0x184>
>>>>>>> Stashed changes
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
<<<<<<< Updated upstream
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	2b01      	cmp	r3, #1
 8005838:	d115      	bne.n	8005866 <RCCEx_PLLSAI1_Config+0x15a>
=======
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	2b01      	cmp	r3, #1
 8005884:	d115      	bne.n	80058b2 <RCCEx_PLLSAI1_Config+0x15a>
>>>>>>> Stashed changes
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
<<<<<<< Updated upstream
 800583a:	4b2a      	ldr	r3, [pc, #168]	@ (80058e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800583c:	691a      	ldr	r2, [r3, #16]
 800583e:	4b2b      	ldr	r3, [pc, #172]	@ (80058ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8005840:	4013      	ands	r3, r2
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	6892      	ldr	r2, [r2, #8]
 8005846:	0211      	lsls	r1, r2, #8
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	6912      	ldr	r2, [r2, #16]
 800584c:	0852      	lsrs	r2, r2, #1
 800584e:	3a01      	subs	r2, #1
 8005850:	0552      	lsls	r2, r2, #21
 8005852:	4311      	orrs	r1, r2
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	6852      	ldr	r2, [r2, #4]
 8005858:	3a01      	subs	r2, #1
 800585a:	0112      	lsls	r2, r2, #4
 800585c:	430a      	orrs	r2, r1
 800585e:	4921      	ldr	r1, [pc, #132]	@ (80058e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005860:	4313      	orrs	r3, r2
 8005862:	610b      	str	r3, [r1, #16]
 8005864:	e014      	b.n	8005890 <RCCEx_PLLSAI1_Config+0x184>
=======
 8005886:	4b2a      	ldr	r3, [pc, #168]	@ (8005930 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005888:	691a      	ldr	r2, [r3, #16]
 800588a:	4b2b      	ldr	r3, [pc, #172]	@ (8005938 <RCCEx_PLLSAI1_Config+0x1e0>)
 800588c:	4013      	ands	r3, r2
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	6892      	ldr	r2, [r2, #8]
 8005892:	0211      	lsls	r1, r2, #8
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	6912      	ldr	r2, [r2, #16]
 8005898:	0852      	lsrs	r2, r2, #1
 800589a:	3a01      	subs	r2, #1
 800589c:	0552      	lsls	r2, r2, #21
 800589e:	4311      	orrs	r1, r2
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	6852      	ldr	r2, [r2, #4]
 80058a4:	3a01      	subs	r2, #1
 80058a6:	0112      	lsls	r2, r2, #4
 80058a8:	430a      	orrs	r2, r1
 80058aa:	4921      	ldr	r1, [pc, #132]	@ (8005930 <RCCEx_PLLSAI1_Config+0x1d8>)
 80058ac:	4313      	orrs	r3, r2
 80058ae:	610b      	str	r3, [r1, #16]
 80058b0:	e014      	b.n	80058dc <RCCEx_PLLSAI1_Config+0x184>
>>>>>>> Stashed changes
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
<<<<<<< Updated upstream
 8005866:	4b1f      	ldr	r3, [pc, #124]	@ (80058e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005868:	691a      	ldr	r2, [r3, #16]
 800586a:	4b21      	ldr	r3, [pc, #132]	@ (80058f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800586c:	4013      	ands	r3, r2
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	6892      	ldr	r2, [r2, #8]
 8005872:	0211      	lsls	r1, r2, #8
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	6952      	ldr	r2, [r2, #20]
 8005878:	0852      	lsrs	r2, r2, #1
 800587a:	3a01      	subs	r2, #1
 800587c:	0652      	lsls	r2, r2, #25
 800587e:	4311      	orrs	r1, r2
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	6852      	ldr	r2, [r2, #4]
 8005884:	3a01      	subs	r2, #1
 8005886:	0112      	lsls	r2, r2, #4
 8005888:	430a      	orrs	r2, r1
 800588a:	4916      	ldr	r1, [pc, #88]	@ (80058e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800588c:	4313      	orrs	r3, r2
 800588e:	610b      	str	r3, [r1, #16]
=======
 80058b2:	4b1f      	ldr	r3, [pc, #124]	@ (8005930 <RCCEx_PLLSAI1_Config+0x1d8>)
 80058b4:	691a      	ldr	r2, [r3, #16]
 80058b6:	4b21      	ldr	r3, [pc, #132]	@ (800593c <RCCEx_PLLSAI1_Config+0x1e4>)
 80058b8:	4013      	ands	r3, r2
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	6892      	ldr	r2, [r2, #8]
 80058be:	0211      	lsls	r1, r2, #8
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	6952      	ldr	r2, [r2, #20]
 80058c4:	0852      	lsrs	r2, r2, #1
 80058c6:	3a01      	subs	r2, #1
 80058c8:	0652      	lsls	r2, r2, #25
 80058ca:	4311      	orrs	r1, r2
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	6852      	ldr	r2, [r2, #4]
 80058d0:	3a01      	subs	r2, #1
 80058d2:	0112      	lsls	r2, r2, #4
 80058d4:	430a      	orrs	r2, r1
 80058d6:	4916      	ldr	r1, [pc, #88]	@ (8005930 <RCCEx_PLLSAI1_Config+0x1d8>)
 80058d8:	4313      	orrs	r3, r2
 80058da:	610b      	str	r3, [r1, #16]
>>>>>>> Stashed changes
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
<<<<<<< Updated upstream
 8005890:	4b14      	ldr	r3, [pc, #80]	@ (80058e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a13      	ldr	r2, [pc, #76]	@ (80058e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005896:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800589a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800589c:	f7fc ff2c 	bl	80026f8 <HAL_GetTick>
 80058a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80058a2:	e009      	b.n	80058b8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80058a4:	f7fc ff28 	bl	80026f8 <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d902      	bls.n	80058b8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	73fb      	strb	r3, [r7, #15]
          break;
 80058b6:	e005      	b.n	80058c4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80058b8:	4b0a      	ldr	r3, [pc, #40]	@ (80058e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d0ef      	beq.n	80058a4 <RCCEx_PLLSAI1_Config+0x198>
=======
 80058dc:	4b14      	ldr	r3, [pc, #80]	@ (8005930 <RCCEx_PLLSAI1_Config+0x1d8>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a13      	ldr	r2, [pc, #76]	@ (8005930 <RCCEx_PLLSAI1_Config+0x1d8>)
 80058e2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80058e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058e8:	f7fc ff2c 	bl	8002744 <HAL_GetTick>
 80058ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80058ee:	e009      	b.n	8005904 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80058f0:	f7fc ff28 	bl	8002744 <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d902      	bls.n	8005904 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	73fb      	strb	r3, [r7, #15]
          break;
 8005902:	e005      	b.n	8005910 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005904:	4b0a      	ldr	r3, [pc, #40]	@ (8005930 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d0ef      	beq.n	80058f0 <RCCEx_PLLSAI1_Config+0x198>
>>>>>>> Stashed changes
        }
      }

      if(status == HAL_OK)
<<<<<<< Updated upstream
 80058c4:	7bfb      	ldrb	r3, [r7, #15]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d106      	bne.n	80058d8 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80058ca:	4b06      	ldr	r3, [pc, #24]	@ (80058e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80058cc:	691a      	ldr	r2, [r3, #16]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	4904      	ldr	r1, [pc, #16]	@ (80058e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80058d4:	4313      	orrs	r3, r2
 80058d6:	610b      	str	r3, [r1, #16]
=======
 8005910:	7bfb      	ldrb	r3, [r7, #15]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d106      	bne.n	8005924 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005916:	4b06      	ldr	r3, [pc, #24]	@ (8005930 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005918:	691a      	ldr	r2, [r3, #16]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	4904      	ldr	r1, [pc, #16]	@ (8005930 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005920:	4313      	orrs	r3, r2
 8005922:	610b      	str	r3, [r1, #16]
>>>>>>> Stashed changes
      }
    }
  }

  return status;
<<<<<<< Updated upstream
 80058d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3710      	adds	r7, #16
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	40021000 	.word	0x40021000
 80058e8:	07ff800f 	.word	0x07ff800f
 80058ec:	ff9f800f 	.word	0xff9f800f
 80058f0:	f9ff800f 	.word	0xf9ff800f

080058f4 <RCCEx_PLLSAI2_Config>:
=======
 8005924:	7bfb      	ldrb	r3, [r7, #15]
}
 8005926:	4618      	mov	r0, r3
 8005928:	3710      	adds	r7, #16
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	40021000 	.word	0x40021000
 8005934:	07ff800f 	.word	0x07ff800f
 8005938:	ff9f800f 	.word	0xff9f800f
 800593c:	f9ff800f 	.word	0xf9ff800f

08005940 <RCCEx_PLLSAI2_Config>:
>>>>>>> Stashed changes
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
<<<<<<< Updated upstream
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058fe:	2300      	movs	r3, #0
 8005900:	73fb      	strb	r3, [r7, #15]
=======
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800594a:	2300      	movs	r3, #0
 800594c:	73fb      	strb	r3, [r7, #15]
>>>>>>> Stashed changes
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
<<<<<<< Updated upstream
 8005902:	4b72      	ldr	r3, [pc, #456]	@ (8005acc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	f003 0303 	and.w	r3, r3, #3
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00e      	beq.n	800592c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800590e:	4b6f      	ldr	r3, [pc, #444]	@ (8005acc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	f003 0203 	and.w	r2, r3, #3
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	429a      	cmp	r2, r3
 800591c:	d103      	bne.n	8005926 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
       ||
 8005922:	2b00      	cmp	r3, #0
 8005924:	d142      	bne.n	80059ac <RCCEx_PLLSAI2_Config+0xb8>
=======
 800594e:	4b72      	ldr	r3, [pc, #456]	@ (8005b18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	f003 0303 	and.w	r3, r3, #3
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00e      	beq.n	8005978 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800595a:	4b6f      	ldr	r3, [pc, #444]	@ (8005b18 <RCCEx_PLLSAI2_Config+0x1d8>)
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	f003 0203 	and.w	r2, r3, #3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	429a      	cmp	r2, r3
 8005968:	d103      	bne.n	8005972 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
       ||
 800596e:	2b00      	cmp	r3, #0
 8005970:	d142      	bne.n	80059f8 <RCCEx_PLLSAI2_Config+0xb8>
>>>>>>> Stashed changes
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
<<<<<<< Updated upstream
 8005926:	2301      	movs	r3, #1
 8005928:	73fb      	strb	r3, [r7, #15]
 800592a:	e03f      	b.n	80059ac <RCCEx_PLLSAI2_Config+0xb8>
=======
 8005972:	2301      	movs	r3, #1
 8005974:	73fb      	strb	r3, [r7, #15]
 8005976:	e03f      	b.n	80059f8 <RCCEx_PLLSAI2_Config+0xb8>
>>>>>>> Stashed changes
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
<<<<<<< Updated upstream
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2b03      	cmp	r3, #3
 8005932:	d018      	beq.n	8005966 <RCCEx_PLLSAI2_Config+0x72>
 8005934:	2b03      	cmp	r3, #3
 8005936:	d825      	bhi.n	8005984 <RCCEx_PLLSAI2_Config+0x90>
 8005938:	2b01      	cmp	r3, #1
 800593a:	d002      	beq.n	8005942 <RCCEx_PLLSAI2_Config+0x4e>
 800593c:	2b02      	cmp	r3, #2
 800593e:	d009      	beq.n	8005954 <RCCEx_PLLSAI2_Config+0x60>
 8005940:	e020      	b.n	8005984 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005942:	4b62      	ldr	r3, [pc, #392]	@ (8005acc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0302 	and.w	r3, r3, #2
 800594a:	2b00      	cmp	r3, #0
 800594c:	d11d      	bne.n	800598a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005952:	e01a      	b.n	800598a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005954:	4b5d      	ldr	r3, [pc, #372]	@ (8005acc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800595c:	2b00      	cmp	r3, #0
 800595e:	d116      	bne.n	800598e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005964:	e013      	b.n	800598e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005966:	4b59      	ldr	r3, [pc, #356]	@ (8005acc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d10f      	bne.n	8005992 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005972:	4b56      	ldr	r3, [pc, #344]	@ (8005acc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800597a:	2b00      	cmp	r3, #0
 800597c:	d109      	bne.n	8005992 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005982:	e006      	b.n	8005992 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	73fb      	strb	r3, [r7, #15]
      break;
 8005988:	e004      	b.n	8005994 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800598a:	bf00      	nop
 800598c:	e002      	b.n	8005994 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800598e:	bf00      	nop
 8005990:	e000      	b.n	8005994 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005992:	bf00      	nop
    }

    if(status == HAL_OK)
 8005994:	7bfb      	ldrb	r3, [r7, #15]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d108      	bne.n	80059ac <RCCEx_PLLSAI2_Config+0xb8>
=======
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2b03      	cmp	r3, #3
 800597e:	d018      	beq.n	80059b2 <RCCEx_PLLSAI2_Config+0x72>
 8005980:	2b03      	cmp	r3, #3
 8005982:	d825      	bhi.n	80059d0 <RCCEx_PLLSAI2_Config+0x90>
 8005984:	2b01      	cmp	r3, #1
 8005986:	d002      	beq.n	800598e <RCCEx_PLLSAI2_Config+0x4e>
 8005988:	2b02      	cmp	r3, #2
 800598a:	d009      	beq.n	80059a0 <RCCEx_PLLSAI2_Config+0x60>
 800598c:	e020      	b.n	80059d0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800598e:	4b62      	ldr	r3, [pc, #392]	@ (8005b18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0302 	and.w	r3, r3, #2
 8005996:	2b00      	cmp	r3, #0
 8005998:	d11d      	bne.n	80059d6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800599e:	e01a      	b.n	80059d6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80059a0:	4b5d      	ldr	r3, [pc, #372]	@ (8005b18 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d116      	bne.n	80059da <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059b0:	e013      	b.n	80059da <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80059b2:	4b59      	ldr	r3, [pc, #356]	@ (8005b18 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d10f      	bne.n	80059de <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80059be:	4b56      	ldr	r3, [pc, #344]	@ (8005b18 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d109      	bne.n	80059de <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80059ce:	e006      	b.n	80059de <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	73fb      	strb	r3, [r7, #15]
      break;
 80059d4:	e004      	b.n	80059e0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80059d6:	bf00      	nop
 80059d8:	e002      	b.n	80059e0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80059da:	bf00      	nop
 80059dc:	e000      	b.n	80059e0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80059de:	bf00      	nop
    }

    if(status == HAL_OK)
 80059e0:	7bfb      	ldrb	r3, [r7, #15]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d108      	bne.n	80059f8 <RCCEx_PLLSAI2_Config+0xb8>
>>>>>>> Stashed changes
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
<<<<<<< Updated upstream
 800599a:	4b4c      	ldr	r3, [pc, #304]	@ (8005acc <RCCEx_PLLSAI2_Config+0x1d8>)
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	f023 0203 	bic.w	r2, r3, #3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4949      	ldr	r1, [pc, #292]	@ (8005acc <RCCEx_PLLSAI2_Config+0x1d8>)
 80059a8:	4313      	orrs	r3, r2
 80059aa:	60cb      	str	r3, [r1, #12]
=======
 80059e6:	4b4c      	ldr	r3, [pc, #304]	@ (8005b18 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	f023 0203 	bic.w	r2, r3, #3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4949      	ldr	r1, [pc, #292]	@ (8005b18 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059f4:	4313      	orrs	r3, r2
 80059f6:	60cb      	str	r3, [r1, #12]
>>>>>>> Stashed changes
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
<<<<<<< Updated upstream
 80059ac:	7bfb      	ldrb	r3, [r7, #15]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	f040 8086 	bne.w	8005ac0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80059b4:	4b45      	ldr	r3, [pc, #276]	@ (8005acc <RCCEx_PLLSAI2_Config+0x1d8>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a44      	ldr	r2, [pc, #272]	@ (8005acc <RCCEx_PLLSAI2_Config+0x1d8>)
 80059ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059c0:	f7fc fe9a 	bl	80026f8 <HAL_GetTick>
 80059c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80059c6:	e009      	b.n	80059dc <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80059c8:	f7fc fe96 	bl	80026f8 <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d902      	bls.n	80059dc <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	73fb      	strb	r3, [r7, #15]
        break;
 80059da:	e005      	b.n	80059e8 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80059dc:	4b3b      	ldr	r3, [pc, #236]	@ (8005acc <RCCEx_PLLSAI2_Config+0x1d8>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d1ef      	bne.n	80059c8 <RCCEx_PLLSAI2_Config+0xd4>
=======
 80059f8:	7bfb      	ldrb	r3, [r7, #15]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	f040 8086 	bne.w	8005b0c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005a00:	4b45      	ldr	r3, [pc, #276]	@ (8005b18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a44      	ldr	r2, [pc, #272]	@ (8005b18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a0c:	f7fc fe9a 	bl	8002744 <HAL_GetTick>
 8005a10:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a12:	e009      	b.n	8005a28 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005a14:	f7fc fe96 	bl	8002744 <HAL_GetTick>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d902      	bls.n	8005a28 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	73fb      	strb	r3, [r7, #15]
        break;
 8005a26:	e005      	b.n	8005a34 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a28:	4b3b      	ldr	r3, [pc, #236]	@ (8005b18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d1ef      	bne.n	8005a14 <RCCEx_PLLSAI2_Config+0xd4>
>>>>>>> Stashed changes
      }
    }

    if(status == HAL_OK)
<<<<<<< Updated upstream
 80059e8:	7bfb      	ldrb	r3, [r7, #15]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d168      	bne.n	8005ac0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d113      	bne.n	8005a1c <RCCEx_PLLSAI2_Config+0x128>
=======
 8005a34:	7bfb      	ldrb	r3, [r7, #15]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d168      	bne.n	8005b0c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d113      	bne.n	8005a68 <RCCEx_PLLSAI2_Config+0x128>
>>>>>>> Stashed changes
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
<<<<<<< Updated upstream
 80059f4:	4b35      	ldr	r3, [pc, #212]	@ (8005acc <RCCEx_PLLSAI2_Config+0x1d8>)
 80059f6:	695a      	ldr	r2, [r3, #20]
 80059f8:	4b35      	ldr	r3, [pc, #212]	@ (8005ad0 <RCCEx_PLLSAI2_Config+0x1dc>)
 80059fa:	4013      	ands	r3, r2
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	6892      	ldr	r2, [r2, #8]
 8005a00:	0211      	lsls	r1, r2, #8
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	68d2      	ldr	r2, [r2, #12]
 8005a06:	06d2      	lsls	r2, r2, #27
 8005a08:	4311      	orrs	r1, r2
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	6852      	ldr	r2, [r2, #4]
 8005a0e:	3a01      	subs	r2, #1
 8005a10:	0112      	lsls	r2, r2, #4
 8005a12:	430a      	orrs	r2, r1
 8005a14:	492d      	ldr	r1, [pc, #180]	@ (8005acc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a16:	4313      	orrs	r3, r2
 8005a18:	614b      	str	r3, [r1, #20]
 8005a1a:	e02d      	b.n	8005a78 <RCCEx_PLLSAI2_Config+0x184>
=======
 8005a40:	4b35      	ldr	r3, [pc, #212]	@ (8005b18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a42:	695a      	ldr	r2, [r3, #20]
 8005a44:	4b35      	ldr	r3, [pc, #212]	@ (8005b1c <RCCEx_PLLSAI2_Config+0x1dc>)
 8005a46:	4013      	ands	r3, r2
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	6892      	ldr	r2, [r2, #8]
 8005a4c:	0211      	lsls	r1, r2, #8
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	68d2      	ldr	r2, [r2, #12]
 8005a52:	06d2      	lsls	r2, r2, #27
 8005a54:	4311      	orrs	r1, r2
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	6852      	ldr	r2, [r2, #4]
 8005a5a:	3a01      	subs	r2, #1
 8005a5c:	0112      	lsls	r2, r2, #4
 8005a5e:	430a      	orrs	r2, r1
 8005a60:	492d      	ldr	r1, [pc, #180]	@ (8005b18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a62:	4313      	orrs	r3, r2
 8005a64:	614b      	str	r3, [r1, #20]
 8005a66:	e02d      	b.n	8005ac4 <RCCEx_PLLSAI2_Config+0x184>
>>>>>>> Stashed changes
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
<<<<<<< Updated upstream
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d115      	bne.n	8005a4e <RCCEx_PLLSAI2_Config+0x15a>
=======
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d115      	bne.n	8005a9a <RCCEx_PLLSAI2_Config+0x15a>
>>>>>>> Stashed changes
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
<<<<<<< Updated upstream
 8005a22:	4b2a      	ldr	r3, [pc, #168]	@ (8005acc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a24:	695a      	ldr	r2, [r3, #20]
 8005a26:	4b2b      	ldr	r3, [pc, #172]	@ (8005ad4 <RCCEx_PLLSAI2_Config+0x1e0>)
 8005a28:	4013      	ands	r3, r2
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	6892      	ldr	r2, [r2, #8]
 8005a2e:	0211      	lsls	r1, r2, #8
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	6912      	ldr	r2, [r2, #16]
 8005a34:	0852      	lsrs	r2, r2, #1
 8005a36:	3a01      	subs	r2, #1
 8005a38:	0552      	lsls	r2, r2, #21
 8005a3a:	4311      	orrs	r1, r2
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	6852      	ldr	r2, [r2, #4]
 8005a40:	3a01      	subs	r2, #1
 8005a42:	0112      	lsls	r2, r2, #4
 8005a44:	430a      	orrs	r2, r1
 8005a46:	4921      	ldr	r1, [pc, #132]	@ (8005acc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	614b      	str	r3, [r1, #20]
 8005a4c:	e014      	b.n	8005a78 <RCCEx_PLLSAI2_Config+0x184>
=======
 8005a6e:	4b2a      	ldr	r3, [pc, #168]	@ (8005b18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a70:	695a      	ldr	r2, [r3, #20]
 8005a72:	4b2b      	ldr	r3, [pc, #172]	@ (8005b20 <RCCEx_PLLSAI2_Config+0x1e0>)
 8005a74:	4013      	ands	r3, r2
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	6892      	ldr	r2, [r2, #8]
 8005a7a:	0211      	lsls	r1, r2, #8
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	6912      	ldr	r2, [r2, #16]
 8005a80:	0852      	lsrs	r2, r2, #1
 8005a82:	3a01      	subs	r2, #1
 8005a84:	0552      	lsls	r2, r2, #21
 8005a86:	4311      	orrs	r1, r2
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	6852      	ldr	r2, [r2, #4]
 8005a8c:	3a01      	subs	r2, #1
 8005a8e:	0112      	lsls	r2, r2, #4
 8005a90:	430a      	orrs	r2, r1
 8005a92:	4921      	ldr	r1, [pc, #132]	@ (8005b18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a94:	4313      	orrs	r3, r2
 8005a96:	614b      	str	r3, [r1, #20]
 8005a98:	e014      	b.n	8005ac4 <RCCEx_PLLSAI2_Config+0x184>
>>>>>>> Stashed changes
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
<<<<<<< Updated upstream
 8005a4e:	4b1f      	ldr	r3, [pc, #124]	@ (8005acc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a50:	695a      	ldr	r2, [r3, #20]
 8005a52:	4b21      	ldr	r3, [pc, #132]	@ (8005ad8 <RCCEx_PLLSAI2_Config+0x1e4>)
 8005a54:	4013      	ands	r3, r2
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	6892      	ldr	r2, [r2, #8]
 8005a5a:	0211      	lsls	r1, r2, #8
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	6952      	ldr	r2, [r2, #20]
 8005a60:	0852      	lsrs	r2, r2, #1
 8005a62:	3a01      	subs	r2, #1
 8005a64:	0652      	lsls	r2, r2, #25
 8005a66:	4311      	orrs	r1, r2
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	6852      	ldr	r2, [r2, #4]
 8005a6c:	3a01      	subs	r2, #1
 8005a6e:	0112      	lsls	r2, r2, #4
 8005a70:	430a      	orrs	r2, r1
 8005a72:	4916      	ldr	r1, [pc, #88]	@ (8005acc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a74:	4313      	orrs	r3, r2
 8005a76:	614b      	str	r3, [r1, #20]
=======
 8005a9a:	4b1f      	ldr	r3, [pc, #124]	@ (8005b18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a9c:	695a      	ldr	r2, [r3, #20]
 8005a9e:	4b21      	ldr	r3, [pc, #132]	@ (8005b24 <RCCEx_PLLSAI2_Config+0x1e4>)
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	6892      	ldr	r2, [r2, #8]
 8005aa6:	0211      	lsls	r1, r2, #8
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	6952      	ldr	r2, [r2, #20]
 8005aac:	0852      	lsrs	r2, r2, #1
 8005aae:	3a01      	subs	r2, #1
 8005ab0:	0652      	lsls	r2, r2, #25
 8005ab2:	4311      	orrs	r1, r2
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	6852      	ldr	r2, [r2, #4]
 8005ab8:	3a01      	subs	r2, #1
 8005aba:	0112      	lsls	r2, r2, #4
 8005abc:	430a      	orrs	r2, r1
 8005abe:	4916      	ldr	r1, [pc, #88]	@ (8005b18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	614b      	str	r3, [r1, #20]
>>>>>>> Stashed changes
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
<<<<<<< Updated upstream
 8005a78:	4b14      	ldr	r3, [pc, #80]	@ (8005acc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a13      	ldr	r2, [pc, #76]	@ (8005acc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a82:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a84:	f7fc fe38 	bl	80026f8 <HAL_GetTick>
 8005a88:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a8a:	e009      	b.n	8005aa0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005a8c:	f7fc fe34 	bl	80026f8 <HAL_GetTick>
 8005a90:	4602      	mov	r2, r0
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d902      	bls.n	8005aa0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	73fb      	strb	r3, [r7, #15]
          break;
 8005a9e:	e005      	b.n	8005aac <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8005acc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d0ef      	beq.n	8005a8c <RCCEx_PLLSAI2_Config+0x198>
=======
 8005ac4:	4b14      	ldr	r3, [pc, #80]	@ (8005b18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a13      	ldr	r2, [pc, #76]	@ (8005b18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005aca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ace:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ad0:	f7fc fe38 	bl	8002744 <HAL_GetTick>
 8005ad4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005ad6:	e009      	b.n	8005aec <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005ad8:	f7fc fe34 	bl	8002744 <HAL_GetTick>
 8005adc:	4602      	mov	r2, r0
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d902      	bls.n	8005aec <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	73fb      	strb	r3, [r7, #15]
          break;
 8005aea:	e005      	b.n	8005af8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005aec:	4b0a      	ldr	r3, [pc, #40]	@ (8005b18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d0ef      	beq.n	8005ad8 <RCCEx_PLLSAI2_Config+0x198>
>>>>>>> Stashed changes
        }
      }

      if(status == HAL_OK)
<<<<<<< Updated upstream
 8005aac:	7bfb      	ldrb	r3, [r7, #15]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d106      	bne.n	8005ac0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005ab2:	4b06      	ldr	r3, [pc, #24]	@ (8005acc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ab4:	695a      	ldr	r2, [r3, #20]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	699b      	ldr	r3, [r3, #24]
 8005aba:	4904      	ldr	r1, [pc, #16]	@ (8005acc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005abc:	4313      	orrs	r3, r2
 8005abe:	614b      	str	r3, [r1, #20]
=======
 8005af8:	7bfb      	ldrb	r3, [r7, #15]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d106      	bne.n	8005b0c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005afe:	4b06      	ldr	r3, [pc, #24]	@ (8005b18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b00:	695a      	ldr	r2, [r3, #20]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	4904      	ldr	r1, [pc, #16]	@ (8005b18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	614b      	str	r3, [r1, #20]
>>>>>>> Stashed changes
      }
    }
  }

  return status;
<<<<<<< Updated upstream
 8005ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3710      	adds	r7, #16
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	40021000 	.word	0x40021000
 8005ad0:	07ff800f 	.word	0x07ff800f
 8005ad4:	ff9f800f 	.word	0xff9f800f
 8005ad8:	f9ff800f 	.word	0xf9ff800f

08005adc <HAL_TIM_Base_Init>:
=======
 8005b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	40021000 	.word	0x40021000
 8005b1c:	07ff800f 	.word	0x07ff800f
 8005b20:	ff9f800f 	.word	0xff9f800f
 8005b24:	f9ff800f 	.word	0xf9ff800f

08005b28 <HAL_TIM_Base_Init>:
>>>>>>> Stashed changes
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d101      	bne.n	8005aee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e049      	b.n	8005b82 <HAL_TIM_Base_Init+0xa6>
=======
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d101      	bne.n	8005b3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e049      	b.n	8005bce <HAL_TIM_Base_Init+0xa6>
>>>>>>> Stashed changes
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< Updated upstream
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d106      	bne.n	8005b08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d106      	bne.n	8005b54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> Stashed changes
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< Updated upstream
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f7fc fa9a 	bl	800203c <HAL_TIM_Base_MspInit>
=======
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f7fc fa9a 	bl	8002088 <HAL_TIM_Base_MspInit>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< Updated upstream
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	3304      	adds	r3, #4
 8005b18:	4619      	mov	r1, r3
 8005b1a:	4610      	mov	r0, r2
 8005b1c:	f000 face 	bl	80060bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3708      	adds	r7, #8
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
	...

08005b8c <HAL_TIM_Base_Start_IT>:
=======
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2202      	movs	r2, #2
 8005b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	3304      	adds	r3, #4
 8005b64:	4619      	mov	r1, r3
 8005b66:	4610      	mov	r0, r2
 8005b68:	f000 face 	bl	8006108 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3708      	adds	r7, #8
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
	...

08005bd8 <HAL_TIM_Base_Start_IT>:
>>>>>>> Stashed changes
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8005b8c:	b480      	push	{r7}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
=======
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
<<<<<<< Updated upstream
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d001      	beq.n	8005ba4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e04f      	b.n	8005c44 <HAL_TIM_Base_Start_IT+0xb8>
=======
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d001      	beq.n	8005bf0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e04f      	b.n	8005c90 <HAL_TIM_Base_Start_IT+0xb8>
>>>>>>> Stashed changes
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< Updated upstream
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2202      	movs	r2, #2
 8005ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68da      	ldr	r2, [r3, #12]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f042 0201 	orr.w	r2, r2, #1
 8005bba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a23      	ldr	r2, [pc, #140]	@ (8005c50 <HAL_TIM_Base_Start_IT+0xc4>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d01d      	beq.n	8005c02 <HAL_TIM_Base_Start_IT+0x76>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bce:	d018      	beq.n	8005c02 <HAL_TIM_Base_Start_IT+0x76>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a1f      	ldr	r2, [pc, #124]	@ (8005c54 <HAL_TIM_Base_Start_IT+0xc8>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d013      	beq.n	8005c02 <HAL_TIM_Base_Start_IT+0x76>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a1e      	ldr	r2, [pc, #120]	@ (8005c58 <HAL_TIM_Base_Start_IT+0xcc>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d00e      	beq.n	8005c02 <HAL_TIM_Base_Start_IT+0x76>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a1c      	ldr	r2, [pc, #112]	@ (8005c5c <HAL_TIM_Base_Start_IT+0xd0>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d009      	beq.n	8005c02 <HAL_TIM_Base_Start_IT+0x76>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a1b      	ldr	r2, [pc, #108]	@ (8005c60 <HAL_TIM_Base_Start_IT+0xd4>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d004      	beq.n	8005c02 <HAL_TIM_Base_Start_IT+0x76>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a19      	ldr	r2, [pc, #100]	@ (8005c64 <HAL_TIM_Base_Start_IT+0xd8>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d115      	bne.n	8005c2e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	689a      	ldr	r2, [r3, #8]
 8005c08:	4b17      	ldr	r3, [pc, #92]	@ (8005c68 <HAL_TIM_Base_Start_IT+0xdc>)
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2b06      	cmp	r3, #6
 8005c12:	d015      	beq.n	8005c40 <HAL_TIM_Base_Start_IT+0xb4>
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c1a:	d011      	beq.n	8005c40 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f042 0201 	orr.w	r2, r2, #1
 8005c2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c2c:	e008      	b.n	8005c40 <HAL_TIM_Base_Start_IT+0xb4>
=======
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2202      	movs	r2, #2
 8005bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68da      	ldr	r2, [r3, #12]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f042 0201 	orr.w	r2, r2, #1
 8005c06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a23      	ldr	r2, [pc, #140]	@ (8005c9c <HAL_TIM_Base_Start_IT+0xc4>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d01d      	beq.n	8005c4e <HAL_TIM_Base_Start_IT+0x76>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c1a:	d018      	beq.n	8005c4e <HAL_TIM_Base_Start_IT+0x76>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a1f      	ldr	r2, [pc, #124]	@ (8005ca0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d013      	beq.n	8005c4e <HAL_TIM_Base_Start_IT+0x76>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a1e      	ldr	r2, [pc, #120]	@ (8005ca4 <HAL_TIM_Base_Start_IT+0xcc>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d00e      	beq.n	8005c4e <HAL_TIM_Base_Start_IT+0x76>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a1c      	ldr	r2, [pc, #112]	@ (8005ca8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d009      	beq.n	8005c4e <HAL_TIM_Base_Start_IT+0x76>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a1b      	ldr	r2, [pc, #108]	@ (8005cac <HAL_TIM_Base_Start_IT+0xd4>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d004      	beq.n	8005c4e <HAL_TIM_Base_Start_IT+0x76>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a19      	ldr	r2, [pc, #100]	@ (8005cb0 <HAL_TIM_Base_Start_IT+0xd8>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d115      	bne.n	8005c7a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	689a      	ldr	r2, [r3, #8]
 8005c54:	4b17      	ldr	r3, [pc, #92]	@ (8005cb4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005c56:	4013      	ands	r3, r2
 8005c58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2b06      	cmp	r3, #6
 8005c5e:	d015      	beq.n	8005c8c <HAL_TIM_Base_Start_IT+0xb4>
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c66:	d011      	beq.n	8005c8c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f042 0201 	orr.w	r2, r2, #1
 8005c76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c78:	e008      	b.n	8005c8c <HAL_TIM_Base_Start_IT+0xb4>
>>>>>>> Stashed changes
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< Updated upstream
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f042 0201 	orr.w	r2, r2, #1
 8005c3c:	601a      	str	r2, [r3, #0]
 8005c3e:	e000      	b.n	8005c42 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c40:	bf00      	nop
=======
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f042 0201 	orr.w	r2, r2, #1
 8005c88:	601a      	str	r2, [r3, #0]
 8005c8a:	e000      	b.n	8005c8e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c8c:	bf00      	nop
>>>>>>> Stashed changes
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< Updated upstream
 8005c42:	2300      	movs	r3, #0
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3714      	adds	r7, #20
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr
 8005c50:	40012c00 	.word	0x40012c00
 8005c54:	40000400 	.word	0x40000400
 8005c58:	40000800 	.word	0x40000800
 8005c5c:	40000c00 	.word	0x40000c00
 8005c60:	40013400 	.word	0x40013400
 8005c64:	40014000 	.word	0x40014000
 8005c68:	00010007 	.word	0x00010007

08005c6c <HAL_TIM_Base_Stop_IT>:
=======
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3714      	adds	r7, #20
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr
 8005c9c:	40012c00 	.word	0x40012c00
 8005ca0:	40000400 	.word	0x40000400
 8005ca4:	40000800 	.word	0x40000800
 8005ca8:	40000c00 	.word	0x40000c00
 8005cac:	40013400 	.word	0x40013400
 8005cb0:	40014000 	.word	0x40014000
 8005cb4:	00010007 	.word	0x00010007

08005cb8 <HAL_TIM_Base_Stop_IT>:
>>>>>>> Stashed changes
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
=======
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
<<<<<<< Updated upstream
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68da      	ldr	r2, [r3, #12]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f022 0201 	bic.w	r2, r2, #1
 8005c82:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	6a1a      	ldr	r2, [r3, #32]
 8005c8a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005c8e:	4013      	ands	r3, r2
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d10f      	bne.n	8005cb4 <HAL_TIM_Base_Stop_IT+0x48>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	6a1a      	ldr	r2, [r3, #32]
 8005c9a:	f240 4344 	movw	r3, #1092	@ 0x444
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d107      	bne.n	8005cb4 <HAL_TIM_Base_Stop_IT+0x48>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f022 0201 	bic.w	r2, r2, #1
 8005cb2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	370c      	adds	r7, #12
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr

08005cca <HAL_TIM_IRQHandler>:
=======
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68da      	ldr	r2, [r3, #12]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f022 0201 	bic.w	r2, r2, #1
 8005cce:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	6a1a      	ldr	r2, [r3, #32]
 8005cd6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005cda:	4013      	ands	r3, r2
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d10f      	bne.n	8005d00 <HAL_TIM_Base_Stop_IT+0x48>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	6a1a      	ldr	r2, [r3, #32]
 8005ce6:	f240 4344 	movw	r3, #1092	@ 0x444
 8005cea:	4013      	ands	r3, r2
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d107      	bne.n	8005d00 <HAL_TIM_Base_Stop_IT+0x48>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f022 0201 	bic.w	r2, r2, #1
 8005cfe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	370c      	adds	r7, #12
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr

08005d16 <HAL_TIM_IRQHandler>:
>>>>>>> Stashed changes
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8005cca:	b580      	push	{r7, lr}
 8005ccc:	b084      	sub	sp, #16
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	f003 0302 	and.w	r3, r3, #2
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d020      	beq.n	8005d2e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f003 0302 	and.w	r3, r3, #2
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d01b      	beq.n	8005d2e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f06f 0202 	mvn.w	r2, #2
 8005cfe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	699b      	ldr	r3, [r3, #24]
 8005d0c:	f003 0303 	and.w	r3, r3, #3
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d003      	beq.n	8005d1c <HAL_TIM_IRQHandler+0x52>
=======
 8005d16:	b580      	push	{r7, lr}
 8005d18:	b084      	sub	sp, #16
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	f003 0302 	and.w	r3, r3, #2
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d020      	beq.n	8005d7a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f003 0302 	and.w	r3, r3, #2
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d01b      	beq.n	8005d7a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f06f 0202 	mvn.w	r2, #2
 8005d4a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	699b      	ldr	r3, [r3, #24]
 8005d58:	f003 0303 	and.w	r3, r3, #3
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d003      	beq.n	8005d68 <HAL_TIM_IRQHandler+0x52>
>>>>>>> Stashed changes
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< Updated upstream
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 f9b2 	bl	800607e <HAL_TIM_IC_CaptureCallback>
 8005d1a:	e005      	b.n	8005d28 <HAL_TIM_IRQHandler+0x5e>
=======
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f000 f9b2 	bl	80060ca <HAL_TIM_IC_CaptureCallback>
 8005d66:	e005      	b.n	8005d74 <HAL_TIM_IRQHandler+0x5e>
>>>>>>> Stashed changes
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 f9a4 	bl	800606a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 f9b5 	bl	8006092 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	771a      	strb	r2, [r3, #28]
=======
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 f9a4 	bl	80060b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 f9b5 	bl	80060de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
<<<<<<< Updated upstream
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	f003 0304 	and.w	r3, r3, #4
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d020      	beq.n	8005d7a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f003 0304 	and.w	r3, r3, #4
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d01b      	beq.n	8005d7a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f06f 0204 	mvn.w	r2, #4
 8005d4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2202      	movs	r2, #2
 8005d50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	699b      	ldr	r3, [r3, #24]
 8005d58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d003      	beq.n	8005d68 <HAL_TIM_IRQHandler+0x9e>
=======
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	f003 0304 	and.w	r3, r3, #4
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d020      	beq.n	8005dc6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f003 0304 	and.w	r3, r3, #4
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d01b      	beq.n	8005dc6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f06f 0204 	mvn.w	r2, #4
 8005d96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2202      	movs	r2, #2
 8005d9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	699b      	ldr	r3, [r3, #24]
 8005da4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d003      	beq.n	8005db4 <HAL_TIM_IRQHandler+0x9e>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< Updated upstream
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f000 f98c 	bl	800607e <HAL_TIM_IC_CaptureCallback>
 8005d66:	e005      	b.n	8005d74 <HAL_TIM_IRQHandler+0xaa>
=======
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 f98c 	bl	80060ca <HAL_TIM_IC_CaptureCallback>
 8005db2:	e005      	b.n	8005dc0 <HAL_TIM_IRQHandler+0xaa>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 f97e 	bl	800606a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 f98f 	bl	8006092 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	771a      	strb	r2, [r3, #28]
=======
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 f97e 	bl	80060b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 f98f 	bl	80060de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
<<<<<<< Updated upstream
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	f003 0308 	and.w	r3, r3, #8
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d020      	beq.n	8005dc6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f003 0308 	and.w	r3, r3, #8
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d01b      	beq.n	8005dc6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f06f 0208 	mvn.w	r2, #8
 8005d96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2204      	movs	r2, #4
 8005d9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	69db      	ldr	r3, [r3, #28]
 8005da4:	f003 0303 	and.w	r3, r3, #3
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d003      	beq.n	8005db4 <HAL_TIM_IRQHandler+0xea>
=======
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	f003 0308 	and.w	r3, r3, #8
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d020      	beq.n	8005e12 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f003 0308 	and.w	r3, r3, #8
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d01b      	beq.n	8005e12 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f06f 0208 	mvn.w	r2, #8
 8005de2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2204      	movs	r2, #4
 8005de8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	69db      	ldr	r3, [r3, #28]
 8005df0:	f003 0303 	and.w	r3, r3, #3
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d003      	beq.n	8005e00 <HAL_TIM_IRQHandler+0xea>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< Updated upstream
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 f966 	bl	800607e <HAL_TIM_IC_CaptureCallback>
 8005db2:	e005      	b.n	8005dc0 <HAL_TIM_IRQHandler+0xf6>
=======
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f000 f966 	bl	80060ca <HAL_TIM_IC_CaptureCallback>
 8005dfe:	e005      	b.n	8005e0c <HAL_TIM_IRQHandler+0xf6>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 f958 	bl	800606a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 f969 	bl	8006092 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	771a      	strb	r2, [r3, #28]
=======
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f000 f958 	bl	80060b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 f969 	bl	80060de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
<<<<<<< Updated upstream
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	f003 0310 	and.w	r3, r3, #16
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d020      	beq.n	8005e12 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f003 0310 	and.w	r3, r3, #16
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d01b      	beq.n	8005e12 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f06f 0210 	mvn.w	r2, #16
 8005de2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2208      	movs	r2, #8
 8005de8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	69db      	ldr	r3, [r3, #28]
 8005df0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d003      	beq.n	8005e00 <HAL_TIM_IRQHandler+0x136>
=======
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	f003 0310 	and.w	r3, r3, #16
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d020      	beq.n	8005e5e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f003 0310 	and.w	r3, r3, #16
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d01b      	beq.n	8005e5e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f06f 0210 	mvn.w	r2, #16
 8005e2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2208      	movs	r2, #8
 8005e34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	69db      	ldr	r3, [r3, #28]
 8005e3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d003      	beq.n	8005e4c <HAL_TIM_IRQHandler+0x136>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< Updated upstream
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f000 f940 	bl	800607e <HAL_TIM_IC_CaptureCallback>
 8005dfe:	e005      	b.n	8005e0c <HAL_TIM_IRQHandler+0x142>
=======
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 f940 	bl	80060ca <HAL_TIM_IC_CaptureCallback>
 8005e4a:	e005      	b.n	8005e58 <HAL_TIM_IRQHandler+0x142>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f000 f932 	bl	800606a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 f943 	bl	8006092 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	771a      	strb	r2, [r3, #28]
=======
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 f932 	bl	80060b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 f943 	bl	80060de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
<<<<<<< Updated upstream
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	f003 0301 	and.w	r3, r3, #1
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00c      	beq.n	8005e36 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f003 0301 	and.w	r3, r3, #1
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d007      	beq.n	8005e36 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f06f 0201 	mvn.w	r2, #1
 8005e2e:	611a      	str	r2, [r3, #16]
=======
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	f003 0301 	and.w	r3, r3, #1
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d00c      	beq.n	8005e82 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f003 0301 	and.w	r3, r3, #1
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d007      	beq.n	8005e82 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f06f 0201 	mvn.w	r2, #1
 8005e7a:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
<<<<<<< Updated upstream
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f7fb fdbf 	bl	80019b4 <HAL_TIM_PeriodElapsedCallback>
=======
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f7fb fdbf 	bl	8001a00 <HAL_TIM_PeriodElapsedCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
<<<<<<< Updated upstream
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d104      	bne.n	8005e4a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00c      	beq.n	8005e64 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d007      	beq.n	8005e64 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005e5c:	611a      	str	r2, [r3, #16]
=======
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d104      	bne.n	8005e96 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d00c      	beq.n	8005eb0 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d007      	beq.n	8005eb0 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005ea8:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
<<<<<<< Updated upstream
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 fafe 	bl	8006460 <HAL_TIMEx_BreakCallback>
=======
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 fafe 	bl	80064ac <HAL_TIMEx_BreakCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
<<<<<<< Updated upstream
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00c      	beq.n	8005e88 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d007      	beq.n	8005e88 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005e80:	611a      	str	r2, [r3, #16]
=======
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d00c      	beq.n	8005ed4 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d007      	beq.n	8005ed4 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005ecc:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
<<<<<<< Updated upstream
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 faf6 	bl	8006474 <HAL_TIMEx_Break2Callback>
=======
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 faf6 	bl	80064c0 <HAL_TIMEx_Break2Callback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
<<<<<<< Updated upstream
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d00c      	beq.n	8005eac <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d007      	beq.n	8005eac <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005ea4:	611a      	str	r2, [r3, #16]
=======
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00c      	beq.n	8005ef8 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d007      	beq.n	8005ef8 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005ef0:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
<<<<<<< Updated upstream
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 f8fd 	bl	80060a6 <HAL_TIM_TriggerCallback>
=======
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 f8fd 	bl	80060f2 <HAL_TIM_TriggerCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
<<<<<<< Updated upstream
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	f003 0320 	and.w	r3, r3, #32
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00c      	beq.n	8005ed0 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f003 0320 	and.w	r3, r3, #32
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d007      	beq.n	8005ed0 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f06f 0220 	mvn.w	r2, #32
 8005ec8:	611a      	str	r2, [r3, #16]
=======
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	f003 0320 	and.w	r3, r3, #32
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00c      	beq.n	8005f1c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f003 0320 	and.w	r3, r3, #32
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d007      	beq.n	8005f1c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f06f 0220 	mvn.w	r2, #32
 8005f14:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
<<<<<<< Updated upstream
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 fabe 	bl	800644c <HAL_TIMEx_CommutCallback>
=======
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 fabe 	bl	8006498 <HAL_TIMEx_CommutCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< Updated upstream
 8005ed0:	bf00      	nop
 8005ed2:	3710      	adds	r7, #16
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <HAL_TIM_ConfigClockSource>:
=======
 8005f1c:	bf00      	nop
 8005f1e:	3710      	adds	r7, #16
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <HAL_TIM_ConfigClockSource>:
>>>>>>> Stashed changes
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
<<<<<<< Updated upstream
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	73fb      	strb	r3, [r7, #15]
=======
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	73fb      	strb	r3, [r7, #15]
>>>>>>> Stashed changes
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< Updated upstream
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d101      	bne.n	8005ef4 <HAL_TIM_ConfigClockSource+0x1c>
 8005ef0:	2302      	movs	r3, #2
 8005ef2:	e0b6      	b.n	8006062 <HAL_TIM_ConfigClockSource+0x18a>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2202      	movs	r2, #2
 8005f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
=======
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d101      	bne.n	8005f40 <HAL_TIM_ConfigClockSource+0x1c>
 8005f3c:	2302      	movs	r3, #2
 8005f3e:	e0b6      	b.n	80060ae <HAL_TIM_ConfigClockSource+0x18a>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
<<<<<<< Updated upstream
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f12:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005f16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68ba      	ldr	r2, [r7, #8]
 8005f26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f30:	d03e      	beq.n	8005fb0 <HAL_TIM_ConfigClockSource+0xd8>
 8005f32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f36:	f200 8087 	bhi.w	8006048 <HAL_TIM_ConfigClockSource+0x170>
 8005f3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f3e:	f000 8086 	beq.w	800604e <HAL_TIM_ConfigClockSource+0x176>
 8005f42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f46:	d87f      	bhi.n	8006048 <HAL_TIM_ConfigClockSource+0x170>
 8005f48:	2b70      	cmp	r3, #112	@ 0x70
 8005f4a:	d01a      	beq.n	8005f82 <HAL_TIM_ConfigClockSource+0xaa>
 8005f4c:	2b70      	cmp	r3, #112	@ 0x70
 8005f4e:	d87b      	bhi.n	8006048 <HAL_TIM_ConfigClockSource+0x170>
 8005f50:	2b60      	cmp	r3, #96	@ 0x60
 8005f52:	d050      	beq.n	8005ff6 <HAL_TIM_ConfigClockSource+0x11e>
 8005f54:	2b60      	cmp	r3, #96	@ 0x60
 8005f56:	d877      	bhi.n	8006048 <HAL_TIM_ConfigClockSource+0x170>
 8005f58:	2b50      	cmp	r3, #80	@ 0x50
 8005f5a:	d03c      	beq.n	8005fd6 <HAL_TIM_ConfigClockSource+0xfe>
 8005f5c:	2b50      	cmp	r3, #80	@ 0x50
 8005f5e:	d873      	bhi.n	8006048 <HAL_TIM_ConfigClockSource+0x170>
 8005f60:	2b40      	cmp	r3, #64	@ 0x40
 8005f62:	d058      	beq.n	8006016 <HAL_TIM_ConfigClockSource+0x13e>
 8005f64:	2b40      	cmp	r3, #64	@ 0x40
 8005f66:	d86f      	bhi.n	8006048 <HAL_TIM_ConfigClockSource+0x170>
 8005f68:	2b30      	cmp	r3, #48	@ 0x30
 8005f6a:	d064      	beq.n	8006036 <HAL_TIM_ConfigClockSource+0x15e>
 8005f6c:	2b30      	cmp	r3, #48	@ 0x30
 8005f6e:	d86b      	bhi.n	8006048 <HAL_TIM_ConfigClockSource+0x170>
 8005f70:	2b20      	cmp	r3, #32
 8005f72:	d060      	beq.n	8006036 <HAL_TIM_ConfigClockSource+0x15e>
 8005f74:	2b20      	cmp	r3, #32
 8005f76:	d867      	bhi.n	8006048 <HAL_TIM_ConfigClockSource+0x170>
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d05c      	beq.n	8006036 <HAL_TIM_ConfigClockSource+0x15e>
 8005f7c:	2b10      	cmp	r3, #16
 8005f7e:	d05a      	beq.n	8006036 <HAL_TIM_ConfigClockSource+0x15e>
 8005f80:	e062      	b.n	8006048 <HAL_TIM_ConfigClockSource+0x170>
=======
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f5e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005f62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68ba      	ldr	r2, [r7, #8]
 8005f72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f7c:	d03e      	beq.n	8005ffc <HAL_TIM_ConfigClockSource+0xd8>
 8005f7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f82:	f200 8087 	bhi.w	8006094 <HAL_TIM_ConfigClockSource+0x170>
 8005f86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f8a:	f000 8086 	beq.w	800609a <HAL_TIM_ConfigClockSource+0x176>
 8005f8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f92:	d87f      	bhi.n	8006094 <HAL_TIM_ConfigClockSource+0x170>
 8005f94:	2b70      	cmp	r3, #112	@ 0x70
 8005f96:	d01a      	beq.n	8005fce <HAL_TIM_ConfigClockSource+0xaa>
 8005f98:	2b70      	cmp	r3, #112	@ 0x70
 8005f9a:	d87b      	bhi.n	8006094 <HAL_TIM_ConfigClockSource+0x170>
 8005f9c:	2b60      	cmp	r3, #96	@ 0x60
 8005f9e:	d050      	beq.n	8006042 <HAL_TIM_ConfigClockSource+0x11e>
 8005fa0:	2b60      	cmp	r3, #96	@ 0x60
 8005fa2:	d877      	bhi.n	8006094 <HAL_TIM_ConfigClockSource+0x170>
 8005fa4:	2b50      	cmp	r3, #80	@ 0x50
 8005fa6:	d03c      	beq.n	8006022 <HAL_TIM_ConfigClockSource+0xfe>
 8005fa8:	2b50      	cmp	r3, #80	@ 0x50
 8005faa:	d873      	bhi.n	8006094 <HAL_TIM_ConfigClockSource+0x170>
 8005fac:	2b40      	cmp	r3, #64	@ 0x40
 8005fae:	d058      	beq.n	8006062 <HAL_TIM_ConfigClockSource+0x13e>
 8005fb0:	2b40      	cmp	r3, #64	@ 0x40
 8005fb2:	d86f      	bhi.n	8006094 <HAL_TIM_ConfigClockSource+0x170>
 8005fb4:	2b30      	cmp	r3, #48	@ 0x30
 8005fb6:	d064      	beq.n	8006082 <HAL_TIM_ConfigClockSource+0x15e>
 8005fb8:	2b30      	cmp	r3, #48	@ 0x30
 8005fba:	d86b      	bhi.n	8006094 <HAL_TIM_ConfigClockSource+0x170>
 8005fbc:	2b20      	cmp	r3, #32
 8005fbe:	d060      	beq.n	8006082 <HAL_TIM_ConfigClockSource+0x15e>
 8005fc0:	2b20      	cmp	r3, #32
 8005fc2:	d867      	bhi.n	8006094 <HAL_TIM_ConfigClockSource+0x170>
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d05c      	beq.n	8006082 <HAL_TIM_ConfigClockSource+0x15e>
 8005fc8:	2b10      	cmp	r3, #16
 8005fca:	d05a      	beq.n	8006082 <HAL_TIM_ConfigClockSource+0x15e>
 8005fcc:	e062      	b.n	8006094 <HAL_TIM_ConfigClockSource+0x170>
>>>>>>> Stashed changes
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
<<<<<<< Updated upstream
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f92:	f000 f9b3 	bl	80062fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005fa4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68ba      	ldr	r2, [r7, #8]
 8005fac:	609a      	str	r2, [r3, #8]
      break;
 8005fae:	e04f      	b.n	8006050 <HAL_TIM_ConfigClockSource+0x178>
=======
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fde:	f000 f9b3 	bl	8006348 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005ff0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68ba      	ldr	r2, [r7, #8]
 8005ff8:	609a      	str	r2, [r3, #8]
      break;
 8005ffa:	e04f      	b.n	800609c <HAL_TIM_ConfigClockSource+0x178>
>>>>>>> Stashed changes
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
<<<<<<< Updated upstream
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fc0:	f000 f99c 	bl	80062fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	689a      	ldr	r2, [r3, #8]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005fd2:	609a      	str	r2, [r3, #8]
      break;
 8005fd4:	e03c      	b.n	8006050 <HAL_TIM_ConfigClockSource+0x178>
=======
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800600c:	f000 f99c 	bl	8006348 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	689a      	ldr	r2, [r3, #8]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800601e:	609a      	str	r2, [r3, #8]
      break;
 8006020:	e03c      	b.n	800609c <HAL_TIM_ConfigClockSource+0x178>
>>>>>>> Stashed changes

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
<<<<<<< Updated upstream
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6818      	ldr	r0, [r3, #0]
=======
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800602e:	461a      	mov	r2, r3
 8006030:	f000 f910 	bl	8006254 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2150      	movs	r1, #80	@ 0x50
 800603a:	4618      	mov	r0, r3
 800603c:	f000 f969 	bl	8006312 <TIM_ITRx_SetConfig>
      break;
 8006040:	e02c      	b.n	800609c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6818      	ldr	r0, [r3, #0]
>>>>>>> Stashed changes
                               sClockSourceConfig->ClockPolarity,
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
<<<<<<< Updated upstream
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	f000 f910 	bl	8006208 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2150      	movs	r1, #80	@ 0x50
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f000 f969 	bl	80062c6 <TIM_ITRx_SetConfig>
      break;
 8005ff4:	e02c      	b.n	8006050 <HAL_TIM_ConfigClockSource+0x178>
=======
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800604e:	461a      	mov	r2, r3
 8006050:	f000 f92f 	bl	80062b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2160      	movs	r1, #96	@ 0x60
 800605a:	4618      	mov	r0, r3
 800605c:	f000 f959 	bl	8006312 <TIM_ITRx_SetConfig>
      break;
 8006060:	e01c      	b.n	800609c <HAL_TIM_ConfigClockSource+0x178>
>>>>>>> Stashed changes

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

<<<<<<< Updated upstream
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6818      	ldr	r0, [r3, #0]
=======
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6818      	ldr	r0, [r3, #0]
>>>>>>> Stashed changes
                               sClockSourceConfig->ClockPolarity,
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
<<<<<<< Updated upstream
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006002:	461a      	mov	r2, r3
 8006004:	f000 f92f 	bl	8006266 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2160      	movs	r1, #96	@ 0x60
 800600e:	4618      	mov	r0, r3
 8006010:	f000 f959 	bl	80062c6 <TIM_ITRx_SetConfig>
      break;
 8006014:	e01c      	b.n	8006050 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006022:	461a      	mov	r2, r3
 8006024:	f000 f8f0 	bl	8006208 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2140      	movs	r1, #64	@ 0x40
 800602e:	4618      	mov	r0, r3
 8006030:	f000 f949 	bl	80062c6 <TIM_ITRx_SetConfig>
      break;
 8006034:	e00c      	b.n	8006050 <HAL_TIM_ConfigClockSource+0x178>
=======
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800606e:	461a      	mov	r2, r3
 8006070:	f000 f8f0 	bl	8006254 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2140      	movs	r1, #64	@ 0x40
 800607a:	4618      	mov	r0, r3
 800607c:	f000 f949 	bl	8006312 <TIM_ITRx_SetConfig>
      break;
 8006080:	e00c      	b.n	800609c <HAL_TIM_ConfigClockSource+0x178>
>>>>>>> Stashed changes
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
<<<<<<< Updated upstream
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4619      	mov	r1, r3
 8006040:	4610      	mov	r0, r2
 8006042:	f000 f940 	bl	80062c6 <TIM_ITRx_SetConfig>
      break;
 8006046:	e003      	b.n	8006050 <HAL_TIM_ConfigClockSource+0x178>
=======
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4619      	mov	r1, r3
 800608c:	4610      	mov	r0, r2
 800608e:	f000 f940 	bl	8006312 <TIM_ITRx_SetConfig>
      break;
 8006092:	e003      	b.n	800609c <HAL_TIM_ConfigClockSource+0x178>
>>>>>>> Stashed changes
    }

    default:
      status = HAL_ERROR;
<<<<<<< Updated upstream
 8006048:	2301      	movs	r3, #1
 800604a:	73fb      	strb	r3, [r7, #15]
      break;
 800604c:	e000      	b.n	8006050 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800604e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006060:	7bfb      	ldrb	r3, [r7, #15]
}
 8006062:	4618      	mov	r0, r3
 8006064:	3710      	adds	r7, #16
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}

0800606a <HAL_TIM_OC_DelayElapsedCallback>:
=======
 8006094:	2301      	movs	r3, #1
 8006096:	73fb      	strb	r3, [r7, #15]
      break;
 8006098:	e000      	b.n	800609c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800609a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80060ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3710      	adds	r7, #16
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> Stashed changes
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 800606a:	b480      	push	{r7}
 800606c:	b083      	sub	sp, #12
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
=======
 80060b6:	b480      	push	{r7}
 80060b8:	b083      	sub	sp, #12
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8006072:	bf00      	nop
 8006074:	370c      	adds	r7, #12
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr

0800607e <HAL_TIM_IC_CaptureCallback>:
=======
 80060be:	bf00      	nop
 80060c0:	370c      	adds	r7, #12
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr

080060ca <HAL_TIM_IC_CaptureCallback>:
>>>>>>> Stashed changes
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 800607e:	b480      	push	{r7}
 8006080:	b083      	sub	sp, #12
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
=======
 80060ca:	b480      	push	{r7}
 80060cc:	b083      	sub	sp, #12
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8006086:	bf00      	nop
 8006088:	370c      	adds	r7, #12
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr

08006092 <HAL_TIM_PWM_PulseFinishedCallback>:
=======
 80060d2:	bf00      	nop
 80060d4:	370c      	adds	r7, #12
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr

080060de <HAL_TIM_PWM_PulseFinishedCallback>:
>>>>>>> Stashed changes
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8006092:	b480      	push	{r7}
 8006094:	b083      	sub	sp, #12
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
=======
 80060de:	b480      	push	{r7}
 80060e0:	b083      	sub	sp, #12
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 800609a:	bf00      	nop
 800609c:	370c      	adds	r7, #12
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr

080060a6 <HAL_TIM_TriggerCallback>:
=======
 80060e6:	bf00      	nop
 80060e8:	370c      	adds	r7, #12
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr

080060f2 <HAL_TIM_TriggerCallback>:
>>>>>>> Stashed changes
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 80060a6:	b480      	push	{r7}
 80060a8:	b083      	sub	sp, #12
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
=======
 80060f2:	b480      	push	{r7}
 80060f4:	b083      	sub	sp, #12
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 80060ae:	bf00      	nop
 80060b0:	370c      	adds	r7, #12
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
	...

080060bc <TIM_Base_SetConfig>:
=======
 80060fa:	bf00      	nop
 80060fc:	370c      	adds	r7, #12
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
	...

08006108 <TIM_Base_SetConfig>:
>>>>>>> Stashed changes
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
<<<<<<< Updated upstream
 80060bc:	b480      	push	{r7}
 80060be:	b085      	sub	sp, #20
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4a46      	ldr	r2, [pc, #280]	@ (80061e8 <TIM_Base_SetConfig+0x12c>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d013      	beq.n	80060fc <TIM_Base_SetConfig+0x40>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060da:	d00f      	beq.n	80060fc <TIM_Base_SetConfig+0x40>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a43      	ldr	r2, [pc, #268]	@ (80061ec <TIM_Base_SetConfig+0x130>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d00b      	beq.n	80060fc <TIM_Base_SetConfig+0x40>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a42      	ldr	r2, [pc, #264]	@ (80061f0 <TIM_Base_SetConfig+0x134>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d007      	beq.n	80060fc <TIM_Base_SetConfig+0x40>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a41      	ldr	r2, [pc, #260]	@ (80061f4 <TIM_Base_SetConfig+0x138>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d003      	beq.n	80060fc <TIM_Base_SetConfig+0x40>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a40      	ldr	r2, [pc, #256]	@ (80061f8 <TIM_Base_SetConfig+0x13c>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d108      	bne.n	800610e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006102:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	4313      	orrs	r3, r2
 800610c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4a35      	ldr	r2, [pc, #212]	@ (80061e8 <TIM_Base_SetConfig+0x12c>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d01f      	beq.n	8006156 <TIM_Base_SetConfig+0x9a>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800611c:	d01b      	beq.n	8006156 <TIM_Base_SetConfig+0x9a>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a32      	ldr	r2, [pc, #200]	@ (80061ec <TIM_Base_SetConfig+0x130>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d017      	beq.n	8006156 <TIM_Base_SetConfig+0x9a>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a31      	ldr	r2, [pc, #196]	@ (80061f0 <TIM_Base_SetConfig+0x134>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d013      	beq.n	8006156 <TIM_Base_SetConfig+0x9a>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a30      	ldr	r2, [pc, #192]	@ (80061f4 <TIM_Base_SetConfig+0x138>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d00f      	beq.n	8006156 <TIM_Base_SetConfig+0x9a>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a2f      	ldr	r2, [pc, #188]	@ (80061f8 <TIM_Base_SetConfig+0x13c>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d00b      	beq.n	8006156 <TIM_Base_SetConfig+0x9a>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a2e      	ldr	r2, [pc, #184]	@ (80061fc <TIM_Base_SetConfig+0x140>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d007      	beq.n	8006156 <TIM_Base_SetConfig+0x9a>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a2d      	ldr	r2, [pc, #180]	@ (8006200 <TIM_Base_SetConfig+0x144>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d003      	beq.n	8006156 <TIM_Base_SetConfig+0x9a>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a2c      	ldr	r2, [pc, #176]	@ (8006204 <TIM_Base_SetConfig+0x148>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d108      	bne.n	8006168 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800615c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	4313      	orrs	r3, r2
 8006166:	60fb      	str	r3, [r7, #12]
=======
 8006108:	b480      	push	{r7}
 800610a:	b085      	sub	sp, #20
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4a46      	ldr	r2, [pc, #280]	@ (8006234 <TIM_Base_SetConfig+0x12c>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d013      	beq.n	8006148 <TIM_Base_SetConfig+0x40>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006126:	d00f      	beq.n	8006148 <TIM_Base_SetConfig+0x40>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4a43      	ldr	r2, [pc, #268]	@ (8006238 <TIM_Base_SetConfig+0x130>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d00b      	beq.n	8006148 <TIM_Base_SetConfig+0x40>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4a42      	ldr	r2, [pc, #264]	@ (800623c <TIM_Base_SetConfig+0x134>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d007      	beq.n	8006148 <TIM_Base_SetConfig+0x40>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4a41      	ldr	r2, [pc, #260]	@ (8006240 <TIM_Base_SetConfig+0x138>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d003      	beq.n	8006148 <TIM_Base_SetConfig+0x40>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4a40      	ldr	r2, [pc, #256]	@ (8006244 <TIM_Base_SetConfig+0x13c>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d108      	bne.n	800615a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800614e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	4313      	orrs	r3, r2
 8006158:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a35      	ldr	r2, [pc, #212]	@ (8006234 <TIM_Base_SetConfig+0x12c>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d01f      	beq.n	80061a2 <TIM_Base_SetConfig+0x9a>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006168:	d01b      	beq.n	80061a2 <TIM_Base_SetConfig+0x9a>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a32      	ldr	r2, [pc, #200]	@ (8006238 <TIM_Base_SetConfig+0x130>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d017      	beq.n	80061a2 <TIM_Base_SetConfig+0x9a>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a31      	ldr	r2, [pc, #196]	@ (800623c <TIM_Base_SetConfig+0x134>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d013      	beq.n	80061a2 <TIM_Base_SetConfig+0x9a>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4a30      	ldr	r2, [pc, #192]	@ (8006240 <TIM_Base_SetConfig+0x138>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d00f      	beq.n	80061a2 <TIM_Base_SetConfig+0x9a>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a2f      	ldr	r2, [pc, #188]	@ (8006244 <TIM_Base_SetConfig+0x13c>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d00b      	beq.n	80061a2 <TIM_Base_SetConfig+0x9a>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a2e      	ldr	r2, [pc, #184]	@ (8006248 <TIM_Base_SetConfig+0x140>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d007      	beq.n	80061a2 <TIM_Base_SetConfig+0x9a>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a2d      	ldr	r2, [pc, #180]	@ (800624c <TIM_Base_SetConfig+0x144>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d003      	beq.n	80061a2 <TIM_Base_SetConfig+0x9a>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a2c      	ldr	r2, [pc, #176]	@ (8006250 <TIM_Base_SetConfig+0x148>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d108      	bne.n	80061b4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< Updated upstream
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	695b      	ldr	r3, [r3, #20]
 8006172:	4313      	orrs	r3, r2
 8006174:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	689a      	ldr	r2, [r3, #8]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	4a16      	ldr	r2, [pc, #88]	@ (80061e8 <TIM_Base_SetConfig+0x12c>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d00f      	beq.n	80061b4 <TIM_Base_SetConfig+0xf8>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4a18      	ldr	r2, [pc, #96]	@ (80061f8 <TIM_Base_SetConfig+0x13c>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d00b      	beq.n	80061b4 <TIM_Base_SetConfig+0xf8>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4a17      	ldr	r2, [pc, #92]	@ (80061fc <TIM_Base_SetConfig+0x140>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d007      	beq.n	80061b4 <TIM_Base_SetConfig+0xf8>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4a16      	ldr	r2, [pc, #88]	@ (8006200 <TIM_Base_SetConfig+0x144>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d003      	beq.n	80061b4 <TIM_Base_SetConfig+0xf8>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4a15      	ldr	r2, [pc, #84]	@ (8006204 <TIM_Base_SetConfig+0x148>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d103      	bne.n	80061bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	691a      	ldr	r2, [r3, #16]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	631a      	str	r2, [r3, #48]	@ 0x30
=======
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	695b      	ldr	r3, [r3, #20]
 80061be:	4313      	orrs	r3, r2
 80061c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	689a      	ldr	r2, [r3, #8]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a16      	ldr	r2, [pc, #88]	@ (8006234 <TIM_Base_SetConfig+0x12c>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d00f      	beq.n	8006200 <TIM_Base_SetConfig+0xf8>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4a18      	ldr	r2, [pc, #96]	@ (8006244 <TIM_Base_SetConfig+0x13c>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d00b      	beq.n	8006200 <TIM_Base_SetConfig+0xf8>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	4a17      	ldr	r2, [pc, #92]	@ (8006248 <TIM_Base_SetConfig+0x140>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d007      	beq.n	8006200 <TIM_Base_SetConfig+0xf8>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4a16      	ldr	r2, [pc, #88]	@ (800624c <TIM_Base_SetConfig+0x144>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d003      	beq.n	8006200 <TIM_Base_SetConfig+0xf8>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a15      	ldr	r2, [pc, #84]	@ (8006250 <TIM_Base_SetConfig+0x148>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d103      	bne.n	8006208 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	691a      	ldr	r2, [r3, #16]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	631a      	str	r2, [r3, #48]	@ 0x30
>>>>>>> Stashed changes
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< Updated upstream
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	f003 0301 	and.w	r3, r3, #1
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d105      	bne.n	80061da <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	f023 0201 	bic.w	r2, r3, #1
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	611a      	str	r2, [r3, #16]
  }
}
 80061da:	bf00      	nop
 80061dc:	3714      	adds	r7, #20
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr
 80061e6:	bf00      	nop
 80061e8:	40012c00 	.word	0x40012c00
 80061ec:	40000400 	.word	0x40000400
 80061f0:	40000800 	.word	0x40000800
 80061f4:	40000c00 	.word	0x40000c00
 80061f8:	40013400 	.word	0x40013400
 80061fc:	40014000 	.word	0x40014000
 8006200:	40014400 	.word	0x40014400
 8006204:	40014800 	.word	0x40014800

08006208 <TIM_TI1_ConfigInputStage>:
=======
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	f003 0301 	and.w	r3, r3, #1
 8006216:	2b01      	cmp	r3, #1
 8006218:	d105      	bne.n	8006226 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	f023 0201 	bic.w	r2, r3, #1
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	611a      	str	r2, [r3, #16]
  }
}
 8006226:	bf00      	nop
 8006228:	3714      	adds	r7, #20
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	40012c00 	.word	0x40012c00
 8006238:	40000400 	.word	0x40000400
 800623c:	40000800 	.word	0x40000800
 8006240:	40000c00 	.word	0x40000c00
 8006244:	40013400 	.word	0x40013400
 8006248:	40014000 	.word	0x40014000
 800624c:	40014400 	.word	0x40014400
 8006250:	40014800 	.word	0x40014800

08006254 <TIM_TI1_ConfigInputStage>:
>>>>>>> Stashed changes
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< Updated upstream
 8006208:	b480      	push	{r7}
 800620a:	b087      	sub	sp, #28
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
=======
 8006254:	b480      	push	{r7}
 8006256:	b087      	sub	sp, #28
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< Updated upstream
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6a1b      	ldr	r3, [r3, #32]
 8006218:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6a1b      	ldr	r3, [r3, #32]
 800621e:	f023 0201 	bic.w	r2, r3, #1
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	699b      	ldr	r3, [r3, #24]
 800622a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006232:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	011b      	lsls	r3, r3, #4
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	4313      	orrs	r3, r2
 800623c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	f023 030a 	bic.w	r3, r3, #10
 8006244:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006246:	697a      	ldr	r2, [r7, #20]
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	4313      	orrs	r3, r2
 800624c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	693a      	ldr	r2, [r7, #16]
 8006252:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	697a      	ldr	r2, [r7, #20]
 8006258:	621a      	str	r2, [r3, #32]
}
 800625a:	bf00      	nop
 800625c:	371c      	adds	r7, #28
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr

08006266 <TIM_TI2_ConfigInputStage>:
=======
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6a1b      	ldr	r3, [r3, #32]
 8006264:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6a1b      	ldr	r3, [r3, #32]
 800626a:	f023 0201 	bic.w	r2, r3, #1
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	699b      	ldr	r3, [r3, #24]
 8006276:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800627e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	011b      	lsls	r3, r3, #4
 8006284:	693a      	ldr	r2, [r7, #16]
 8006286:	4313      	orrs	r3, r2
 8006288:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	f023 030a 	bic.w	r3, r3, #10
 8006290:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006292:	697a      	ldr	r2, [r7, #20]
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	4313      	orrs	r3, r2
 8006298:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	693a      	ldr	r2, [r7, #16]
 800629e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	697a      	ldr	r2, [r7, #20]
 80062a4:	621a      	str	r2, [r3, #32]
}
 80062a6:	bf00      	nop
 80062a8:	371c      	adds	r7, #28
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr

080062b2 <TIM_TI2_ConfigInputStage>:
>>>>>>> Stashed changes
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< Updated upstream
 8006266:	b480      	push	{r7}
 8006268:	b087      	sub	sp, #28
 800626a:	af00      	add	r7, sp, #0
 800626c:	60f8      	str	r0, [r7, #12]
 800626e:	60b9      	str	r1, [r7, #8]
 8006270:	607a      	str	r2, [r7, #4]
=======
 80062b2:	b480      	push	{r7}
 80062b4:	b087      	sub	sp, #28
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	60f8      	str	r0, [r7, #12]
 80062ba:	60b9      	str	r1, [r7, #8]
 80062bc:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< Updated upstream
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6a1b      	ldr	r3, [r3, #32]
 8006276:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6a1b      	ldr	r3, [r3, #32]
 800627c:	f023 0210 	bic.w	r2, r3, #16
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	699b      	ldr	r3, [r3, #24]
 8006288:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006290:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	031b      	lsls	r3, r3, #12
 8006296:	693a      	ldr	r2, [r7, #16]
 8006298:	4313      	orrs	r3, r2
 800629a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80062a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	011b      	lsls	r3, r3, #4
 80062a8:	697a      	ldr	r2, [r7, #20]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	693a      	ldr	r2, [r7, #16]
 80062b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	697a      	ldr	r2, [r7, #20]
 80062b8:	621a      	str	r2, [r3, #32]
}
 80062ba:	bf00      	nop
 80062bc:	371c      	adds	r7, #28
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr

080062c6 <TIM_ITRx_SetConfig>:
=======
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6a1b      	ldr	r3, [r3, #32]
 80062c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6a1b      	ldr	r3, [r3, #32]
 80062c8:	f023 0210 	bic.w	r2, r3, #16
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	699b      	ldr	r3, [r3, #24]
 80062d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80062dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	031b      	lsls	r3, r3, #12
 80062e2:	693a      	ldr	r2, [r7, #16]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80062ee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	011b      	lsls	r3, r3, #4
 80062f4:	697a      	ldr	r2, [r7, #20]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	693a      	ldr	r2, [r7, #16]
 80062fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	697a      	ldr	r2, [r7, #20]
 8006304:	621a      	str	r2, [r3, #32]
}
 8006306:	bf00      	nop
 8006308:	371c      	adds	r7, #28
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr

08006312 <TIM_ITRx_SetConfig>:
>>>>>>> Stashed changes
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
<<<<<<< Updated upstream
 80062c6:	b480      	push	{r7}
 80062c8:	b085      	sub	sp, #20
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
 80062ce:	6039      	str	r1, [r7, #0]
=======
 8006312:	b480      	push	{r7}
 8006314:	b085      	sub	sp, #20
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
 800631a:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
<<<<<<< Updated upstream
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062de:	683a      	ldr	r2, [r7, #0]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	f043 0307 	orr.w	r3, r3, #7
 80062e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	609a      	str	r2, [r3, #8]
}
 80062f0:	bf00      	nop
 80062f2:	3714      	adds	r7, #20
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <TIM_ETR_SetConfig>:
=======
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006328:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800632a:	683a      	ldr	r2, [r7, #0]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	4313      	orrs	r3, r2
 8006330:	f043 0307 	orr.w	r3, r3, #7
 8006334:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	609a      	str	r2, [r3, #8]
}
 800633c:	bf00      	nop
 800633e:	3714      	adds	r7, #20
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <TIM_ETR_SetConfig>:
>>>>>>> Stashed changes
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
<<<<<<< Updated upstream
 80062fc:	b480      	push	{r7}
 80062fe:	b087      	sub	sp, #28
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]
 8006308:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006316:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	021a      	lsls	r2, r3, #8
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	431a      	orrs	r2, r3
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	4313      	orrs	r3, r2
 8006324:	697a      	ldr	r2, [r7, #20]
 8006326:	4313      	orrs	r3, r2
 8006328:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	697a      	ldr	r2, [r7, #20]
 800632e:	609a      	str	r2, [r3, #8]
}
 8006330:	bf00      	nop
 8006332:	371c      	adds	r7, #28
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <HAL_TIMEx_MasterConfigSynchronization>:
=======
 8006348:	b480      	push	{r7}
 800634a:	b087      	sub	sp, #28
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	607a      	str	r2, [r7, #4]
 8006354:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006362:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	021a      	lsls	r2, r3, #8
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	431a      	orrs	r2, r3
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	4313      	orrs	r3, r2
 8006370:	697a      	ldr	r2, [r7, #20]
 8006372:	4313      	orrs	r3, r2
 8006374:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	697a      	ldr	r2, [r7, #20]
 800637a:	609a      	str	r2, [r3, #8]
}
 800637c:	bf00      	nop
 800637e:	371c      	adds	r7, #28
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> Stashed changes
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
<<<<<<< Updated upstream
 800633c:	b480      	push	{r7}
 800633e:	b085      	sub	sp, #20
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
=======
 8006388:	b480      	push	{r7}
 800638a:	b085      	sub	sp, #20
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< Updated upstream
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800634c:	2b01      	cmp	r3, #1
 800634e:	d101      	bne.n	8006354 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006350:	2302      	movs	r3, #2
 8006352:	e068      	b.n	8006426 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2202      	movs	r2, #2
 8006360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a2e      	ldr	r2, [pc, #184]	@ (8006434 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d004      	beq.n	8006388 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a2d      	ldr	r2, [pc, #180]	@ (8006438 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d108      	bne.n	800639a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
=======
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006398:	2b01      	cmp	r3, #1
 800639a:	d101      	bne.n	80063a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800639c:	2302      	movs	r3, #2
 800639e:	e068      	b.n	8006472 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2202      	movs	r2, #2
 80063ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a2e      	ldr	r2, [pc, #184]	@ (8006480 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d004      	beq.n	80063d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a2d      	ldr	r2, [pc, #180]	@ (8006484 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d108      	bne.n	80063e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
<<<<<<< Updated upstream
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800638e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	4313      	orrs	r3, r2
 8006398:	60fb      	str	r3, [r7, #12]
=======
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80063da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
<<<<<<< Updated upstream
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	68fa      	ldr	r2, [r7, #12]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a1e      	ldr	r2, [pc, #120]	@ (8006434 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d01d      	beq.n	80063fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063c6:	d018      	beq.n	80063fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a1b      	ldr	r2, [pc, #108]	@ (800643c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d013      	beq.n	80063fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a1a      	ldr	r2, [pc, #104]	@ (8006440 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d00e      	beq.n	80063fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a18      	ldr	r2, [pc, #96]	@ (8006444 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d009      	beq.n	80063fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a13      	ldr	r2, [pc, #76]	@ (8006438 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d004      	beq.n	80063fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a14      	ldr	r2, [pc, #80]	@ (8006448 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d10c      	bne.n	8006414 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006400:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	68ba      	ldr	r2, [r7, #8]
 8006408:	4313      	orrs	r3, r2
 800640a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	68ba      	ldr	r2, [r7, #8]
 8006412:	609a      	str	r2, [r3, #8]
=======
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a1e      	ldr	r2, [pc, #120]	@ (8006480 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d01d      	beq.n	8006446 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006412:	d018      	beq.n	8006446 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a1b      	ldr	r2, [pc, #108]	@ (8006488 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d013      	beq.n	8006446 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a1a      	ldr	r2, [pc, #104]	@ (800648c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d00e      	beq.n	8006446 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a18      	ldr	r2, [pc, #96]	@ (8006490 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d009      	beq.n	8006446 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a13      	ldr	r2, [pc, #76]	@ (8006484 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d004      	beq.n	8006446 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a14      	ldr	r2, [pc, #80]	@ (8006494 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d10c      	bne.n	8006460 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800644c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	68ba      	ldr	r2, [r7, #8]
 8006454:	4313      	orrs	r3, r2
 8006456:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	68ba      	ldr	r2, [r7, #8]
 800645e:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< Updated upstream
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006424:	2300      	movs	r3, #0
}
 8006426:	4618      	mov	r0, r3
 8006428:	3714      	adds	r7, #20
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr
 8006432:	bf00      	nop
 8006434:	40012c00 	.word	0x40012c00
 8006438:	40013400 	.word	0x40013400
 800643c:	40000400 	.word	0x40000400
 8006440:	40000800 	.word	0x40000800
 8006444:	40000c00 	.word	0x40000c00
 8006448:	40014000 	.word	0x40014000

0800644c <HAL_TIMEx_CommutCallback>:
=======
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3714      	adds	r7, #20
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop
 8006480:	40012c00 	.word	0x40012c00
 8006484:	40013400 	.word	0x40013400
 8006488:	40000400 	.word	0x40000400
 800648c:	40000800 	.word	0x40000800
 8006490:	40000c00 	.word	0x40000c00
 8006494:	40014000 	.word	0x40014000

08006498 <HAL_TIMEx_CommutCallback>:
>>>>>>> Stashed changes
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
=======
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8006454:	bf00      	nop
 8006456:	370c      	adds	r7, #12
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <HAL_TIMEx_BreakCallback>:
=======
 80064a0:	bf00      	nop
 80064a2:	370c      	adds	r7, #12
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <HAL_TIMEx_BreakCallback>:
>>>>>>> Stashed changes
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8006460:	b480      	push	{r7}
 8006462:	b083      	sub	sp, #12
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
=======
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8006468:	bf00      	nop
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <HAL_TIMEx_Break2Callback>:
=======
 80064b4:	bf00      	nop
 80064b6:	370c      	adds	r7, #12
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <HAL_TIMEx_Break2Callback>:
>>>>>>> Stashed changes
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
=======
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 800647c:	bf00      	nop
 800647e:	370c      	adds	r7, #12
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr

08006488 <HAL_UART_Init>:
=======
 80064c8:	bf00      	nop
 80064ca:	370c      	adds	r7, #12
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <HAL_UART_Init>:
>>>>>>> Stashed changes
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d101      	bne.n	800649a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e042      	b.n	8006520 <HAL_UART_Init+0x98>
=======
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b082      	sub	sp, #8
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d101      	bne.n	80064e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	e042      	b.n	800656c <HAL_UART_Init+0x98>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< Updated upstream
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d106      	bne.n	80064b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
=======
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d106      	bne.n	80064fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
>>>>>>> Stashed changes

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< Updated upstream
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f7fb fde9 	bl	8002084 <HAL_UART_MspInit>
=======
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f7fb fde9 	bl	80020d0 <HAL_UART_MspInit>
>>>>>>> Stashed changes
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< Updated upstream
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2224      	movs	r2, #36	@ 0x24
 80064b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f022 0201 	bic.w	r2, r2, #1
 80064c8:	601a      	str	r2, [r3, #0]
=======
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2224      	movs	r2, #36	@ 0x24
 8006502:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f022 0201 	bic.w	r2, r2, #1
 8006514:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
<<<<<<< Updated upstream
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d002      	beq.n	80064d8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 ff60 	bl	8007398 <UART_AdvFeatureConfig>
=======
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800651a:	2b00      	cmp	r3, #0
 800651c:	d002      	beq.n	8006524 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 ff60 	bl	80073e4 <UART_AdvFeatureConfig>
>>>>>>> Stashed changes
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
<<<<<<< Updated upstream
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 fc61 	bl	8006da0 <UART_SetConfig>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d101      	bne.n	80064e8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	e01b      	b.n	8006520 <HAL_UART_Init+0x98>
=======
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 fc61 	bl	8006dec <UART_SetConfig>
 800652a:	4603      	mov	r3, r0
 800652c:	2b01      	cmp	r3, #1
 800652e:	d101      	bne.n	8006534 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	e01b      	b.n	800656c <HAL_UART_Init+0x98>
>>>>>>> Stashed changes
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< Updated upstream
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	685a      	ldr	r2, [r3, #4]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80064f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	689a      	ldr	r2, [r3, #8]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006506:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f042 0201 	orr.w	r2, r2, #1
 8006516:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 ffdf 	bl	80074dc <UART_CheckIdleState>
 800651e:	4603      	mov	r3, r0
}
 8006520:	4618      	mov	r0, r3
 8006522:	3708      	adds	r7, #8
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <HAL_UART_Transmit>:
=======
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	685a      	ldr	r2, [r3, #4]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006542:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	689a      	ldr	r2, [r3, #8]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006552:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f042 0201 	orr.w	r2, r2, #1
 8006562:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 ffdf 	bl	8007528 <UART_CheckIdleState>
 800656a:	4603      	mov	r3, r0
}
 800656c:	4618      	mov	r0, r3
 800656e:	3708      	adds	r7, #8
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <HAL_UART_Transmit>:
>>>>>>> Stashed changes
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< Updated upstream
 8006528:	b580      	push	{r7, lr}
 800652a:	b08a      	sub	sp, #40	@ 0x28
 800652c:	af02      	add	r7, sp, #8
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	603b      	str	r3, [r7, #0]
 8006534:	4613      	mov	r3, r2
 8006536:	80fb      	strh	r3, [r7, #6]
=======
 8006574:	b580      	push	{r7, lr}
 8006576:	b08a      	sub	sp, #40	@ 0x28
 8006578:	af02      	add	r7, sp, #8
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	603b      	str	r3, [r7, #0]
 8006580:	4613      	mov	r3, r2
 8006582:	80fb      	strh	r3, [r7, #6]
>>>>>>> Stashed changes
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
<<<<<<< Updated upstream
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800653e:	2b20      	cmp	r3, #32
 8006540:	d17b      	bne.n	800663a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d002      	beq.n	800654e <HAL_UART_Transmit+0x26>
 8006548:	88fb      	ldrh	r3, [r7, #6]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d101      	bne.n	8006552 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	e074      	b.n	800663c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2200      	movs	r2, #0
 8006556:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2221      	movs	r2, #33	@ 0x21
 800655e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006562:	f7fc f8c9 	bl	80026f8 <HAL_GetTick>
 8006566:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	88fa      	ldrh	r2, [r7, #6]
 800656c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	88fa      	ldrh	r2, [r7, #6]
 8006574:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006580:	d108      	bne.n	8006594 <HAL_UART_Transmit+0x6c>
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d104      	bne.n	8006594 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800658a:	2300      	movs	r3, #0
 800658c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	61bb      	str	r3, [r7, #24]
 8006592:	e003      	b.n	800659c <HAL_UART_Transmit+0x74>
=======
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800658a:	2b20      	cmp	r3, #32
 800658c:	d17b      	bne.n	8006686 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d002      	beq.n	800659a <HAL_UART_Transmit+0x26>
 8006594:	88fb      	ldrh	r3, [r7, #6]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d101      	bne.n	800659e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e074      	b.n	8006688 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2221      	movs	r2, #33	@ 0x21
 80065aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065ae:	f7fc f8c9 	bl	8002744 <HAL_GetTick>
 80065b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	88fa      	ldrh	r2, [r7, #6]
 80065b8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	88fa      	ldrh	r2, [r7, #6]
 80065c0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065cc:	d108      	bne.n	80065e0 <HAL_UART_Transmit+0x6c>
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d104      	bne.n	80065e0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80065d6:	2300      	movs	r3, #0
 80065d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	61bb      	str	r3, [r7, #24]
 80065de:	e003      	b.n	80065e8 <HAL_UART_Transmit+0x74>
>>>>>>> Stashed changes
    }
    else
    {
      pdata8bits  = pData;
<<<<<<< Updated upstream
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006598:	2300      	movs	r3, #0
 800659a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800659c:	e030      	b.n	8006600 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	9300      	str	r3, [sp, #0]
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	2200      	movs	r2, #0
 80065a6:	2180      	movs	r1, #128	@ 0x80
 80065a8:	68f8      	ldr	r0, [r7, #12]
 80065aa:	f001 f841 	bl	8007630 <UART_WaitOnFlagUntilTimeout>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d005      	beq.n	80065c0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2220      	movs	r2, #32
 80065b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80065bc:	2303      	movs	r3, #3
 80065be:	e03d      	b.n	800663c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d10b      	bne.n	80065de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80065c6:	69bb      	ldr	r3, [r7, #24]
 80065c8:	881a      	ldrh	r2, [r3, #0]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065d2:	b292      	uxth	r2, r2
 80065d4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	3302      	adds	r3, #2
 80065da:	61bb      	str	r3, [r7, #24]
 80065dc:	e007      	b.n	80065ee <HAL_UART_Transmit+0xc6>
=======
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80065e4:	2300      	movs	r3, #0
 80065e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80065e8:	e030      	b.n	800664c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	9300      	str	r3, [sp, #0]
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	2200      	movs	r2, #0
 80065f2:	2180      	movs	r1, #128	@ 0x80
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f001 f841 	bl	800767c <UART_WaitOnFlagUntilTimeout>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d005      	beq.n	800660c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2220      	movs	r2, #32
 8006604:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006608:	2303      	movs	r3, #3
 800660a:	e03d      	b.n	8006688 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d10b      	bne.n	800662a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006612:	69bb      	ldr	r3, [r7, #24]
 8006614:	881a      	ldrh	r2, [r3, #0]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800661e:	b292      	uxth	r2, r2
 8006620:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	3302      	adds	r3, #2
 8006626:	61bb      	str	r3, [r7, #24]
 8006628:	e007      	b.n	800663a <HAL_UART_Transmit+0xc6>
>>>>>>> Stashed changes
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
<<<<<<< Updated upstream
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	781a      	ldrb	r2, [r3, #0]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	3301      	adds	r3, #1
 80065ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	3b01      	subs	r3, #1
 80065f8:	b29a      	uxth	r2, r3
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006606:	b29b      	uxth	r3, r3
 8006608:	2b00      	cmp	r3, #0
 800660a:	d1c8      	bne.n	800659e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	9300      	str	r3, [sp, #0]
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	2200      	movs	r2, #0
 8006614:	2140      	movs	r1, #64	@ 0x40
 8006616:	68f8      	ldr	r0, [r7, #12]
 8006618:	f001 f80a 	bl	8007630 <UART_WaitOnFlagUntilTimeout>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d005      	beq.n	800662e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2220      	movs	r2, #32
 8006626:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800662a:	2303      	movs	r3, #3
 800662c:	e006      	b.n	800663c <HAL_UART_Transmit+0x114>
=======
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	781a      	ldrb	r2, [r3, #0]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	3301      	adds	r3, #1
 8006638:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006640:	b29b      	uxth	r3, r3
 8006642:	3b01      	subs	r3, #1
 8006644:	b29a      	uxth	r2, r3
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006652:	b29b      	uxth	r3, r3
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1c8      	bne.n	80065ea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	9300      	str	r3, [sp, #0]
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	2200      	movs	r2, #0
 8006660:	2140      	movs	r1, #64	@ 0x40
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	f001 f80a 	bl	800767c <UART_WaitOnFlagUntilTimeout>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d005      	beq.n	800667a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2220      	movs	r2, #32
 8006672:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006676:	2303      	movs	r3, #3
 8006678:	e006      	b.n	8006688 <HAL_UART_Transmit+0x114>
>>>>>>> Stashed changes
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
<<<<<<< Updated upstream
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2220      	movs	r2, #32
 8006632:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006636:	2300      	movs	r3, #0
 8006638:	e000      	b.n	800663c <HAL_UART_Transmit+0x114>
=======
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2220      	movs	r2, #32
 800667e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006682:	2300      	movs	r3, #0
 8006684:	e000      	b.n	8006688 <HAL_UART_Transmit+0x114>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
 800663a:	2302      	movs	r3, #2
  }
}
 800663c:	4618      	mov	r0, r3
 800663e:	3720      	adds	r7, #32
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <HAL_UART_Receive_IT>:
=======
 8006686:	2302      	movs	r3, #2
  }
}
 8006688:	4618      	mov	r0, r3
 800668a:	3720      	adds	r7, #32
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}

08006690 <HAL_UART_Receive_IT>:
>>>>>>> Stashed changes
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< Updated upstream
 8006644:	b580      	push	{r7, lr}
 8006646:	b08a      	sub	sp, #40	@ 0x28
 8006648:	af00      	add	r7, sp, #0
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	4613      	mov	r3, r2
 8006650:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006658:	2b20      	cmp	r3, #32
 800665a:	d137      	bne.n	80066cc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d002      	beq.n	8006668 <HAL_UART_Receive_IT+0x24>
 8006662:	88fb      	ldrh	r3, [r7, #6]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d101      	bne.n	800666c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	e030      	b.n	80066ce <HAL_UART_Receive_IT+0x8a>
=======
 8006690:	b580      	push	{r7, lr}
 8006692:	b08a      	sub	sp, #40	@ 0x28
 8006694:	af00      	add	r7, sp, #0
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	4613      	mov	r3, r2
 800669c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80066a4:	2b20      	cmp	r3, #32
 80066a6:	d137      	bne.n	8006718 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d002      	beq.n	80066b4 <HAL_UART_Receive_IT+0x24>
 80066ae:	88fb      	ldrh	r3, [r7, #6]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d101      	bne.n	80066b8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	e030      	b.n	800671a <HAL_UART_Receive_IT+0x8a>
>>>>>>> Stashed changes
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
<<<<<<< Updated upstream
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2200      	movs	r2, #0
 8006670:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a18      	ldr	r2, [pc, #96]	@ (80066d8 <HAL_UART_Receive_IT+0x94>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d01f      	beq.n	80066bc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006686:	2b00      	cmp	r3, #0
 8006688:	d018      	beq.n	80066bc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	617b      	str	r3, [r7, #20]
=======
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2200      	movs	r2, #0
 80066bc:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a18      	ldr	r2, [pc, #96]	@ (8006724 <HAL_UART_Receive_IT+0x94>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d01f      	beq.n	8006708 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d018      	beq.n	8006708 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
<<<<<<< Updated upstream
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	e853 3f00 	ldrex	r3, [r3]
 8006696:	613b      	str	r3, [r7, #16]
   return(result);
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800669e:	627b      	str	r3, [r7, #36]	@ 0x24
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	461a      	mov	r2, r3
 80066a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a8:	623b      	str	r3, [r7, #32]
 80066aa:	61fa      	str	r2, [r7, #28]
=======
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	e853 3f00 	ldrex	r3, [r3]
 80066e2:	613b      	str	r3, [r7, #16]
   return(result);
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80066ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	461a      	mov	r2, r3
 80066f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f4:	623b      	str	r3, [r7, #32]
 80066f6:	61fa      	str	r2, [r7, #28]
>>>>>>> Stashed changes
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
<<<<<<< Updated upstream
 80066ac:	69f9      	ldr	r1, [r7, #28]
 80066ae:	6a3a      	ldr	r2, [r7, #32]
 80066b0:	e841 2300 	strex	r3, r2, [r1]
 80066b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d1e6      	bne.n	800668a <HAL_UART_Receive_IT+0x46>
=======
 80066f8:	69f9      	ldr	r1, [r7, #28]
 80066fa:	6a3a      	ldr	r2, [r7, #32]
 80066fc:	e841 2300 	strex	r3, r2, [r1]
 8006700:	61bb      	str	r3, [r7, #24]
   return(result);
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d1e6      	bne.n	80066d6 <HAL_UART_Receive_IT+0x46>
>>>>>>> Stashed changes
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
<<<<<<< Updated upstream
 80066bc:	88fb      	ldrh	r3, [r7, #6]
 80066be:	461a      	mov	r2, r3
 80066c0:	68b9      	ldr	r1, [r7, #8]
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	f001 f822 	bl	800770c <UART_Start_Receive_IT>
 80066c8:	4603      	mov	r3, r0
 80066ca:	e000      	b.n	80066ce <HAL_UART_Receive_IT+0x8a>
=======
 8006708:	88fb      	ldrh	r3, [r7, #6]
 800670a:	461a      	mov	r2, r3
 800670c:	68b9      	ldr	r1, [r7, #8]
 800670e:	68f8      	ldr	r0, [r7, #12]
 8006710:	f001 f822 	bl	8007758 <UART_Start_Receive_IT>
 8006714:	4603      	mov	r3, r0
 8006716:	e000      	b.n	800671a <HAL_UART_Receive_IT+0x8a>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
 80066cc:	2302      	movs	r3, #2
  }
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3728      	adds	r7, #40	@ 0x28
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	40008000 	.word	0x40008000

080066dc <HAL_UART_IRQHandler>:
=======
 8006718:	2302      	movs	r3, #2
  }
}
 800671a:	4618      	mov	r0, r3
 800671c:	3728      	adds	r7, #40	@ 0x28
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	40008000 	.word	0x40008000

08006728 <HAL_UART_IRQHandler>:
>>>>>>> Stashed changes
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 80066dc:	b580      	push	{r7, lr}
 80066de:	b0ba      	sub	sp, #232	@ 0xe8
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	69db      	ldr	r3, [r3, #28]
 80066ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
=======
 8006728:	b580      	push	{r7, lr}
 800672a:	b0ba      	sub	sp, #232	@ 0xe8
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	69db      	ldr	r3, [r3, #28]
 8006736:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
>>>>>>> Stashed changes

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
<<<<<<< Updated upstream
 8006702:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006706:	f640 030f 	movw	r3, #2063	@ 0x80f
 800670a:	4013      	ands	r3, r2
 800670c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006710:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006714:	2b00      	cmp	r3, #0
 8006716:	d11b      	bne.n	8006750 <HAL_UART_IRQHandler+0x74>
=======
 800674e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006752:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006756:	4013      	ands	r3, r2
 8006758:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800675c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006760:	2b00      	cmp	r3, #0
 8006762:	d11b      	bne.n	800679c <HAL_UART_IRQHandler+0x74>
>>>>>>> Stashed changes
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
<<<<<<< Updated upstream
 8006718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800671c:	f003 0320 	and.w	r3, r3, #32
 8006720:	2b00      	cmp	r3, #0
 8006722:	d015      	beq.n	8006750 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006728:	f003 0320 	and.w	r3, r3, #32
 800672c:	2b00      	cmp	r3, #0
 800672e:	d105      	bne.n	800673c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006730:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006734:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006738:	2b00      	cmp	r3, #0
 800673a:	d009      	beq.n	8006750 <HAL_UART_IRQHandler+0x74>
=======
 8006764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006768:	f003 0320 	and.w	r3, r3, #32
 800676c:	2b00      	cmp	r3, #0
 800676e:	d015      	beq.n	800679c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006774:	f003 0320 	and.w	r3, r3, #32
 8006778:	2b00      	cmp	r3, #0
 800677a:	d105      	bne.n	8006788 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800677c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006780:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006784:	2b00      	cmp	r3, #0
 8006786:	d009      	beq.n	800679c <HAL_UART_IRQHandler+0x74>
>>>>>>> Stashed changes
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
<<<<<<< Updated upstream
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006740:	2b00      	cmp	r3, #0
 8006742:	f000 8300 	beq.w	8006d46 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	4798      	blx	r3
      }
      return;
 800674e:	e2fa      	b.n	8006d46 <HAL_UART_IRQHandler+0x66a>
=======
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800678c:	2b00      	cmp	r3, #0
 800678e:	f000 8300 	beq.w	8006d92 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	4798      	blx	r3
      }
      return;
 800679a:	e2fa      	b.n	8006d92 <HAL_UART_IRQHandler+0x66a>
>>>>>>> Stashed changes
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
<<<<<<< Updated upstream
 8006750:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006754:	2b00      	cmp	r3, #0
 8006756:	f000 8123 	beq.w	80069a0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800675a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800675e:	4b8d      	ldr	r3, [pc, #564]	@ (8006994 <HAL_UART_IRQHandler+0x2b8>)
 8006760:	4013      	ands	r3, r2
 8006762:	2b00      	cmp	r3, #0
 8006764:	d106      	bne.n	8006774 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006766:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800676a:	4b8b      	ldr	r3, [pc, #556]	@ (8006998 <HAL_UART_IRQHandler+0x2bc>)
 800676c:	4013      	ands	r3, r2
 800676e:	2b00      	cmp	r3, #0
 8006770:	f000 8116 	beq.w	80069a0 <HAL_UART_IRQHandler+0x2c4>
=======
 800679c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	f000 8123 	beq.w	80069ec <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80067a6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80067aa:	4b8d      	ldr	r3, [pc, #564]	@ (80069e0 <HAL_UART_IRQHandler+0x2b8>)
 80067ac:	4013      	ands	r3, r2
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d106      	bne.n	80067c0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80067b2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80067b6:	4b8b      	ldr	r3, [pc, #556]	@ (80069e4 <HAL_UART_IRQHandler+0x2bc>)
 80067b8:	4013      	ands	r3, r2
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	f000 8116 	beq.w	80069ec <HAL_UART_IRQHandler+0x2c4>
>>>>>>> Stashed changes
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
<<<<<<< Updated upstream
 8006774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006778:	f003 0301 	and.w	r3, r3, #1
 800677c:	2b00      	cmp	r3, #0
 800677e:	d011      	beq.n	80067a4 <HAL_UART_IRQHandler+0xc8>
 8006780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006784:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006788:	2b00      	cmp	r3, #0
 800678a:	d00b      	beq.n	80067a4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2201      	movs	r2, #1
 8006792:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800679a:	f043 0201 	orr.w	r2, r3, #1
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
=======
 80067c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067c4:	f003 0301 	and.w	r3, r3, #1
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d011      	beq.n	80067f0 <HAL_UART_IRQHandler+0xc8>
 80067cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d00b      	beq.n	80067f0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2201      	movs	r2, #1
 80067de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067e6:	f043 0201 	orr.w	r2, r3, #1
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
>>>>>>> Stashed changes
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
<<<<<<< Updated upstream
 80067a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067a8:	f003 0302 	and.w	r3, r3, #2
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d011      	beq.n	80067d4 <HAL_UART_IRQHandler+0xf8>
 80067b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067b4:	f003 0301 	and.w	r3, r3, #1
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d00b      	beq.n	80067d4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2202      	movs	r2, #2
 80067c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067ca:	f043 0204 	orr.w	r2, r3, #4
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
=======
 80067f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067f4:	f003 0302 	and.w	r3, r3, #2
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d011      	beq.n	8006820 <HAL_UART_IRQHandler+0xf8>
 80067fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006800:	f003 0301 	and.w	r3, r3, #1
 8006804:	2b00      	cmp	r3, #0
 8006806:	d00b      	beq.n	8006820 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2202      	movs	r2, #2
 800680e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006816:	f043 0204 	orr.w	r2, r3, #4
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
>>>>>>> Stashed changes
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
<<<<<<< Updated upstream
 80067d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067d8:	f003 0304 	and.w	r3, r3, #4
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d011      	beq.n	8006804 <HAL_UART_IRQHandler+0x128>
 80067e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067e4:	f003 0301 	and.w	r3, r3, #1
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d00b      	beq.n	8006804 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	2204      	movs	r2, #4
 80067f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067fa:	f043 0202 	orr.w	r2, r3, #2
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
=======
 8006820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006824:	f003 0304 	and.w	r3, r3, #4
 8006828:	2b00      	cmp	r3, #0
 800682a:	d011      	beq.n	8006850 <HAL_UART_IRQHandler+0x128>
 800682c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006830:	f003 0301 	and.w	r3, r3, #1
 8006834:	2b00      	cmp	r3, #0
 8006836:	d00b      	beq.n	8006850 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2204      	movs	r2, #4
 800683e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006846:	f043 0202 	orr.w	r2, r3, #2
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
>>>>>>> Stashed changes
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
<<<<<<< Updated upstream
 8006804:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006808:	f003 0308 	and.w	r3, r3, #8
 800680c:	2b00      	cmp	r3, #0
 800680e:	d017      	beq.n	8006840 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006810:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006814:	f003 0320 	and.w	r3, r3, #32
 8006818:	2b00      	cmp	r3, #0
 800681a:	d105      	bne.n	8006828 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800681c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006820:	4b5c      	ldr	r3, [pc, #368]	@ (8006994 <HAL_UART_IRQHandler+0x2b8>)
 8006822:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006824:	2b00      	cmp	r3, #0
 8006826:	d00b      	beq.n	8006840 <HAL_UART_IRQHandler+0x164>
=======
 8006850:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006854:	f003 0308 	and.w	r3, r3, #8
 8006858:	2b00      	cmp	r3, #0
 800685a:	d017      	beq.n	800688c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800685c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006860:	f003 0320 	and.w	r3, r3, #32
 8006864:	2b00      	cmp	r3, #0
 8006866:	d105      	bne.n	8006874 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006868:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800686c:	4b5c      	ldr	r3, [pc, #368]	@ (80069e0 <HAL_UART_IRQHandler+0x2b8>)
 800686e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006870:	2b00      	cmp	r3, #0
 8006872:	d00b      	beq.n	800688c <HAL_UART_IRQHandler+0x164>
>>>>>>> Stashed changes
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
<<<<<<< Updated upstream
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	2208      	movs	r2, #8
 800682e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006836:	f043 0208 	orr.w	r2, r3, #8
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
=======
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2208      	movs	r2, #8
 800687a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006882:	f043 0208 	orr.w	r2, r3, #8
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
>>>>>>> Stashed changes
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
<<<<<<< Updated upstream
 8006840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006844:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006848:	2b00      	cmp	r3, #0
 800684a:	d012      	beq.n	8006872 <HAL_UART_IRQHandler+0x196>
 800684c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006850:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006854:	2b00      	cmp	r3, #0
 8006856:	d00c      	beq.n	8006872 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006860:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006868:	f043 0220 	orr.w	r2, r3, #32
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
=======
 800688c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006890:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006894:	2b00      	cmp	r3, #0
 8006896:	d012      	beq.n	80068be <HAL_UART_IRQHandler+0x196>
 8006898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800689c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d00c      	beq.n	80068be <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80068ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068b4:	f043 0220 	orr.w	r2, r3, #32
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
>>>>>>> Stashed changes
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
<<<<<<< Updated upstream
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006878:	2b00      	cmp	r3, #0
 800687a:	f000 8266 	beq.w	8006d4a <HAL_UART_IRQHandler+0x66e>
=======
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	f000 8266 	beq.w	8006d96 <HAL_UART_IRQHandler+0x66e>
>>>>>>> Stashed changes
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
<<<<<<< Updated upstream
 800687e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006882:	f003 0320 	and.w	r3, r3, #32
 8006886:	2b00      	cmp	r3, #0
 8006888:	d013      	beq.n	80068b2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800688a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800688e:	f003 0320 	and.w	r3, r3, #32
 8006892:	2b00      	cmp	r3, #0
 8006894:	d105      	bne.n	80068a2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006896:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800689a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d007      	beq.n	80068b2 <HAL_UART_IRQHandler+0x1d6>
=======
 80068ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068ce:	f003 0320 	and.w	r3, r3, #32
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d013      	beq.n	80068fe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80068d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068da:	f003 0320 	and.w	r3, r3, #32
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d105      	bne.n	80068ee <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80068e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d007      	beq.n	80068fe <HAL_UART_IRQHandler+0x1d6>
>>>>>>> Stashed changes
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
<<<<<<< Updated upstream
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d003      	beq.n	80068b2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	4798      	blx	r3
=======
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d003      	beq.n	80068fe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	4798      	blx	r3
>>>>>>> Stashed changes
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
<<<<<<< Updated upstream
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068b8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068c6:	2b40      	cmp	r3, #64	@ 0x40
 80068c8:	d005      	beq.n	80068d6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80068ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80068ce:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d054      	beq.n	8006980 <HAL_UART_IRQHandler+0x2a4>
=======
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006904:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006912:	2b40      	cmp	r3, #64	@ 0x40
 8006914:	d005      	beq.n	8006922 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006916:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800691a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800691e:	2b00      	cmp	r3, #0
 8006920:	d054      	beq.n	80069cc <HAL_UART_IRQHandler+0x2a4>
>>>>>>> Stashed changes
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
<<<<<<< Updated upstream
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f001 f83a 	bl	8007950 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068e6:	2b40      	cmp	r3, #64	@ 0x40
 80068e8:	d146      	bne.n	8006978 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	3308      	adds	r3, #8
 80068f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80068f8:	e853 3f00 	ldrex	r3, [r3]
 80068fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006900:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006904:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006908:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	3308      	adds	r3, #8
 8006912:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006916:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800691a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006922:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006926:	e841 2300 	strex	r3, r2, [r1]
 800692a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800692e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d1d9      	bne.n	80068ea <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800693c:	2b00      	cmp	r3, #0
 800693e:	d017      	beq.n	8006970 <HAL_UART_IRQHandler+0x294>
=======
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f001 f83a 	bl	800799c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006932:	2b40      	cmp	r3, #64	@ 0x40
 8006934:	d146      	bne.n	80069c4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	3308      	adds	r3, #8
 800693c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006940:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006944:	e853 3f00 	ldrex	r3, [r3]
 8006948:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800694c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006950:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006954:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	3308      	adds	r3, #8
 800695e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006962:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006966:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800696a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800696e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006972:	e841 2300 	strex	r3, r2, [r1]
 8006976:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800697a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d1d9      	bne.n	8006936 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006988:	2b00      	cmp	r3, #0
 800698a:	d017      	beq.n	80069bc <HAL_UART_IRQHandler+0x294>
>>>>>>> Stashed changes
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
<<<<<<< Updated upstream
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006946:	4a15      	ldr	r2, [pc, #84]	@ (800699c <HAL_UART_IRQHandler+0x2c0>)
 8006948:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006950:	4618      	mov	r0, r3
 8006952:	f7fc fac1 	bl	8002ed8 <HAL_DMA_Abort_IT>
 8006956:	4603      	mov	r3, r0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d019      	beq.n	8006990 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800696a:	4610      	mov	r0, r2
 800696c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800696e:	e00f      	b.n	8006990 <HAL_UART_IRQHandler+0x2b4>
=======
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006992:	4a15      	ldr	r2, [pc, #84]	@ (80069e8 <HAL_UART_IRQHandler+0x2c0>)
 8006994:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800699c:	4618      	mov	r0, r3
 800699e:	f7fc fac1 	bl	8002f24 <HAL_DMA_Abort_IT>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d019      	beq.n	80069dc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80069b6:	4610      	mov	r0, r2
 80069b8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069ba:	e00f      	b.n	80069dc <HAL_UART_IRQHandler+0x2b4>
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
<<<<<<< Updated upstream
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 f9ff 	bl	8006d74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006976:	e00b      	b.n	8006990 <HAL_UART_IRQHandler+0x2b4>
=======
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 f9ff 	bl	8006dc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069c2:	e00b      	b.n	80069dc <HAL_UART_IRQHandler+0x2b4>
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
<<<<<<< Updated upstream
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 f9fb 	bl	8006d74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800697e:	e007      	b.n	8006990 <HAL_UART_IRQHandler+0x2b4>
=======
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 f9fb 	bl	8006dc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069ca:	e007      	b.n	80069dc <HAL_UART_IRQHandler+0x2b4>
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
<<<<<<< Updated upstream
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 f9f7 	bl	8006d74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800698e:	e1dc      	b.n	8006d4a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006990:	bf00      	nop
    return;
 8006992:	e1da      	b.n	8006d4a <HAL_UART_IRQHandler+0x66e>
 8006994:	10000001 	.word	0x10000001
 8006998:	04000120 	.word	0x04000120
 800699c:	08007a1d 	.word	0x08007a1d
=======
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 f9f7 	bl	8006dc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80069da:	e1dc      	b.n	8006d96 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069dc:	bf00      	nop
    return;
 80069de:	e1da      	b.n	8006d96 <HAL_UART_IRQHandler+0x66e>
 80069e0:	10000001 	.word	0x10000001
 80069e4:	04000120 	.word	0x04000120
 80069e8:	08007a69 	.word	0x08007a69
>>>>>>> Stashed changes

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< Updated upstream
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	f040 8170 	bne.w	8006c8a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80069aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069ae:	f003 0310 	and.w	r3, r3, #16
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	f000 8169 	beq.w	8006c8a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80069b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069bc:	f003 0310 	and.w	r3, r3, #16
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	f000 8162 	beq.w	8006c8a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2210      	movs	r2, #16
 80069cc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069d8:	2b40      	cmp	r3, #64	@ 0x40
 80069da:	f040 80d8 	bne.w	8006b8e <HAL_UART_IRQHandler+0x4b2>
=======
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	f040 8170 	bne.w	8006cd6 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80069f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069fa:	f003 0310 	and.w	r3, r3, #16
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	f000 8169 	beq.w	8006cd6 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006a04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a08:	f003 0310 	and.w	r3, r3, #16
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	f000 8162 	beq.w	8006cd6 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2210      	movs	r2, #16
 8006a18:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a24:	2b40      	cmp	r3, #64	@ 0x40
 8006a26:	f040 80d8 	bne.w	8006bda <HAL_UART_IRQHandler+0x4b2>
>>>>>>> Stashed changes
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
<<<<<<< Updated upstream
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80069ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	f000 80af 	beq.w	8006b54 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80069fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006a00:	429a      	cmp	r2, r3
 8006a02:	f080 80a7 	bcs.w	8006b54 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006a0c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f003 0320 	and.w	r3, r3, #32
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	f040 8087 	bne.w	8006b32 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006a30:	e853 3f00 	ldrex	r3, [r3]
 8006a34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006a38:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006a3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	461a      	mov	r2, r3
 8006a4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006a4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006a52:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a56:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006a5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006a5e:	e841 2300 	strex	r3, r2, [r1]
 8006a62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006a66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d1da      	bne.n	8006a24 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	3308      	adds	r3, #8
 8006a74:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006a78:	e853 3f00 	ldrex	r3, [r3]
 8006a7c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006a7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006a80:	f023 0301 	bic.w	r3, r3, #1
 8006a84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	3308      	adds	r3, #8
 8006a8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006a92:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006a96:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a98:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006a9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006a9e:	e841 2300 	strex	r3, r2, [r1]
 8006aa2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006aa4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d1e1      	bne.n	8006a6e <HAL_UART_IRQHandler+0x392>
=======
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	f000 80af 	beq.w	8006ba0 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006a48:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	f080 80a7 	bcs.w	8006ba0 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006a58:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 0320 	and.w	r3, r3, #32
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	f040 8087 	bne.w	8006b7e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a78:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006a7c:	e853 3f00 	ldrex	r3, [r3]
 8006a80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006a84:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006a88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	461a      	mov	r2, r3
 8006a96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006a9a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006a9e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006aa6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006aaa:	e841 2300 	strex	r3, r2, [r1]
 8006aae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006ab2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d1da      	bne.n	8006a70 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	3308      	adds	r3, #8
 8006ac0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ac4:	e853 3f00 	ldrex	r3, [r3]
 8006ac8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006aca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006acc:	f023 0301 	bic.w	r3, r3, #1
 8006ad0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	3308      	adds	r3, #8
 8006ada:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006ade:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006ae2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006ae6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006aea:	e841 2300 	strex	r3, r2, [r1]
 8006aee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006af0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d1e1      	bne.n	8006aba <HAL_UART_IRQHandler+0x392>
>>>>>>> Stashed changes

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< Updated upstream
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	3308      	adds	r3, #8
 8006ab0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ab4:	e853 3f00 	ldrex	r3, [r3]
 8006ab8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006aba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006abc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ac0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	3308      	adds	r3, #8
 8006aca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006ace:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006ad0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006ad4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006ad6:	e841 2300 	strex	r3, r2, [r1]
 8006ada:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006adc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d1e3      	bne.n	8006aaa <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2220      	movs	r2, #32
 8006ae6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006af8:	e853 3f00 	ldrex	r3, [r3]
 8006afc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006afe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b00:	f023 0310 	bic.w	r3, r3, #16
 8006b04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b12:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b14:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b16:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006b18:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006b1a:	e841 2300 	strex	r3, r2, [r1]
 8006b1e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006b20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d1e4      	bne.n	8006af0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f7fc f977 	bl	8002e20 <HAL_DMA_Abort>
=======
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	3308      	adds	r3, #8
 8006afc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006afe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b00:	e853 3f00 	ldrex	r3, [r3]
 8006b04:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006b06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	3308      	adds	r3, #8
 8006b16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006b1a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006b1c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006b20:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006b22:	e841 2300 	strex	r3, r2, [r1]
 8006b26:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006b28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d1e3      	bne.n	8006af6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2220      	movs	r2, #32
 8006b32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b44:	e853 3f00 	ldrex	r3, [r3]
 8006b48:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006b4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b4c:	f023 0310 	bic.w	r3, r3, #16
 8006b50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	461a      	mov	r2, r3
 8006b5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b5e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b60:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b62:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006b64:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006b66:	e841 2300 	strex	r3, r2, [r1]
 8006b6a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006b6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1e4      	bne.n	8006b3c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f7fc f977 	bl	8002e6c <HAL_DMA_Abort>
>>>>>>> Stashed changes
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
<<<<<<< Updated upstream
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2202      	movs	r2, #2
 8006b36:	671a      	str	r2, [r3, #112]	@ 0x70
=======
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2202      	movs	r2, #2
 8006b82:	671a      	str	r2, [r3, #112]	@ 0x70
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
<<<<<<< Updated upstream
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	1ad3      	subs	r3, r2, r3
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 f91b 	bl	8006d88 <HAL_UARTEx_RxEventCallback>
=======
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	1ad3      	subs	r3, r2, r3
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	4619      	mov	r1, r3
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 f91b 	bl	8006dd4 <HAL_UARTEx_RxEventCallback>
>>>>>>> Stashed changes
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
<<<<<<< Updated upstream
 8006b52:	e0fc      	b.n	8006d4e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006b5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	f040 80f5 	bne.w	8006d4e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 0320 	and.w	r3, r3, #32
 8006b72:	2b20      	cmp	r3, #32
 8006b74:	f040 80eb 	bne.w	8006d4e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2202      	movs	r2, #2
 8006b7c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006b84:	4619      	mov	r1, r3
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 f8fe 	bl	8006d88 <HAL_UARTEx_RxEventCallback>
      return;
 8006b8c:	e0df      	b.n	8006d4e <HAL_UART_IRQHandler+0x672>
=======
 8006b9e:	e0fc      	b.n	8006d9a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006ba6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006baa:	429a      	cmp	r2, r3
 8006bac:	f040 80f5 	bne.w	8006d9a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f003 0320 	and.w	r3, r3, #32
 8006bbe:	2b20      	cmp	r3, #32
 8006bc0:	f040 80eb 	bne.w	8006d9a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2202      	movs	r2, #2
 8006bc8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 f8fe 	bl	8006dd4 <HAL_UARTEx_RxEventCallback>
      return;
 8006bd8:	e0df      	b.n	8006d9a <HAL_UART_IRQHandler+0x672>
>>>>>>> Stashed changes
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
<<<<<<< Updated upstream
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	f000 80d1 	beq.w	8006d52 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8006bb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	f000 80cc 	beq.w	8006d52 <HAL_UART_IRQHandler+0x676>
=======
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	f000 80d1 	beq.w	8006d9e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8006bfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	f000 80cc 	beq.w	8006d9e <HAL_UART_IRQHandler+0x676>
>>>>>>> Stashed changes
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
<<<<<<< Updated upstream
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bc2:	e853 3f00 	ldrex	r3, [r3]
 8006bc6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006bc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006bce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006bdc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bde:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006be2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006be4:	e841 2300 	strex	r3, r2, [r1]
 8006be8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006bea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d1e4      	bne.n	8006bba <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	3308      	adds	r3, #8
 8006bf6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bfa:	e853 3f00 	ldrex	r3, [r3]
 8006bfe:	623b      	str	r3, [r7, #32]
   return(result);
 8006c00:	6a3b      	ldr	r3, [r7, #32]
 8006c02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c06:	f023 0301 	bic.w	r3, r3, #1
 8006c0a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	3308      	adds	r3, #8
 8006c14:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006c18:	633a      	str	r2, [r7, #48]	@ 0x30
 8006c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c20:	e841 2300 	strex	r3, r2, [r1]
 8006c24:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d1e1      	bne.n	8006bf0 <HAL_UART_IRQHandler+0x514>
=======
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c0e:	e853 3f00 	ldrex	r3, [r3]
 8006c12:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c16:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c1a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	461a      	mov	r2, r3
 8006c24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006c28:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c2a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c2c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c30:	e841 2300 	strex	r3, r2, [r1]
 8006c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d1e4      	bne.n	8006c06 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	3308      	adds	r3, #8
 8006c42:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c46:	e853 3f00 	ldrex	r3, [r3]
 8006c4a:	623b      	str	r3, [r7, #32]
   return(result);
 8006c4c:	6a3b      	ldr	r3, [r7, #32]
 8006c4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c52:	f023 0301 	bic.w	r3, r3, #1
 8006c56:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	3308      	adds	r3, #8
 8006c60:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006c64:	633a      	str	r2, [r7, #48]	@ 0x30
 8006c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c6c:	e841 2300 	strex	r3, r2, [r1]
 8006c70:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d1e1      	bne.n	8006c3c <HAL_UART_IRQHandler+0x514>
>>>>>>> Stashed changes
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
<<<<<<< Updated upstream
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2220      	movs	r2, #32
 8006c30:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	e853 3f00 	ldrex	r3, [r3]
 8006c4c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f023 0310 	bic.w	r3, r3, #16
 8006c54:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006c62:	61fb      	str	r3, [r7, #28]
 8006c64:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c66:	69b9      	ldr	r1, [r7, #24]
 8006c68:	69fa      	ldr	r2, [r7, #28]
 8006c6a:	e841 2300 	strex	r3, r2, [r1]
 8006c6e:	617b      	str	r3, [r7, #20]
   return(result);
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1e4      	bne.n	8006c40 <HAL_UART_IRQHandler+0x564>
=======
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2220      	movs	r2, #32
 8006c7c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	e853 3f00 	ldrex	r3, [r3]
 8006c98:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f023 0310 	bic.w	r3, r3, #16
 8006ca0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	461a      	mov	r2, r3
 8006caa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006cae:	61fb      	str	r3, [r7, #28]
 8006cb0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb2:	69b9      	ldr	r1, [r7, #24]
 8006cb4:	69fa      	ldr	r2, [r7, #28]
 8006cb6:	e841 2300 	strex	r3, r2, [r1]
 8006cba:	617b      	str	r3, [r7, #20]
   return(result);
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d1e4      	bne.n	8006c8c <HAL_UART_IRQHandler+0x564>
>>>>>>> Stashed changes

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
<<<<<<< Updated upstream
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2202      	movs	r2, #2
 8006c7a:	671a      	str	r2, [r3, #112]	@ 0x70
=======
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2202      	movs	r2, #2
 8006cc6:	671a      	str	r2, [r3, #112]	@ 0x70
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
<<<<<<< Updated upstream
 8006c7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c80:	4619      	mov	r1, r3
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 f880 	bl	8006d88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006c88:	e063      	b.n	8006d52 <HAL_UART_IRQHandler+0x676>
=======
 8006cc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006ccc:	4619      	mov	r1, r3
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 f880 	bl	8006dd4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006cd4:	e063      	b.n	8006d9e <HAL_UART_IRQHandler+0x676>
>>>>>>> Stashed changes
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
<<<<<<< Updated upstream
 8006c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00e      	beq.n	8006cb4 <HAL_UART_IRQHandler+0x5d8>
 8006c96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d008      	beq.n	8006cb4 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006caa:	621a      	str	r2, [r3, #32]
=======
 8006cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00e      	beq.n	8006d00 <HAL_UART_IRQHandler+0x5d8>
 8006ce2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ce6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d008      	beq.n	8006d00 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006cf6:	621a      	str	r2, [r3, #32]
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
<<<<<<< Updated upstream
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f001 fc1f 	bl	80084f0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006cb2:	e051      	b.n	8006d58 <HAL_UART_IRQHandler+0x67c>
=======
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f001 fc1f 	bl	800853c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006cfe:	e051      	b.n	8006da4 <HAL_UART_IRQHandler+0x67c>
>>>>>>> Stashed changes
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
<<<<<<< Updated upstream
 8006cb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d014      	beq.n	8006cea <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d105      	bne.n	8006cd8 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006ccc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006cd0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d008      	beq.n	8006cea <HAL_UART_IRQHandler+0x60e>
=======
 8006d00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d014      	beq.n	8006d36 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006d0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d105      	bne.n	8006d24 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006d18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d1c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d008      	beq.n	8006d36 <HAL_UART_IRQHandler+0x60e>
>>>>>>> Stashed changes
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
<<<<<<< Updated upstream
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d03a      	beq.n	8006d56 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	4798      	blx	r3
    }
    return;
 8006ce8:	e035      	b.n	8006d56 <HAL_UART_IRQHandler+0x67a>
=======
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d03a      	beq.n	8006da2 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	4798      	blx	r3
    }
    return;
 8006d34:	e035      	b.n	8006da2 <HAL_UART_IRQHandler+0x67a>
>>>>>>> Stashed changes
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
<<<<<<< Updated upstream
 8006cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d009      	beq.n	8006d0a <HAL_UART_IRQHandler+0x62e>
 8006cf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d003      	beq.n	8006d0a <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 fea0 	bl	8007a48 <UART_EndTransmit_IT>
    return;
 8006d08:	e026      	b.n	8006d58 <HAL_UART_IRQHandler+0x67c>
=======
 8006d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d009      	beq.n	8006d56 <HAL_UART_IRQHandler+0x62e>
 8006d42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d003      	beq.n	8006d56 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 fea0 	bl	8007a94 <UART_EndTransmit_IT>
    return;
 8006d54:	e026      	b.n	8006da4 <HAL_UART_IRQHandler+0x67c>
>>>>>>> Stashed changes
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
<<<<<<< Updated upstream
 8006d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d009      	beq.n	8006d2a <HAL_UART_IRQHandler+0x64e>
 8006d16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d1a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d003      	beq.n	8006d2a <HAL_UART_IRQHandler+0x64e>
=======
 8006d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d009      	beq.n	8006d76 <HAL_UART_IRQHandler+0x64e>
 8006d62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d66:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d003      	beq.n	8006d76 <HAL_UART_IRQHandler+0x64e>
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
<<<<<<< Updated upstream
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f001 fbf8 	bl	8008518 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d28:	e016      	b.n	8006d58 <HAL_UART_IRQHandler+0x67c>
=======
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f001 fbf8 	bl	8008564 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d74:	e016      	b.n	8006da4 <HAL_UART_IRQHandler+0x67c>
>>>>>>> Stashed changes
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
<<<<<<< Updated upstream
 8006d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d2e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d010      	beq.n	8006d58 <HAL_UART_IRQHandler+0x67c>
 8006d36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	da0c      	bge.n	8006d58 <HAL_UART_IRQHandler+0x67c>
=======
 8006d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d7a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d010      	beq.n	8006da4 <HAL_UART_IRQHandler+0x67c>
 8006d82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	da0c      	bge.n	8006da4 <HAL_UART_IRQHandler+0x67c>
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
<<<<<<< Updated upstream
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f001 fbe0 	bl	8008504 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d44:	e008      	b.n	8006d58 <HAL_UART_IRQHandler+0x67c>
      return;
 8006d46:	bf00      	nop
 8006d48:	e006      	b.n	8006d58 <HAL_UART_IRQHandler+0x67c>
    return;
 8006d4a:	bf00      	nop
 8006d4c:	e004      	b.n	8006d58 <HAL_UART_IRQHandler+0x67c>
      return;
 8006d4e:	bf00      	nop
 8006d50:	e002      	b.n	8006d58 <HAL_UART_IRQHandler+0x67c>
      return;
 8006d52:	bf00      	nop
 8006d54:	e000      	b.n	8006d58 <HAL_UART_IRQHandler+0x67c>
    return;
 8006d56:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8006d58:	37e8      	adds	r7, #232	@ 0xe8
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop

08006d60 <HAL_UART_TxCpltCallback>:
=======
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f001 fbe0 	bl	8008550 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d90:	e008      	b.n	8006da4 <HAL_UART_IRQHandler+0x67c>
      return;
 8006d92:	bf00      	nop
 8006d94:	e006      	b.n	8006da4 <HAL_UART_IRQHandler+0x67c>
    return;
 8006d96:	bf00      	nop
 8006d98:	e004      	b.n	8006da4 <HAL_UART_IRQHandler+0x67c>
      return;
 8006d9a:	bf00      	nop
 8006d9c:	e002      	b.n	8006da4 <HAL_UART_IRQHandler+0x67c>
      return;
 8006d9e:	bf00      	nop
 8006da0:	e000      	b.n	8006da4 <HAL_UART_IRQHandler+0x67c>
    return;
 8006da2:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8006da4:	37e8      	adds	r7, #232	@ 0xe8
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop

08006dac <HAL_UART_TxCpltCallback>:
>>>>>>> Stashed changes
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
=======
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
<<<<<<< Updated upstream
 8006d68:	bf00      	nop
 8006d6a:	370c      	adds	r7, #12
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr

08006d74 <HAL_UART_ErrorCallback>:
=======
 8006db4:	bf00      	nop
 8006db6:	370c      	adds	r7, #12
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <HAL_UART_ErrorCallback>:
>>>>>>> Stashed changes
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
=======
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
<<<<<<< Updated upstream
 8006d7c:	bf00      	nop
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <HAL_UARTEx_RxEventCallback>:
=======
 8006dc8:	bf00      	nop
 8006dca:	370c      	adds	r7, #12
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <HAL_UARTEx_RxEventCallback>:
>>>>>>> Stashed changes
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
<<<<<<< Updated upstream
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	460b      	mov	r3, r1
 8006d92:	807b      	strh	r3, [r7, #2]
=======
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	460b      	mov	r3, r1
 8006dde:	807b      	strh	r3, [r7, #2]
>>>>>>> Stashed changes
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
<<<<<<< Updated upstream
 8006d94:	bf00      	nop
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <UART_SetConfig>:
=======
 8006de0:	bf00      	nop
 8006de2:	370c      	adds	r7, #12
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <UART_SetConfig>:
>>>>>>> Stashed changes
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8006da0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006da4:	b08c      	sub	sp, #48	@ 0x30
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6178      	str	r0, [r7, #20]
=======
 8006dec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006df0:	b08c      	sub	sp, #48	@ 0x30
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6178      	str	r0, [r7, #20]
>>>>>>> Stashed changes
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
<<<<<<< Updated upstream
 8006daa:	2300      	movs	r3, #0
 8006dac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
=======
 8006df6:	2300      	movs	r3, #0
 8006df8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
>>>>>>> Stashed changes
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
<<<<<<< Updated upstream
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	689a      	ldr	r2, [r3, #8]
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	691b      	ldr	r3, [r3, #16]
 8006db8:	431a      	orrs	r2, r3
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	695b      	ldr	r3, [r3, #20]
 8006dbe:	431a      	orrs	r2, r3
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	69db      	ldr	r3, [r3, #28]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	4baa      	ldr	r3, [pc, #680]	@ (8007078 <UART_SetConfig+0x2d8>)
 8006dd0:	4013      	ands	r3, r2
 8006dd2:	697a      	ldr	r2, [r7, #20]
 8006dd4:	6812      	ldr	r2, [r2, #0]
 8006dd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006dd8:	430b      	orrs	r3, r1
 8006dda:	6013      	str	r3, [r2, #0]
=======
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	689a      	ldr	r2, [r3, #8]
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	431a      	orrs	r2, r3
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	695b      	ldr	r3, [r3, #20]
 8006e0a:	431a      	orrs	r2, r3
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	69db      	ldr	r3, [r3, #28]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	4baa      	ldr	r3, [pc, #680]	@ (80070c4 <UART_SetConfig+0x2d8>)
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	697a      	ldr	r2, [r7, #20]
 8006e20:	6812      	ldr	r2, [r2, #0]
 8006e22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e24:	430b      	orrs	r3, r1
 8006e26:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< Updated upstream
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	68da      	ldr	r2, [r3, #12]
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	430a      	orrs	r2, r1
 8006df0:	605a      	str	r2, [r3, #4]
=======
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	68da      	ldr	r2, [r3, #12]
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	430a      	orrs	r2, r1
 8006e3c:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
<<<<<<< Updated upstream
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	699b      	ldr	r3, [r3, #24]
 8006df6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a9f      	ldr	r2, [pc, #636]	@ (800707c <UART_SetConfig+0x2dc>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d004      	beq.n	8006e0c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	6a1b      	ldr	r3, [r3, #32]
 8006e06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006e16:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006e1a:	697a      	ldr	r2, [r7, #20]
 8006e1c:	6812      	ldr	r2, [r2, #0]
 8006e1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e20:	430b      	orrs	r3, r1
 8006e22:	6093      	str	r3, [r2, #8]
=======
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	699b      	ldr	r3, [r3, #24]
 8006e42:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a9f      	ldr	r2, [pc, #636]	@ (80070c8 <UART_SetConfig+0x2dc>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d004      	beq.n	8006e58 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	6a1b      	ldr	r3, [r3, #32]
 8006e52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e54:	4313      	orrs	r3, r2
 8006e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006e62:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006e66:	697a      	ldr	r2, [r7, #20]
 8006e68:	6812      	ldr	r2, [r2, #0]
 8006e6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e6c:	430b      	orrs	r3, r1
 8006e6e:	6093      	str	r3, [r2, #8]
>>>>>>> Stashed changes

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
<<<<<<< Updated upstream
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e2a:	f023 010f 	bic.w	r1, r3, #15
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	430a      	orrs	r2, r1
 8006e38:	62da      	str	r2, [r3, #44]	@ 0x2c
=======
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e76:	f023 010f 	bic.w	r1, r3, #15
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	430a      	orrs	r2, r1
 8006e84:	62da      	str	r2, [r3, #44]	@ 0x2c
>>>>>>> Stashed changes
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
<<<<<<< Updated upstream
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a90      	ldr	r2, [pc, #576]	@ (8007080 <UART_SetConfig+0x2e0>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d125      	bne.n	8006e90 <UART_SetConfig+0xf0>
 8006e44:	4b8f      	ldr	r3, [pc, #572]	@ (8007084 <UART_SetConfig+0x2e4>)
 8006e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e4a:	f003 0303 	and.w	r3, r3, #3
 8006e4e:	2b03      	cmp	r3, #3
 8006e50:	d81a      	bhi.n	8006e88 <UART_SetConfig+0xe8>
 8006e52:	a201      	add	r2, pc, #4	@ (adr r2, 8006e58 <UART_SetConfig+0xb8>)
 8006e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e58:	08006e69 	.word	0x08006e69
 8006e5c:	08006e79 	.word	0x08006e79
 8006e60:	08006e71 	.word	0x08006e71
 8006e64:	08006e81 	.word	0x08006e81
 8006e68:	2301      	movs	r3, #1
 8006e6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e6e:	e116      	b.n	800709e <UART_SetConfig+0x2fe>
 8006e70:	2302      	movs	r3, #2
 8006e72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e76:	e112      	b.n	800709e <UART_SetConfig+0x2fe>
 8006e78:	2304      	movs	r3, #4
 8006e7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e7e:	e10e      	b.n	800709e <UART_SetConfig+0x2fe>
 8006e80:	2308      	movs	r3, #8
 8006e82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e86:	e10a      	b.n	800709e <UART_SetConfig+0x2fe>
 8006e88:	2310      	movs	r3, #16
 8006e8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e8e:	e106      	b.n	800709e <UART_SetConfig+0x2fe>
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a7c      	ldr	r2, [pc, #496]	@ (8007088 <UART_SetConfig+0x2e8>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d138      	bne.n	8006f0c <UART_SetConfig+0x16c>
 8006e9a:	4b7a      	ldr	r3, [pc, #488]	@ (8007084 <UART_SetConfig+0x2e4>)
 8006e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ea0:	f003 030c 	and.w	r3, r3, #12
 8006ea4:	2b0c      	cmp	r3, #12
 8006ea6:	d82d      	bhi.n	8006f04 <UART_SetConfig+0x164>
 8006ea8:	a201      	add	r2, pc, #4	@ (adr r2, 8006eb0 <UART_SetConfig+0x110>)
 8006eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eae:	bf00      	nop
 8006eb0:	08006ee5 	.word	0x08006ee5
 8006eb4:	08006f05 	.word	0x08006f05
 8006eb8:	08006f05 	.word	0x08006f05
 8006ebc:	08006f05 	.word	0x08006f05
 8006ec0:	08006ef5 	.word	0x08006ef5
 8006ec4:	08006f05 	.word	0x08006f05
 8006ec8:	08006f05 	.word	0x08006f05
 8006ecc:	08006f05 	.word	0x08006f05
 8006ed0:	08006eed 	.word	0x08006eed
 8006ed4:	08006f05 	.word	0x08006f05
 8006ed8:	08006f05 	.word	0x08006f05
 8006edc:	08006f05 	.word	0x08006f05
 8006ee0:	08006efd 	.word	0x08006efd
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006eea:	e0d8      	b.n	800709e <UART_SetConfig+0x2fe>
 8006eec:	2302      	movs	r3, #2
 8006eee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ef2:	e0d4      	b.n	800709e <UART_SetConfig+0x2fe>
 8006ef4:	2304      	movs	r3, #4
 8006ef6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006efa:	e0d0      	b.n	800709e <UART_SetConfig+0x2fe>
 8006efc:	2308      	movs	r3, #8
 8006efe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f02:	e0cc      	b.n	800709e <UART_SetConfig+0x2fe>
 8006f04:	2310      	movs	r3, #16
 8006f06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f0a:	e0c8      	b.n	800709e <UART_SetConfig+0x2fe>
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a5e      	ldr	r2, [pc, #376]	@ (800708c <UART_SetConfig+0x2ec>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d125      	bne.n	8006f62 <UART_SetConfig+0x1c2>
 8006f16:	4b5b      	ldr	r3, [pc, #364]	@ (8007084 <UART_SetConfig+0x2e4>)
 8006f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f1c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006f20:	2b30      	cmp	r3, #48	@ 0x30
 8006f22:	d016      	beq.n	8006f52 <UART_SetConfig+0x1b2>
 8006f24:	2b30      	cmp	r3, #48	@ 0x30
 8006f26:	d818      	bhi.n	8006f5a <UART_SetConfig+0x1ba>
 8006f28:	2b20      	cmp	r3, #32
 8006f2a:	d00a      	beq.n	8006f42 <UART_SetConfig+0x1a2>
 8006f2c:	2b20      	cmp	r3, #32
 8006f2e:	d814      	bhi.n	8006f5a <UART_SetConfig+0x1ba>
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d002      	beq.n	8006f3a <UART_SetConfig+0x19a>
 8006f34:	2b10      	cmp	r3, #16
 8006f36:	d008      	beq.n	8006f4a <UART_SetConfig+0x1aa>
 8006f38:	e00f      	b.n	8006f5a <UART_SetConfig+0x1ba>
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f40:	e0ad      	b.n	800709e <UART_SetConfig+0x2fe>
 8006f42:	2302      	movs	r3, #2
 8006f44:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f48:	e0a9      	b.n	800709e <UART_SetConfig+0x2fe>
 8006f4a:	2304      	movs	r3, #4
 8006f4c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f50:	e0a5      	b.n	800709e <UART_SetConfig+0x2fe>
 8006f52:	2308      	movs	r3, #8
 8006f54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f58:	e0a1      	b.n	800709e <UART_SetConfig+0x2fe>
 8006f5a:	2310      	movs	r3, #16
 8006f5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f60:	e09d      	b.n	800709e <UART_SetConfig+0x2fe>
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a4a      	ldr	r2, [pc, #296]	@ (8007090 <UART_SetConfig+0x2f0>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d125      	bne.n	8006fb8 <UART_SetConfig+0x218>
 8006f6c:	4b45      	ldr	r3, [pc, #276]	@ (8007084 <UART_SetConfig+0x2e4>)
 8006f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f72:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006f76:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f78:	d016      	beq.n	8006fa8 <UART_SetConfig+0x208>
 8006f7a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f7c:	d818      	bhi.n	8006fb0 <UART_SetConfig+0x210>
 8006f7e:	2b80      	cmp	r3, #128	@ 0x80
 8006f80:	d00a      	beq.n	8006f98 <UART_SetConfig+0x1f8>
 8006f82:	2b80      	cmp	r3, #128	@ 0x80
 8006f84:	d814      	bhi.n	8006fb0 <UART_SetConfig+0x210>
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d002      	beq.n	8006f90 <UART_SetConfig+0x1f0>
 8006f8a:	2b40      	cmp	r3, #64	@ 0x40
 8006f8c:	d008      	beq.n	8006fa0 <UART_SetConfig+0x200>
 8006f8e:	e00f      	b.n	8006fb0 <UART_SetConfig+0x210>
 8006f90:	2300      	movs	r3, #0
 8006f92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f96:	e082      	b.n	800709e <UART_SetConfig+0x2fe>
 8006f98:	2302      	movs	r3, #2
 8006f9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f9e:	e07e      	b.n	800709e <UART_SetConfig+0x2fe>
 8006fa0:	2304      	movs	r3, #4
 8006fa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fa6:	e07a      	b.n	800709e <UART_SetConfig+0x2fe>
 8006fa8:	2308      	movs	r3, #8
 8006faa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fae:	e076      	b.n	800709e <UART_SetConfig+0x2fe>
 8006fb0:	2310      	movs	r3, #16
 8006fb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fb6:	e072      	b.n	800709e <UART_SetConfig+0x2fe>
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a35      	ldr	r2, [pc, #212]	@ (8007094 <UART_SetConfig+0x2f4>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d12a      	bne.n	8007018 <UART_SetConfig+0x278>
 8006fc2:	4b30      	ldr	r3, [pc, #192]	@ (8007084 <UART_SetConfig+0x2e4>)
 8006fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fc8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fcc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006fd0:	d01a      	beq.n	8007008 <UART_SetConfig+0x268>
 8006fd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006fd6:	d81b      	bhi.n	8007010 <UART_SetConfig+0x270>
 8006fd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fdc:	d00c      	beq.n	8006ff8 <UART_SetConfig+0x258>
 8006fde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fe2:	d815      	bhi.n	8007010 <UART_SetConfig+0x270>
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d003      	beq.n	8006ff0 <UART_SetConfig+0x250>
 8006fe8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fec:	d008      	beq.n	8007000 <UART_SetConfig+0x260>
 8006fee:	e00f      	b.n	8007010 <UART_SetConfig+0x270>
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ff6:	e052      	b.n	800709e <UART_SetConfig+0x2fe>
 8006ff8:	2302      	movs	r3, #2
 8006ffa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ffe:	e04e      	b.n	800709e <UART_SetConfig+0x2fe>
 8007000:	2304      	movs	r3, #4
 8007002:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007006:	e04a      	b.n	800709e <UART_SetConfig+0x2fe>
 8007008:	2308      	movs	r3, #8
 800700a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800700e:	e046      	b.n	800709e <UART_SetConfig+0x2fe>
 8007010:	2310      	movs	r3, #16
 8007012:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007016:	e042      	b.n	800709e <UART_SetConfig+0x2fe>
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a17      	ldr	r2, [pc, #92]	@ (800707c <UART_SetConfig+0x2dc>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d13a      	bne.n	8007098 <UART_SetConfig+0x2f8>
 8007022:	4b18      	ldr	r3, [pc, #96]	@ (8007084 <UART_SetConfig+0x2e4>)
 8007024:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007028:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800702c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007030:	d01a      	beq.n	8007068 <UART_SetConfig+0x2c8>
 8007032:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007036:	d81b      	bhi.n	8007070 <UART_SetConfig+0x2d0>
 8007038:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800703c:	d00c      	beq.n	8007058 <UART_SetConfig+0x2b8>
 800703e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007042:	d815      	bhi.n	8007070 <UART_SetConfig+0x2d0>
 8007044:	2b00      	cmp	r3, #0
 8007046:	d003      	beq.n	8007050 <UART_SetConfig+0x2b0>
 8007048:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800704c:	d008      	beq.n	8007060 <UART_SetConfig+0x2c0>
 800704e:	e00f      	b.n	8007070 <UART_SetConfig+0x2d0>
 8007050:	2300      	movs	r3, #0
 8007052:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007056:	e022      	b.n	800709e <UART_SetConfig+0x2fe>
 8007058:	2302      	movs	r3, #2
 800705a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800705e:	e01e      	b.n	800709e <UART_SetConfig+0x2fe>
 8007060:	2304      	movs	r3, #4
 8007062:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007066:	e01a      	b.n	800709e <UART_SetConfig+0x2fe>
 8007068:	2308      	movs	r3, #8
 800706a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800706e:	e016      	b.n	800709e <UART_SetConfig+0x2fe>
 8007070:	2310      	movs	r3, #16
 8007072:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007076:	e012      	b.n	800709e <UART_SetConfig+0x2fe>
 8007078:	cfff69f3 	.word	0xcfff69f3
 800707c:	40008000 	.word	0x40008000
 8007080:	40013800 	.word	0x40013800
 8007084:	40021000 	.word	0x40021000
 8007088:	40004400 	.word	0x40004400
 800708c:	40004800 	.word	0x40004800
 8007090:	40004c00 	.word	0x40004c00
 8007094:	40005000 	.word	0x40005000
 8007098:	2310      	movs	r3, #16
 800709a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4aae      	ldr	r2, [pc, #696]	@ (800735c <UART_SetConfig+0x5bc>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	f040 8097 	bne.w	80071d8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80070aa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80070ae:	2b08      	cmp	r3, #8
 80070b0:	d823      	bhi.n	80070fa <UART_SetConfig+0x35a>
 80070b2:	a201      	add	r2, pc, #4	@ (adr r2, 80070b8 <UART_SetConfig+0x318>)
 80070b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b8:	080070dd 	.word	0x080070dd
 80070bc:	080070fb 	.word	0x080070fb
 80070c0:	080070e5 	.word	0x080070e5
 80070c4:	080070fb 	.word	0x080070fb
 80070c8:	080070eb 	.word	0x080070eb
 80070cc:	080070fb 	.word	0x080070fb
 80070d0:	080070fb 	.word	0x080070fb
 80070d4:	080070fb 	.word	0x080070fb
 80070d8:	080070f3 	.word	0x080070f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070dc:	f7fd fefa 	bl	8004ed4 <HAL_RCC_GetPCLK1Freq>
 80070e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80070e2:	e010      	b.n	8007106 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070e4:	4b9e      	ldr	r3, [pc, #632]	@ (8007360 <UART_SetConfig+0x5c0>)
 80070e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80070e8:	e00d      	b.n	8007106 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070ea:	f7fd fe5b 	bl	8004da4 <HAL_RCC_GetSysClockFreq>
 80070ee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80070f0:	e009      	b.n	8007106 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80070f8:	e005      	b.n	8007106 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80070fa:	2300      	movs	r3, #0
 80070fc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007104:	bf00      	nop
=======
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a90      	ldr	r2, [pc, #576]	@ (80070cc <UART_SetConfig+0x2e0>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d125      	bne.n	8006edc <UART_SetConfig+0xf0>
 8006e90:	4b8f      	ldr	r3, [pc, #572]	@ (80070d0 <UART_SetConfig+0x2e4>)
 8006e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e96:	f003 0303 	and.w	r3, r3, #3
 8006e9a:	2b03      	cmp	r3, #3
 8006e9c:	d81a      	bhi.n	8006ed4 <UART_SetConfig+0xe8>
 8006e9e:	a201      	add	r2, pc, #4	@ (adr r2, 8006ea4 <UART_SetConfig+0xb8>)
 8006ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea4:	08006eb5 	.word	0x08006eb5
 8006ea8:	08006ec5 	.word	0x08006ec5
 8006eac:	08006ebd 	.word	0x08006ebd
 8006eb0:	08006ecd 	.word	0x08006ecd
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006eba:	e116      	b.n	80070ea <UART_SetConfig+0x2fe>
 8006ebc:	2302      	movs	r3, #2
 8006ebe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ec2:	e112      	b.n	80070ea <UART_SetConfig+0x2fe>
 8006ec4:	2304      	movs	r3, #4
 8006ec6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006eca:	e10e      	b.n	80070ea <UART_SetConfig+0x2fe>
 8006ecc:	2308      	movs	r3, #8
 8006ece:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ed2:	e10a      	b.n	80070ea <UART_SetConfig+0x2fe>
 8006ed4:	2310      	movs	r3, #16
 8006ed6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006eda:	e106      	b.n	80070ea <UART_SetConfig+0x2fe>
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a7c      	ldr	r2, [pc, #496]	@ (80070d4 <UART_SetConfig+0x2e8>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d138      	bne.n	8006f58 <UART_SetConfig+0x16c>
 8006ee6:	4b7a      	ldr	r3, [pc, #488]	@ (80070d0 <UART_SetConfig+0x2e4>)
 8006ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006eec:	f003 030c 	and.w	r3, r3, #12
 8006ef0:	2b0c      	cmp	r3, #12
 8006ef2:	d82d      	bhi.n	8006f50 <UART_SetConfig+0x164>
 8006ef4:	a201      	add	r2, pc, #4	@ (adr r2, 8006efc <UART_SetConfig+0x110>)
 8006ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006efa:	bf00      	nop
 8006efc:	08006f31 	.word	0x08006f31
 8006f00:	08006f51 	.word	0x08006f51
 8006f04:	08006f51 	.word	0x08006f51
 8006f08:	08006f51 	.word	0x08006f51
 8006f0c:	08006f41 	.word	0x08006f41
 8006f10:	08006f51 	.word	0x08006f51
 8006f14:	08006f51 	.word	0x08006f51
 8006f18:	08006f51 	.word	0x08006f51
 8006f1c:	08006f39 	.word	0x08006f39
 8006f20:	08006f51 	.word	0x08006f51
 8006f24:	08006f51 	.word	0x08006f51
 8006f28:	08006f51 	.word	0x08006f51
 8006f2c:	08006f49 	.word	0x08006f49
 8006f30:	2300      	movs	r3, #0
 8006f32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f36:	e0d8      	b.n	80070ea <UART_SetConfig+0x2fe>
 8006f38:	2302      	movs	r3, #2
 8006f3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f3e:	e0d4      	b.n	80070ea <UART_SetConfig+0x2fe>
 8006f40:	2304      	movs	r3, #4
 8006f42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f46:	e0d0      	b.n	80070ea <UART_SetConfig+0x2fe>
 8006f48:	2308      	movs	r3, #8
 8006f4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f4e:	e0cc      	b.n	80070ea <UART_SetConfig+0x2fe>
 8006f50:	2310      	movs	r3, #16
 8006f52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f56:	e0c8      	b.n	80070ea <UART_SetConfig+0x2fe>
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a5e      	ldr	r2, [pc, #376]	@ (80070d8 <UART_SetConfig+0x2ec>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d125      	bne.n	8006fae <UART_SetConfig+0x1c2>
 8006f62:	4b5b      	ldr	r3, [pc, #364]	@ (80070d0 <UART_SetConfig+0x2e4>)
 8006f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f68:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006f6c:	2b30      	cmp	r3, #48	@ 0x30
 8006f6e:	d016      	beq.n	8006f9e <UART_SetConfig+0x1b2>
 8006f70:	2b30      	cmp	r3, #48	@ 0x30
 8006f72:	d818      	bhi.n	8006fa6 <UART_SetConfig+0x1ba>
 8006f74:	2b20      	cmp	r3, #32
 8006f76:	d00a      	beq.n	8006f8e <UART_SetConfig+0x1a2>
 8006f78:	2b20      	cmp	r3, #32
 8006f7a:	d814      	bhi.n	8006fa6 <UART_SetConfig+0x1ba>
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d002      	beq.n	8006f86 <UART_SetConfig+0x19a>
 8006f80:	2b10      	cmp	r3, #16
 8006f82:	d008      	beq.n	8006f96 <UART_SetConfig+0x1aa>
 8006f84:	e00f      	b.n	8006fa6 <UART_SetConfig+0x1ba>
 8006f86:	2300      	movs	r3, #0
 8006f88:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f8c:	e0ad      	b.n	80070ea <UART_SetConfig+0x2fe>
 8006f8e:	2302      	movs	r3, #2
 8006f90:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f94:	e0a9      	b.n	80070ea <UART_SetConfig+0x2fe>
 8006f96:	2304      	movs	r3, #4
 8006f98:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f9c:	e0a5      	b.n	80070ea <UART_SetConfig+0x2fe>
 8006f9e:	2308      	movs	r3, #8
 8006fa0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fa4:	e0a1      	b.n	80070ea <UART_SetConfig+0x2fe>
 8006fa6:	2310      	movs	r3, #16
 8006fa8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fac:	e09d      	b.n	80070ea <UART_SetConfig+0x2fe>
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a4a      	ldr	r2, [pc, #296]	@ (80070dc <UART_SetConfig+0x2f0>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d125      	bne.n	8007004 <UART_SetConfig+0x218>
 8006fb8:	4b45      	ldr	r3, [pc, #276]	@ (80070d0 <UART_SetConfig+0x2e4>)
 8006fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fbe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006fc2:	2bc0      	cmp	r3, #192	@ 0xc0
 8006fc4:	d016      	beq.n	8006ff4 <UART_SetConfig+0x208>
 8006fc6:	2bc0      	cmp	r3, #192	@ 0xc0
 8006fc8:	d818      	bhi.n	8006ffc <UART_SetConfig+0x210>
 8006fca:	2b80      	cmp	r3, #128	@ 0x80
 8006fcc:	d00a      	beq.n	8006fe4 <UART_SetConfig+0x1f8>
 8006fce:	2b80      	cmp	r3, #128	@ 0x80
 8006fd0:	d814      	bhi.n	8006ffc <UART_SetConfig+0x210>
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d002      	beq.n	8006fdc <UART_SetConfig+0x1f0>
 8006fd6:	2b40      	cmp	r3, #64	@ 0x40
 8006fd8:	d008      	beq.n	8006fec <UART_SetConfig+0x200>
 8006fda:	e00f      	b.n	8006ffc <UART_SetConfig+0x210>
 8006fdc:	2300      	movs	r3, #0
 8006fde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fe2:	e082      	b.n	80070ea <UART_SetConfig+0x2fe>
 8006fe4:	2302      	movs	r3, #2
 8006fe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fea:	e07e      	b.n	80070ea <UART_SetConfig+0x2fe>
 8006fec:	2304      	movs	r3, #4
 8006fee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ff2:	e07a      	b.n	80070ea <UART_SetConfig+0x2fe>
 8006ff4:	2308      	movs	r3, #8
 8006ff6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ffa:	e076      	b.n	80070ea <UART_SetConfig+0x2fe>
 8006ffc:	2310      	movs	r3, #16
 8006ffe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007002:	e072      	b.n	80070ea <UART_SetConfig+0x2fe>
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a35      	ldr	r2, [pc, #212]	@ (80070e0 <UART_SetConfig+0x2f4>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d12a      	bne.n	8007064 <UART_SetConfig+0x278>
 800700e:	4b30      	ldr	r3, [pc, #192]	@ (80070d0 <UART_SetConfig+0x2e4>)
 8007010:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007014:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007018:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800701c:	d01a      	beq.n	8007054 <UART_SetConfig+0x268>
 800701e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007022:	d81b      	bhi.n	800705c <UART_SetConfig+0x270>
 8007024:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007028:	d00c      	beq.n	8007044 <UART_SetConfig+0x258>
 800702a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800702e:	d815      	bhi.n	800705c <UART_SetConfig+0x270>
 8007030:	2b00      	cmp	r3, #0
 8007032:	d003      	beq.n	800703c <UART_SetConfig+0x250>
 8007034:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007038:	d008      	beq.n	800704c <UART_SetConfig+0x260>
 800703a:	e00f      	b.n	800705c <UART_SetConfig+0x270>
 800703c:	2300      	movs	r3, #0
 800703e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007042:	e052      	b.n	80070ea <UART_SetConfig+0x2fe>
 8007044:	2302      	movs	r3, #2
 8007046:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800704a:	e04e      	b.n	80070ea <UART_SetConfig+0x2fe>
 800704c:	2304      	movs	r3, #4
 800704e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007052:	e04a      	b.n	80070ea <UART_SetConfig+0x2fe>
 8007054:	2308      	movs	r3, #8
 8007056:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800705a:	e046      	b.n	80070ea <UART_SetConfig+0x2fe>
 800705c:	2310      	movs	r3, #16
 800705e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007062:	e042      	b.n	80070ea <UART_SetConfig+0x2fe>
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a17      	ldr	r2, [pc, #92]	@ (80070c8 <UART_SetConfig+0x2dc>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d13a      	bne.n	80070e4 <UART_SetConfig+0x2f8>
 800706e:	4b18      	ldr	r3, [pc, #96]	@ (80070d0 <UART_SetConfig+0x2e4>)
 8007070:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007074:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007078:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800707c:	d01a      	beq.n	80070b4 <UART_SetConfig+0x2c8>
 800707e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007082:	d81b      	bhi.n	80070bc <UART_SetConfig+0x2d0>
 8007084:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007088:	d00c      	beq.n	80070a4 <UART_SetConfig+0x2b8>
 800708a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800708e:	d815      	bhi.n	80070bc <UART_SetConfig+0x2d0>
 8007090:	2b00      	cmp	r3, #0
 8007092:	d003      	beq.n	800709c <UART_SetConfig+0x2b0>
 8007094:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007098:	d008      	beq.n	80070ac <UART_SetConfig+0x2c0>
 800709a:	e00f      	b.n	80070bc <UART_SetConfig+0x2d0>
 800709c:	2300      	movs	r3, #0
 800709e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070a2:	e022      	b.n	80070ea <UART_SetConfig+0x2fe>
 80070a4:	2302      	movs	r3, #2
 80070a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070aa:	e01e      	b.n	80070ea <UART_SetConfig+0x2fe>
 80070ac:	2304      	movs	r3, #4
 80070ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070b2:	e01a      	b.n	80070ea <UART_SetConfig+0x2fe>
 80070b4:	2308      	movs	r3, #8
 80070b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070ba:	e016      	b.n	80070ea <UART_SetConfig+0x2fe>
 80070bc:	2310      	movs	r3, #16
 80070be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070c2:	e012      	b.n	80070ea <UART_SetConfig+0x2fe>
 80070c4:	cfff69f3 	.word	0xcfff69f3
 80070c8:	40008000 	.word	0x40008000
 80070cc:	40013800 	.word	0x40013800
 80070d0:	40021000 	.word	0x40021000
 80070d4:	40004400 	.word	0x40004400
 80070d8:	40004800 	.word	0x40004800
 80070dc:	40004c00 	.word	0x40004c00
 80070e0:	40005000 	.word	0x40005000
 80070e4:	2310      	movs	r3, #16
 80070e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4aae      	ldr	r2, [pc, #696]	@ (80073a8 <UART_SetConfig+0x5bc>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	f040 8097 	bne.w	8007224 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80070f6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80070fa:	2b08      	cmp	r3, #8
 80070fc:	d823      	bhi.n	8007146 <UART_SetConfig+0x35a>
 80070fe:	a201      	add	r2, pc, #4	@ (adr r2, 8007104 <UART_SetConfig+0x318>)
 8007100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007104:	08007129 	.word	0x08007129
 8007108:	08007147 	.word	0x08007147
 800710c:	08007131 	.word	0x08007131
 8007110:	08007147 	.word	0x08007147
 8007114:	08007137 	.word	0x08007137
 8007118:	08007147 	.word	0x08007147
 800711c:	08007147 	.word	0x08007147
 8007120:	08007147 	.word	0x08007147
 8007124:	0800713f 	.word	0x0800713f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007128:	f7fd fefa 	bl	8004f20 <HAL_RCC_GetPCLK1Freq>
 800712c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800712e:	e010      	b.n	8007152 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007130:	4b9e      	ldr	r3, [pc, #632]	@ (80073ac <UART_SetConfig+0x5c0>)
 8007132:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007134:	e00d      	b.n	8007152 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007136:	f7fd fe5b 	bl	8004df0 <HAL_RCC_GetSysClockFreq>
 800713a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800713c:	e009      	b.n	8007152 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800713e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007142:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007144:	e005      	b.n	8007152 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007146:	2300      	movs	r3, #0
 8007148:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007150:	bf00      	nop
>>>>>>> Stashed changes
    }

    /* If proper clock source reported */
    if (pclk != 0U)
<<<<<<< Updated upstream
 8007106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007108:	2b00      	cmp	r3, #0
 800710a:	f000 8130 	beq.w	800736e <UART_SetConfig+0x5ce>
=======
 8007152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007154:	2b00      	cmp	r3, #0
 8007156:	f000 8130 	beq.w	80073ba <UART_SetConfig+0x5ce>
>>>>>>> Stashed changes
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
<<<<<<< Updated upstream
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007112:	4a94      	ldr	r2, [pc, #592]	@ (8007364 <UART_SetConfig+0x5c4>)
 8007114:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007118:	461a      	mov	r2, r3
 800711a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800711c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007120:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	685a      	ldr	r2, [r3, #4]
 8007126:	4613      	mov	r3, r2
 8007128:	005b      	lsls	r3, r3, #1
 800712a:	4413      	add	r3, r2
 800712c:	69ba      	ldr	r2, [r7, #24]
 800712e:	429a      	cmp	r2, r3
 8007130:	d305      	bcc.n	800713e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007138:	69ba      	ldr	r2, [r7, #24]
 800713a:	429a      	cmp	r2, r3
 800713c:	d903      	bls.n	8007146 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007144:	e113      	b.n	800736e <UART_SetConfig+0x5ce>
=======
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800715e:	4a94      	ldr	r2, [pc, #592]	@ (80073b0 <UART_SetConfig+0x5c4>)
 8007160:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007164:	461a      	mov	r2, r3
 8007166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007168:	fbb3 f3f2 	udiv	r3, r3, r2
 800716c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	685a      	ldr	r2, [r3, #4]
 8007172:	4613      	mov	r3, r2
 8007174:	005b      	lsls	r3, r3, #1
 8007176:	4413      	add	r3, r2
 8007178:	69ba      	ldr	r2, [r7, #24]
 800717a:	429a      	cmp	r2, r3
 800717c:	d305      	bcc.n	800718a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007184:	69ba      	ldr	r2, [r7, #24]
 8007186:	429a      	cmp	r2, r3
 8007188:	d903      	bls.n	8007192 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007190:	e113      	b.n	80073ba <UART_SetConfig+0x5ce>
>>>>>>> Stashed changes
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
<<<<<<< Updated upstream
 8007146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007148:	2200      	movs	r2, #0
 800714a:	60bb      	str	r3, [r7, #8]
 800714c:	60fa      	str	r2, [r7, #12]
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007152:	4a84      	ldr	r2, [pc, #528]	@ (8007364 <UART_SetConfig+0x5c4>)
 8007154:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007158:	b29b      	uxth	r3, r3
 800715a:	2200      	movs	r2, #0
 800715c:	603b      	str	r3, [r7, #0]
 800715e:	607a      	str	r2, [r7, #4]
 8007160:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007164:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007168:	f7f9 fda6 	bl	8000cb8 <__aeabi_uldivmod>
 800716c:	4602      	mov	r2, r0
 800716e:	460b      	mov	r3, r1
 8007170:	4610      	mov	r0, r2
 8007172:	4619      	mov	r1, r3
 8007174:	f04f 0200 	mov.w	r2, #0
 8007178:	f04f 0300 	mov.w	r3, #0
 800717c:	020b      	lsls	r3, r1, #8
 800717e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007182:	0202      	lsls	r2, r0, #8
 8007184:	6979      	ldr	r1, [r7, #20]
 8007186:	6849      	ldr	r1, [r1, #4]
 8007188:	0849      	lsrs	r1, r1, #1
 800718a:	2000      	movs	r0, #0
 800718c:	460c      	mov	r4, r1
 800718e:	4605      	mov	r5, r0
 8007190:	eb12 0804 	adds.w	r8, r2, r4
 8007194:	eb43 0905 	adc.w	r9, r3, r5
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	2200      	movs	r2, #0
 800719e:	469a      	mov	sl, r3
 80071a0:	4693      	mov	fp, r2
 80071a2:	4652      	mov	r2, sl
 80071a4:	465b      	mov	r3, fp
 80071a6:	4640      	mov	r0, r8
 80071a8:	4649      	mov	r1, r9
 80071aa:	f7f9 fd85 	bl	8000cb8 <__aeabi_uldivmod>
 80071ae:	4602      	mov	r2, r0
 80071b0:	460b      	mov	r3, r1
 80071b2:	4613      	mov	r3, r2
 80071b4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80071b6:	6a3b      	ldr	r3, [r7, #32]
 80071b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071bc:	d308      	bcc.n	80071d0 <UART_SetConfig+0x430>
 80071be:	6a3b      	ldr	r3, [r7, #32]
 80071c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80071c4:	d204      	bcs.n	80071d0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	6a3a      	ldr	r2, [r7, #32]
 80071cc:	60da      	str	r2, [r3, #12]
 80071ce:	e0ce      	b.n	800736e <UART_SetConfig+0x5ce>
=======
 8007192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007194:	2200      	movs	r2, #0
 8007196:	60bb      	str	r3, [r7, #8]
 8007198:	60fa      	str	r2, [r7, #12]
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800719e:	4a84      	ldr	r2, [pc, #528]	@ (80073b0 <UART_SetConfig+0x5c4>)
 80071a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	2200      	movs	r2, #0
 80071a8:	603b      	str	r3, [r7, #0]
 80071aa:	607a      	str	r2, [r7, #4]
 80071ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80071b4:	f7f9 fd80 	bl	8000cb8 <__aeabi_uldivmod>
 80071b8:	4602      	mov	r2, r0
 80071ba:	460b      	mov	r3, r1
 80071bc:	4610      	mov	r0, r2
 80071be:	4619      	mov	r1, r3
 80071c0:	f04f 0200 	mov.w	r2, #0
 80071c4:	f04f 0300 	mov.w	r3, #0
 80071c8:	020b      	lsls	r3, r1, #8
 80071ca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80071ce:	0202      	lsls	r2, r0, #8
 80071d0:	6979      	ldr	r1, [r7, #20]
 80071d2:	6849      	ldr	r1, [r1, #4]
 80071d4:	0849      	lsrs	r1, r1, #1
 80071d6:	2000      	movs	r0, #0
 80071d8:	460c      	mov	r4, r1
 80071da:	4605      	mov	r5, r0
 80071dc:	eb12 0804 	adds.w	r8, r2, r4
 80071e0:	eb43 0905 	adc.w	r9, r3, r5
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	469a      	mov	sl, r3
 80071ec:	4693      	mov	fp, r2
 80071ee:	4652      	mov	r2, sl
 80071f0:	465b      	mov	r3, fp
 80071f2:	4640      	mov	r0, r8
 80071f4:	4649      	mov	r1, r9
 80071f6:	f7f9 fd5f 	bl	8000cb8 <__aeabi_uldivmod>
 80071fa:	4602      	mov	r2, r0
 80071fc:	460b      	mov	r3, r1
 80071fe:	4613      	mov	r3, r2
 8007200:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007202:	6a3b      	ldr	r3, [r7, #32]
 8007204:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007208:	d308      	bcc.n	800721c <UART_SetConfig+0x430>
 800720a:	6a3b      	ldr	r3, [r7, #32]
 800720c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007210:	d204      	bcs.n	800721c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	6a3a      	ldr	r2, [r7, #32]
 8007218:	60da      	str	r2, [r3, #12]
 800721a:	e0ce      	b.n	80073ba <UART_SetConfig+0x5ce>
>>>>>>> Stashed changes
        }
        else
        {
          ret = HAL_ERROR;
<<<<<<< Updated upstream
 80071d0:	2301      	movs	r3, #1
 80071d2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80071d6:	e0ca      	b.n	800736e <UART_SetConfig+0x5ce>
=======
 800721c:	2301      	movs	r3, #1
 800721e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007222:	e0ca      	b.n	80073ba <UART_SetConfig+0x5ce>
>>>>>>> Stashed changes
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
<<<<<<< Updated upstream
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	69db      	ldr	r3, [r3, #28]
 80071dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80071e0:	d166      	bne.n	80072b0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80071e2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80071e6:	2b08      	cmp	r3, #8
 80071e8:	d827      	bhi.n	800723a <UART_SetConfig+0x49a>
 80071ea:	a201      	add	r2, pc, #4	@ (adr r2, 80071f0 <UART_SetConfig+0x450>)
 80071ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f0:	08007215 	.word	0x08007215
 80071f4:	0800721d 	.word	0x0800721d
 80071f8:	08007225 	.word	0x08007225
 80071fc:	0800723b 	.word	0x0800723b
 8007200:	0800722b 	.word	0x0800722b
 8007204:	0800723b 	.word	0x0800723b
 8007208:	0800723b 	.word	0x0800723b
 800720c:	0800723b 	.word	0x0800723b
 8007210:	08007233 	.word	0x08007233
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007214:	f7fd fe5e 	bl	8004ed4 <HAL_RCC_GetPCLK1Freq>
 8007218:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800721a:	e014      	b.n	8007246 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800721c:	f7fd fe70 	bl	8004f00 <HAL_RCC_GetPCLK2Freq>
 8007220:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007222:	e010      	b.n	8007246 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007224:	4b4e      	ldr	r3, [pc, #312]	@ (8007360 <UART_SetConfig+0x5c0>)
 8007226:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007228:	e00d      	b.n	8007246 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800722a:	f7fd fdbb 	bl	8004da4 <HAL_RCC_GetSysClockFreq>
 800722e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007230:	e009      	b.n	8007246 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007232:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007236:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007238:	e005      	b.n	8007246 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800723a:	2300      	movs	r3, #0
 800723c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800723e:	2301      	movs	r3, #1
 8007240:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007244:	bf00      	nop
=======
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	69db      	ldr	r3, [r3, #28]
 8007228:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800722c:	d166      	bne.n	80072fc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800722e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007232:	2b08      	cmp	r3, #8
 8007234:	d827      	bhi.n	8007286 <UART_SetConfig+0x49a>
 8007236:	a201      	add	r2, pc, #4	@ (adr r2, 800723c <UART_SetConfig+0x450>)
 8007238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800723c:	08007261 	.word	0x08007261
 8007240:	08007269 	.word	0x08007269
 8007244:	08007271 	.word	0x08007271
 8007248:	08007287 	.word	0x08007287
 800724c:	08007277 	.word	0x08007277
 8007250:	08007287 	.word	0x08007287
 8007254:	08007287 	.word	0x08007287
 8007258:	08007287 	.word	0x08007287
 800725c:	0800727f 	.word	0x0800727f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007260:	f7fd fe5e 	bl	8004f20 <HAL_RCC_GetPCLK1Freq>
 8007264:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007266:	e014      	b.n	8007292 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007268:	f7fd fe70 	bl	8004f4c <HAL_RCC_GetPCLK2Freq>
 800726c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800726e:	e010      	b.n	8007292 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007270:	4b4e      	ldr	r3, [pc, #312]	@ (80073ac <UART_SetConfig+0x5c0>)
 8007272:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007274:	e00d      	b.n	8007292 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007276:	f7fd fdbb 	bl	8004df0 <HAL_RCC_GetSysClockFreq>
 800727a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800727c:	e009      	b.n	8007292 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800727e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007282:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007284:	e005      	b.n	8007292 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007286:	2300      	movs	r3, #0
 8007288:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007290:	bf00      	nop
>>>>>>> Stashed changes
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
<<<<<<< Updated upstream
 8007246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007248:	2b00      	cmp	r3, #0
 800724a:	f000 8090 	beq.w	800736e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007252:	4a44      	ldr	r2, [pc, #272]	@ (8007364 <UART_SetConfig+0x5c4>)
 8007254:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007258:	461a      	mov	r2, r3
 800725a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800725c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007260:	005a      	lsls	r2, r3, #1
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	085b      	lsrs	r3, r3, #1
 8007268:	441a      	add	r2, r3
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007272:	623b      	str	r3, [r7, #32]
=======
 8007292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007294:	2b00      	cmp	r3, #0
 8007296:	f000 8090 	beq.w	80073ba <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800729e:	4a44      	ldr	r2, [pc, #272]	@ (80073b0 <UART_SetConfig+0x5c4>)
 80072a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072a4:	461a      	mov	r2, r3
 80072a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80072ac:	005a      	lsls	r2, r3, #1
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	085b      	lsrs	r3, r3, #1
 80072b4:	441a      	add	r2, r3
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80072be:	623b      	str	r3, [r7, #32]
>>>>>>> Stashed changes
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
<<<<<<< Updated upstream
 8007274:	6a3b      	ldr	r3, [r7, #32]
 8007276:	2b0f      	cmp	r3, #15
 8007278:	d916      	bls.n	80072a8 <UART_SetConfig+0x508>
 800727a:	6a3b      	ldr	r3, [r7, #32]
 800727c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007280:	d212      	bcs.n	80072a8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007282:	6a3b      	ldr	r3, [r7, #32]
 8007284:	b29b      	uxth	r3, r3
 8007286:	f023 030f 	bic.w	r3, r3, #15
 800728a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800728c:	6a3b      	ldr	r3, [r7, #32]
 800728e:	085b      	lsrs	r3, r3, #1
 8007290:	b29b      	uxth	r3, r3
 8007292:	f003 0307 	and.w	r3, r3, #7
 8007296:	b29a      	uxth	r2, r3
 8007298:	8bfb      	ldrh	r3, [r7, #30]
 800729a:	4313      	orrs	r3, r2
 800729c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	8bfa      	ldrh	r2, [r7, #30]
 80072a4:	60da      	str	r2, [r3, #12]
 80072a6:	e062      	b.n	800736e <UART_SetConfig+0x5ce>
=======
 80072c0:	6a3b      	ldr	r3, [r7, #32]
 80072c2:	2b0f      	cmp	r3, #15
 80072c4:	d916      	bls.n	80072f4 <UART_SetConfig+0x508>
 80072c6:	6a3b      	ldr	r3, [r7, #32]
 80072c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072cc:	d212      	bcs.n	80072f4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80072ce:	6a3b      	ldr	r3, [r7, #32]
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	f023 030f 	bic.w	r3, r3, #15
 80072d6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80072d8:	6a3b      	ldr	r3, [r7, #32]
 80072da:	085b      	lsrs	r3, r3, #1
 80072dc:	b29b      	uxth	r3, r3
 80072de:	f003 0307 	and.w	r3, r3, #7
 80072e2:	b29a      	uxth	r2, r3
 80072e4:	8bfb      	ldrh	r3, [r7, #30]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	8bfa      	ldrh	r2, [r7, #30]
 80072f0:	60da      	str	r2, [r3, #12]
 80072f2:	e062      	b.n	80073ba <UART_SetConfig+0x5ce>
>>>>>>> Stashed changes
      }
      else
      {
        ret = HAL_ERROR;
<<<<<<< Updated upstream
 80072a8:	2301      	movs	r3, #1
 80072aa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80072ae:	e05e      	b.n	800736e <UART_SetConfig+0x5ce>
=======
 80072f4:	2301      	movs	r3, #1
 80072f6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80072fa:	e05e      	b.n	80073ba <UART_SetConfig+0x5ce>
>>>>>>> Stashed changes
      }
    }
  }
  else
  {
    switch (clocksource)
<<<<<<< Updated upstream
 80072b0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80072b4:	2b08      	cmp	r3, #8
 80072b6:	d828      	bhi.n	800730a <UART_SetConfig+0x56a>
 80072b8:	a201      	add	r2, pc, #4	@ (adr r2, 80072c0 <UART_SetConfig+0x520>)
 80072ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072be:	bf00      	nop
 80072c0:	080072e5 	.word	0x080072e5
 80072c4:	080072ed 	.word	0x080072ed
 80072c8:	080072f5 	.word	0x080072f5
 80072cc:	0800730b 	.word	0x0800730b
 80072d0:	080072fb 	.word	0x080072fb
 80072d4:	0800730b 	.word	0x0800730b
 80072d8:	0800730b 	.word	0x0800730b
 80072dc:	0800730b 	.word	0x0800730b
 80072e0:	08007303 	.word	0x08007303
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072e4:	f7fd fdf6 	bl	8004ed4 <HAL_RCC_GetPCLK1Freq>
 80072e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80072ea:	e014      	b.n	8007316 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072ec:	f7fd fe08 	bl	8004f00 <HAL_RCC_GetPCLK2Freq>
 80072f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80072f2:	e010      	b.n	8007316 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072f4:	4b1a      	ldr	r3, [pc, #104]	@ (8007360 <UART_SetConfig+0x5c0>)
 80072f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80072f8:	e00d      	b.n	8007316 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072fa:	f7fd fd53 	bl	8004da4 <HAL_RCC_GetSysClockFreq>
 80072fe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007300:	e009      	b.n	8007316 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007302:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007306:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007308:	e005      	b.n	8007316 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800730a:	2300      	movs	r3, #0
 800730c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007314:	bf00      	nop
    }

    if (pclk != 0U)
 8007316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007318:	2b00      	cmp	r3, #0
 800731a:	d028      	beq.n	800736e <UART_SetConfig+0x5ce>
=======
 80072fc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007300:	2b08      	cmp	r3, #8
 8007302:	d828      	bhi.n	8007356 <UART_SetConfig+0x56a>
 8007304:	a201      	add	r2, pc, #4	@ (adr r2, 800730c <UART_SetConfig+0x520>)
 8007306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800730a:	bf00      	nop
 800730c:	08007331 	.word	0x08007331
 8007310:	08007339 	.word	0x08007339
 8007314:	08007341 	.word	0x08007341
 8007318:	08007357 	.word	0x08007357
 800731c:	08007347 	.word	0x08007347
 8007320:	08007357 	.word	0x08007357
 8007324:	08007357 	.word	0x08007357
 8007328:	08007357 	.word	0x08007357
 800732c:	0800734f 	.word	0x0800734f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007330:	f7fd fdf6 	bl	8004f20 <HAL_RCC_GetPCLK1Freq>
 8007334:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007336:	e014      	b.n	8007362 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007338:	f7fd fe08 	bl	8004f4c <HAL_RCC_GetPCLK2Freq>
 800733c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800733e:	e010      	b.n	8007362 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007340:	4b1a      	ldr	r3, [pc, #104]	@ (80073ac <UART_SetConfig+0x5c0>)
 8007342:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007344:	e00d      	b.n	8007362 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007346:	f7fd fd53 	bl	8004df0 <HAL_RCC_GetSysClockFreq>
 800734a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800734c:	e009      	b.n	8007362 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800734e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007352:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007354:	e005      	b.n	8007362 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007356:	2300      	movs	r3, #0
 8007358:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007360:	bf00      	nop
    }

    if (pclk != 0U)
 8007362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007364:	2b00      	cmp	r3, #0
 8007366:	d028      	beq.n	80073ba <UART_SetConfig+0x5ce>
>>>>>>> Stashed changes
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
<<<<<<< Updated upstream
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007320:	4a10      	ldr	r2, [pc, #64]	@ (8007364 <UART_SetConfig+0x5c4>)
 8007322:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007326:	461a      	mov	r2, r3
 8007328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800732a:	fbb3 f2f2 	udiv	r2, r3, r2
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	085b      	lsrs	r3, r3, #1
 8007334:	441a      	add	r2, r3
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	fbb2 f3f3 	udiv	r3, r2, r3
 800733e:	623b      	str	r3, [r7, #32]
=======
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800736c:	4a10      	ldr	r2, [pc, #64]	@ (80073b0 <UART_SetConfig+0x5c4>)
 800736e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007372:	461a      	mov	r2, r3
 8007374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007376:	fbb3 f2f2 	udiv	r2, r3, r2
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	085b      	lsrs	r3, r3, #1
 8007380:	441a      	add	r2, r3
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	fbb2 f3f3 	udiv	r3, r2, r3
 800738a:	623b      	str	r3, [r7, #32]
>>>>>>> Stashed changes
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
<<<<<<< Updated upstream
 8007340:	6a3b      	ldr	r3, [r7, #32]
 8007342:	2b0f      	cmp	r3, #15
 8007344:	d910      	bls.n	8007368 <UART_SetConfig+0x5c8>
 8007346:	6a3b      	ldr	r3, [r7, #32]
 8007348:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800734c:	d20c      	bcs.n	8007368 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800734e:	6a3b      	ldr	r3, [r7, #32]
 8007350:	b29a      	uxth	r2, r3
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	60da      	str	r2, [r3, #12]
 8007358:	e009      	b.n	800736e <UART_SetConfig+0x5ce>
 800735a:	bf00      	nop
 800735c:	40008000 	.word	0x40008000
 8007360:	00f42400 	.word	0x00f42400
 8007364:	0800d3fc 	.word	0x0800d3fc
=======
 800738c:	6a3b      	ldr	r3, [r7, #32]
 800738e:	2b0f      	cmp	r3, #15
 8007390:	d910      	bls.n	80073b4 <UART_SetConfig+0x5c8>
 8007392:	6a3b      	ldr	r3, [r7, #32]
 8007394:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007398:	d20c      	bcs.n	80073b4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800739a:	6a3b      	ldr	r3, [r7, #32]
 800739c:	b29a      	uxth	r2, r3
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	60da      	str	r2, [r3, #12]
 80073a4:	e009      	b.n	80073ba <UART_SetConfig+0x5ce>
 80073a6:	bf00      	nop
 80073a8:	40008000 	.word	0x40008000
 80073ac:	00f42400 	.word	0x00f42400
 80073b0:	0800d450 	.word	0x0800d450
>>>>>>> Stashed changes
      }
      else
      {
        ret = HAL_ERROR;
<<<<<<< Updated upstream
 8007368:	2301      	movs	r3, #1
 800736a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
=======
 80073b4:	2301      	movs	r3, #1
 80073b6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
>>>>>>> Stashed changes
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
<<<<<<< Updated upstream
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	2201      	movs	r2, #1
 8007372:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	2201      	movs	r2, #1
 800737a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
=======
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	2201      	movs	r2, #1
 80073be:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	2201      	movs	r2, #1
 80073c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
>>>>>>> Stashed changes
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
<<<<<<< Updated upstream
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	2200      	movs	r2, #0
 8007382:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	2200      	movs	r2, #0
 8007388:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800738a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800738e:	4618      	mov	r0, r3
 8007390:	3730      	adds	r7, #48	@ 0x30
 8007392:	46bd      	mov	sp, r7
 8007394:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007398 <UART_AdvFeatureConfig>:
=======
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	2200      	movs	r2, #0
 80073ce:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	2200      	movs	r2, #0
 80073d4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80073d6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3730      	adds	r7, #48	@ 0x30
 80073de:	46bd      	mov	sp, r7
 80073e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080073e4 <UART_AdvFeatureConfig>:
>>>>>>> Stashed changes
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8007398:	b480      	push	{r7}
 800739a:	b083      	sub	sp, #12
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
=======
 80073e4:	b480      	push	{r7}
 80073e6:	b083      	sub	sp, #12
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
<<<<<<< Updated upstream
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073a4:	f003 0308 	and.w	r3, r3, #8
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d00a      	beq.n	80073c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	430a      	orrs	r2, r1
 80073c0:	605a      	str	r2, [r3, #4]
=======
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073f0:	f003 0308 	and.w	r3, r3, #8
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d00a      	beq.n	800740e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	430a      	orrs	r2, r1
 800740c:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
<<<<<<< Updated upstream
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073c6:	f003 0301 	and.w	r3, r3, #1
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00a      	beq.n	80073e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	430a      	orrs	r2, r1
 80073e2:	605a      	str	r2, [r3, #4]
=======
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007412:	f003 0301 	and.w	r3, r3, #1
 8007416:	2b00      	cmp	r3, #0
 8007418:	d00a      	beq.n	8007430 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	430a      	orrs	r2, r1
 800742e:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
<<<<<<< Updated upstream
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073e8:	f003 0302 	and.w	r3, r3, #2
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d00a      	beq.n	8007406 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	430a      	orrs	r2, r1
 8007404:	605a      	str	r2, [r3, #4]
=======
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007434:	f003 0302 	and.w	r3, r3, #2
 8007438:	2b00      	cmp	r3, #0
 800743a:	d00a      	beq.n	8007452 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	430a      	orrs	r2, r1
 8007450:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
<<<<<<< Updated upstream
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800740a:	f003 0304 	and.w	r3, r3, #4
 800740e:	2b00      	cmp	r3, #0
 8007410:	d00a      	beq.n	8007428 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	430a      	orrs	r2, r1
 8007426:	605a      	str	r2, [r3, #4]
=======
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007456:	f003 0304 	and.w	r3, r3, #4
 800745a:	2b00      	cmp	r3, #0
 800745c:	d00a      	beq.n	8007474 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	430a      	orrs	r2, r1
 8007472:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
<<<<<<< Updated upstream
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800742c:	f003 0310 	and.w	r3, r3, #16
 8007430:	2b00      	cmp	r3, #0
 8007432:	d00a      	beq.n	800744a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	430a      	orrs	r2, r1
 8007448:	609a      	str	r2, [r3, #8]
=======
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007478:	f003 0310 	and.w	r3, r3, #16
 800747c:	2b00      	cmp	r3, #0
 800747e:	d00a      	beq.n	8007496 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	430a      	orrs	r2, r1
 8007494:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
<<<<<<< Updated upstream
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800744e:	f003 0320 	and.w	r3, r3, #32
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00a      	beq.n	800746c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	430a      	orrs	r2, r1
 800746a:	609a      	str	r2, [r3, #8]
=======
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800749a:	f003 0320 	and.w	r3, r3, #32
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d00a      	beq.n	80074b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	430a      	orrs	r2, r1
 80074b6:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
<<<<<<< Updated upstream
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007470:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007474:	2b00      	cmp	r3, #0
 8007476:	d01a      	beq.n	80074ae <UART_AdvFeatureConfig+0x116>
=======
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d01a      	beq.n	80074fa <UART_AdvFeatureConfig+0x116>
>>>>>>> Stashed changes
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
<<<<<<< Updated upstream
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	430a      	orrs	r2, r1
 800748c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007492:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007496:	d10a      	bne.n	80074ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	430a      	orrs	r2, r1
 80074ac:	605a      	str	r2, [r3, #4]
=======
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	430a      	orrs	r2, r1
 80074d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80074e2:	d10a      	bne.n	80074fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	430a      	orrs	r2, r1
 80074f8:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
<<<<<<< Updated upstream
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d00a      	beq.n	80074d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	430a      	orrs	r2, r1
 80074ce:	605a      	str	r2, [r3, #4]
  }
}
 80074d0:	bf00      	nop
 80074d2:	370c      	adds	r7, #12
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <UART_CheckIdleState>:
=======
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007502:	2b00      	cmp	r3, #0
 8007504:	d00a      	beq.n	800751c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	430a      	orrs	r2, r1
 800751a:	605a      	str	r2, [r3, #4]
  }
}
 800751c:	bf00      	nop
 800751e:	370c      	adds	r7, #12
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <UART_CheckIdleState>:
>>>>>>> Stashed changes
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 80074dc:	b580      	push	{r7, lr}
 80074de:	b098      	sub	sp, #96	@ 0x60
 80074e0:	af02      	add	r7, sp, #8
 80074e2:	6078      	str	r0, [r7, #4]
=======
 8007528:	b580      	push	{r7, lr}
 800752a:	b098      	sub	sp, #96	@ 0x60
 800752c:	af02      	add	r7, sp, #8
 800752e:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
<<<<<<< Updated upstream
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80074ec:	f7fb f904 	bl	80026f8 <HAL_GetTick>
 80074f0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f003 0308 	and.w	r3, r3, #8
 80074fc:	2b08      	cmp	r3, #8
 80074fe:	d12f      	bne.n	8007560 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007500:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007504:	9300      	str	r3, [sp, #0]
 8007506:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007508:	2200      	movs	r2, #0
 800750a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 f88e 	bl	8007630 <UART_WaitOnFlagUntilTimeout>
 8007514:	4603      	mov	r3, r0
 8007516:	2b00      	cmp	r3, #0
 8007518:	d022      	beq.n	8007560 <UART_CheckIdleState+0x84>
=======
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007538:	f7fb f904 	bl	8002744 <HAL_GetTick>
 800753c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f003 0308 	and.w	r3, r3, #8
 8007548:	2b08      	cmp	r3, #8
 800754a:	d12f      	bne.n	80075ac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800754c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007550:	9300      	str	r3, [sp, #0]
 8007552:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007554:	2200      	movs	r2, #0
 8007556:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 f88e 	bl	800767c <UART_WaitOnFlagUntilTimeout>
 8007560:	4603      	mov	r3, r0
 8007562:	2b00      	cmp	r3, #0
 8007564:	d022      	beq.n	80075ac <UART_CheckIdleState+0x84>
>>>>>>> Stashed changes
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
<<<<<<< Updated upstream
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007522:	e853 3f00 	ldrex	r3, [r3]
 8007526:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800752a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800752e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	461a      	mov	r2, r3
 8007536:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007538:	647b      	str	r3, [r7, #68]	@ 0x44
 800753a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800753c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800753e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007540:	e841 2300 	strex	r3, r2, [r1]
 8007544:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007546:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007548:	2b00      	cmp	r3, #0
 800754a:	d1e6      	bne.n	800751a <UART_CheckIdleState+0x3e>
=======
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800756c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800756e:	e853 3f00 	ldrex	r3, [r3]
 8007572:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007576:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800757a:	653b      	str	r3, [r7, #80]	@ 0x50
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	461a      	mov	r2, r3
 8007582:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007584:	647b      	str	r3, [r7, #68]	@ 0x44
 8007586:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007588:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800758a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800758c:	e841 2300 	strex	r3, r2, [r1]
 8007590:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007592:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007594:	2b00      	cmp	r3, #0
 8007596:	d1e6      	bne.n	8007566 <UART_CheckIdleState+0x3e>
>>>>>>> Stashed changes
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
<<<<<<< Updated upstream
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2220      	movs	r2, #32
 8007550:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800755c:	2303      	movs	r3, #3
 800755e:	e063      	b.n	8007628 <UART_CheckIdleState+0x14c>
=======
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2220      	movs	r2, #32
 800759c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075a8:	2303      	movs	r3, #3
 80075aa:	e063      	b.n	8007674 <UART_CheckIdleState+0x14c>
>>>>>>> Stashed changes
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
<<<<<<< Updated upstream
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f003 0304 	and.w	r3, r3, #4
 800756a:	2b04      	cmp	r3, #4
 800756c:	d149      	bne.n	8007602 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800756e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007572:	9300      	str	r3, [sp, #0]
 8007574:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007576:	2200      	movs	r2, #0
 8007578:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 f857 	bl	8007630 <UART_WaitOnFlagUntilTimeout>
 8007582:	4603      	mov	r3, r0
 8007584:	2b00      	cmp	r3, #0
 8007586:	d03c      	beq.n	8007602 <UART_CheckIdleState+0x126>
=======
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f003 0304 	and.w	r3, r3, #4
 80075b6:	2b04      	cmp	r3, #4
 80075b8:	d149      	bne.n	800764e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075ba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80075be:	9300      	str	r3, [sp, #0]
 80075c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075c2:	2200      	movs	r2, #0
 80075c4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 f857 	bl	800767c <UART_WaitOnFlagUntilTimeout>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d03c      	beq.n	800764e <UART_CheckIdleState+0x126>
>>>>>>> Stashed changes
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
<<<<<<< Updated upstream
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800758e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007590:	e853 3f00 	ldrex	r3, [r3]
 8007594:	623b      	str	r3, [r7, #32]
   return(result);
 8007596:	6a3b      	ldr	r3, [r7, #32]
 8007598:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800759c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	461a      	mov	r2, r3
 80075a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80075a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80075ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075ae:	e841 2300 	strex	r3, r2, [r1]
 80075b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80075b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d1e6      	bne.n	8007588 <UART_CheckIdleState+0xac>
=======
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075dc:	e853 3f00 	ldrex	r3, [r3]
 80075e0:	623b      	str	r3, [r7, #32]
   return(result);
 80075e2:	6a3b      	ldr	r3, [r7, #32]
 80075e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	461a      	mov	r2, r3
 80075f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80075f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80075f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075fa:	e841 2300 	strex	r3, r2, [r1]
 80075fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007602:	2b00      	cmp	r3, #0
 8007604:	d1e6      	bne.n	80075d4 <UART_CheckIdleState+0xac>
>>>>>>> Stashed changes
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
<<<<<<< Updated upstream
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	3308      	adds	r3, #8
 80075c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	e853 3f00 	ldrex	r3, [r3]
 80075c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f023 0301 	bic.w	r3, r3, #1
 80075d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	3308      	adds	r3, #8
 80075d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80075da:	61fa      	str	r2, [r7, #28]
 80075dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075de:	69b9      	ldr	r1, [r7, #24]
 80075e0:	69fa      	ldr	r2, [r7, #28]
 80075e2:	e841 2300 	strex	r3, r2, [r1]
 80075e6:	617b      	str	r3, [r7, #20]
   return(result);
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d1e5      	bne.n	80075ba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2220      	movs	r2, #32
 80075f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2200      	movs	r2, #0
 80075fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075fe:	2303      	movs	r3, #3
 8007600:	e012      	b.n	8007628 <UART_CheckIdleState+0x14c>
=======
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	3308      	adds	r3, #8
 800760c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	e853 3f00 	ldrex	r3, [r3]
 8007614:	60fb      	str	r3, [r7, #12]
   return(result);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	f023 0301 	bic.w	r3, r3, #1
 800761c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	3308      	adds	r3, #8
 8007624:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007626:	61fa      	str	r2, [r7, #28]
 8007628:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800762a:	69b9      	ldr	r1, [r7, #24]
 800762c:	69fa      	ldr	r2, [r7, #28]
 800762e:	e841 2300 	strex	r3, r2, [r1]
 8007632:	617b      	str	r3, [r7, #20]
   return(result);
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d1e5      	bne.n	8007606 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2220      	movs	r2, #32
 800763e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800764a:	2303      	movs	r3, #3
 800764c:	e012      	b.n	8007674 <UART_CheckIdleState+0x14c>
>>>>>>> Stashed changes
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
<<<<<<< Updated upstream
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2220      	movs	r2, #32
 8007606:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2220      	movs	r2, #32
 800760e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007626:	2300      	movs	r3, #0
}
 8007628:	4618      	mov	r0, r3
 800762a:	3758      	adds	r7, #88	@ 0x58
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <UART_WaitOnFlagUntilTimeout>:
=======
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2220      	movs	r2, #32
 8007652:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2220      	movs	r2, #32
 800765a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007672:	2300      	movs	r3, #0
}
 8007674:	4618      	mov	r0, r3
 8007676:	3758      	adds	r7, #88	@ 0x58
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <UART_WaitOnFlagUntilTimeout>:
>>>>>>> Stashed changes
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
<<<<<<< Updated upstream
 8007630:	b580      	push	{r7, lr}
 8007632:	b084      	sub	sp, #16
 8007634:	af00      	add	r7, sp, #0
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	603b      	str	r3, [r7, #0]
 800763c:	4613      	mov	r3, r2
 800763e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007640:	e04f      	b.n	80076e2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007642:	69bb      	ldr	r3, [r7, #24]
 8007644:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007648:	d04b      	beq.n	80076e2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800764a:	f7fb f855 	bl	80026f8 <HAL_GetTick>
 800764e:	4602      	mov	r2, r0
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	1ad3      	subs	r3, r2, r3
 8007654:	69ba      	ldr	r2, [r7, #24]
 8007656:	429a      	cmp	r2, r3
 8007658:	d302      	bcc.n	8007660 <UART_WaitOnFlagUntilTimeout+0x30>
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d101      	bne.n	8007664 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007660:	2303      	movs	r3, #3
 8007662:	e04e      	b.n	8007702 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f003 0304 	and.w	r3, r3, #4
 800766e:	2b00      	cmp	r3, #0
 8007670:	d037      	beq.n	80076e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	2b80      	cmp	r3, #128	@ 0x80
 8007676:	d034      	beq.n	80076e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	2b40      	cmp	r3, #64	@ 0x40
 800767c:	d031      	beq.n	80076e2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	69db      	ldr	r3, [r3, #28]
 8007684:	f003 0308 	and.w	r3, r3, #8
 8007688:	2b08      	cmp	r3, #8
 800768a:	d110      	bne.n	80076ae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2208      	movs	r2, #8
 8007692:	621a      	str	r2, [r3, #32]
=======
 800767c:	b580      	push	{r7, lr}
 800767e:	b084      	sub	sp, #16
 8007680:	af00      	add	r7, sp, #0
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	603b      	str	r3, [r7, #0]
 8007688:	4613      	mov	r3, r2
 800768a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800768c:	e04f      	b.n	800772e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007694:	d04b      	beq.n	800772e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007696:	f7fb f855 	bl	8002744 <HAL_GetTick>
 800769a:	4602      	mov	r2, r0
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	1ad3      	subs	r3, r2, r3
 80076a0:	69ba      	ldr	r2, [r7, #24]
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d302      	bcc.n	80076ac <UART_WaitOnFlagUntilTimeout+0x30>
 80076a6:	69bb      	ldr	r3, [r7, #24]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d101      	bne.n	80076b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80076ac:	2303      	movs	r3, #3
 80076ae:	e04e      	b.n	800774e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f003 0304 	and.w	r3, r3, #4
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d037      	beq.n	800772e <UART_WaitOnFlagUntilTimeout+0xb2>
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	2b80      	cmp	r3, #128	@ 0x80
 80076c2:	d034      	beq.n	800772e <UART_WaitOnFlagUntilTimeout+0xb2>
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	2b40      	cmp	r3, #64	@ 0x40
 80076c8:	d031      	beq.n	800772e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	69db      	ldr	r3, [r3, #28]
 80076d0:	f003 0308 	and.w	r3, r3, #8
 80076d4:	2b08      	cmp	r3, #8
 80076d6:	d110      	bne.n	80076fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	2208      	movs	r2, #8
 80076de:	621a      	str	r2, [r3, #32]
>>>>>>> Stashed changes

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
<<<<<<< Updated upstream
 8007694:	68f8      	ldr	r0, [r7, #12]
 8007696:	f000 f95b 	bl	8007950 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2208      	movs	r2, #8
 800769e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	e029      	b.n	8007702 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	69db      	ldr	r3, [r3, #28]
 80076b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80076b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076bc:	d111      	bne.n	80076e2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80076c6:	621a      	str	r2, [r3, #32]
=======
 80076e0:	68f8      	ldr	r0, [r7, #12]
 80076e2:	f000 f95b 	bl	800799c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2208      	movs	r2, #8
 80076ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2200      	movs	r2, #0
 80076f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	e029      	b.n	800774e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	69db      	ldr	r3, [r3, #28]
 8007700:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007704:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007708:	d111      	bne.n	800772e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007712:	621a      	str	r2, [r3, #32]
>>>>>>> Stashed changes

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
<<<<<<< Updated upstream
 80076c8:	68f8      	ldr	r0, [r7, #12]
 80076ca:	f000 f941 	bl	8007950 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2220      	movs	r2, #32
 80076d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2200      	movs	r2, #0
 80076da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80076de:	2303      	movs	r3, #3
 80076e0:	e00f      	b.n	8007702 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	69da      	ldr	r2, [r3, #28]
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	4013      	ands	r3, r2
 80076ec:	68ba      	ldr	r2, [r7, #8]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	bf0c      	ite	eq
 80076f2:	2301      	moveq	r3, #1
 80076f4:	2300      	movne	r3, #0
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	461a      	mov	r2, r3
 80076fa:	79fb      	ldrb	r3, [r7, #7]
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d0a0      	beq.n	8007642 <UART_WaitOnFlagUntilTimeout+0x12>
=======
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f000 f941 	bl	800799c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2220      	movs	r2, #32
 800771e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2200      	movs	r2, #0
 8007726:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800772a:	2303      	movs	r3, #3
 800772c:	e00f      	b.n	800774e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	69da      	ldr	r2, [r3, #28]
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	4013      	ands	r3, r2
 8007738:	68ba      	ldr	r2, [r7, #8]
 800773a:	429a      	cmp	r2, r3
 800773c:	bf0c      	ite	eq
 800773e:	2301      	moveq	r3, #1
 8007740:	2300      	movne	r3, #0
 8007742:	b2db      	uxtb	r3, r3
 8007744:	461a      	mov	r2, r3
 8007746:	79fb      	ldrb	r3, [r7, #7]
 8007748:	429a      	cmp	r2, r3
 800774a:	d0a0      	beq.n	800768e <UART_WaitOnFlagUntilTimeout+0x12>
>>>>>>> Stashed changes
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< Updated upstream
 8007700:	2300      	movs	r3, #0
}
 8007702:	4618      	mov	r0, r3
 8007704:	3710      	adds	r7, #16
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
	...

0800770c <UART_Start_Receive_IT>:
=======
 800774c:	2300      	movs	r3, #0
}
 800774e:	4618      	mov	r0, r3
 8007750:	3710      	adds	r7, #16
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
	...

08007758 <UART_Start_Receive_IT>:
>>>>>>> Stashed changes
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< Updated upstream
 800770c:	b480      	push	{r7}
 800770e:	b0a3      	sub	sp, #140	@ 0x8c
 8007710:	af00      	add	r7, sp, #0
 8007712:	60f8      	str	r0, [r7, #12]
 8007714:	60b9      	str	r1, [r7, #8]
 8007716:	4613      	mov	r3, r2
 8007718:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	68ba      	ldr	r2, [r7, #8]
 800771e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	88fa      	ldrh	r2, [r7, #6]
 8007724:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	88fa      	ldrh	r2, [r7, #6]
 800772c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2200      	movs	r2, #0
 8007734:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800773e:	d10e      	bne.n	800775e <UART_Start_Receive_IT+0x52>
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	691b      	ldr	r3, [r3, #16]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d105      	bne.n	8007754 <UART_Start_Receive_IT+0x48>
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800774e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007752:	e02d      	b.n	80077b0 <UART_Start_Receive_IT+0xa4>
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	22ff      	movs	r2, #255	@ 0xff
 8007758:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800775c:	e028      	b.n	80077b0 <UART_Start_Receive_IT+0xa4>
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d10d      	bne.n	8007782 <UART_Start_Receive_IT+0x76>
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d104      	bne.n	8007778 <UART_Start_Receive_IT+0x6c>
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	22ff      	movs	r2, #255	@ 0xff
 8007772:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007776:	e01b      	b.n	80077b0 <UART_Start_Receive_IT+0xa4>
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	227f      	movs	r2, #127	@ 0x7f
 800777c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007780:	e016      	b.n	80077b0 <UART_Start_Receive_IT+0xa4>
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800778a:	d10d      	bne.n	80077a8 <UART_Start_Receive_IT+0x9c>
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	691b      	ldr	r3, [r3, #16]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d104      	bne.n	800779e <UART_Start_Receive_IT+0x92>
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	227f      	movs	r2, #127	@ 0x7f
 8007798:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800779c:	e008      	b.n	80077b0 <UART_Start_Receive_IT+0xa4>
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	223f      	movs	r2, #63	@ 0x3f
 80077a2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80077a6:	e003      	b.n	80077b0 <UART_Start_Receive_IT+0xa4>
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2200      	movs	r2, #0
 80077ac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2200      	movs	r2, #0
 80077b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2222      	movs	r2, #34	@ 0x22
 80077bc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	3308      	adds	r3, #8
 80077c6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80077ca:	e853 3f00 	ldrex	r3, [r3]
 80077ce:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80077d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80077d2:	f043 0301 	orr.w	r3, r3, #1
 80077d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	3308      	adds	r3, #8
 80077e0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80077e4:	673a      	str	r2, [r7, #112]	@ 0x70
 80077e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80077ea:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80077ec:	e841 2300 	strex	r3, r2, [r1]
 80077f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80077f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d1e3      	bne.n	80077c0 <UART_Start_Receive_IT+0xb4>
=======
 8007758:	b480      	push	{r7}
 800775a:	b0a3      	sub	sp, #140	@ 0x8c
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	4613      	mov	r3, r2
 8007764:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	68ba      	ldr	r2, [r7, #8]
 800776a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	88fa      	ldrh	r2, [r7, #6]
 8007770:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	88fa      	ldrh	r2, [r7, #6]
 8007778:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2200      	movs	r2, #0
 8007780:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800778a:	d10e      	bne.n	80077aa <UART_Start_Receive_IT+0x52>
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	691b      	ldr	r3, [r3, #16]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d105      	bne.n	80077a0 <UART_Start_Receive_IT+0x48>
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800779a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800779e:	e02d      	b.n	80077fc <UART_Start_Receive_IT+0xa4>
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	22ff      	movs	r2, #255	@ 0xff
 80077a4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80077a8:	e028      	b.n	80077fc <UART_Start_Receive_IT+0xa4>
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	689b      	ldr	r3, [r3, #8]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d10d      	bne.n	80077ce <UART_Start_Receive_IT+0x76>
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d104      	bne.n	80077c4 <UART_Start_Receive_IT+0x6c>
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	22ff      	movs	r2, #255	@ 0xff
 80077be:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80077c2:	e01b      	b.n	80077fc <UART_Start_Receive_IT+0xa4>
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	227f      	movs	r2, #127	@ 0x7f
 80077c8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80077cc:	e016      	b.n	80077fc <UART_Start_Receive_IT+0xa4>
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80077d6:	d10d      	bne.n	80077f4 <UART_Start_Receive_IT+0x9c>
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	691b      	ldr	r3, [r3, #16]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d104      	bne.n	80077ea <UART_Start_Receive_IT+0x92>
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	227f      	movs	r2, #127	@ 0x7f
 80077e4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80077e8:	e008      	b.n	80077fc <UART_Start_Receive_IT+0xa4>
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	223f      	movs	r2, #63	@ 0x3f
 80077ee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80077f2:	e003      	b.n	80077fc <UART_Start_Receive_IT+0xa4>
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2200      	movs	r2, #0
 80077f8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2200      	movs	r2, #0
 8007800:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2222      	movs	r2, #34	@ 0x22
 8007808:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	3308      	adds	r3, #8
 8007812:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007814:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007816:	e853 3f00 	ldrex	r3, [r3]
 800781a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800781c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800781e:	f043 0301 	orr.w	r3, r3, #1
 8007822:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	3308      	adds	r3, #8
 800782c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007830:	673a      	str	r2, [r7, #112]	@ 0x70
 8007832:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007834:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8007836:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007838:	e841 2300 	strex	r3, r2, [r1]
 800783c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800783e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007840:	2b00      	cmp	r3, #0
 8007842:	d1e3      	bne.n	800780c <UART_Start_Receive_IT+0xb4>
>>>>>>> Stashed changes

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
<<<<<<< Updated upstream
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007800:	d14f      	bne.n	80078a2 <UART_Start_Receive_IT+0x196>
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007808:	88fa      	ldrh	r2, [r7, #6]
 800780a:	429a      	cmp	r2, r3
 800780c:	d349      	bcc.n	80078a2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007816:	d107      	bne.n	8007828 <UART_Start_Receive_IT+0x11c>
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	691b      	ldr	r3, [r3, #16]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d103      	bne.n	8007828 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	4a47      	ldr	r2, [pc, #284]	@ (8007940 <UART_Start_Receive_IT+0x234>)
 8007824:	675a      	str	r2, [r3, #116]	@ 0x74
 8007826:	e002      	b.n	800782e <UART_Start_Receive_IT+0x122>
=======
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007848:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800784c:	d14f      	bne.n	80078ee <UART_Start_Receive_IT+0x196>
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007854:	88fa      	ldrh	r2, [r7, #6]
 8007856:	429a      	cmp	r2, r3
 8007858:	d349      	bcc.n	80078ee <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007862:	d107      	bne.n	8007874 <UART_Start_Receive_IT+0x11c>
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	691b      	ldr	r3, [r3, #16]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d103      	bne.n	8007874 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	4a47      	ldr	r2, [pc, #284]	@ (800798c <UART_Start_Receive_IT+0x234>)
 8007870:	675a      	str	r2, [r3, #116]	@ 0x74
 8007872:	e002      	b.n	800787a <UART_Start_Receive_IT+0x122>
>>>>>>> Stashed changes
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
<<<<<<< Updated upstream
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	4a46      	ldr	r2, [pc, #280]	@ (8007944 <UART_Start_Receive_IT+0x238>)
 800782c:	675a      	str	r2, [r3, #116]	@ 0x74
=======
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	4a46      	ldr	r2, [pc, #280]	@ (8007990 <UART_Start_Receive_IT+0x238>)
 8007878:	675a      	str	r2, [r3, #116]	@ 0x74
>>>>>>> Stashed changes
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
<<<<<<< Updated upstream
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	691b      	ldr	r3, [r3, #16]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d01a      	beq.n	800786c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800783c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800783e:	e853 3f00 	ldrex	r3, [r3]
 8007842:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007844:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007846:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800784a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	461a      	mov	r2, r3
 8007854:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007858:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800785a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800785e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007860:	e841 2300 	strex	r3, r2, [r1]
 8007864:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8007866:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007868:	2b00      	cmp	r3, #0
 800786a:	d1e4      	bne.n	8007836 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	3308      	adds	r3, #8
 8007872:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007874:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007876:	e853 3f00 	ldrex	r3, [r3]
 800787a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800787c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800787e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007882:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	3308      	adds	r3, #8
 800788a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800788c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800788e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007890:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007892:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007894:	e841 2300 	strex	r3, r2, [r1]
 8007898:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800789a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800789c:	2b00      	cmp	r3, #0
 800789e:	d1e5      	bne.n	800786c <UART_Start_Receive_IT+0x160>
 80078a0:	e046      	b.n	8007930 <UART_Start_Receive_IT+0x224>
=======
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	691b      	ldr	r3, [r3, #16]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d01a      	beq.n	80078b8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007888:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800788a:	e853 3f00 	ldrex	r3, [r3]
 800788e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007890:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007892:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007896:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	461a      	mov	r2, r3
 80078a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80078a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80078a6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80078aa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80078ac:	e841 2300 	strex	r3, r2, [r1]
 80078b0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80078b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d1e4      	bne.n	8007882 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	3308      	adds	r3, #8
 80078be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078c2:	e853 3f00 	ldrex	r3, [r3]
 80078c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80078c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80078ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	3308      	adds	r3, #8
 80078d6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80078d8:	64ba      	str	r2, [r7, #72]	@ 0x48
 80078da:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078dc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80078de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80078e0:	e841 2300 	strex	r3, r2, [r1]
 80078e4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80078e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d1e5      	bne.n	80078b8 <UART_Start_Receive_IT+0x160>
 80078ec:	e046      	b.n	800797c <UART_Start_Receive_IT+0x224>
>>>>>>> Stashed changes
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
<<<<<<< Updated upstream
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078aa:	d107      	bne.n	80078bc <UART_Start_Receive_IT+0x1b0>
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	691b      	ldr	r3, [r3, #16]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d103      	bne.n	80078bc <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	4a24      	ldr	r2, [pc, #144]	@ (8007948 <UART_Start_Receive_IT+0x23c>)
 80078b8:	675a      	str	r2, [r3, #116]	@ 0x74
 80078ba:	e002      	b.n	80078c2 <UART_Start_Receive_IT+0x1b6>
=======
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078f6:	d107      	bne.n	8007908 <UART_Start_Receive_IT+0x1b0>
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	691b      	ldr	r3, [r3, #16]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d103      	bne.n	8007908 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	4a24      	ldr	r2, [pc, #144]	@ (8007994 <UART_Start_Receive_IT+0x23c>)
 8007904:	675a      	str	r2, [r3, #116]	@ 0x74
 8007906:	e002      	b.n	800790e <UART_Start_Receive_IT+0x1b6>
>>>>>>> Stashed changes
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
<<<<<<< Updated upstream
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	4a23      	ldr	r2, [pc, #140]	@ (800794c <UART_Start_Receive_IT+0x240>)
 80078c0:	675a      	str	r2, [r3, #116]	@ 0x74
=======
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	4a23      	ldr	r2, [pc, #140]	@ (8007998 <UART_Start_Receive_IT+0x240>)
 800790c:	675a      	str	r2, [r3, #116]	@ 0x74
>>>>>>> Stashed changes
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
<<<<<<< Updated upstream
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	691b      	ldr	r3, [r3, #16]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d019      	beq.n	80078fe <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078d2:	e853 3f00 	ldrex	r3, [r3]
 80078d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80078d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078da:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80078de:	677b      	str	r3, [r7, #116]	@ 0x74
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	461a      	mov	r2, r3
 80078e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80078e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80078ea:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80078ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80078f0:	e841 2300 	strex	r3, r2, [r1]
 80078f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80078f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d1e6      	bne.n	80078ca <UART_Start_Receive_IT+0x1be>
 80078fc:	e018      	b.n	8007930 <UART_Start_Receive_IT+0x224>
=======
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	691b      	ldr	r3, [r3, #16]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d019      	beq.n	800794a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800791c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800791e:	e853 3f00 	ldrex	r3, [r3]
 8007922:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007926:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800792a:	677b      	str	r3, [r7, #116]	@ 0x74
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	461a      	mov	r2, r3
 8007932:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007934:	637b      	str	r3, [r7, #52]	@ 0x34
 8007936:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007938:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800793a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800793c:	e841 2300 	strex	r3, r2, [r1]
 8007940:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007944:	2b00      	cmp	r3, #0
 8007946:	d1e6      	bne.n	8007916 <UART_Start_Receive_IT+0x1be>
 8007948:	e018      	b.n	800797c <UART_Start_Receive_IT+0x224>
>>>>>>> Stashed changes
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
<<<<<<< Updated upstream
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	e853 3f00 	ldrex	r3, [r3]
 800790a:	613b      	str	r3, [r7, #16]
   return(result);
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	f043 0320 	orr.w	r3, r3, #32
 8007912:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	461a      	mov	r2, r3
 800791a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800791c:	623b      	str	r3, [r7, #32]
 800791e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007920:	69f9      	ldr	r1, [r7, #28]
 8007922:	6a3a      	ldr	r2, [r7, #32]
 8007924:	e841 2300 	strex	r3, r2, [r1]
 8007928:	61bb      	str	r3, [r7, #24]
   return(result);
 800792a:	69bb      	ldr	r3, [r7, #24]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d1e6      	bne.n	80078fe <UART_Start_Receive_IT+0x1f2>
=======
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	e853 3f00 	ldrex	r3, [r3]
 8007956:	613b      	str	r3, [r7, #16]
   return(result);
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	f043 0320 	orr.w	r3, r3, #32
 800795e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	461a      	mov	r2, r3
 8007966:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007968:	623b      	str	r3, [r7, #32]
 800796a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800796c:	69f9      	ldr	r1, [r7, #28]
 800796e:	6a3a      	ldr	r2, [r7, #32]
 8007970:	e841 2300 	strex	r3, r2, [r1]
 8007974:	61bb      	str	r3, [r7, #24]
   return(result);
 8007976:	69bb      	ldr	r3, [r7, #24]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d1e6      	bne.n	800794a <UART_Start_Receive_IT+0x1f2>
>>>>>>> Stashed changes
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
<<<<<<< Updated upstream
 8007930:	2300      	movs	r3, #0
}
 8007932:	4618      	mov	r0, r3
 8007934:	378c      	adds	r7, #140	@ 0x8c
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr
 800793e:	bf00      	nop
 8007940:	08008181 	.word	0x08008181
 8007944:	08007e19 	.word	0x08007e19
 8007948:	08007c5d 	.word	0x08007c5d
 800794c:	08007aa1 	.word	0x08007aa1

08007950 <UART_EndRxTransfer>:
=======
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	378c      	adds	r7, #140	@ 0x8c
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr
 800798a:	bf00      	nop
 800798c:	080081cd 	.word	0x080081cd
 8007990:	08007e65 	.word	0x08007e65
 8007994:	08007ca9 	.word	0x08007ca9
 8007998:	08007aed 	.word	0x08007aed

0800799c <UART_EndRxTransfer>:
>>>>>>> Stashed changes
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8007950:	b480      	push	{r7}
 8007952:	b095      	sub	sp, #84	@ 0x54
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007960:	e853 3f00 	ldrex	r3, [r3]
 8007964:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007968:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800796c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	461a      	mov	r2, r3
 8007974:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007976:	643b      	str	r3, [r7, #64]	@ 0x40
 8007978:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800797a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800797c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800797e:	e841 2300 	strex	r3, r2, [r1]
 8007982:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007986:	2b00      	cmp	r3, #0
 8007988:	d1e6      	bne.n	8007958 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	3308      	adds	r3, #8
 8007990:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007992:	6a3b      	ldr	r3, [r7, #32]
 8007994:	e853 3f00 	ldrex	r3, [r3]
 8007998:	61fb      	str	r3, [r7, #28]
   return(result);
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80079a0:	f023 0301 	bic.w	r3, r3, #1
 80079a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	3308      	adds	r3, #8
 80079ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80079ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80079b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80079b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80079b6:	e841 2300 	strex	r3, r2, [r1]
 80079ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80079bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d1e3      	bne.n	800798a <UART_EndRxTransfer+0x3a>
=======
 800799c:	b480      	push	{r7}
 800799e:	b095      	sub	sp, #84	@ 0x54
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079ac:	e853 3f00 	ldrex	r3, [r3]
 80079b0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80079b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80079b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	461a      	mov	r2, r3
 80079c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80079c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80079c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80079ca:	e841 2300 	strex	r3, r2, [r1]
 80079ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80079d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d1e6      	bne.n	80079a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	3308      	adds	r3, #8
 80079dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079de:	6a3b      	ldr	r3, [r7, #32]
 80079e0:	e853 3f00 	ldrex	r3, [r3]
 80079e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80079e6:	69fb      	ldr	r3, [r7, #28]
 80079e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80079ec:	f023 0301 	bic.w	r3, r3, #1
 80079f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	3308      	adds	r3, #8
 80079f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80079fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80079fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a02:	e841 2300 	strex	r3, r2, [r1]
 8007a06:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d1e3      	bne.n	80079d6 <UART_EndRxTransfer+0x3a>
>>>>>>> Stashed changes
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< Updated upstream
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d118      	bne.n	80079fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	e853 3f00 	ldrex	r3, [r3]
 80079d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	f023 0310 	bic.w	r3, r3, #16
 80079de:	647b      	str	r3, [r7, #68]	@ 0x44
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	461a      	mov	r2, r3
 80079e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079e8:	61bb      	str	r3, [r7, #24]
 80079ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ec:	6979      	ldr	r1, [r7, #20]
 80079ee:	69ba      	ldr	r2, [r7, #24]
 80079f0:	e841 2300 	strex	r3, r2, [r1]
 80079f4:	613b      	str	r3, [r7, #16]
   return(result);
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d1e6      	bne.n	80079ca <UART_EndRxTransfer+0x7a>
=======
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d118      	bne.n	8007a48 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	e853 3f00 	ldrex	r3, [r3]
 8007a22:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	f023 0310 	bic.w	r3, r3, #16
 8007a2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	461a      	mov	r2, r3
 8007a32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a34:	61bb      	str	r3, [r7, #24]
 8007a36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a38:	6979      	ldr	r1, [r7, #20]
 8007a3a:	69ba      	ldr	r2, [r7, #24]
 8007a3c:	e841 2300 	strex	r3, r2, [r1]
 8007a40:	613b      	str	r3, [r7, #16]
   return(result);
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d1e6      	bne.n	8007a16 <UART_EndRxTransfer+0x7a>
>>>>>>> Stashed changes
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
<<<<<<< Updated upstream
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2220      	movs	r2, #32
 8007a00:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007a10:	bf00      	nop
 8007a12:	3754      	adds	r7, #84	@ 0x54
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <UART_DMAAbortOnError>:
=======
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2220      	movs	r2, #32
 8007a4c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007a5c:	bf00      	nop
 8007a5e:	3754      	adds	r7, #84	@ 0x54
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr

08007a68 <UART_DMAAbortOnError>:
>>>>>>> Stashed changes
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a28:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2200      	movs	r2, #0
 8007a36:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
=======
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a74:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2200      	movs	r2, #0
 8007a82:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
<<<<<<< Updated upstream
 8007a3a:	68f8      	ldr	r0, [r7, #12]
 8007a3c:	f7ff f99a 	bl	8006d74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a40:	bf00      	nop
 8007a42:	3710      	adds	r7, #16
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <UART_EndTransmit_IT>:
=======
 8007a86:	68f8      	ldr	r0, [r7, #12]
 8007a88:	f7ff f99a 	bl	8006dc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a8c:	bf00      	nop
 8007a8e:	3710      	adds	r7, #16
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}

08007a94 <UART_EndTransmit_IT>:
>>>>>>> Stashed changes
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b088      	sub	sp, #32
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	e853 3f00 	ldrex	r3, [r3]
 8007a5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a64:	61fb      	str	r3, [r7, #28]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	69fb      	ldr	r3, [r7, #28]
 8007a6e:	61bb      	str	r3, [r7, #24]
 8007a70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a72:	6979      	ldr	r1, [r7, #20]
 8007a74:	69ba      	ldr	r2, [r7, #24]
 8007a76:	e841 2300 	strex	r3, r2, [r1]
 8007a7a:	613b      	str	r3, [r7, #16]
   return(result);
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d1e6      	bne.n	8007a50 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2220      	movs	r2, #32
 8007a86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	679a      	str	r2, [r3, #120]	@ 0x78
=======
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b088      	sub	sp, #32
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	e853 3f00 	ldrex	r3, [r3]
 8007aa8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ab0:	61fb      	str	r3, [r7, #28]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	69fb      	ldr	r3, [r7, #28]
 8007aba:	61bb      	str	r3, [r7, #24]
 8007abc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007abe:	6979      	ldr	r1, [r7, #20]
 8007ac0:	69ba      	ldr	r2, [r7, #24]
 8007ac2:	e841 2300 	strex	r3, r2, [r1]
 8007ac6:	613b      	str	r3, [r7, #16]
   return(result);
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d1e6      	bne.n	8007a9c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2220      	movs	r2, #32
 8007ad2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	679a      	str	r2, [r3, #120]	@ 0x78
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
<<<<<<< Updated upstream
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f7ff f965 	bl	8006d60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a96:	bf00      	nop
 8007a98:	3720      	adds	r7, #32
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
	...

08007aa0 <UART_RxISR_8BIT>:
=======
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f7ff f965 	bl	8006dac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ae2:	bf00      	nop
 8007ae4:	3720      	adds	r7, #32
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
	...

08007aec <UART_RxISR_8BIT>:
>>>>>>> Stashed changes
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b09c      	sub	sp, #112	@ 0x70
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007aae:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
=======
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b09c      	sub	sp, #112	@ 0x70
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007afa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
>>>>>>> Stashed changes
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
<<<<<<< Updated upstream
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ab8:	2b22      	cmp	r3, #34	@ 0x22
 8007aba:	f040 80be 	bne.w	8007c3a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007ac4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007ac8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007acc:	b2d9      	uxtb	r1, r3
 8007ace:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007ad2:	b2da      	uxtb	r2, r3
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ad8:	400a      	ands	r2, r1
 8007ada:	b2d2      	uxtb	r2, r2
 8007adc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ae2:	1c5a      	adds	r2, r3, #1
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	3b01      	subs	r3, #1
 8007af2:	b29a      	uxth	r2, r3
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	f040 80a3 	bne.w	8007c4e <UART_RxISR_8BIT+0x1ae>
=======
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b04:	2b22      	cmp	r3, #34	@ 0x22
 8007b06:	f040 80be 	bne.w	8007c86 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007b10:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007b14:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007b18:	b2d9      	uxtb	r1, r3
 8007b1a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007b1e:	b2da      	uxtb	r2, r3
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b24:	400a      	ands	r2, r1
 8007b26:	b2d2      	uxtb	r2, r2
 8007b28:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b2e:	1c5a      	adds	r2, r3, #1
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	3b01      	subs	r3, #1
 8007b3e:	b29a      	uxth	r2, r3
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	f040 80a3 	bne.w	8007c9a <UART_RxISR_8BIT+0x1ae>
>>>>>>> Stashed changes
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
<<<<<<< Updated upstream
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b10:	e853 3f00 	ldrex	r3, [r3]
 8007b14:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007b16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	461a      	mov	r2, r3
 8007b24:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007b26:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007b28:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007b2c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007b2e:	e841 2300 	strex	r3, r2, [r1]
 8007b32:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007b34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d1e6      	bne.n	8007b08 <UART_RxISR_8BIT+0x68>
=======
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b5c:	e853 3f00 	ldrex	r3, [r3]
 8007b60:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007b62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b68:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	461a      	mov	r2, r3
 8007b70:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007b72:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007b74:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b76:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007b78:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007b7a:	e841 2300 	strex	r3, r2, [r1]
 8007b7e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007b80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d1e6      	bne.n	8007b54 <UART_RxISR_8BIT+0x68>
>>>>>>> Stashed changes
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
<<<<<<< Updated upstream
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	3308      	adds	r3, #8
 8007b40:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b44:	e853 3f00 	ldrex	r3, [r3]
 8007b48:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007b4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b4c:	f023 0301 	bic.w	r3, r3, #1
 8007b50:	667b      	str	r3, [r7, #100]	@ 0x64
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	3308      	adds	r3, #8
 8007b58:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007b5a:	647a      	str	r2, [r7, #68]	@ 0x44
 8007b5c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b5e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b60:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b62:	e841 2300 	strex	r3, r2, [r1]
 8007b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007b68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d1e5      	bne.n	8007b3a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2220      	movs	r2, #32
 8007b72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a34      	ldr	r2, [pc, #208]	@ (8007c58 <UART_RxISR_8BIT+0x1b8>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d01f      	beq.n	8007bcc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d018      	beq.n	8007bcc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ba2:	e853 3f00 	ldrex	r3, [r3]
 8007ba6:	623b      	str	r3, [r7, #32]
   return(result);
 8007ba8:	6a3b      	ldr	r3, [r7, #32]
 8007baa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007bae:	663b      	str	r3, [r7, #96]	@ 0x60
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007bb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8007bba:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bbc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007bbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bc0:	e841 2300 	strex	r3, r2, [r1]
 8007bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d1e6      	bne.n	8007b9a <UART_RxISR_8BIT+0xfa>
=======
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	3308      	adds	r3, #8
 8007b8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b90:	e853 3f00 	ldrex	r3, [r3]
 8007b94:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007b96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b98:	f023 0301 	bic.w	r3, r3, #1
 8007b9c:	667b      	str	r3, [r7, #100]	@ 0x64
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	3308      	adds	r3, #8
 8007ba4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007ba6:	647a      	str	r2, [r7, #68]	@ 0x44
 8007ba8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007baa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007bac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007bae:	e841 2300 	strex	r3, r2, [r1]
 8007bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007bb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d1e5      	bne.n	8007b86 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2220      	movs	r2, #32
 8007bbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a34      	ldr	r2, [pc, #208]	@ (8007ca4 <UART_RxISR_8BIT+0x1b8>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d01f      	beq.n	8007c18 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d018      	beq.n	8007c18 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bee:	e853 3f00 	ldrex	r3, [r3]
 8007bf2:	623b      	str	r3, [r7, #32]
   return(result);
 8007bf4:	6a3b      	ldr	r3, [r7, #32]
 8007bf6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007bfa:	663b      	str	r3, [r7, #96]	@ 0x60
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	461a      	mov	r2, r3
 8007c02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007c04:	633b      	str	r3, [r7, #48]	@ 0x30
 8007c06:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c08:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c0c:	e841 2300 	strex	r3, r2, [r1]
 8007c10:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d1e6      	bne.n	8007be6 <UART_RxISR_8BIT+0xfa>
>>>>>>> Stashed changes
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< Updated upstream
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d12e      	bne.n	8007c32 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	e853 3f00 	ldrex	r3, [r3]
 8007be6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f023 0310 	bic.w	r3, r3, #16
 8007bee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007bf8:	61fb      	str	r3, [r7, #28]
 8007bfa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfc:	69b9      	ldr	r1, [r7, #24]
 8007bfe:	69fa      	ldr	r2, [r7, #28]
 8007c00:	e841 2300 	strex	r3, r2, [r1]
 8007c04:	617b      	str	r3, [r7, #20]
   return(result);
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d1e6      	bne.n	8007bda <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	69db      	ldr	r3, [r3, #28]
 8007c12:	f003 0310 	and.w	r3, r3, #16
 8007c16:	2b10      	cmp	r3, #16
 8007c18:	d103      	bne.n	8007c22 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	2210      	movs	r2, #16
 8007c20:	621a      	str	r2, [r3, #32]
=======
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d12e      	bne.n	8007c7e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	e853 3f00 	ldrex	r3, [r3]
 8007c32:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f023 0310 	bic.w	r3, r3, #16
 8007c3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	461a      	mov	r2, r3
 8007c42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c44:	61fb      	str	r3, [r7, #28]
 8007c46:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c48:	69b9      	ldr	r1, [r7, #24]
 8007c4a:	69fa      	ldr	r2, [r7, #28]
 8007c4c:	e841 2300 	strex	r3, r2, [r1]
 8007c50:	617b      	str	r3, [r7, #20]
   return(result);
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d1e6      	bne.n	8007c26 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	69db      	ldr	r3, [r3, #28]
 8007c5e:	f003 0310 	and.w	r3, r3, #16
 8007c62:	2b10      	cmp	r3, #16
 8007c64:	d103      	bne.n	8007c6e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	2210      	movs	r2, #16
 8007c6c:	621a      	str	r2, [r3, #32]
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
<<<<<<< Updated upstream
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007c28:	4619      	mov	r1, r3
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f7ff f8ac 	bl	8006d88 <HAL_UARTEx_RxEventCallback>
=======
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007c74:	4619      	mov	r1, r3
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f7ff f8ac 	bl	8006dd4 <HAL_UARTEx_RxEventCallback>
>>>>>>> Stashed changes
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
<<<<<<< Updated upstream
 8007c30:	e00d      	b.n	8007c4e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f7f9 ff42 	bl	8001abc <HAL_UART_RxCpltCallback>
}
 8007c38:	e009      	b.n	8007c4e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	8b1b      	ldrh	r3, [r3, #24]
 8007c40:	b29a      	uxth	r2, r3
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f042 0208 	orr.w	r2, r2, #8
 8007c4a:	b292      	uxth	r2, r2
 8007c4c:	831a      	strh	r2, [r3, #24]
}
 8007c4e:	bf00      	nop
 8007c50:	3770      	adds	r7, #112	@ 0x70
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
 8007c56:	bf00      	nop
 8007c58:	40008000 	.word	0x40008000

08007c5c <UART_RxISR_16BIT>:
=======
 8007c7c:	e00d      	b.n	8007c9a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f7f9 ff42 	bl	8001b08 <HAL_UART_RxCpltCallback>
}
 8007c84:	e009      	b.n	8007c9a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	8b1b      	ldrh	r3, [r3, #24]
 8007c8c:	b29a      	uxth	r2, r3
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f042 0208 	orr.w	r2, r2, #8
 8007c96:	b292      	uxth	r2, r2
 8007c98:	831a      	strh	r2, [r3, #24]
}
 8007c9a:	bf00      	nop
 8007c9c:	3770      	adds	r7, #112	@ 0x70
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	40008000 	.word	0x40008000

08007ca8 <UART_RxISR_16BIT>:
>>>>>>> Stashed changes
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b09c      	sub	sp, #112	@ 0x70
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007c6a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
=======
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b09c      	sub	sp, #112	@ 0x70
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007cb6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
>>>>>>> Stashed changes
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
<<<<<<< Updated upstream
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c74:	2b22      	cmp	r3, #34	@ 0x22
 8007c76:	f040 80be 	bne.w	8007df6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007c80:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c88:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007c8a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007c8e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007c92:	4013      	ands	r3, r2
 8007c94:	b29a      	uxth	r2, r3
 8007c96:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007c98:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c9e:	1c9a      	adds	r2, r3, #2
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	3b01      	subs	r3, #1
 8007cae:	b29a      	uxth	r2, r3
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	f040 80a3 	bne.w	8007e0a <UART_RxISR_16BIT+0x1ae>
=======
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007cc0:	2b22      	cmp	r3, #34	@ 0x22
 8007cc2:	f040 80be 	bne.w	8007e42 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007ccc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cd4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007cd6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007cda:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007cde:	4013      	ands	r3, r2
 8007ce0:	b29a      	uxth	r2, r3
 8007ce2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007ce4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cea:	1c9a      	adds	r2, r3, #2
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	3b01      	subs	r3, #1
 8007cfa:	b29a      	uxth	r2, r3
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	f040 80a3 	bne.w	8007e56 <UART_RxISR_16BIT+0x1ae>
>>>>>>> Stashed changes
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
<<<<<<< Updated upstream
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ccc:	e853 3f00 	ldrex	r3, [r3]
 8007cd0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007cd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007cd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007cd8:	667b      	str	r3, [r7, #100]	@ 0x64
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	461a      	mov	r2, r3
 8007ce0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ce2:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ce4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007ce8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007cea:	e841 2300 	strex	r3, r2, [r1]
 8007cee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007cf0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d1e6      	bne.n	8007cc4 <UART_RxISR_16BIT+0x68>
=======
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d18:	e853 3f00 	ldrex	r3, [r3]
 8007d1c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007d1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d24:	667b      	str	r3, [r7, #100]	@ 0x64
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d2e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007d30:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d32:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007d34:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007d36:	e841 2300 	strex	r3, r2, [r1]
 8007d3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007d3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d1e6      	bne.n	8007d10 <UART_RxISR_16BIT+0x68>
>>>>>>> Stashed changes
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
<<<<<<< Updated upstream
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	3308      	adds	r3, #8
 8007cfc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d00:	e853 3f00 	ldrex	r3, [r3]
 8007d04:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d08:	f023 0301 	bic.w	r3, r3, #1
 8007d0c:	663b      	str	r3, [r7, #96]	@ 0x60
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	3308      	adds	r3, #8
 8007d14:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007d16:	643a      	str	r2, [r7, #64]	@ 0x40
 8007d18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d1a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007d1c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007d1e:	e841 2300 	strex	r3, r2, [r1]
 8007d22:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d1e5      	bne.n	8007cf6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2220      	movs	r2, #32
 8007d2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a34      	ldr	r2, [pc, #208]	@ (8007e14 <UART_RxISR_16BIT+0x1b8>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d01f      	beq.n	8007d88 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d018      	beq.n	8007d88 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d5c:	6a3b      	ldr	r3, [r7, #32]
 8007d5e:	e853 3f00 	ldrex	r3, [r3]
 8007d62:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d64:	69fb      	ldr	r3, [r7, #28]
 8007d66:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007d6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	461a      	mov	r2, r3
 8007d72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d76:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007d7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d7c:	e841 2300 	strex	r3, r2, [r1]
 8007d80:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d1e6      	bne.n	8007d56 <UART_RxISR_16BIT+0xfa>
=======
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	3308      	adds	r3, #8
 8007d48:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d4c:	e853 3f00 	ldrex	r3, [r3]
 8007d50:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d54:	f023 0301 	bic.w	r3, r3, #1
 8007d58:	663b      	str	r3, [r7, #96]	@ 0x60
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	3308      	adds	r3, #8
 8007d60:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007d62:	643a      	str	r2, [r7, #64]	@ 0x40
 8007d64:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d66:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007d68:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007d6a:	e841 2300 	strex	r3, r2, [r1]
 8007d6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d1e5      	bne.n	8007d42 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2220      	movs	r2, #32
 8007d7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a34      	ldr	r2, [pc, #208]	@ (8007e60 <UART_RxISR_16BIT+0x1b8>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d01f      	beq.n	8007dd4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d018      	beq.n	8007dd4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da8:	6a3b      	ldr	r3, [r7, #32]
 8007daa:	e853 3f00 	ldrex	r3, [r3]
 8007dae:	61fb      	str	r3, [r7, #28]
   return(result);
 8007db0:	69fb      	ldr	r3, [r7, #28]
 8007db2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007db6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	461a      	mov	r2, r3
 8007dbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007dc2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007dc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007dc8:	e841 2300 	strex	r3, r2, [r1]
 8007dcc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d1e6      	bne.n	8007da2 <UART_RxISR_16BIT+0xfa>
>>>>>>> Stashed changes
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< Updated upstream
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d12e      	bne.n	8007dee <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2200      	movs	r2, #0
 8007d94:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	e853 3f00 	ldrex	r3, [r3]
 8007da2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	f023 0310 	bic.w	r3, r3, #16
 8007daa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	461a      	mov	r2, r3
 8007db2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007db4:	61bb      	str	r3, [r7, #24]
 8007db6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db8:	6979      	ldr	r1, [r7, #20]
 8007dba:	69ba      	ldr	r2, [r7, #24]
 8007dbc:	e841 2300 	strex	r3, r2, [r1]
 8007dc0:	613b      	str	r3, [r7, #16]
   return(result);
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d1e6      	bne.n	8007d96 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	69db      	ldr	r3, [r3, #28]
 8007dce:	f003 0310 	and.w	r3, r3, #16
 8007dd2:	2b10      	cmp	r3, #16
 8007dd4:	d103      	bne.n	8007dde <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2210      	movs	r2, #16
 8007ddc:	621a      	str	r2, [r3, #32]
=======
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d12e      	bne.n	8007e3a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	e853 3f00 	ldrex	r3, [r3]
 8007dee:	60bb      	str	r3, [r7, #8]
   return(result);
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	f023 0310 	bic.w	r3, r3, #16
 8007df6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007e00:	61bb      	str	r3, [r7, #24]
 8007e02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e04:	6979      	ldr	r1, [r7, #20]
 8007e06:	69ba      	ldr	r2, [r7, #24]
 8007e08:	e841 2300 	strex	r3, r2, [r1]
 8007e0c:	613b      	str	r3, [r7, #16]
   return(result);
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d1e6      	bne.n	8007de2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	69db      	ldr	r3, [r3, #28]
 8007e1a:	f003 0310 	and.w	r3, r3, #16
 8007e1e:	2b10      	cmp	r3, #16
 8007e20:	d103      	bne.n	8007e2a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	2210      	movs	r2, #16
 8007e28:	621a      	str	r2, [r3, #32]
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
<<<<<<< Updated upstream
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007de4:	4619      	mov	r1, r3
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f7fe ffce 	bl	8006d88 <HAL_UARTEx_RxEventCallback>
=======
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007e30:	4619      	mov	r1, r3
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f7fe ffce 	bl	8006dd4 <HAL_UARTEx_RxEventCallback>
>>>>>>> Stashed changes
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
<<<<<<< Updated upstream
 8007dec:	e00d      	b.n	8007e0a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f7f9 fe64 	bl	8001abc <HAL_UART_RxCpltCallback>
}
 8007df4:	e009      	b.n	8007e0a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	8b1b      	ldrh	r3, [r3, #24]
 8007dfc:	b29a      	uxth	r2, r3
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f042 0208 	orr.w	r2, r2, #8
 8007e06:	b292      	uxth	r2, r2
 8007e08:	831a      	strh	r2, [r3, #24]
}
 8007e0a:	bf00      	nop
 8007e0c:	3770      	adds	r7, #112	@ 0x70
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop
 8007e14:	40008000 	.word	0x40008000

08007e18 <UART_RxISR_8BIT_FIFOEN>:
=======
 8007e38:	e00d      	b.n	8007e56 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f7f9 fe64 	bl	8001b08 <HAL_UART_RxCpltCallback>
}
 8007e40:	e009      	b.n	8007e56 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	8b1b      	ldrh	r3, [r3, #24]
 8007e48:	b29a      	uxth	r2, r3
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f042 0208 	orr.w	r2, r2, #8
 8007e52:	b292      	uxth	r2, r2
 8007e54:	831a      	strh	r2, [r3, #24]
}
 8007e56:	bf00      	nop
 8007e58:	3770      	adds	r7, #112	@ 0x70
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	40008000 	.word	0x40008000

08007e64 <UART_RxISR_8BIT_FIFOEN>:
>>>>>>> Stashed changes
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b0ac      	sub	sp, #176	@ 0xb0
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007e26:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
=======
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b0ac      	sub	sp, #176	@ 0xb0
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007e72:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
>>>>>>> Stashed changes
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
<<<<<<< Updated upstream
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	69db      	ldr	r3, [r3, #28]
 8007e30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e4e:	2b22      	cmp	r3, #34	@ 0x22
 8007e50:	f040 8183 	bne.w	800815a <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007e5a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007e5e:	e126      	b.n	80080ae <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007e66:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007e6a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8007e6e:	b2d9      	uxtb	r1, r3
 8007e70:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8007e74:	b2da      	uxtb	r2, r3
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e7a:	400a      	ands	r2, r1
 8007e7c:	b2d2      	uxtb	r2, r2
 8007e7e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e84:	1c5a      	adds	r2, r3, #1
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	3b01      	subs	r3, #1
 8007e94:	b29a      	uxth	r2, r3
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	69db      	ldr	r3, [r3, #28]
 8007ea2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007ea6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007eaa:	f003 0307 	and.w	r3, r3, #7
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d053      	beq.n	8007f5a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007eb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007eb6:	f003 0301 	and.w	r3, r3, #1
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d011      	beq.n	8007ee2 <UART_RxISR_8BIT_FIFOEN+0xca>
 8007ebe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007ec2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d00b      	beq.n	8007ee2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ed8:	f043 0201 	orr.w	r2, r3, #1
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
=======
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	69db      	ldr	r3, [r3, #28]
 8007e7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e9a:	2b22      	cmp	r3, #34	@ 0x22
 8007e9c:	f040 8183 	bne.w	80081a6 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007ea6:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007eaa:	e126      	b.n	80080fa <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007eb2:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007eb6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8007eba:	b2d9      	uxtb	r1, r3
 8007ebc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8007ec0:	b2da      	uxtb	r2, r3
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ec6:	400a      	ands	r2, r1
 8007ec8:	b2d2      	uxtb	r2, r2
 8007eca:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ed0:	1c5a      	adds	r2, r3, #1
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	3b01      	subs	r3, #1
 8007ee0:	b29a      	uxth	r2, r3
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	69db      	ldr	r3, [r3, #28]
 8007eee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007ef2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ef6:	f003 0307 	and.w	r3, r3, #7
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d053      	beq.n	8007fa6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007efe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007f02:	f003 0301 	and.w	r3, r3, #1
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d011      	beq.n	8007f2e <UART_RxISR_8BIT_FIFOEN+0xca>
 8007f0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007f0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d00b      	beq.n	8007f2e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f24:	f043 0201 	orr.w	r2, r3, #1
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
>>>>>>> Stashed changes
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
<<<<<<< Updated upstream
 8007ee2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ee6:	f003 0302 	and.w	r3, r3, #2
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d011      	beq.n	8007f12 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007eee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007ef2:	f003 0301 	and.w	r3, r3, #1
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d00b      	beq.n	8007f12 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	2202      	movs	r2, #2
 8007f00:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f08:	f043 0204 	orr.w	r2, r3, #4
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
=======
 8007f2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007f32:	f003 0302 	and.w	r3, r3, #2
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d011      	beq.n	8007f5e <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007f3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007f3e:	f003 0301 	and.w	r3, r3, #1
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d00b      	beq.n	8007f5e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	2202      	movs	r2, #2
 8007f4c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f54:	f043 0204 	orr.w	r2, r3, #4
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
>>>>>>> Stashed changes
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
<<<<<<< Updated upstream
 8007f12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007f16:	f003 0304 	and.w	r3, r3, #4
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d011      	beq.n	8007f42 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007f1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007f22:	f003 0301 	and.w	r3, r3, #1
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d00b      	beq.n	8007f42 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	2204      	movs	r2, #4
 8007f30:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f38:	f043 0202 	orr.w	r2, r3, #2
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
=======
 8007f5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007f62:	f003 0304 	and.w	r3, r3, #4
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d011      	beq.n	8007f8e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007f6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007f6e:	f003 0301 	and.w	r3, r3, #1
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d00b      	beq.n	8007f8e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	2204      	movs	r2, #4
 8007f7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f84:	f043 0202 	orr.w	r2, r3, #2
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
>>>>>>> Stashed changes
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
<<<<<<< Updated upstream
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d006      	beq.n	8007f5a <UART_RxISR_8BIT_FIFOEN+0x142>
=======
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d006      	beq.n	8007fa6 <UART_RxISR_8BIT_FIFOEN+0x142>
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
<<<<<<< Updated upstream
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f7fe ff11 	bl	8006d74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2200      	movs	r2, #0
 8007f56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
=======
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f7fe ff11 	bl	8006dc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
>>>>>>> Stashed changes
        }
      }

      if (huart->RxXferCount == 0U)
<<<<<<< Updated upstream
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	f040 80a3 	bne.w	80080ae <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007f70:	e853 3f00 	ldrex	r3, [r3]
 8007f74:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8007f76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	461a      	mov	r2, r3
 8007f86:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007f8c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8007f90:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007f92:	e841 2300 	strex	r3, r2, [r1]
 8007f96:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8007f98:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d1e4      	bne.n	8007f68 <UART_RxISR_8BIT_FIFOEN+0x150>
=======
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	f040 80a3 	bne.w	80080fa <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007fbc:	e853 3f00 	ldrex	r3, [r3]
 8007fc0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8007fc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007fc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007fc8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	461a      	mov	r2, r3
 8007fd2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007fd6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007fd8:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fda:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8007fdc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007fde:	e841 2300 	strex	r3, r2, [r1]
 8007fe2:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8007fe4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d1e4      	bne.n	8007fb4 <UART_RxISR_8BIT_FIFOEN+0x150>
>>>>>>> Stashed changes

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
<<<<<<< Updated upstream
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	3308      	adds	r3, #8
 8007fa4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007fa8:	e853 3f00 	ldrex	r3, [r3]
 8007fac:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8007fae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007fb0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007fb4:	f023 0301 	bic.w	r3, r3, #1
 8007fb8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	3308      	adds	r3, #8
 8007fc2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007fc6:	66ba      	str	r2, [r7, #104]	@ 0x68
 8007fc8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fca:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007fcc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007fce:	e841 2300 	strex	r3, r2, [r1]
 8007fd2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007fd4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d1e1      	bne.n	8007f9e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2220      	movs	r2, #32
 8007fde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a61      	ldr	r2, [pc, #388]	@ (8008178 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d021      	beq.n	800803c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008002:	2b00      	cmp	r3, #0
 8008004:	d01a      	beq.n	800803c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800800c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800800e:	e853 3f00 	ldrex	r3, [r3]
 8008012:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008014:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008016:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800801a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	461a      	mov	r2, r3
 8008024:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008028:	657b      	str	r3, [r7, #84]	@ 0x54
 800802a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800802c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800802e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008030:	e841 2300 	strex	r3, r2, [r1]
 8008034:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008036:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008038:	2b00      	cmp	r3, #0
 800803a:	d1e4      	bne.n	8008006 <UART_RxISR_8BIT_FIFOEN+0x1ee>
=======
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	3308      	adds	r3, #8
 8007ff0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ff2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ff4:	e853 3f00 	ldrex	r3, [r3]
 8007ff8:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8007ffa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007ffc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008000:	f023 0301 	bic.w	r3, r3, #1
 8008004:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	3308      	adds	r3, #8
 800800e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008012:	66ba      	str	r2, [r7, #104]	@ 0x68
 8008014:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008016:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008018:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800801a:	e841 2300 	strex	r3, r2, [r1]
 800801e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008020:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008022:	2b00      	cmp	r3, #0
 8008024:	d1e1      	bne.n	8007fea <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2220      	movs	r2, #32
 800802a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2200      	movs	r2, #0
 8008032:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2200      	movs	r2, #0
 8008038:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a61      	ldr	r2, [pc, #388]	@ (80081c4 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d021      	beq.n	8008088 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800804e:	2b00      	cmp	r3, #0
 8008050:	d01a      	beq.n	8008088 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008058:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800805a:	e853 3f00 	ldrex	r3, [r3]
 800805e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008060:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008062:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008066:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	461a      	mov	r2, r3
 8008070:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008074:	657b      	str	r3, [r7, #84]	@ 0x54
 8008076:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008078:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800807a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800807c:	e841 2300 	strex	r3, r2, [r1]
 8008080:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008082:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008084:	2b00      	cmp	r3, #0
 8008086:	d1e4      	bne.n	8008052 <UART_RxISR_8BIT_FIFOEN+0x1ee>
>>>>>>> Stashed changes
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< Updated upstream
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008040:	2b01      	cmp	r3, #1
 8008042:	d130      	bne.n	80080a6 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008052:	e853 3f00 	ldrex	r3, [r3]
 8008056:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800805a:	f023 0310 	bic.w	r3, r3, #16
 800805e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	461a      	mov	r2, r3
 8008068:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800806c:	643b      	str	r3, [r7, #64]	@ 0x40
 800806e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008070:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008072:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008074:	e841 2300 	strex	r3, r2, [r1]
 8008078:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800807a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800807c:	2b00      	cmp	r3, #0
 800807e:	d1e4      	bne.n	800804a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	69db      	ldr	r3, [r3, #28]
 8008086:	f003 0310 	and.w	r3, r3, #16
 800808a:	2b10      	cmp	r3, #16
 800808c:	d103      	bne.n	8008096 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	2210      	movs	r2, #16
 8008094:	621a      	str	r2, [r3, #32]
=======
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800808c:	2b01      	cmp	r3, #1
 800808e:	d130      	bne.n	80080f2 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2200      	movs	r2, #0
 8008094:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800809c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800809e:	e853 3f00 	ldrex	r3, [r3]
 80080a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80080a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a6:	f023 0310 	bic.w	r3, r3, #16
 80080aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	461a      	mov	r2, r3
 80080b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80080ba:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80080be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80080c0:	e841 2300 	strex	r3, r2, [r1]
 80080c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80080c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d1e4      	bne.n	8008096 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	69db      	ldr	r3, [r3, #28]
 80080d2:	f003 0310 	and.w	r3, r3, #16
 80080d6:	2b10      	cmp	r3, #16
 80080d8:	d103      	bne.n	80080e2 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	2210      	movs	r2, #16
 80080e0:	621a      	str	r2, [r3, #32]
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
<<<<<<< Updated upstream
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800809c:	4619      	mov	r1, r3
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f7fe fe72 	bl	8006d88 <HAL_UARTEx_RxEventCallback>
=======
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80080e8:	4619      	mov	r1, r3
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f7fe fe72 	bl	8006dd4 <HAL_UARTEx_RxEventCallback>
>>>>>>> Stashed changes
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
<<<<<<< Updated upstream
 80080a4:	e00e      	b.n	80080c4 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f7f9 fd08 	bl	8001abc <HAL_UART_RxCpltCallback>
        break;
 80080ac:	e00a      	b.n	80080c4 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80080ae:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d006      	beq.n	80080c4 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 80080b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80080ba:	f003 0320 	and.w	r3, r3, #32
 80080be:	2b00      	cmp	r3, #0
 80080c0:	f47f aece 	bne.w	8007e60 <UART_RxISR_8BIT_FIFOEN+0x48>
=======
 80080f0:	e00e      	b.n	8008110 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f7f9 fd08 	bl	8001b08 <HAL_UART_RxCpltCallback>
        break;
 80080f8:	e00a      	b.n	8008110 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80080fa:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d006      	beq.n	8008110 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8008102:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008106:	f003 0320 	and.w	r3, r3, #32
 800810a:	2b00      	cmp	r3, #0
 800810c:	f47f aece 	bne.w	8007eac <UART_RxISR_8BIT_FIFOEN+0x48>
>>>>>>> Stashed changes

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
<<<<<<< Updated upstream
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80080ca:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80080ce:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d04b      	beq.n	800816e <UART_RxISR_8BIT_FIFOEN+0x356>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80080dc:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80080e0:	429a      	cmp	r2, r3
 80080e2:	d244      	bcs.n	800816e <UART_RxISR_8BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	3308      	adds	r3, #8
 80080ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ec:	6a3b      	ldr	r3, [r7, #32]
 80080ee:	e853 3f00 	ldrex	r3, [r3]
 80080f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80080f4:	69fb      	ldr	r3, [r7, #28]
 80080f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80080fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	3308      	adds	r3, #8
 8008104:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008108:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800810a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800810c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800810e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008110:	e841 2300 	strex	r3, r2, [r1]
 8008114:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008118:	2b00      	cmp	r3, #0
 800811a:	d1e3      	bne.n	80080e4 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	4a17      	ldr	r2, [pc, #92]	@ (800817c <UART_RxISR_8BIT_FIFOEN+0x364>)
 8008120:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	e853 3f00 	ldrex	r3, [r3]
 800812e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	f043 0320 	orr.w	r3, r3, #32
 8008136:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	461a      	mov	r2, r3
 8008140:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008144:	61bb      	str	r3, [r7, #24]
 8008146:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008148:	6979      	ldr	r1, [r7, #20]
 800814a:	69ba      	ldr	r2, [r7, #24]
 800814c:	e841 2300 	strex	r3, r2, [r1]
 8008150:	613b      	str	r3, [r7, #16]
   return(result);
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d1e4      	bne.n	8008122 <UART_RxISR_8BIT_FIFOEN+0x30a>
=======
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008116:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800811a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800811e:	2b00      	cmp	r3, #0
 8008120:	d04b      	beq.n	80081ba <UART_RxISR_8BIT_FIFOEN+0x356>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008128:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800812c:	429a      	cmp	r2, r3
 800812e:	d244      	bcs.n	80081ba <UART_RxISR_8BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	3308      	adds	r3, #8
 8008136:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008138:	6a3b      	ldr	r3, [r7, #32]
 800813a:	e853 3f00 	ldrex	r3, [r3]
 800813e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008140:	69fb      	ldr	r3, [r7, #28]
 8008142:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008146:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	3308      	adds	r3, #8
 8008150:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008154:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008156:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008158:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800815a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800815c:	e841 2300 	strex	r3, r2, [r1]
 8008160:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008164:	2b00      	cmp	r3, #0
 8008166:	d1e3      	bne.n	8008130 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	4a17      	ldr	r2, [pc, #92]	@ (80081c8 <UART_RxISR_8BIT_FIFOEN+0x364>)
 800816c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	e853 3f00 	ldrex	r3, [r3]
 800817a:	60bb      	str	r3, [r7, #8]
   return(result);
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	f043 0320 	orr.w	r3, r3, #32
 8008182:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	461a      	mov	r2, r3
 800818c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008190:	61bb      	str	r3, [r7, #24]
 8008192:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008194:	6979      	ldr	r1, [r7, #20]
 8008196:	69ba      	ldr	r2, [r7, #24]
 8008198:	e841 2300 	strex	r3, r2, [r1]
 800819c:	613b      	str	r3, [r7, #16]
   return(result);
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d1e4      	bne.n	800816e <UART_RxISR_8BIT_FIFOEN+0x30a>
>>>>>>> Stashed changes
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
<<<<<<< Updated upstream
 8008158:	e009      	b.n	800816e <UART_RxISR_8BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	8b1b      	ldrh	r3, [r3, #24]
 8008160:	b29a      	uxth	r2, r3
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f042 0208 	orr.w	r2, r2, #8
 800816a:	b292      	uxth	r2, r2
 800816c:	831a      	strh	r2, [r3, #24]
}
 800816e:	bf00      	nop
 8008170:	37b0      	adds	r7, #176	@ 0xb0
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
 8008176:	bf00      	nop
 8008178:	40008000 	.word	0x40008000
 800817c:	08007aa1 	.word	0x08007aa1

08008180 <UART_RxISR_16BIT_FIFOEN>:
=======
 80081a4:	e009      	b.n	80081ba <UART_RxISR_8BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	8b1b      	ldrh	r3, [r3, #24]
 80081ac:	b29a      	uxth	r2, r3
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f042 0208 	orr.w	r2, r2, #8
 80081b6:	b292      	uxth	r2, r2
 80081b8:	831a      	strh	r2, [r3, #24]
}
 80081ba:	bf00      	nop
 80081bc:	37b0      	adds	r7, #176	@ 0xb0
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	bf00      	nop
 80081c4:	40008000 	.word	0x40008000
 80081c8:	08007aed 	.word	0x08007aed

080081cc <UART_RxISR_16BIT_FIFOEN>:
>>>>>>> Stashed changes
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8008180:	b580      	push	{r7, lr}
 8008182:	b0ae      	sub	sp, #184	@ 0xb8
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800818e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
=======
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b0ae      	sub	sp, #184	@ 0xb8
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80081da:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
>>>>>>> Stashed changes
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
<<<<<<< Updated upstream
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	69db      	ldr	r3, [r3, #28]
 8008198:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80081b6:	2b22      	cmp	r3, #34	@ 0x22
 80081b8:	f040 8187 	bne.w	80084ca <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80081c2:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80081c6:	e12a      	b.n	800841e <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80081ce:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80081da:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80081de:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80081e2:	4013      	ands	r3, r2
 80081e4:	b29a      	uxth	r2, r3
 80081e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80081ea:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081f0:	1c9a      	adds	r2, r3, #2
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	3b01      	subs	r3, #1
 8008200:	b29a      	uxth	r2, r3
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	69db      	ldr	r3, [r3, #28]
 800820e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008212:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008216:	f003 0307 	and.w	r3, r3, #7
 800821a:	2b00      	cmp	r3, #0
 800821c:	d053      	beq.n	80082c6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800821e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008222:	f003 0301 	and.w	r3, r3, #1
 8008226:	2b00      	cmp	r3, #0
 8008228:	d011      	beq.n	800824e <UART_RxISR_16BIT_FIFOEN+0xce>
 800822a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800822e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008232:	2b00      	cmp	r3, #0
 8008234:	d00b      	beq.n	800824e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	2201      	movs	r2, #1
 800823c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008244:	f043 0201 	orr.w	r2, r3, #1
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
=======
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	69db      	ldr	r3, [r3, #28]
 80081e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	689b      	ldr	r3, [r3, #8]
 80081f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008202:	2b22      	cmp	r3, #34	@ 0x22
 8008204:	f040 8187 	bne.w	8008516 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800820e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008212:	e12a      	b.n	800846a <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800821a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008222:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008226:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800822a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800822e:	4013      	ands	r3, r2
 8008230:	b29a      	uxth	r2, r3
 8008232:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008236:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800823c:	1c9a      	adds	r2, r3, #2
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008248:	b29b      	uxth	r3, r3
 800824a:	3b01      	subs	r3, #1
 800824c:	b29a      	uxth	r2, r3
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	69db      	ldr	r3, [r3, #28]
 800825a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800825e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008262:	f003 0307 	and.w	r3, r3, #7
 8008266:	2b00      	cmp	r3, #0
 8008268:	d053      	beq.n	8008312 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800826a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800826e:	f003 0301 	and.w	r3, r3, #1
 8008272:	2b00      	cmp	r3, #0
 8008274:	d011      	beq.n	800829a <UART_RxISR_16BIT_FIFOEN+0xce>
 8008276:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800827a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800827e:	2b00      	cmp	r3, #0
 8008280:	d00b      	beq.n	800829a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	2201      	movs	r2, #1
 8008288:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008290:	f043 0201 	orr.w	r2, r3, #1
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
>>>>>>> Stashed changes
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
<<<<<<< Updated upstream
 800824e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008252:	f003 0302 	and.w	r3, r3, #2
 8008256:	2b00      	cmp	r3, #0
 8008258:	d011      	beq.n	800827e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800825a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800825e:	f003 0301 	and.w	r3, r3, #1
 8008262:	2b00      	cmp	r3, #0
 8008264:	d00b      	beq.n	800827e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2202      	movs	r2, #2
 800826c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008274:	f043 0204 	orr.w	r2, r3, #4
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
=======
 800829a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800829e:	f003 0302 	and.w	r3, r3, #2
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d011      	beq.n	80082ca <UART_RxISR_16BIT_FIFOEN+0xfe>
 80082a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80082aa:	f003 0301 	and.w	r3, r3, #1
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d00b      	beq.n	80082ca <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	2202      	movs	r2, #2
 80082b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082c0:	f043 0204 	orr.w	r2, r3, #4
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
>>>>>>> Stashed changes
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
<<<<<<< Updated upstream
 800827e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008282:	f003 0304 	and.w	r3, r3, #4
 8008286:	2b00      	cmp	r3, #0
 8008288:	d011      	beq.n	80082ae <UART_RxISR_16BIT_FIFOEN+0x12e>
 800828a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800828e:	f003 0301 	and.w	r3, r3, #1
 8008292:	2b00      	cmp	r3, #0
 8008294:	d00b      	beq.n	80082ae <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	2204      	movs	r2, #4
 800829c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082a4:	f043 0202 	orr.w	r2, r3, #2
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
=======
 80082ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80082ce:	f003 0304 	and.w	r3, r3, #4
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d011      	beq.n	80082fa <UART_RxISR_16BIT_FIFOEN+0x12e>
 80082d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80082da:	f003 0301 	and.w	r3, r3, #1
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d00b      	beq.n	80082fa <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	2204      	movs	r2, #4
 80082e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082f0:	f043 0202 	orr.w	r2, r3, #2
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
>>>>>>> Stashed changes
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
<<<<<<< Updated upstream
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d006      	beq.n	80082c6 <UART_RxISR_16BIT_FIFOEN+0x146>
=======
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008300:	2b00      	cmp	r3, #0
 8008302:	d006      	beq.n	8008312 <UART_RxISR_16BIT_FIFOEN+0x146>
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
<<<<<<< Updated upstream
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f7fe fd5b 	bl	8006d74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2200      	movs	r2, #0
 80082c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
=======
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f7fe fd5b 	bl	8006dc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2200      	movs	r2, #0
 800830e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
>>>>>>> Stashed changes
        }
      }

      if (huart->RxXferCount == 0U)
<<<<<<< Updated upstream
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	f040 80a5 	bne.w	800841e <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80082dc:	e853 3f00 	ldrex	r3, [r3]
 80082e0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80082e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80082e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80082e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	461a      	mov	r2, r3
 80082f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80082f6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80082fa:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082fc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80082fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008302:	e841 2300 	strex	r3, r2, [r1]
 8008306:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008308:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800830a:	2b00      	cmp	r3, #0
 800830c:	d1e2      	bne.n	80082d4 <UART_RxISR_16BIT_FIFOEN+0x154>
=======
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008318:	b29b      	uxth	r3, r3
 800831a:	2b00      	cmp	r3, #0
 800831c:	f040 80a5 	bne.w	800846a <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008326:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008328:	e853 3f00 	ldrex	r3, [r3]
 800832c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800832e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008330:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008334:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	461a      	mov	r2, r3
 800833e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008342:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008346:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008348:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800834a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800834e:	e841 2300 	strex	r3, r2, [r1]
 8008352:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008354:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008356:	2b00      	cmp	r3, #0
 8008358:	d1e2      	bne.n	8008320 <UART_RxISR_16BIT_FIFOEN+0x154>
>>>>>>> Stashed changes

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
<<<<<<< Updated upstream
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	3308      	adds	r3, #8
 8008314:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008316:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008318:	e853 3f00 	ldrex	r3, [r3]
 800831c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800831e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008320:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008324:	f023 0301 	bic.w	r3, r3, #1
 8008328:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	3308      	adds	r3, #8
 8008332:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8008336:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008338:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800833a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800833c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800833e:	e841 2300 	strex	r3, r2, [r1]
 8008342:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008344:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008346:	2b00      	cmp	r3, #0
 8008348:	d1e1      	bne.n	800830e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2220      	movs	r2, #32
 800834e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2200      	movs	r2, #0
 8008356:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2200      	movs	r2, #0
 800835c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a61      	ldr	r2, [pc, #388]	@ (80084e8 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d021      	beq.n	80083ac <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008372:	2b00      	cmp	r3, #0
 8008374:	d01a      	beq.n	80083ac <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800837c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800837e:	e853 3f00 	ldrex	r3, [r3]
 8008382:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008384:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008386:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800838a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	461a      	mov	r2, r3
 8008394:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008398:	65bb      	str	r3, [r7, #88]	@ 0x58
 800839a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800839c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800839e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80083a0:	e841 2300 	strex	r3, r2, [r1]
 80083a4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80083a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d1e4      	bne.n	8008376 <UART_RxISR_16BIT_FIFOEN+0x1f6>
=======
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	3308      	adds	r3, #8
 8008360:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008362:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008364:	e853 3f00 	ldrex	r3, [r3]
 8008368:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800836a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800836c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008370:	f023 0301 	bic.w	r3, r3, #1
 8008374:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	3308      	adds	r3, #8
 800837e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8008382:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008384:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008386:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008388:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800838a:	e841 2300 	strex	r3, r2, [r1]
 800838e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008390:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008392:	2b00      	cmp	r3, #0
 8008394:	d1e1      	bne.n	800835a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2220      	movs	r2, #32
 800839a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2200      	movs	r2, #0
 80083a2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a61      	ldr	r2, [pc, #388]	@ (8008534 <UART_RxISR_16BIT_FIFOEN+0x368>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d021      	beq.n	80083f8 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d01a      	beq.n	80083f8 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083ca:	e853 3f00 	ldrex	r3, [r3]
 80083ce:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80083d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80083d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80083d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	461a      	mov	r2, r3
 80083e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80083e4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80083e6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80083ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80083ec:	e841 2300 	strex	r3, r2, [r1]
 80083f0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80083f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d1e4      	bne.n	80083c2 <UART_RxISR_16BIT_FIFOEN+0x1f6>
>>>>>>> Stashed changes
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< Updated upstream
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80083b0:	2b01      	cmp	r3, #1
 80083b2:	d130      	bne.n	8008416 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2200      	movs	r2, #0
 80083b8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083c2:	e853 3f00 	ldrex	r3, [r3]
 80083c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80083c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083ca:	f023 0310 	bic.w	r3, r3, #16
 80083ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	461a      	mov	r2, r3
 80083d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80083dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80083de:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80083e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80083e4:	e841 2300 	strex	r3, r2, [r1]
 80083e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80083ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d1e4      	bne.n	80083ba <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	69db      	ldr	r3, [r3, #28]
 80083f6:	f003 0310 	and.w	r3, r3, #16
 80083fa:	2b10      	cmp	r3, #16
 80083fc:	d103      	bne.n	8008406 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	2210      	movs	r2, #16
 8008404:	621a      	str	r2, [r3, #32]
=======
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d130      	bne.n	8008462 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2200      	movs	r2, #0
 8008404:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800840c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800840e:	e853 3f00 	ldrex	r3, [r3]
 8008412:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008414:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008416:	f023 0310 	bic.w	r3, r3, #16
 800841a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	461a      	mov	r2, r3
 8008424:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008428:	647b      	str	r3, [r7, #68]	@ 0x44
 800842a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800842c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800842e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008430:	e841 2300 	strex	r3, r2, [r1]
 8008434:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008436:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008438:	2b00      	cmp	r3, #0
 800843a:	d1e4      	bne.n	8008406 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	69db      	ldr	r3, [r3, #28]
 8008442:	f003 0310 	and.w	r3, r3, #16
 8008446:	2b10      	cmp	r3, #16
 8008448:	d103      	bne.n	8008452 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	2210      	movs	r2, #16
 8008450:	621a      	str	r2, [r3, #32]
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
<<<<<<< Updated upstream
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800840c:	4619      	mov	r1, r3
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f7fe fcba 	bl	8006d88 <HAL_UARTEx_RxEventCallback>
=======
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008458:	4619      	mov	r1, r3
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f7fe fcba 	bl	8006dd4 <HAL_UARTEx_RxEventCallback>
>>>>>>> Stashed changes
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
<<<<<<< Updated upstream
 8008414:	e00e      	b.n	8008434 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f7f9 fb50 	bl	8001abc <HAL_UART_RxCpltCallback>
        break;
 800841c:	e00a      	b.n	8008434 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800841e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8008422:	2b00      	cmp	r3, #0
 8008424:	d006      	beq.n	8008434 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8008426:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800842a:	f003 0320 	and.w	r3, r3, #32
 800842e:	2b00      	cmp	r3, #0
 8008430:	f47f aeca 	bne.w	80081c8 <UART_RxISR_16BIT_FIFOEN+0x48>
=======
 8008460:	e00e      	b.n	8008480 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f7f9 fb50 	bl	8001b08 <HAL_UART_RxCpltCallback>
        break;
 8008468:	e00a      	b.n	8008480 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800846a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800846e:	2b00      	cmp	r3, #0
 8008470:	d006      	beq.n	8008480 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8008472:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008476:	f003 0320 	and.w	r3, r3, #32
 800847a:	2b00      	cmp	r3, #0
 800847c:	f47f aeca 	bne.w	8008214 <UART_RxISR_16BIT_FIFOEN+0x48>
>>>>>>> Stashed changes

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
<<<<<<< Updated upstream
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800843a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800843e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8008442:	2b00      	cmp	r3, #0
 8008444:	d04b      	beq.n	80084de <UART_RxISR_16BIT_FIFOEN+0x35e>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800844c:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8008450:	429a      	cmp	r2, r3
 8008452:	d244      	bcs.n	80084de <UART_RxISR_16BIT_FIFOEN+0x35e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	3308      	adds	r3, #8
 800845a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800845c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800845e:	e853 3f00 	ldrex	r3, [r3]
 8008462:	623b      	str	r3, [r7, #32]
   return(result);
 8008464:	6a3b      	ldr	r3, [r7, #32]
 8008466:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800846a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	3308      	adds	r3, #8
 8008474:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8008478:	633a      	str	r2, [r7, #48]	@ 0x30
 800847a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800847c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800847e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008480:	e841 2300 	strex	r3, r2, [r1]
 8008484:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008488:	2b00      	cmp	r3, #0
 800848a:	d1e3      	bne.n	8008454 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	4a17      	ldr	r2, [pc, #92]	@ (80084ec <UART_RxISR_16BIT_FIFOEN+0x36c>)
 8008490:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	e853 3f00 	ldrex	r3, [r3]
 800849e:	60fb      	str	r3, [r7, #12]
   return(result);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f043 0320 	orr.w	r3, r3, #32
 80084a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	461a      	mov	r2, r3
 80084b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80084b4:	61fb      	str	r3, [r7, #28]
 80084b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b8:	69b9      	ldr	r1, [r7, #24]
 80084ba:	69fa      	ldr	r2, [r7, #28]
 80084bc:	e841 2300 	strex	r3, r2, [r1]
 80084c0:	617b      	str	r3, [r7, #20]
   return(result);
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d1e4      	bne.n	8008492 <UART_RxISR_16BIT_FIFOEN+0x312>
=======
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008486:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800848a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800848e:	2b00      	cmp	r3, #0
 8008490:	d04b      	beq.n	800852a <UART_RxISR_16BIT_FIFOEN+0x35e>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008498:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800849c:	429a      	cmp	r2, r3
 800849e:	d244      	bcs.n	800852a <UART_RxISR_16BIT_FIFOEN+0x35e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	3308      	adds	r3, #8
 80084a6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084aa:	e853 3f00 	ldrex	r3, [r3]
 80084ae:	623b      	str	r3, [r7, #32]
   return(result);
 80084b0:	6a3b      	ldr	r3, [r7, #32]
 80084b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80084b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	3308      	adds	r3, #8
 80084c0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80084c4:	633a      	str	r2, [r7, #48]	@ 0x30
 80084c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80084ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084cc:	e841 2300 	strex	r3, r2, [r1]
 80084d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80084d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d1e3      	bne.n	80084a0 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	4a17      	ldr	r2, [pc, #92]	@ (8008538 <UART_RxISR_16BIT_FIFOEN+0x36c>)
 80084dc:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	e853 3f00 	ldrex	r3, [r3]
 80084ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f043 0320 	orr.w	r3, r3, #32
 80084f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	461a      	mov	r2, r3
 80084fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008500:	61fb      	str	r3, [r7, #28]
 8008502:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008504:	69b9      	ldr	r1, [r7, #24]
 8008506:	69fa      	ldr	r2, [r7, #28]
 8008508:	e841 2300 	strex	r3, r2, [r1]
 800850c:	617b      	str	r3, [r7, #20]
   return(result);
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d1e4      	bne.n	80084de <UART_RxISR_16BIT_FIFOEN+0x312>
>>>>>>> Stashed changes
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
<<<<<<< Updated upstream
 80084c8:	e009      	b.n	80084de <UART_RxISR_16BIT_FIFOEN+0x35e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	8b1b      	ldrh	r3, [r3, #24]
 80084d0:	b29a      	uxth	r2, r3
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f042 0208 	orr.w	r2, r2, #8
 80084da:	b292      	uxth	r2, r2
 80084dc:	831a      	strh	r2, [r3, #24]
}
 80084de:	bf00      	nop
 80084e0:	37b8      	adds	r7, #184	@ 0xb8
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
 80084e6:	bf00      	nop
 80084e8:	40008000 	.word	0x40008000
 80084ec:	08007c5d 	.word	0x08007c5d

080084f0 <HAL_UARTEx_WakeupCallback>:
=======
 8008514:	e009      	b.n	800852a <UART_RxISR_16BIT_FIFOEN+0x35e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	8b1b      	ldrh	r3, [r3, #24]
 800851c:	b29a      	uxth	r2, r3
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f042 0208 	orr.w	r2, r2, #8
 8008526:	b292      	uxth	r2, r2
 8008528:	831a      	strh	r2, [r3, #24]
}
 800852a:	bf00      	nop
 800852c:	37b8      	adds	r7, #184	@ 0xb8
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
 8008532:	bf00      	nop
 8008534:	40008000 	.word	0x40008000
 8008538:	08007ca9 	.word	0x08007ca9

0800853c <HAL_UARTEx_WakeupCallback>:
>>>>>>> Stashed changes
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 80084f0:	b480      	push	{r7}
 80084f2:	b083      	sub	sp, #12
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
=======
 800853c:	b480      	push	{r7}
 800853e:	b083      	sub	sp, #12
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
<<<<<<< Updated upstream
 80084f8:	bf00      	nop
 80084fa:	370c      	adds	r7, #12
 80084fc:	46bd      	mov	sp, r7
 80084fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008502:	4770      	bx	lr

08008504 <HAL_UARTEx_RxFifoFullCallback>:
=======
 8008544:	bf00      	nop
 8008546:	370c      	adds	r7, #12
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr

08008550 <HAL_UARTEx_RxFifoFullCallback>:
>>>>>>> Stashed changes
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8008504:	b480      	push	{r7}
 8008506:	b083      	sub	sp, #12
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
=======
 8008550:	b480      	push	{r7}
 8008552:	b083      	sub	sp, #12
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
<<<<<<< Updated upstream
 800850c:	bf00      	nop
 800850e:	370c      	adds	r7, #12
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr

08008518 <HAL_UARTEx_TxFifoEmptyCallback>:
=======
 8008558:	bf00      	nop
 800855a:	370c      	adds	r7, #12
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr

08008564 <HAL_UARTEx_TxFifoEmptyCallback>:
>>>>>>> Stashed changes
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8008518:	b480      	push	{r7}
 800851a:	b083      	sub	sp, #12
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
=======
 8008564:	b480      	push	{r7}
 8008566:	b083      	sub	sp, #12
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
<<<<<<< Updated upstream
 8008520:	bf00      	nop
 8008522:	370c      	adds	r7, #12
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr

0800852c <HAL_UARTEx_DisableFifoMode>:
=======
 800856c:	bf00      	nop
 800856e:	370c      	adds	r7, #12
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr

08008578 <HAL_UARTEx_DisableFifoMode>:
>>>>>>> Stashed changes
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 800852c:	b480      	push	{r7}
 800852e:	b085      	sub	sp, #20
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
=======
 8008578:	b480      	push	{r7}
 800857a:	b085      	sub	sp, #20
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
<<<<<<< Updated upstream
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800853a:	2b01      	cmp	r3, #1
 800853c:	d101      	bne.n	8008542 <HAL_UARTEx_DisableFifoMode+0x16>
 800853e:	2302      	movs	r3, #2
 8008540:	e027      	b.n	8008592 <HAL_UARTEx_DisableFifoMode+0x66>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2201      	movs	r2, #1
 8008546:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2224      	movs	r2, #36	@ 0x24
 800854e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	681a      	ldr	r2, [r3, #0]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f022 0201 	bic.w	r2, r2, #1
 8008568:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008570:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2200      	movs	r2, #0
 8008576:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	68fa      	ldr	r2, [r7, #12]
 800857e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2220      	movs	r2, #32
 8008584:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2200      	movs	r2, #0
 800858c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008590:	2300      	movs	r3, #0
}
 8008592:	4618      	mov	r0, r3
 8008594:	3714      	adds	r7, #20
 8008596:	46bd      	mov	sp, r7
 8008598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859c:	4770      	bx	lr

0800859e <HAL_UARTEx_SetTxFifoThreshold>:
=======
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008586:	2b01      	cmp	r3, #1
 8008588:	d101      	bne.n	800858e <HAL_UARTEx_DisableFifoMode+0x16>
 800858a:	2302      	movs	r3, #2
 800858c:	e027      	b.n	80085de <HAL_UARTEx_DisableFifoMode+0x66>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2201      	movs	r2, #1
 8008592:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2224      	movs	r2, #36	@ 0x24
 800859a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	681a      	ldr	r2, [r3, #0]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f022 0201 	bic.w	r2, r2, #1
 80085b4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80085bc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2200      	movs	r2, #0
 80085c2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	68fa      	ldr	r2, [r7, #12]
 80085ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2220      	movs	r2, #32
 80085d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2200      	movs	r2, #0
 80085d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80085dc:	2300      	movs	r3, #0
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3714      	adds	r7, #20
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr

080085ea <HAL_UARTEx_SetTxFifoThreshold>:
>>>>>>> Stashed changes
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
<<<<<<< Updated upstream
 800859e:	b580      	push	{r7, lr}
 80085a0:	b084      	sub	sp, #16
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6078      	str	r0, [r7, #4]
 80085a6:	6039      	str	r1, [r7, #0]
=======
 80085ea:	b580      	push	{r7, lr}
 80085ec:	b084      	sub	sp, #16
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
 80085f2:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
<<<<<<< Updated upstream
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	d101      	bne.n	80085b6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80085b2:	2302      	movs	r3, #2
 80085b4:	e02d      	b.n	8008612 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2201      	movs	r2, #1
 80085ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2224      	movs	r2, #36	@ 0x24
 80085c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	681a      	ldr	r2, [r3, #0]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f022 0201 	bic.w	r2, r2, #1
 80085dc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	689b      	ldr	r3, [r3, #8]
 80085e4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	683a      	ldr	r2, [r7, #0]
 80085ee:	430a      	orrs	r2, r1
 80085f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 f850 	bl	8008698 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	68fa      	ldr	r2, [r7, #12]
 80085fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2220      	movs	r2, #32
 8008604:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2200      	movs	r2, #0
 800860c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008610:	2300      	movs	r3, #0
}
 8008612:	4618      	mov	r0, r3
 8008614:	3710      	adds	r7, #16
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}

0800861a <HAL_UARTEx_SetRxFifoThreshold>:
=======
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	d101      	bne.n	8008602 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80085fe:	2302      	movs	r3, #2
 8008600:	e02d      	b.n	800865e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2201      	movs	r2, #1
 8008606:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2224      	movs	r2, #36	@ 0x24
 800860e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	681a      	ldr	r2, [r3, #0]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f022 0201 	bic.w	r2, r2, #1
 8008628:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	683a      	ldr	r2, [r7, #0]
 800863a:	430a      	orrs	r2, r1
 800863c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 f850 	bl	80086e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	68fa      	ldr	r2, [r7, #12]
 800864a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2220      	movs	r2, #32
 8008650:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800865c:	2300      	movs	r3, #0
}
 800865e:	4618      	mov	r0, r3
 8008660:	3710      	adds	r7, #16
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}

08008666 <HAL_UARTEx_SetRxFifoThreshold>:
>>>>>>> Stashed changes
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
<<<<<<< Updated upstream
 800861a:	b580      	push	{r7, lr}
 800861c:	b084      	sub	sp, #16
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
 8008622:	6039      	str	r1, [r7, #0]
=======
 8008666:	b580      	push	{r7, lr}
 8008668:	b084      	sub	sp, #16
 800866a:	af00      	add	r7, sp, #0
 800866c:	6078      	str	r0, [r7, #4]
 800866e:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
<<<<<<< Updated upstream
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800862a:	2b01      	cmp	r3, #1
 800862c:	d101      	bne.n	8008632 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800862e:	2302      	movs	r3, #2
 8008630:	e02d      	b.n	800868e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2201      	movs	r2, #1
 8008636:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2224      	movs	r2, #36	@ 0x24
 800863e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	681a      	ldr	r2, [r3, #0]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f022 0201 	bic.w	r2, r2, #1
 8008658:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	683a      	ldr	r2, [r7, #0]
 800866a:	430a      	orrs	r2, r1
 800866c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 f812 	bl	8008698 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	68fa      	ldr	r2, [r7, #12]
 800867a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2220      	movs	r2, #32
 8008680:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800868c:	2300      	movs	r3, #0
}
 800868e:	4618      	mov	r0, r3
 8008690:	3710      	adds	r7, #16
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
	...

08008698 <UARTEx_SetNbDataToProcess>:
=======
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008676:	2b01      	cmp	r3, #1
 8008678:	d101      	bne.n	800867e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800867a:	2302      	movs	r3, #2
 800867c:	e02d      	b.n	80086da <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2201      	movs	r2, #1
 8008682:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2224      	movs	r2, #36	@ 0x24
 800868a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f022 0201 	bic.w	r2, r2, #1
 80086a4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	689b      	ldr	r3, [r3, #8]
 80086ac:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	683a      	ldr	r2, [r7, #0]
 80086b6:	430a      	orrs	r2, r1
 80086b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 f812 	bl	80086e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	68fa      	ldr	r2, [r7, #12]
 80086c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2220      	movs	r2, #32
 80086cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2200      	movs	r2, #0
 80086d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80086d8:	2300      	movs	r3, #0
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3710      	adds	r7, #16
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}
	...

080086e4 <UARTEx_SetNbDataToProcess>:
>>>>>>> Stashed changes
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8008698:	b480      	push	{r7}
 800869a:	b085      	sub	sp, #20
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
=======
 80086e4:	b480      	push	{r7}
 80086e6:	b085      	sub	sp, #20
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
<<<<<<< Updated upstream
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d108      	bne.n	80086ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2201      	movs	r2, #1
 80086ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2201      	movs	r2, #1
 80086b4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
=======
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d108      	bne.n	8008706 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2201      	movs	r2, #1
 8008700:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
>>>>>>> Stashed changes
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
<<<<<<< Updated upstream
 80086b8:	e031      	b.n	800871e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80086ba:	2308      	movs	r3, #8
 80086bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80086be:	2308      	movs	r3, #8
 80086c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	689b      	ldr	r3, [r3, #8]
 80086c8:	0e5b      	lsrs	r3, r3, #25
 80086ca:	b2db      	uxtb	r3, r3
 80086cc:	f003 0307 	and.w	r3, r3, #7
 80086d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	689b      	ldr	r3, [r3, #8]
 80086d8:	0f5b      	lsrs	r3, r3, #29
 80086da:	b2db      	uxtb	r3, r3
 80086dc:	f003 0307 	and.w	r3, r3, #7
 80086e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80086e2:	7bbb      	ldrb	r3, [r7, #14]
 80086e4:	7b3a      	ldrb	r2, [r7, #12]
 80086e6:	4911      	ldr	r1, [pc, #68]	@ (800872c <UARTEx_SetNbDataToProcess+0x94>)
 80086e8:	5c8a      	ldrb	r2, [r1, r2]
 80086ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80086ee:	7b3a      	ldrb	r2, [r7, #12]
 80086f0:	490f      	ldr	r1, [pc, #60]	@ (8008730 <UARTEx_SetNbDataToProcess+0x98>)
 80086f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80086f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80086f8:	b29a      	uxth	r2, r3
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008700:	7bfb      	ldrb	r3, [r7, #15]
 8008702:	7b7a      	ldrb	r2, [r7, #13]
 8008704:	4909      	ldr	r1, [pc, #36]	@ (800872c <UARTEx_SetNbDataToProcess+0x94>)
 8008706:	5c8a      	ldrb	r2, [r1, r2]
 8008708:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800870c:	7b7a      	ldrb	r2, [r7, #13]
 800870e:	4908      	ldr	r1, [pc, #32]	@ (8008730 <UARTEx_SetNbDataToProcess+0x98>)
 8008710:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008712:	fb93 f3f2 	sdiv	r3, r3, r2
 8008716:	b29a      	uxth	r2, r3
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800871e:	bf00      	nop
 8008720:	3714      	adds	r7, #20
 8008722:	46bd      	mov	sp, r7
 8008724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008728:	4770      	bx	lr
 800872a:	bf00      	nop
 800872c:	0800d414 	.word	0x0800d414
 8008730:	0800d41c 	.word	0x0800d41c

08008734 <arm_sin_f32>:
 8008734:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 80087b4 <arm_sin_f32+0x80>
 8008738:	ee20 0a27 	vmul.f32	s0, s0, s15
 800873c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008744:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008748:	d504      	bpl.n	8008754 <arm_sin_f32+0x20>
 800874a:	ee17 3a90 	vmov	r3, s15
 800874e:	3b01      	subs	r3, #1
 8008750:	ee07 3a90 	vmov	s15, r3
 8008754:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008758:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80087b8 <arm_sin_f32+0x84>
 800875c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008760:	ee20 0a07 	vmul.f32	s0, s0, s14
 8008764:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8008768:	ee17 3a90 	vmov	r3, s15
 800876c:	b29b      	uxth	r3, r3
 800876e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008772:	d21a      	bcs.n	80087aa <arm_sin_f32+0x76>
 8008774:	ee07 3a90 	vmov	s15, r3
 8008778:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800877c:	1c59      	adds	r1, r3, #1
 800877e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008782:	4a0e      	ldr	r2, [pc, #56]	@ (80087bc <arm_sin_f32+0x88>)
 8008784:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8008788:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800878c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8008790:	ed93 7a00 	vldr	s14, [r3]
 8008794:	edd2 6a00 	vldr	s13, [r2]
 8008798:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800879c:	ee20 0a26 	vmul.f32	s0, s0, s13
 80087a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80087a4:	ee37 0a80 	vadd.f32	s0, s15, s0
 80087a8:	4770      	bx	lr
 80087aa:	ee30 0a47 	vsub.f32	s0, s0, s14
 80087ae:	2101      	movs	r1, #1
 80087b0:	2300      	movs	r3, #0
 80087b2:	e7e6      	b.n	8008782 <arm_sin_f32+0x4e>
 80087b4:	3e22f983 	.word	0x3e22f983
 80087b8:	44000000 	.word	0x44000000
 80087bc:	0800d424 	.word	0x0800d424

080087c0 <__cvt>:
 80087c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087c4:	ec57 6b10 	vmov	r6, r7, d0
 80087c8:	2f00      	cmp	r7, #0
 80087ca:	460c      	mov	r4, r1
 80087cc:	4619      	mov	r1, r3
 80087ce:	463b      	mov	r3, r7
 80087d0:	bfbb      	ittet	lt
 80087d2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80087d6:	461f      	movlt	r7, r3
 80087d8:	2300      	movge	r3, #0
 80087da:	232d      	movlt	r3, #45	@ 0x2d
 80087dc:	700b      	strb	r3, [r1, #0]
 80087de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80087e0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80087e4:	4691      	mov	r9, r2
 80087e6:	f023 0820 	bic.w	r8, r3, #32
 80087ea:	bfbc      	itt	lt
 80087ec:	4632      	movlt	r2, r6
 80087ee:	4616      	movlt	r6, r2
 80087f0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80087f4:	d005      	beq.n	8008802 <__cvt+0x42>
 80087f6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80087fa:	d100      	bne.n	80087fe <__cvt+0x3e>
 80087fc:	3401      	adds	r4, #1
 80087fe:	2102      	movs	r1, #2
 8008800:	e000      	b.n	8008804 <__cvt+0x44>
 8008802:	2103      	movs	r1, #3
 8008804:	ab03      	add	r3, sp, #12
 8008806:	9301      	str	r3, [sp, #4]
 8008808:	ab02      	add	r3, sp, #8
 800880a:	9300      	str	r3, [sp, #0]
 800880c:	ec47 6b10 	vmov	d0, r6, r7
 8008810:	4653      	mov	r3, sl
 8008812:	4622      	mov	r2, r4
 8008814:	f001 ff20 	bl	800a658 <_dtoa_r>
 8008818:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800881c:	4605      	mov	r5, r0
 800881e:	d119      	bne.n	8008854 <__cvt+0x94>
 8008820:	f019 0f01 	tst.w	r9, #1
 8008824:	d00e      	beq.n	8008844 <__cvt+0x84>
 8008826:	eb00 0904 	add.w	r9, r0, r4
 800882a:	2200      	movs	r2, #0
 800882c:	2300      	movs	r3, #0
 800882e:	4630      	mov	r0, r6
 8008830:	4639      	mov	r1, r7
 8008832:	f7f8 f961 	bl	8000af8 <__aeabi_dcmpeq>
 8008836:	b108      	cbz	r0, 800883c <__cvt+0x7c>
 8008838:	f8cd 900c 	str.w	r9, [sp, #12]
 800883c:	2230      	movs	r2, #48	@ 0x30
 800883e:	9b03      	ldr	r3, [sp, #12]
 8008840:	454b      	cmp	r3, r9
 8008842:	d31e      	bcc.n	8008882 <__cvt+0xc2>
 8008844:	9b03      	ldr	r3, [sp, #12]
 8008846:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008848:	1b5b      	subs	r3, r3, r5
 800884a:	4628      	mov	r0, r5
 800884c:	6013      	str	r3, [r2, #0]
 800884e:	b004      	add	sp, #16
 8008850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008854:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008858:	eb00 0904 	add.w	r9, r0, r4
 800885c:	d1e5      	bne.n	800882a <__cvt+0x6a>
 800885e:	7803      	ldrb	r3, [r0, #0]
 8008860:	2b30      	cmp	r3, #48	@ 0x30
 8008862:	d10a      	bne.n	800887a <__cvt+0xba>
 8008864:	2200      	movs	r2, #0
 8008866:	2300      	movs	r3, #0
 8008868:	4630      	mov	r0, r6
 800886a:	4639      	mov	r1, r7
 800886c:	f7f8 f944 	bl	8000af8 <__aeabi_dcmpeq>
 8008870:	b918      	cbnz	r0, 800887a <__cvt+0xba>
 8008872:	f1c4 0401 	rsb	r4, r4, #1
 8008876:	f8ca 4000 	str.w	r4, [sl]
 800887a:	f8da 3000 	ldr.w	r3, [sl]
 800887e:	4499      	add	r9, r3
 8008880:	e7d3      	b.n	800882a <__cvt+0x6a>
 8008882:	1c59      	adds	r1, r3, #1
 8008884:	9103      	str	r1, [sp, #12]
 8008886:	701a      	strb	r2, [r3, #0]
 8008888:	e7d9      	b.n	800883e <__cvt+0x7e>

0800888a <__exponent>:
 800888a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800888c:	2900      	cmp	r1, #0
 800888e:	bfba      	itte	lt
 8008890:	4249      	neglt	r1, r1
 8008892:	232d      	movlt	r3, #45	@ 0x2d
 8008894:	232b      	movge	r3, #43	@ 0x2b
 8008896:	2909      	cmp	r1, #9
 8008898:	7002      	strb	r2, [r0, #0]
 800889a:	7043      	strb	r3, [r0, #1]
 800889c:	dd29      	ble.n	80088f2 <__exponent+0x68>
 800889e:	f10d 0307 	add.w	r3, sp, #7
 80088a2:	461d      	mov	r5, r3
 80088a4:	270a      	movs	r7, #10
 80088a6:	461a      	mov	r2, r3
 80088a8:	fbb1 f6f7 	udiv	r6, r1, r7
 80088ac:	fb07 1416 	mls	r4, r7, r6, r1
 80088b0:	3430      	adds	r4, #48	@ 0x30
 80088b2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80088b6:	460c      	mov	r4, r1
 80088b8:	2c63      	cmp	r4, #99	@ 0x63
 80088ba:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80088be:	4631      	mov	r1, r6
 80088c0:	dcf1      	bgt.n	80088a6 <__exponent+0x1c>
 80088c2:	3130      	adds	r1, #48	@ 0x30
 80088c4:	1e94      	subs	r4, r2, #2
 80088c6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80088ca:	1c41      	adds	r1, r0, #1
 80088cc:	4623      	mov	r3, r4
 80088ce:	42ab      	cmp	r3, r5
 80088d0:	d30a      	bcc.n	80088e8 <__exponent+0x5e>
 80088d2:	f10d 0309 	add.w	r3, sp, #9
 80088d6:	1a9b      	subs	r3, r3, r2
 80088d8:	42ac      	cmp	r4, r5
 80088da:	bf88      	it	hi
 80088dc:	2300      	movhi	r3, #0
 80088de:	3302      	adds	r3, #2
 80088e0:	4403      	add	r3, r0
 80088e2:	1a18      	subs	r0, r3, r0
 80088e4:	b003      	add	sp, #12
 80088e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088e8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80088ec:	f801 6f01 	strb.w	r6, [r1, #1]!
 80088f0:	e7ed      	b.n	80088ce <__exponent+0x44>
 80088f2:	2330      	movs	r3, #48	@ 0x30
 80088f4:	3130      	adds	r1, #48	@ 0x30
 80088f6:	7083      	strb	r3, [r0, #2]
 80088f8:	70c1      	strb	r1, [r0, #3]
 80088fa:	1d03      	adds	r3, r0, #4
 80088fc:	e7f1      	b.n	80088e2 <__exponent+0x58>
	...

08008900 <_printf_float>:
 8008900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008904:	b08d      	sub	sp, #52	@ 0x34
 8008906:	460c      	mov	r4, r1
 8008908:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800890c:	4616      	mov	r6, r2
 800890e:	461f      	mov	r7, r3
 8008910:	4605      	mov	r5, r0
 8008912:	f001 fdc9 	bl	800a4a8 <_localeconv_r>
 8008916:	6803      	ldr	r3, [r0, #0]
 8008918:	9304      	str	r3, [sp, #16]
 800891a:	4618      	mov	r0, r3
 800891c:	f7f7 fcc0 	bl	80002a0 <strlen>
 8008920:	2300      	movs	r3, #0
 8008922:	930a      	str	r3, [sp, #40]	@ 0x28
 8008924:	f8d8 3000 	ldr.w	r3, [r8]
 8008928:	9005      	str	r0, [sp, #20]
 800892a:	3307      	adds	r3, #7
 800892c:	f023 0307 	bic.w	r3, r3, #7
 8008930:	f103 0208 	add.w	r2, r3, #8
 8008934:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008938:	f8d4 b000 	ldr.w	fp, [r4]
 800893c:	f8c8 2000 	str.w	r2, [r8]
 8008940:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008944:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008948:	9307      	str	r3, [sp, #28]
 800894a:	f8cd 8018 	str.w	r8, [sp, #24]
 800894e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008952:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008956:	4b9c      	ldr	r3, [pc, #624]	@ (8008bc8 <_printf_float+0x2c8>)
 8008958:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800895c:	f7f8 f8fe 	bl	8000b5c <__aeabi_dcmpun>
 8008960:	bb70      	cbnz	r0, 80089c0 <_printf_float+0xc0>
 8008962:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008966:	4b98      	ldr	r3, [pc, #608]	@ (8008bc8 <_printf_float+0x2c8>)
 8008968:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800896c:	f7f8 f8d8 	bl	8000b20 <__aeabi_dcmple>
 8008970:	bb30      	cbnz	r0, 80089c0 <_printf_float+0xc0>
 8008972:	2200      	movs	r2, #0
 8008974:	2300      	movs	r3, #0
 8008976:	4640      	mov	r0, r8
 8008978:	4649      	mov	r1, r9
 800897a:	f7f8 f8c7 	bl	8000b0c <__aeabi_dcmplt>
 800897e:	b110      	cbz	r0, 8008986 <_printf_float+0x86>
 8008980:	232d      	movs	r3, #45	@ 0x2d
 8008982:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008986:	4a91      	ldr	r2, [pc, #580]	@ (8008bcc <_printf_float+0x2cc>)
 8008988:	4b91      	ldr	r3, [pc, #580]	@ (8008bd0 <_printf_float+0x2d0>)
 800898a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800898e:	bf94      	ite	ls
 8008990:	4690      	movls	r8, r2
 8008992:	4698      	movhi	r8, r3
 8008994:	2303      	movs	r3, #3
 8008996:	6123      	str	r3, [r4, #16]
 8008998:	f02b 0304 	bic.w	r3, fp, #4
 800899c:	6023      	str	r3, [r4, #0]
 800899e:	f04f 0900 	mov.w	r9, #0
 80089a2:	9700      	str	r7, [sp, #0]
 80089a4:	4633      	mov	r3, r6
 80089a6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80089a8:	4621      	mov	r1, r4
 80089aa:	4628      	mov	r0, r5
 80089ac:	f000 f9d2 	bl	8008d54 <_printf_common>
 80089b0:	3001      	adds	r0, #1
 80089b2:	f040 808d 	bne.w	8008ad0 <_printf_float+0x1d0>
 80089b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80089ba:	b00d      	add	sp, #52	@ 0x34
 80089bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089c0:	4642      	mov	r2, r8
 80089c2:	464b      	mov	r3, r9
 80089c4:	4640      	mov	r0, r8
 80089c6:	4649      	mov	r1, r9
 80089c8:	f7f8 f8c8 	bl	8000b5c <__aeabi_dcmpun>
 80089cc:	b140      	cbz	r0, 80089e0 <_printf_float+0xe0>
 80089ce:	464b      	mov	r3, r9
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	bfbc      	itt	lt
 80089d4:	232d      	movlt	r3, #45	@ 0x2d
 80089d6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80089da:	4a7e      	ldr	r2, [pc, #504]	@ (8008bd4 <_printf_float+0x2d4>)
 80089dc:	4b7e      	ldr	r3, [pc, #504]	@ (8008bd8 <_printf_float+0x2d8>)
 80089de:	e7d4      	b.n	800898a <_printf_float+0x8a>
 80089e0:	6863      	ldr	r3, [r4, #4]
 80089e2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80089e6:	9206      	str	r2, [sp, #24]
 80089e8:	1c5a      	adds	r2, r3, #1
 80089ea:	d13b      	bne.n	8008a64 <_printf_float+0x164>
 80089ec:	2306      	movs	r3, #6
 80089ee:	6063      	str	r3, [r4, #4]
 80089f0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80089f4:	2300      	movs	r3, #0
 80089f6:	6022      	str	r2, [r4, #0]
 80089f8:	9303      	str	r3, [sp, #12]
 80089fa:	ab0a      	add	r3, sp, #40	@ 0x28
 80089fc:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008a00:	ab09      	add	r3, sp, #36	@ 0x24
 8008a02:	9300      	str	r3, [sp, #0]
 8008a04:	6861      	ldr	r1, [r4, #4]
 8008a06:	ec49 8b10 	vmov	d0, r8, r9
 8008a0a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008a0e:	4628      	mov	r0, r5
 8008a10:	f7ff fed6 	bl	80087c0 <__cvt>
 8008a14:	9b06      	ldr	r3, [sp, #24]
 8008a16:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008a18:	2b47      	cmp	r3, #71	@ 0x47
 8008a1a:	4680      	mov	r8, r0
 8008a1c:	d129      	bne.n	8008a72 <_printf_float+0x172>
 8008a1e:	1cc8      	adds	r0, r1, #3
 8008a20:	db02      	blt.n	8008a28 <_printf_float+0x128>
 8008a22:	6863      	ldr	r3, [r4, #4]
 8008a24:	4299      	cmp	r1, r3
 8008a26:	dd41      	ble.n	8008aac <_printf_float+0x1ac>
 8008a28:	f1aa 0a02 	sub.w	sl, sl, #2
 8008a2c:	fa5f fa8a 	uxtb.w	sl, sl
 8008a30:	3901      	subs	r1, #1
 8008a32:	4652      	mov	r2, sl
 8008a34:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008a38:	9109      	str	r1, [sp, #36]	@ 0x24
 8008a3a:	f7ff ff26 	bl	800888a <__exponent>
 8008a3e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008a40:	1813      	adds	r3, r2, r0
 8008a42:	2a01      	cmp	r2, #1
 8008a44:	4681      	mov	r9, r0
 8008a46:	6123      	str	r3, [r4, #16]
 8008a48:	dc02      	bgt.n	8008a50 <_printf_float+0x150>
 8008a4a:	6822      	ldr	r2, [r4, #0]
 8008a4c:	07d2      	lsls	r2, r2, #31
 8008a4e:	d501      	bpl.n	8008a54 <_printf_float+0x154>
 8008a50:	3301      	adds	r3, #1
 8008a52:	6123      	str	r3, [r4, #16]
 8008a54:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d0a2      	beq.n	80089a2 <_printf_float+0xa2>
 8008a5c:	232d      	movs	r3, #45	@ 0x2d
 8008a5e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a62:	e79e      	b.n	80089a2 <_printf_float+0xa2>
 8008a64:	9a06      	ldr	r2, [sp, #24]
 8008a66:	2a47      	cmp	r2, #71	@ 0x47
 8008a68:	d1c2      	bne.n	80089f0 <_printf_float+0xf0>
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d1c0      	bne.n	80089f0 <_printf_float+0xf0>
 8008a6e:	2301      	movs	r3, #1
 8008a70:	e7bd      	b.n	80089ee <_printf_float+0xee>
 8008a72:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008a76:	d9db      	bls.n	8008a30 <_printf_float+0x130>
 8008a78:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008a7c:	d118      	bne.n	8008ab0 <_printf_float+0x1b0>
 8008a7e:	2900      	cmp	r1, #0
 8008a80:	6863      	ldr	r3, [r4, #4]
 8008a82:	dd0b      	ble.n	8008a9c <_printf_float+0x19c>
 8008a84:	6121      	str	r1, [r4, #16]
 8008a86:	b913      	cbnz	r3, 8008a8e <_printf_float+0x18e>
 8008a88:	6822      	ldr	r2, [r4, #0]
 8008a8a:	07d0      	lsls	r0, r2, #31
 8008a8c:	d502      	bpl.n	8008a94 <_printf_float+0x194>
 8008a8e:	3301      	adds	r3, #1
 8008a90:	440b      	add	r3, r1
 8008a92:	6123      	str	r3, [r4, #16]
 8008a94:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008a96:	f04f 0900 	mov.w	r9, #0
 8008a9a:	e7db      	b.n	8008a54 <_printf_float+0x154>
 8008a9c:	b913      	cbnz	r3, 8008aa4 <_printf_float+0x1a4>
 8008a9e:	6822      	ldr	r2, [r4, #0]
 8008aa0:	07d2      	lsls	r2, r2, #31
 8008aa2:	d501      	bpl.n	8008aa8 <_printf_float+0x1a8>
 8008aa4:	3302      	adds	r3, #2
 8008aa6:	e7f4      	b.n	8008a92 <_printf_float+0x192>
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	e7f2      	b.n	8008a92 <_printf_float+0x192>
 8008aac:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008ab0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ab2:	4299      	cmp	r1, r3
 8008ab4:	db05      	blt.n	8008ac2 <_printf_float+0x1c2>
 8008ab6:	6823      	ldr	r3, [r4, #0]
 8008ab8:	6121      	str	r1, [r4, #16]
 8008aba:	07d8      	lsls	r0, r3, #31
 8008abc:	d5ea      	bpl.n	8008a94 <_printf_float+0x194>
 8008abe:	1c4b      	adds	r3, r1, #1
 8008ac0:	e7e7      	b.n	8008a92 <_printf_float+0x192>
 8008ac2:	2900      	cmp	r1, #0
 8008ac4:	bfd4      	ite	le
 8008ac6:	f1c1 0202 	rsble	r2, r1, #2
 8008aca:	2201      	movgt	r2, #1
 8008acc:	4413      	add	r3, r2
 8008ace:	e7e0      	b.n	8008a92 <_printf_float+0x192>
 8008ad0:	6823      	ldr	r3, [r4, #0]
 8008ad2:	055a      	lsls	r2, r3, #21
 8008ad4:	d407      	bmi.n	8008ae6 <_printf_float+0x1e6>
 8008ad6:	6923      	ldr	r3, [r4, #16]
 8008ad8:	4642      	mov	r2, r8
 8008ada:	4631      	mov	r1, r6
 8008adc:	4628      	mov	r0, r5
 8008ade:	47b8      	blx	r7
 8008ae0:	3001      	adds	r0, #1
 8008ae2:	d12b      	bne.n	8008b3c <_printf_float+0x23c>
 8008ae4:	e767      	b.n	80089b6 <_printf_float+0xb6>
 8008ae6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008aea:	f240 80dd 	bls.w	8008ca8 <_printf_float+0x3a8>
 8008aee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008af2:	2200      	movs	r2, #0
 8008af4:	2300      	movs	r3, #0
 8008af6:	f7f7 ffff 	bl	8000af8 <__aeabi_dcmpeq>
 8008afa:	2800      	cmp	r0, #0
 8008afc:	d033      	beq.n	8008b66 <_printf_float+0x266>
 8008afe:	4a37      	ldr	r2, [pc, #220]	@ (8008bdc <_printf_float+0x2dc>)
 8008b00:	2301      	movs	r3, #1
 8008b02:	4631      	mov	r1, r6
 8008b04:	4628      	mov	r0, r5
 8008b06:	47b8      	blx	r7
 8008b08:	3001      	adds	r0, #1
 8008b0a:	f43f af54 	beq.w	80089b6 <_printf_float+0xb6>
 8008b0e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008b12:	4543      	cmp	r3, r8
 8008b14:	db02      	blt.n	8008b1c <_printf_float+0x21c>
 8008b16:	6823      	ldr	r3, [r4, #0]
 8008b18:	07d8      	lsls	r0, r3, #31
 8008b1a:	d50f      	bpl.n	8008b3c <_printf_float+0x23c>
 8008b1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b20:	4631      	mov	r1, r6
 8008b22:	4628      	mov	r0, r5
 8008b24:	47b8      	blx	r7
 8008b26:	3001      	adds	r0, #1
 8008b28:	f43f af45 	beq.w	80089b6 <_printf_float+0xb6>
 8008b2c:	f04f 0900 	mov.w	r9, #0
 8008b30:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8008b34:	f104 0a1a 	add.w	sl, r4, #26
 8008b38:	45c8      	cmp	r8, r9
 8008b3a:	dc09      	bgt.n	8008b50 <_printf_float+0x250>
 8008b3c:	6823      	ldr	r3, [r4, #0]
 8008b3e:	079b      	lsls	r3, r3, #30
 8008b40:	f100 8103 	bmi.w	8008d4a <_printf_float+0x44a>
 8008b44:	68e0      	ldr	r0, [r4, #12]
 8008b46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b48:	4298      	cmp	r0, r3
 8008b4a:	bfb8      	it	lt
 8008b4c:	4618      	movlt	r0, r3
 8008b4e:	e734      	b.n	80089ba <_printf_float+0xba>
 8008b50:	2301      	movs	r3, #1
 8008b52:	4652      	mov	r2, sl
 8008b54:	4631      	mov	r1, r6
 8008b56:	4628      	mov	r0, r5
 8008b58:	47b8      	blx	r7
 8008b5a:	3001      	adds	r0, #1
 8008b5c:	f43f af2b 	beq.w	80089b6 <_printf_float+0xb6>
 8008b60:	f109 0901 	add.w	r9, r9, #1
 8008b64:	e7e8      	b.n	8008b38 <_printf_float+0x238>
 8008b66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	dc39      	bgt.n	8008be0 <_printf_float+0x2e0>
 8008b6c:	4a1b      	ldr	r2, [pc, #108]	@ (8008bdc <_printf_float+0x2dc>)
 8008b6e:	2301      	movs	r3, #1
 8008b70:	4631      	mov	r1, r6
 8008b72:	4628      	mov	r0, r5
 8008b74:	47b8      	blx	r7
 8008b76:	3001      	adds	r0, #1
 8008b78:	f43f af1d 	beq.w	80089b6 <_printf_float+0xb6>
 8008b7c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008b80:	ea59 0303 	orrs.w	r3, r9, r3
 8008b84:	d102      	bne.n	8008b8c <_printf_float+0x28c>
 8008b86:	6823      	ldr	r3, [r4, #0]
 8008b88:	07d9      	lsls	r1, r3, #31
 8008b8a:	d5d7      	bpl.n	8008b3c <_printf_float+0x23c>
 8008b8c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b90:	4631      	mov	r1, r6
 8008b92:	4628      	mov	r0, r5
 8008b94:	47b8      	blx	r7
 8008b96:	3001      	adds	r0, #1
 8008b98:	f43f af0d 	beq.w	80089b6 <_printf_float+0xb6>
 8008b9c:	f04f 0a00 	mov.w	sl, #0
 8008ba0:	f104 0b1a 	add.w	fp, r4, #26
 8008ba4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ba6:	425b      	negs	r3, r3
 8008ba8:	4553      	cmp	r3, sl
 8008baa:	dc01      	bgt.n	8008bb0 <_printf_float+0x2b0>
 8008bac:	464b      	mov	r3, r9
 8008bae:	e793      	b.n	8008ad8 <_printf_float+0x1d8>
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	465a      	mov	r2, fp
 8008bb4:	4631      	mov	r1, r6
 8008bb6:	4628      	mov	r0, r5
 8008bb8:	47b8      	blx	r7
 8008bba:	3001      	adds	r0, #1
 8008bbc:	f43f aefb 	beq.w	80089b6 <_printf_float+0xb6>
 8008bc0:	f10a 0a01 	add.w	sl, sl, #1
 8008bc4:	e7ee      	b.n	8008ba4 <_printf_float+0x2a4>
 8008bc6:	bf00      	nop
 8008bc8:	7fefffff 	.word	0x7fefffff
 8008bcc:	0800dc28 	.word	0x0800dc28
 8008bd0:	0800dc2c 	.word	0x0800dc2c
 8008bd4:	0800dc30 	.word	0x0800dc30
 8008bd8:	0800dc34 	.word	0x0800dc34
 8008bdc:	0800dc38 	.word	0x0800dc38
 8008be0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008be2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008be6:	4553      	cmp	r3, sl
 8008be8:	bfa8      	it	ge
 8008bea:	4653      	movge	r3, sl
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	4699      	mov	r9, r3
 8008bf0:	dc36      	bgt.n	8008c60 <_printf_float+0x360>
 8008bf2:	f04f 0b00 	mov.w	fp, #0
 8008bf6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008bfa:	f104 021a 	add.w	r2, r4, #26
 8008bfe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008c00:	9306      	str	r3, [sp, #24]
 8008c02:	eba3 0309 	sub.w	r3, r3, r9
 8008c06:	455b      	cmp	r3, fp
 8008c08:	dc31      	bgt.n	8008c6e <_printf_float+0x36e>
 8008c0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c0c:	459a      	cmp	sl, r3
 8008c0e:	dc3a      	bgt.n	8008c86 <_printf_float+0x386>
 8008c10:	6823      	ldr	r3, [r4, #0]
 8008c12:	07da      	lsls	r2, r3, #31
 8008c14:	d437      	bmi.n	8008c86 <_printf_float+0x386>
 8008c16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c18:	ebaa 0903 	sub.w	r9, sl, r3
 8008c1c:	9b06      	ldr	r3, [sp, #24]
 8008c1e:	ebaa 0303 	sub.w	r3, sl, r3
 8008c22:	4599      	cmp	r9, r3
 8008c24:	bfa8      	it	ge
 8008c26:	4699      	movge	r9, r3
 8008c28:	f1b9 0f00 	cmp.w	r9, #0
 8008c2c:	dc33      	bgt.n	8008c96 <_printf_float+0x396>
 8008c2e:	f04f 0800 	mov.w	r8, #0
 8008c32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c36:	f104 0b1a 	add.w	fp, r4, #26
 8008c3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c3c:	ebaa 0303 	sub.w	r3, sl, r3
 8008c40:	eba3 0309 	sub.w	r3, r3, r9
 8008c44:	4543      	cmp	r3, r8
 8008c46:	f77f af79 	ble.w	8008b3c <_printf_float+0x23c>
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	465a      	mov	r2, fp
 8008c4e:	4631      	mov	r1, r6
 8008c50:	4628      	mov	r0, r5
 8008c52:	47b8      	blx	r7
 8008c54:	3001      	adds	r0, #1
 8008c56:	f43f aeae 	beq.w	80089b6 <_printf_float+0xb6>
 8008c5a:	f108 0801 	add.w	r8, r8, #1
 8008c5e:	e7ec      	b.n	8008c3a <_printf_float+0x33a>
 8008c60:	4642      	mov	r2, r8
 8008c62:	4631      	mov	r1, r6
 8008c64:	4628      	mov	r0, r5
 8008c66:	47b8      	blx	r7
 8008c68:	3001      	adds	r0, #1
 8008c6a:	d1c2      	bne.n	8008bf2 <_printf_float+0x2f2>
 8008c6c:	e6a3      	b.n	80089b6 <_printf_float+0xb6>
 8008c6e:	2301      	movs	r3, #1
 8008c70:	4631      	mov	r1, r6
 8008c72:	4628      	mov	r0, r5
 8008c74:	9206      	str	r2, [sp, #24]
 8008c76:	47b8      	blx	r7
 8008c78:	3001      	adds	r0, #1
 8008c7a:	f43f ae9c 	beq.w	80089b6 <_printf_float+0xb6>
 8008c7e:	9a06      	ldr	r2, [sp, #24]
 8008c80:	f10b 0b01 	add.w	fp, fp, #1
 8008c84:	e7bb      	b.n	8008bfe <_printf_float+0x2fe>
 8008c86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c8a:	4631      	mov	r1, r6
 8008c8c:	4628      	mov	r0, r5
 8008c8e:	47b8      	blx	r7
 8008c90:	3001      	adds	r0, #1
 8008c92:	d1c0      	bne.n	8008c16 <_printf_float+0x316>
 8008c94:	e68f      	b.n	80089b6 <_printf_float+0xb6>
 8008c96:	9a06      	ldr	r2, [sp, #24]
 8008c98:	464b      	mov	r3, r9
 8008c9a:	4442      	add	r2, r8
 8008c9c:	4631      	mov	r1, r6
 8008c9e:	4628      	mov	r0, r5
 8008ca0:	47b8      	blx	r7
 8008ca2:	3001      	adds	r0, #1
 8008ca4:	d1c3      	bne.n	8008c2e <_printf_float+0x32e>
 8008ca6:	e686      	b.n	80089b6 <_printf_float+0xb6>
 8008ca8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008cac:	f1ba 0f01 	cmp.w	sl, #1
 8008cb0:	dc01      	bgt.n	8008cb6 <_printf_float+0x3b6>
 8008cb2:	07db      	lsls	r3, r3, #31
 8008cb4:	d536      	bpl.n	8008d24 <_printf_float+0x424>
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	4642      	mov	r2, r8
 8008cba:	4631      	mov	r1, r6
 8008cbc:	4628      	mov	r0, r5
 8008cbe:	47b8      	blx	r7
 8008cc0:	3001      	adds	r0, #1
 8008cc2:	f43f ae78 	beq.w	80089b6 <_printf_float+0xb6>
 8008cc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cca:	4631      	mov	r1, r6
 8008ccc:	4628      	mov	r0, r5
 8008cce:	47b8      	blx	r7
 8008cd0:	3001      	adds	r0, #1
 8008cd2:	f43f ae70 	beq.w	80089b6 <_printf_float+0xb6>
 8008cd6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008cda:	2200      	movs	r2, #0
 8008cdc:	2300      	movs	r3, #0
 8008cde:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008ce2:	f7f7 ff09 	bl	8000af8 <__aeabi_dcmpeq>
 8008ce6:	b9c0      	cbnz	r0, 8008d1a <_printf_float+0x41a>
 8008ce8:	4653      	mov	r3, sl
 8008cea:	f108 0201 	add.w	r2, r8, #1
 8008cee:	4631      	mov	r1, r6
 8008cf0:	4628      	mov	r0, r5
 8008cf2:	47b8      	blx	r7
 8008cf4:	3001      	adds	r0, #1
 8008cf6:	d10c      	bne.n	8008d12 <_printf_float+0x412>
 8008cf8:	e65d      	b.n	80089b6 <_printf_float+0xb6>
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	465a      	mov	r2, fp
 8008cfe:	4631      	mov	r1, r6
 8008d00:	4628      	mov	r0, r5
 8008d02:	47b8      	blx	r7
 8008d04:	3001      	adds	r0, #1
 8008d06:	f43f ae56 	beq.w	80089b6 <_printf_float+0xb6>
 8008d0a:	f108 0801 	add.w	r8, r8, #1
 8008d0e:	45d0      	cmp	r8, sl
 8008d10:	dbf3      	blt.n	8008cfa <_printf_float+0x3fa>
 8008d12:	464b      	mov	r3, r9
 8008d14:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008d18:	e6df      	b.n	8008ada <_printf_float+0x1da>
 8008d1a:	f04f 0800 	mov.w	r8, #0
 8008d1e:	f104 0b1a 	add.w	fp, r4, #26
 8008d22:	e7f4      	b.n	8008d0e <_printf_float+0x40e>
 8008d24:	2301      	movs	r3, #1
 8008d26:	4642      	mov	r2, r8
 8008d28:	e7e1      	b.n	8008cee <_printf_float+0x3ee>
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	464a      	mov	r2, r9
 8008d2e:	4631      	mov	r1, r6
 8008d30:	4628      	mov	r0, r5
 8008d32:	47b8      	blx	r7
 8008d34:	3001      	adds	r0, #1
 8008d36:	f43f ae3e 	beq.w	80089b6 <_printf_float+0xb6>
 8008d3a:	f108 0801 	add.w	r8, r8, #1
 8008d3e:	68e3      	ldr	r3, [r4, #12]
 8008d40:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008d42:	1a5b      	subs	r3, r3, r1
 8008d44:	4543      	cmp	r3, r8
 8008d46:	dcf0      	bgt.n	8008d2a <_printf_float+0x42a>
 8008d48:	e6fc      	b.n	8008b44 <_printf_float+0x244>
 8008d4a:	f04f 0800 	mov.w	r8, #0
 8008d4e:	f104 0919 	add.w	r9, r4, #25
 8008d52:	e7f4      	b.n	8008d3e <_printf_float+0x43e>

08008d54 <_printf_common>:
 8008d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d58:	4616      	mov	r6, r2
 8008d5a:	4698      	mov	r8, r3
 8008d5c:	688a      	ldr	r2, [r1, #8]
 8008d5e:	690b      	ldr	r3, [r1, #16]
 8008d60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008d64:	4293      	cmp	r3, r2
 8008d66:	bfb8      	it	lt
 8008d68:	4613      	movlt	r3, r2
 8008d6a:	6033      	str	r3, [r6, #0]
 8008d6c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008d70:	4607      	mov	r7, r0
 8008d72:	460c      	mov	r4, r1
 8008d74:	b10a      	cbz	r2, 8008d7a <_printf_common+0x26>
 8008d76:	3301      	adds	r3, #1
 8008d78:	6033      	str	r3, [r6, #0]
 8008d7a:	6823      	ldr	r3, [r4, #0]
 8008d7c:	0699      	lsls	r1, r3, #26
 8008d7e:	bf42      	ittt	mi
 8008d80:	6833      	ldrmi	r3, [r6, #0]
 8008d82:	3302      	addmi	r3, #2
 8008d84:	6033      	strmi	r3, [r6, #0]
 8008d86:	6825      	ldr	r5, [r4, #0]
 8008d88:	f015 0506 	ands.w	r5, r5, #6
 8008d8c:	d106      	bne.n	8008d9c <_printf_common+0x48>
 8008d8e:	f104 0a19 	add.w	sl, r4, #25
 8008d92:	68e3      	ldr	r3, [r4, #12]
 8008d94:	6832      	ldr	r2, [r6, #0]
 8008d96:	1a9b      	subs	r3, r3, r2
 8008d98:	42ab      	cmp	r3, r5
 8008d9a:	dc26      	bgt.n	8008dea <_printf_common+0x96>
 8008d9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008da0:	6822      	ldr	r2, [r4, #0]
 8008da2:	3b00      	subs	r3, #0
 8008da4:	bf18      	it	ne
 8008da6:	2301      	movne	r3, #1
 8008da8:	0692      	lsls	r2, r2, #26
 8008daa:	d42b      	bmi.n	8008e04 <_printf_common+0xb0>
 8008dac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008db0:	4641      	mov	r1, r8
 8008db2:	4638      	mov	r0, r7
 8008db4:	47c8      	blx	r9
 8008db6:	3001      	adds	r0, #1
 8008db8:	d01e      	beq.n	8008df8 <_printf_common+0xa4>
 8008dba:	6823      	ldr	r3, [r4, #0]
 8008dbc:	6922      	ldr	r2, [r4, #16]
 8008dbe:	f003 0306 	and.w	r3, r3, #6
 8008dc2:	2b04      	cmp	r3, #4
 8008dc4:	bf02      	ittt	eq
 8008dc6:	68e5      	ldreq	r5, [r4, #12]
 8008dc8:	6833      	ldreq	r3, [r6, #0]
 8008dca:	1aed      	subeq	r5, r5, r3
 8008dcc:	68a3      	ldr	r3, [r4, #8]
 8008dce:	bf0c      	ite	eq
 8008dd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008dd4:	2500      	movne	r5, #0
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	bfc4      	itt	gt
 8008dda:	1a9b      	subgt	r3, r3, r2
 8008ddc:	18ed      	addgt	r5, r5, r3
 8008dde:	2600      	movs	r6, #0
 8008de0:	341a      	adds	r4, #26
 8008de2:	42b5      	cmp	r5, r6
 8008de4:	d11a      	bne.n	8008e1c <_printf_common+0xc8>
 8008de6:	2000      	movs	r0, #0
 8008de8:	e008      	b.n	8008dfc <_printf_common+0xa8>
 8008dea:	2301      	movs	r3, #1
 8008dec:	4652      	mov	r2, sl
 8008dee:	4641      	mov	r1, r8
 8008df0:	4638      	mov	r0, r7
 8008df2:	47c8      	blx	r9
 8008df4:	3001      	adds	r0, #1
 8008df6:	d103      	bne.n	8008e00 <_printf_common+0xac>
 8008df8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e00:	3501      	adds	r5, #1
 8008e02:	e7c6      	b.n	8008d92 <_printf_common+0x3e>
 8008e04:	18e1      	adds	r1, r4, r3
 8008e06:	1c5a      	adds	r2, r3, #1
 8008e08:	2030      	movs	r0, #48	@ 0x30
 8008e0a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008e0e:	4422      	add	r2, r4
 8008e10:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008e14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008e18:	3302      	adds	r3, #2
 8008e1a:	e7c7      	b.n	8008dac <_printf_common+0x58>
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	4622      	mov	r2, r4
 8008e20:	4641      	mov	r1, r8
 8008e22:	4638      	mov	r0, r7
 8008e24:	47c8      	blx	r9
 8008e26:	3001      	adds	r0, #1
 8008e28:	d0e6      	beq.n	8008df8 <_printf_common+0xa4>
 8008e2a:	3601      	adds	r6, #1
 8008e2c:	e7d9      	b.n	8008de2 <_printf_common+0x8e>
	...

08008e30 <_printf_i>:
 8008e30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e34:	7e0f      	ldrb	r7, [r1, #24]
 8008e36:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008e38:	2f78      	cmp	r7, #120	@ 0x78
 8008e3a:	4691      	mov	r9, r2
 8008e3c:	4680      	mov	r8, r0
 8008e3e:	460c      	mov	r4, r1
 8008e40:	469a      	mov	sl, r3
 8008e42:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008e46:	d807      	bhi.n	8008e58 <_printf_i+0x28>
 8008e48:	2f62      	cmp	r7, #98	@ 0x62
 8008e4a:	d80a      	bhi.n	8008e62 <_printf_i+0x32>
 8008e4c:	2f00      	cmp	r7, #0
 8008e4e:	f000 80d2 	beq.w	8008ff6 <_printf_i+0x1c6>
 8008e52:	2f58      	cmp	r7, #88	@ 0x58
 8008e54:	f000 80b9 	beq.w	8008fca <_printf_i+0x19a>
 8008e58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e5c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008e60:	e03a      	b.n	8008ed8 <_printf_i+0xa8>
 8008e62:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008e66:	2b15      	cmp	r3, #21
 8008e68:	d8f6      	bhi.n	8008e58 <_printf_i+0x28>
 8008e6a:	a101      	add	r1, pc, #4	@ (adr r1, 8008e70 <_printf_i+0x40>)
 8008e6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e70:	08008ec9 	.word	0x08008ec9
 8008e74:	08008edd 	.word	0x08008edd
 8008e78:	08008e59 	.word	0x08008e59
 8008e7c:	08008e59 	.word	0x08008e59
 8008e80:	08008e59 	.word	0x08008e59
 8008e84:	08008e59 	.word	0x08008e59
 8008e88:	08008edd 	.word	0x08008edd
 8008e8c:	08008e59 	.word	0x08008e59
 8008e90:	08008e59 	.word	0x08008e59
 8008e94:	08008e59 	.word	0x08008e59
 8008e98:	08008e59 	.word	0x08008e59
 8008e9c:	08008fdd 	.word	0x08008fdd
 8008ea0:	08008f07 	.word	0x08008f07
 8008ea4:	08008f97 	.word	0x08008f97
 8008ea8:	08008e59 	.word	0x08008e59
 8008eac:	08008e59 	.word	0x08008e59
 8008eb0:	08008fff 	.word	0x08008fff
 8008eb4:	08008e59 	.word	0x08008e59
 8008eb8:	08008f07 	.word	0x08008f07
 8008ebc:	08008e59 	.word	0x08008e59
 8008ec0:	08008e59 	.word	0x08008e59
 8008ec4:	08008f9f 	.word	0x08008f9f
 8008ec8:	6833      	ldr	r3, [r6, #0]
 8008eca:	1d1a      	adds	r2, r3, #4
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	6032      	str	r2, [r6, #0]
 8008ed0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008ed4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008ed8:	2301      	movs	r3, #1
 8008eda:	e09d      	b.n	8009018 <_printf_i+0x1e8>
 8008edc:	6833      	ldr	r3, [r6, #0]
 8008ede:	6820      	ldr	r0, [r4, #0]
 8008ee0:	1d19      	adds	r1, r3, #4
 8008ee2:	6031      	str	r1, [r6, #0]
 8008ee4:	0606      	lsls	r6, r0, #24
 8008ee6:	d501      	bpl.n	8008eec <_printf_i+0xbc>
 8008ee8:	681d      	ldr	r5, [r3, #0]
 8008eea:	e003      	b.n	8008ef4 <_printf_i+0xc4>
 8008eec:	0645      	lsls	r5, r0, #25
 8008eee:	d5fb      	bpl.n	8008ee8 <_printf_i+0xb8>
 8008ef0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008ef4:	2d00      	cmp	r5, #0
 8008ef6:	da03      	bge.n	8008f00 <_printf_i+0xd0>
 8008ef8:	232d      	movs	r3, #45	@ 0x2d
 8008efa:	426d      	negs	r5, r5
 8008efc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f00:	4859      	ldr	r0, [pc, #356]	@ (8009068 <_printf_i+0x238>)
 8008f02:	230a      	movs	r3, #10
 8008f04:	e011      	b.n	8008f2a <_printf_i+0xfa>
 8008f06:	6821      	ldr	r1, [r4, #0]
 8008f08:	6833      	ldr	r3, [r6, #0]
 8008f0a:	0608      	lsls	r0, r1, #24
 8008f0c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008f10:	d402      	bmi.n	8008f18 <_printf_i+0xe8>
 8008f12:	0649      	lsls	r1, r1, #25
 8008f14:	bf48      	it	mi
 8008f16:	b2ad      	uxthmi	r5, r5
 8008f18:	2f6f      	cmp	r7, #111	@ 0x6f
 8008f1a:	4853      	ldr	r0, [pc, #332]	@ (8009068 <_printf_i+0x238>)
 8008f1c:	6033      	str	r3, [r6, #0]
 8008f1e:	bf14      	ite	ne
 8008f20:	230a      	movne	r3, #10
 8008f22:	2308      	moveq	r3, #8
 8008f24:	2100      	movs	r1, #0
 8008f26:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008f2a:	6866      	ldr	r6, [r4, #4]
 8008f2c:	60a6      	str	r6, [r4, #8]
 8008f2e:	2e00      	cmp	r6, #0
 8008f30:	bfa2      	ittt	ge
 8008f32:	6821      	ldrge	r1, [r4, #0]
 8008f34:	f021 0104 	bicge.w	r1, r1, #4
 8008f38:	6021      	strge	r1, [r4, #0]
 8008f3a:	b90d      	cbnz	r5, 8008f40 <_printf_i+0x110>
 8008f3c:	2e00      	cmp	r6, #0
 8008f3e:	d04b      	beq.n	8008fd8 <_printf_i+0x1a8>
 8008f40:	4616      	mov	r6, r2
 8008f42:	fbb5 f1f3 	udiv	r1, r5, r3
 8008f46:	fb03 5711 	mls	r7, r3, r1, r5
 8008f4a:	5dc7      	ldrb	r7, [r0, r7]
 8008f4c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008f50:	462f      	mov	r7, r5
 8008f52:	42bb      	cmp	r3, r7
 8008f54:	460d      	mov	r5, r1
 8008f56:	d9f4      	bls.n	8008f42 <_printf_i+0x112>
 8008f58:	2b08      	cmp	r3, #8
 8008f5a:	d10b      	bne.n	8008f74 <_printf_i+0x144>
 8008f5c:	6823      	ldr	r3, [r4, #0]
 8008f5e:	07df      	lsls	r7, r3, #31
 8008f60:	d508      	bpl.n	8008f74 <_printf_i+0x144>
 8008f62:	6923      	ldr	r3, [r4, #16]
 8008f64:	6861      	ldr	r1, [r4, #4]
 8008f66:	4299      	cmp	r1, r3
 8008f68:	bfde      	ittt	le
 8008f6a:	2330      	movle	r3, #48	@ 0x30
 8008f6c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008f70:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008f74:	1b92      	subs	r2, r2, r6
 8008f76:	6122      	str	r2, [r4, #16]
 8008f78:	f8cd a000 	str.w	sl, [sp]
 8008f7c:	464b      	mov	r3, r9
 8008f7e:	aa03      	add	r2, sp, #12
 8008f80:	4621      	mov	r1, r4
 8008f82:	4640      	mov	r0, r8
 8008f84:	f7ff fee6 	bl	8008d54 <_printf_common>
 8008f88:	3001      	adds	r0, #1
 8008f8a:	d14a      	bne.n	8009022 <_printf_i+0x1f2>
 8008f8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008f90:	b004      	add	sp, #16
 8008f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f96:	6823      	ldr	r3, [r4, #0]
 8008f98:	f043 0320 	orr.w	r3, r3, #32
 8008f9c:	6023      	str	r3, [r4, #0]
 8008f9e:	4833      	ldr	r0, [pc, #204]	@ (800906c <_printf_i+0x23c>)
 8008fa0:	2778      	movs	r7, #120	@ 0x78
 8008fa2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008fa6:	6823      	ldr	r3, [r4, #0]
 8008fa8:	6831      	ldr	r1, [r6, #0]
 8008faa:	061f      	lsls	r7, r3, #24
 8008fac:	f851 5b04 	ldr.w	r5, [r1], #4
 8008fb0:	d402      	bmi.n	8008fb8 <_printf_i+0x188>
 8008fb2:	065f      	lsls	r7, r3, #25
 8008fb4:	bf48      	it	mi
 8008fb6:	b2ad      	uxthmi	r5, r5
 8008fb8:	6031      	str	r1, [r6, #0]
 8008fba:	07d9      	lsls	r1, r3, #31
 8008fbc:	bf44      	itt	mi
 8008fbe:	f043 0320 	orrmi.w	r3, r3, #32
 8008fc2:	6023      	strmi	r3, [r4, #0]
 8008fc4:	b11d      	cbz	r5, 8008fce <_printf_i+0x19e>
 8008fc6:	2310      	movs	r3, #16
 8008fc8:	e7ac      	b.n	8008f24 <_printf_i+0xf4>
 8008fca:	4827      	ldr	r0, [pc, #156]	@ (8009068 <_printf_i+0x238>)
 8008fcc:	e7e9      	b.n	8008fa2 <_printf_i+0x172>
 8008fce:	6823      	ldr	r3, [r4, #0]
 8008fd0:	f023 0320 	bic.w	r3, r3, #32
 8008fd4:	6023      	str	r3, [r4, #0]
 8008fd6:	e7f6      	b.n	8008fc6 <_printf_i+0x196>
 8008fd8:	4616      	mov	r6, r2
 8008fda:	e7bd      	b.n	8008f58 <_printf_i+0x128>
 8008fdc:	6833      	ldr	r3, [r6, #0]
 8008fde:	6825      	ldr	r5, [r4, #0]
 8008fe0:	6961      	ldr	r1, [r4, #20]
 8008fe2:	1d18      	adds	r0, r3, #4
 8008fe4:	6030      	str	r0, [r6, #0]
 8008fe6:	062e      	lsls	r6, r5, #24
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	d501      	bpl.n	8008ff0 <_printf_i+0x1c0>
 8008fec:	6019      	str	r1, [r3, #0]
 8008fee:	e002      	b.n	8008ff6 <_printf_i+0x1c6>
 8008ff0:	0668      	lsls	r0, r5, #25
 8008ff2:	d5fb      	bpl.n	8008fec <_printf_i+0x1bc>
 8008ff4:	8019      	strh	r1, [r3, #0]
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	6123      	str	r3, [r4, #16]
 8008ffa:	4616      	mov	r6, r2
 8008ffc:	e7bc      	b.n	8008f78 <_printf_i+0x148>
 8008ffe:	6833      	ldr	r3, [r6, #0]
 8009000:	1d1a      	adds	r2, r3, #4
 8009002:	6032      	str	r2, [r6, #0]
 8009004:	681e      	ldr	r6, [r3, #0]
 8009006:	6862      	ldr	r2, [r4, #4]
 8009008:	2100      	movs	r1, #0
 800900a:	4630      	mov	r0, r6
 800900c:	f7f7 f8f8 	bl	8000200 <memchr>
 8009010:	b108      	cbz	r0, 8009016 <_printf_i+0x1e6>
 8009012:	1b80      	subs	r0, r0, r6
 8009014:	6060      	str	r0, [r4, #4]
 8009016:	6863      	ldr	r3, [r4, #4]
 8009018:	6123      	str	r3, [r4, #16]
 800901a:	2300      	movs	r3, #0
 800901c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009020:	e7aa      	b.n	8008f78 <_printf_i+0x148>
 8009022:	6923      	ldr	r3, [r4, #16]
 8009024:	4632      	mov	r2, r6
 8009026:	4649      	mov	r1, r9
 8009028:	4640      	mov	r0, r8
 800902a:	47d0      	blx	sl
 800902c:	3001      	adds	r0, #1
 800902e:	d0ad      	beq.n	8008f8c <_printf_i+0x15c>
 8009030:	6823      	ldr	r3, [r4, #0]
 8009032:	079b      	lsls	r3, r3, #30
 8009034:	d413      	bmi.n	800905e <_printf_i+0x22e>
 8009036:	68e0      	ldr	r0, [r4, #12]
 8009038:	9b03      	ldr	r3, [sp, #12]
 800903a:	4298      	cmp	r0, r3
 800903c:	bfb8      	it	lt
 800903e:	4618      	movlt	r0, r3
 8009040:	e7a6      	b.n	8008f90 <_printf_i+0x160>
 8009042:	2301      	movs	r3, #1
 8009044:	4632      	mov	r2, r6
 8009046:	4649      	mov	r1, r9
 8009048:	4640      	mov	r0, r8
 800904a:	47d0      	blx	sl
 800904c:	3001      	adds	r0, #1
 800904e:	d09d      	beq.n	8008f8c <_printf_i+0x15c>
 8009050:	3501      	adds	r5, #1
 8009052:	68e3      	ldr	r3, [r4, #12]
 8009054:	9903      	ldr	r1, [sp, #12]
 8009056:	1a5b      	subs	r3, r3, r1
 8009058:	42ab      	cmp	r3, r5
 800905a:	dcf2      	bgt.n	8009042 <_printf_i+0x212>
 800905c:	e7eb      	b.n	8009036 <_printf_i+0x206>
 800905e:	2500      	movs	r5, #0
 8009060:	f104 0619 	add.w	r6, r4, #25
 8009064:	e7f5      	b.n	8009052 <_printf_i+0x222>
 8009066:	bf00      	nop
 8009068:	0800dc3a 	.word	0x0800dc3a
 800906c:	0800dc4b 	.word	0x0800dc4b

08009070 <_scanf_float>:
 8009070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009074:	b087      	sub	sp, #28
 8009076:	4617      	mov	r7, r2
 8009078:	9303      	str	r3, [sp, #12]
 800907a:	688b      	ldr	r3, [r1, #8]
 800907c:	1e5a      	subs	r2, r3, #1
 800907e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009082:	bf81      	itttt	hi
 8009084:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009088:	eb03 0b05 	addhi.w	fp, r3, r5
 800908c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009090:	608b      	strhi	r3, [r1, #8]
 8009092:	680b      	ldr	r3, [r1, #0]
 8009094:	460a      	mov	r2, r1
 8009096:	f04f 0500 	mov.w	r5, #0
 800909a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800909e:	f842 3b1c 	str.w	r3, [r2], #28
 80090a2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80090a6:	4680      	mov	r8, r0
 80090a8:	460c      	mov	r4, r1
 80090aa:	bf98      	it	ls
 80090ac:	f04f 0b00 	movls.w	fp, #0
 80090b0:	9201      	str	r2, [sp, #4]
 80090b2:	4616      	mov	r6, r2
 80090b4:	46aa      	mov	sl, r5
 80090b6:	46a9      	mov	r9, r5
 80090b8:	9502      	str	r5, [sp, #8]
 80090ba:	68a2      	ldr	r2, [r4, #8]
 80090bc:	b152      	cbz	r2, 80090d4 <_scanf_float+0x64>
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	781b      	ldrb	r3, [r3, #0]
 80090c2:	2b4e      	cmp	r3, #78	@ 0x4e
 80090c4:	d864      	bhi.n	8009190 <_scanf_float+0x120>
 80090c6:	2b40      	cmp	r3, #64	@ 0x40
 80090c8:	d83c      	bhi.n	8009144 <_scanf_float+0xd4>
 80090ca:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80090ce:	b2c8      	uxtb	r0, r1
 80090d0:	280e      	cmp	r0, #14
 80090d2:	d93a      	bls.n	800914a <_scanf_float+0xda>
 80090d4:	f1b9 0f00 	cmp.w	r9, #0
 80090d8:	d003      	beq.n	80090e2 <_scanf_float+0x72>
 80090da:	6823      	ldr	r3, [r4, #0]
 80090dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80090e0:	6023      	str	r3, [r4, #0]
 80090e2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80090e6:	f1ba 0f01 	cmp.w	sl, #1
 80090ea:	f200 8117 	bhi.w	800931c <_scanf_float+0x2ac>
 80090ee:	9b01      	ldr	r3, [sp, #4]
 80090f0:	429e      	cmp	r6, r3
 80090f2:	f200 8108 	bhi.w	8009306 <_scanf_float+0x296>
 80090f6:	2001      	movs	r0, #1
 80090f8:	b007      	add	sp, #28
 80090fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090fe:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009102:	2a0d      	cmp	r2, #13
 8009104:	d8e6      	bhi.n	80090d4 <_scanf_float+0x64>
 8009106:	a101      	add	r1, pc, #4	@ (adr r1, 800910c <_scanf_float+0x9c>)
 8009108:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800910c:	08009253 	.word	0x08009253
 8009110:	080090d5 	.word	0x080090d5
 8009114:	080090d5 	.word	0x080090d5
 8009118:	080090d5 	.word	0x080090d5
 800911c:	080092b3 	.word	0x080092b3
 8009120:	0800928b 	.word	0x0800928b
 8009124:	080090d5 	.word	0x080090d5
 8009128:	080090d5 	.word	0x080090d5
 800912c:	08009261 	.word	0x08009261
 8009130:	080090d5 	.word	0x080090d5
 8009134:	080090d5 	.word	0x080090d5
 8009138:	080090d5 	.word	0x080090d5
 800913c:	080090d5 	.word	0x080090d5
 8009140:	08009219 	.word	0x08009219
 8009144:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009148:	e7db      	b.n	8009102 <_scanf_float+0x92>
 800914a:	290e      	cmp	r1, #14
 800914c:	d8c2      	bhi.n	80090d4 <_scanf_float+0x64>
 800914e:	a001      	add	r0, pc, #4	@ (adr r0, 8009154 <_scanf_float+0xe4>)
 8009150:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009154:	08009209 	.word	0x08009209
 8009158:	080090d5 	.word	0x080090d5
 800915c:	08009209 	.word	0x08009209
 8009160:	0800929f 	.word	0x0800929f
 8009164:	080090d5 	.word	0x080090d5
 8009168:	080091b1 	.word	0x080091b1
 800916c:	080091ef 	.word	0x080091ef
 8009170:	080091ef 	.word	0x080091ef
 8009174:	080091ef 	.word	0x080091ef
 8009178:	080091ef 	.word	0x080091ef
 800917c:	080091ef 	.word	0x080091ef
 8009180:	080091ef 	.word	0x080091ef
 8009184:	080091ef 	.word	0x080091ef
 8009188:	080091ef 	.word	0x080091ef
 800918c:	080091ef 	.word	0x080091ef
 8009190:	2b6e      	cmp	r3, #110	@ 0x6e
 8009192:	d809      	bhi.n	80091a8 <_scanf_float+0x138>
 8009194:	2b60      	cmp	r3, #96	@ 0x60
 8009196:	d8b2      	bhi.n	80090fe <_scanf_float+0x8e>
 8009198:	2b54      	cmp	r3, #84	@ 0x54
 800919a:	d07b      	beq.n	8009294 <_scanf_float+0x224>
 800919c:	2b59      	cmp	r3, #89	@ 0x59
 800919e:	d199      	bne.n	80090d4 <_scanf_float+0x64>
 80091a0:	2d07      	cmp	r5, #7
 80091a2:	d197      	bne.n	80090d4 <_scanf_float+0x64>
 80091a4:	2508      	movs	r5, #8
 80091a6:	e02c      	b.n	8009202 <_scanf_float+0x192>
 80091a8:	2b74      	cmp	r3, #116	@ 0x74
 80091aa:	d073      	beq.n	8009294 <_scanf_float+0x224>
 80091ac:	2b79      	cmp	r3, #121	@ 0x79
 80091ae:	e7f6      	b.n	800919e <_scanf_float+0x12e>
 80091b0:	6821      	ldr	r1, [r4, #0]
 80091b2:	05c8      	lsls	r0, r1, #23
 80091b4:	d51b      	bpl.n	80091ee <_scanf_float+0x17e>
 80091b6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80091ba:	6021      	str	r1, [r4, #0]
 80091bc:	f109 0901 	add.w	r9, r9, #1
 80091c0:	f1bb 0f00 	cmp.w	fp, #0
 80091c4:	d003      	beq.n	80091ce <_scanf_float+0x15e>
 80091c6:	3201      	adds	r2, #1
 80091c8:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 80091cc:	60a2      	str	r2, [r4, #8]
 80091ce:	68a3      	ldr	r3, [r4, #8]
 80091d0:	3b01      	subs	r3, #1
 80091d2:	60a3      	str	r3, [r4, #8]
 80091d4:	6923      	ldr	r3, [r4, #16]
 80091d6:	3301      	adds	r3, #1
 80091d8:	6123      	str	r3, [r4, #16]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	3b01      	subs	r3, #1
 80091de:	2b00      	cmp	r3, #0
 80091e0:	607b      	str	r3, [r7, #4]
 80091e2:	f340 8087 	ble.w	80092f4 <_scanf_float+0x284>
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	3301      	adds	r3, #1
 80091ea:	603b      	str	r3, [r7, #0]
 80091ec:	e765      	b.n	80090ba <_scanf_float+0x4a>
 80091ee:	eb1a 0105 	adds.w	r1, sl, r5
 80091f2:	f47f af6f 	bne.w	80090d4 <_scanf_float+0x64>
 80091f6:	6822      	ldr	r2, [r4, #0]
 80091f8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80091fc:	6022      	str	r2, [r4, #0]
 80091fe:	460d      	mov	r5, r1
 8009200:	468a      	mov	sl, r1
 8009202:	f806 3b01 	strb.w	r3, [r6], #1
 8009206:	e7e2      	b.n	80091ce <_scanf_float+0x15e>
 8009208:	6822      	ldr	r2, [r4, #0]
 800920a:	0610      	lsls	r0, r2, #24
 800920c:	f57f af62 	bpl.w	80090d4 <_scanf_float+0x64>
 8009210:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009214:	6022      	str	r2, [r4, #0]
 8009216:	e7f4      	b.n	8009202 <_scanf_float+0x192>
 8009218:	f1ba 0f00 	cmp.w	sl, #0
 800921c:	d10e      	bne.n	800923c <_scanf_float+0x1cc>
 800921e:	f1b9 0f00 	cmp.w	r9, #0
 8009222:	d10e      	bne.n	8009242 <_scanf_float+0x1d2>
 8009224:	6822      	ldr	r2, [r4, #0]
 8009226:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800922a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800922e:	d108      	bne.n	8009242 <_scanf_float+0x1d2>
 8009230:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009234:	6022      	str	r2, [r4, #0]
 8009236:	f04f 0a01 	mov.w	sl, #1
 800923a:	e7e2      	b.n	8009202 <_scanf_float+0x192>
 800923c:	f1ba 0f02 	cmp.w	sl, #2
 8009240:	d055      	beq.n	80092ee <_scanf_float+0x27e>
 8009242:	2d01      	cmp	r5, #1
 8009244:	d002      	beq.n	800924c <_scanf_float+0x1dc>
 8009246:	2d04      	cmp	r5, #4
 8009248:	f47f af44 	bne.w	80090d4 <_scanf_float+0x64>
 800924c:	3501      	adds	r5, #1
 800924e:	b2ed      	uxtb	r5, r5
 8009250:	e7d7      	b.n	8009202 <_scanf_float+0x192>
 8009252:	f1ba 0f01 	cmp.w	sl, #1
 8009256:	f47f af3d 	bne.w	80090d4 <_scanf_float+0x64>
 800925a:	f04f 0a02 	mov.w	sl, #2
 800925e:	e7d0      	b.n	8009202 <_scanf_float+0x192>
 8009260:	b97d      	cbnz	r5, 8009282 <_scanf_float+0x212>
 8009262:	f1b9 0f00 	cmp.w	r9, #0
 8009266:	f47f af38 	bne.w	80090da <_scanf_float+0x6a>
 800926a:	6822      	ldr	r2, [r4, #0]
 800926c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009270:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009274:	f040 8108 	bne.w	8009488 <_scanf_float+0x418>
 8009278:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800927c:	6022      	str	r2, [r4, #0]
 800927e:	2501      	movs	r5, #1
 8009280:	e7bf      	b.n	8009202 <_scanf_float+0x192>
 8009282:	2d03      	cmp	r5, #3
 8009284:	d0e2      	beq.n	800924c <_scanf_float+0x1dc>
 8009286:	2d05      	cmp	r5, #5
 8009288:	e7de      	b.n	8009248 <_scanf_float+0x1d8>
 800928a:	2d02      	cmp	r5, #2
 800928c:	f47f af22 	bne.w	80090d4 <_scanf_float+0x64>
 8009290:	2503      	movs	r5, #3
 8009292:	e7b6      	b.n	8009202 <_scanf_float+0x192>
 8009294:	2d06      	cmp	r5, #6
 8009296:	f47f af1d 	bne.w	80090d4 <_scanf_float+0x64>
 800929a:	2507      	movs	r5, #7
 800929c:	e7b1      	b.n	8009202 <_scanf_float+0x192>
 800929e:	6822      	ldr	r2, [r4, #0]
 80092a0:	0591      	lsls	r1, r2, #22
 80092a2:	f57f af17 	bpl.w	80090d4 <_scanf_float+0x64>
 80092a6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80092aa:	6022      	str	r2, [r4, #0]
 80092ac:	f8cd 9008 	str.w	r9, [sp, #8]
 80092b0:	e7a7      	b.n	8009202 <_scanf_float+0x192>
 80092b2:	6822      	ldr	r2, [r4, #0]
 80092b4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80092b8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80092bc:	d006      	beq.n	80092cc <_scanf_float+0x25c>
 80092be:	0550      	lsls	r0, r2, #21
 80092c0:	f57f af08 	bpl.w	80090d4 <_scanf_float+0x64>
 80092c4:	f1b9 0f00 	cmp.w	r9, #0
 80092c8:	f000 80de 	beq.w	8009488 <_scanf_float+0x418>
 80092cc:	0591      	lsls	r1, r2, #22
 80092ce:	bf58      	it	pl
 80092d0:	9902      	ldrpl	r1, [sp, #8]
 80092d2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80092d6:	bf58      	it	pl
 80092d8:	eba9 0101 	subpl.w	r1, r9, r1
 80092dc:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80092e0:	bf58      	it	pl
 80092e2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80092e6:	6022      	str	r2, [r4, #0]
 80092e8:	f04f 0900 	mov.w	r9, #0
 80092ec:	e789      	b.n	8009202 <_scanf_float+0x192>
 80092ee:	f04f 0a03 	mov.w	sl, #3
 80092f2:	e786      	b.n	8009202 <_scanf_float+0x192>
 80092f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80092f8:	4639      	mov	r1, r7
 80092fa:	4640      	mov	r0, r8
 80092fc:	4798      	blx	r3
 80092fe:	2800      	cmp	r0, #0
 8009300:	f43f aedb 	beq.w	80090ba <_scanf_float+0x4a>
 8009304:	e6e6      	b.n	80090d4 <_scanf_float+0x64>
 8009306:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800930a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800930e:	463a      	mov	r2, r7
 8009310:	4640      	mov	r0, r8
 8009312:	4798      	blx	r3
 8009314:	6923      	ldr	r3, [r4, #16]
 8009316:	3b01      	subs	r3, #1
 8009318:	6123      	str	r3, [r4, #16]
 800931a:	e6e8      	b.n	80090ee <_scanf_float+0x7e>
 800931c:	1e6b      	subs	r3, r5, #1
 800931e:	2b06      	cmp	r3, #6
 8009320:	d824      	bhi.n	800936c <_scanf_float+0x2fc>
 8009322:	2d02      	cmp	r5, #2
 8009324:	d836      	bhi.n	8009394 <_scanf_float+0x324>
 8009326:	9b01      	ldr	r3, [sp, #4]
 8009328:	429e      	cmp	r6, r3
 800932a:	f67f aee4 	bls.w	80090f6 <_scanf_float+0x86>
 800932e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009332:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009336:	463a      	mov	r2, r7
 8009338:	4640      	mov	r0, r8
 800933a:	4798      	blx	r3
 800933c:	6923      	ldr	r3, [r4, #16]
 800933e:	3b01      	subs	r3, #1
 8009340:	6123      	str	r3, [r4, #16]
 8009342:	e7f0      	b.n	8009326 <_scanf_float+0x2b6>
 8009344:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009348:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800934c:	463a      	mov	r2, r7
 800934e:	4640      	mov	r0, r8
 8009350:	4798      	blx	r3
 8009352:	6923      	ldr	r3, [r4, #16]
 8009354:	3b01      	subs	r3, #1
 8009356:	6123      	str	r3, [r4, #16]
 8009358:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800935c:	fa5f fa8a 	uxtb.w	sl, sl
 8009360:	f1ba 0f02 	cmp.w	sl, #2
 8009364:	d1ee      	bne.n	8009344 <_scanf_float+0x2d4>
 8009366:	3d03      	subs	r5, #3
 8009368:	b2ed      	uxtb	r5, r5
 800936a:	1b76      	subs	r6, r6, r5
 800936c:	6823      	ldr	r3, [r4, #0]
 800936e:	05da      	lsls	r2, r3, #23
 8009370:	d530      	bpl.n	80093d4 <_scanf_float+0x364>
 8009372:	055b      	lsls	r3, r3, #21
 8009374:	d511      	bpl.n	800939a <_scanf_float+0x32a>
 8009376:	9b01      	ldr	r3, [sp, #4]
 8009378:	429e      	cmp	r6, r3
 800937a:	f67f aebc 	bls.w	80090f6 <_scanf_float+0x86>
 800937e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009382:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009386:	463a      	mov	r2, r7
 8009388:	4640      	mov	r0, r8
 800938a:	4798      	blx	r3
 800938c:	6923      	ldr	r3, [r4, #16]
 800938e:	3b01      	subs	r3, #1
 8009390:	6123      	str	r3, [r4, #16]
 8009392:	e7f0      	b.n	8009376 <_scanf_float+0x306>
 8009394:	46aa      	mov	sl, r5
 8009396:	46b3      	mov	fp, r6
 8009398:	e7de      	b.n	8009358 <_scanf_float+0x2e8>
 800939a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800939e:	6923      	ldr	r3, [r4, #16]
 80093a0:	2965      	cmp	r1, #101	@ 0x65
 80093a2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80093a6:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 80093aa:	6123      	str	r3, [r4, #16]
 80093ac:	d00c      	beq.n	80093c8 <_scanf_float+0x358>
 80093ae:	2945      	cmp	r1, #69	@ 0x45
 80093b0:	d00a      	beq.n	80093c8 <_scanf_float+0x358>
 80093b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80093b6:	463a      	mov	r2, r7
 80093b8:	4640      	mov	r0, r8
 80093ba:	4798      	blx	r3
 80093bc:	6923      	ldr	r3, [r4, #16]
 80093be:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80093c2:	3b01      	subs	r3, #1
 80093c4:	1eb5      	subs	r5, r6, #2
 80093c6:	6123      	str	r3, [r4, #16]
 80093c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80093cc:	463a      	mov	r2, r7
 80093ce:	4640      	mov	r0, r8
 80093d0:	4798      	blx	r3
 80093d2:	462e      	mov	r6, r5
 80093d4:	6822      	ldr	r2, [r4, #0]
 80093d6:	f012 0210 	ands.w	r2, r2, #16
 80093da:	d001      	beq.n	80093e0 <_scanf_float+0x370>
 80093dc:	2000      	movs	r0, #0
 80093de:	e68b      	b.n	80090f8 <_scanf_float+0x88>
 80093e0:	7032      	strb	r2, [r6, #0]
 80093e2:	6823      	ldr	r3, [r4, #0]
 80093e4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80093e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093ec:	d11c      	bne.n	8009428 <_scanf_float+0x3b8>
 80093ee:	9b02      	ldr	r3, [sp, #8]
 80093f0:	454b      	cmp	r3, r9
 80093f2:	eba3 0209 	sub.w	r2, r3, r9
 80093f6:	d123      	bne.n	8009440 <_scanf_float+0x3d0>
 80093f8:	9901      	ldr	r1, [sp, #4]
 80093fa:	2200      	movs	r2, #0
 80093fc:	4640      	mov	r0, r8
 80093fe:	f000 ff13 	bl	800a228 <_strtod_r>
 8009402:	9b03      	ldr	r3, [sp, #12]
 8009404:	6821      	ldr	r1, [r4, #0]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f011 0f02 	tst.w	r1, #2
 800940c:	ec57 6b10 	vmov	r6, r7, d0
 8009410:	f103 0204 	add.w	r2, r3, #4
 8009414:	d01f      	beq.n	8009456 <_scanf_float+0x3e6>
 8009416:	9903      	ldr	r1, [sp, #12]
 8009418:	600a      	str	r2, [r1, #0]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	e9c3 6700 	strd	r6, r7, [r3]
 8009420:	68e3      	ldr	r3, [r4, #12]
 8009422:	3301      	adds	r3, #1
 8009424:	60e3      	str	r3, [r4, #12]
 8009426:	e7d9      	b.n	80093dc <_scanf_float+0x36c>
 8009428:	9b04      	ldr	r3, [sp, #16]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d0e4      	beq.n	80093f8 <_scanf_float+0x388>
 800942e:	9905      	ldr	r1, [sp, #20]
 8009430:	230a      	movs	r3, #10
 8009432:	3101      	adds	r1, #1
 8009434:	4640      	mov	r0, r8
 8009436:	f000 ff77 	bl	800a328 <_strtol_r>
 800943a:	9b04      	ldr	r3, [sp, #16]
 800943c:	9e05      	ldr	r6, [sp, #20]
 800943e:	1ac2      	subs	r2, r0, r3
 8009440:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009444:	429e      	cmp	r6, r3
 8009446:	bf28      	it	cs
 8009448:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800944c:	4910      	ldr	r1, [pc, #64]	@ (8009490 <_scanf_float+0x420>)
 800944e:	4630      	mov	r0, r6
 8009450:	f000 f822 	bl	8009498 <siprintf>
 8009454:	e7d0      	b.n	80093f8 <_scanf_float+0x388>
 8009456:	f011 0f04 	tst.w	r1, #4
 800945a:	9903      	ldr	r1, [sp, #12]
 800945c:	600a      	str	r2, [r1, #0]
 800945e:	d1dc      	bne.n	800941a <_scanf_float+0x3aa>
 8009460:	681d      	ldr	r5, [r3, #0]
 8009462:	4632      	mov	r2, r6
 8009464:	463b      	mov	r3, r7
 8009466:	4630      	mov	r0, r6
 8009468:	4639      	mov	r1, r7
 800946a:	f7f7 fb77 	bl	8000b5c <__aeabi_dcmpun>
 800946e:	b128      	cbz	r0, 800947c <_scanf_float+0x40c>
 8009470:	4808      	ldr	r0, [pc, #32]	@ (8009494 <_scanf_float+0x424>)
 8009472:	f001 f861 	bl	800a538 <nanf>
 8009476:	ed85 0a00 	vstr	s0, [r5]
 800947a:	e7d1      	b.n	8009420 <_scanf_float+0x3b0>
 800947c:	4630      	mov	r0, r6
 800947e:	4639      	mov	r1, r7
 8009480:	f7f7 fbca 	bl	8000c18 <__aeabi_d2f>
 8009484:	6028      	str	r0, [r5, #0]
 8009486:	e7cb      	b.n	8009420 <_scanf_float+0x3b0>
 8009488:	f04f 0900 	mov.w	r9, #0
 800948c:	e629      	b.n	80090e2 <_scanf_float+0x72>
 800948e:	bf00      	nop
 8009490:	0800dc5c 	.word	0x0800dc5c
 8009494:	0800e053 	.word	0x0800e053

08009498 <siprintf>:
 8009498:	b40e      	push	{r1, r2, r3}
 800949a:	b500      	push	{lr}
 800949c:	b09c      	sub	sp, #112	@ 0x70
 800949e:	ab1d      	add	r3, sp, #116	@ 0x74
 80094a0:	9002      	str	r0, [sp, #8]
 80094a2:	9006      	str	r0, [sp, #24]
 80094a4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80094a8:	4809      	ldr	r0, [pc, #36]	@ (80094d0 <siprintf+0x38>)
 80094aa:	9107      	str	r1, [sp, #28]
 80094ac:	9104      	str	r1, [sp, #16]
 80094ae:	4909      	ldr	r1, [pc, #36]	@ (80094d4 <siprintf+0x3c>)
 80094b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80094b4:	9105      	str	r1, [sp, #20]
 80094b6:	6800      	ldr	r0, [r0, #0]
 80094b8:	9301      	str	r3, [sp, #4]
 80094ba:	a902      	add	r1, sp, #8
 80094bc:	f002 fa24 	bl	800b908 <_svfiprintf_r>
 80094c0:	9b02      	ldr	r3, [sp, #8]
 80094c2:	2200      	movs	r2, #0
 80094c4:	701a      	strb	r2, [r3, #0]
 80094c6:	b01c      	add	sp, #112	@ 0x70
 80094c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80094cc:	b003      	add	sp, #12
 80094ce:	4770      	bx	lr
 80094d0:	200001c4 	.word	0x200001c4
 80094d4:	ffff0208 	.word	0xffff0208

080094d8 <std>:
 80094d8:	2300      	movs	r3, #0
 80094da:	b510      	push	{r4, lr}
 80094dc:	4604      	mov	r4, r0
 80094de:	e9c0 3300 	strd	r3, r3, [r0]
 80094e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80094e6:	6083      	str	r3, [r0, #8]
 80094e8:	8181      	strh	r1, [r0, #12]
 80094ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80094ec:	81c2      	strh	r2, [r0, #14]
 80094ee:	6183      	str	r3, [r0, #24]
 80094f0:	4619      	mov	r1, r3
 80094f2:	2208      	movs	r2, #8
 80094f4:	305c      	adds	r0, #92	@ 0x5c
 80094f6:	f000 ffcf 	bl	800a498 <memset>
 80094fa:	4b0d      	ldr	r3, [pc, #52]	@ (8009530 <std+0x58>)
 80094fc:	6263      	str	r3, [r4, #36]	@ 0x24
 80094fe:	4b0d      	ldr	r3, [pc, #52]	@ (8009534 <std+0x5c>)
 8009500:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009502:	4b0d      	ldr	r3, [pc, #52]	@ (8009538 <std+0x60>)
 8009504:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009506:	4b0d      	ldr	r3, [pc, #52]	@ (800953c <std+0x64>)
 8009508:	6323      	str	r3, [r4, #48]	@ 0x30
 800950a:	4b0d      	ldr	r3, [pc, #52]	@ (8009540 <std+0x68>)
 800950c:	6224      	str	r4, [r4, #32]
 800950e:	429c      	cmp	r4, r3
 8009510:	d006      	beq.n	8009520 <std+0x48>
 8009512:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009516:	4294      	cmp	r4, r2
 8009518:	d002      	beq.n	8009520 <std+0x48>
 800951a:	33d0      	adds	r3, #208	@ 0xd0
 800951c:	429c      	cmp	r4, r3
 800951e:	d105      	bne.n	800952c <std+0x54>
 8009520:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009528:	f000 bfec 	b.w	800a504 <__retarget_lock_init_recursive>
 800952c:	bd10      	pop	{r4, pc}
 800952e:	bf00      	nop
 8009530:	0800c9d1 	.word	0x0800c9d1
 8009534:	0800c9f3 	.word	0x0800c9f3
 8009538:	0800ca2b 	.word	0x0800ca2b
 800953c:	0800ca4f 	.word	0x0800ca4f
 8009540:	2000078c 	.word	0x2000078c

08009544 <stdio_exit_handler>:
 8009544:	4a02      	ldr	r2, [pc, #8]	@ (8009550 <stdio_exit_handler+0xc>)
 8009546:	4903      	ldr	r1, [pc, #12]	@ (8009554 <stdio_exit_handler+0x10>)
 8009548:	4803      	ldr	r0, [pc, #12]	@ (8009558 <stdio_exit_handler+0x14>)
 800954a:	f000 beef 	b.w	800a32c <_fwalk_sglue>
 800954e:	bf00      	nop
 8009550:	2000004c 	.word	0x2000004c
 8009554:	0800c005 	.word	0x0800c005
 8009558:	200001c8 	.word	0x200001c8

0800955c <cleanup_stdio>:
 800955c:	6841      	ldr	r1, [r0, #4]
 800955e:	4b0c      	ldr	r3, [pc, #48]	@ (8009590 <cleanup_stdio+0x34>)
 8009560:	4299      	cmp	r1, r3
 8009562:	b510      	push	{r4, lr}
 8009564:	4604      	mov	r4, r0
 8009566:	d001      	beq.n	800956c <cleanup_stdio+0x10>
 8009568:	f002 fd4c 	bl	800c004 <_fflush_r>
 800956c:	68a1      	ldr	r1, [r4, #8]
 800956e:	4b09      	ldr	r3, [pc, #36]	@ (8009594 <cleanup_stdio+0x38>)
 8009570:	4299      	cmp	r1, r3
 8009572:	d002      	beq.n	800957a <cleanup_stdio+0x1e>
 8009574:	4620      	mov	r0, r4
 8009576:	f002 fd45 	bl	800c004 <_fflush_r>
 800957a:	68e1      	ldr	r1, [r4, #12]
 800957c:	4b06      	ldr	r3, [pc, #24]	@ (8009598 <cleanup_stdio+0x3c>)
 800957e:	4299      	cmp	r1, r3
 8009580:	d004      	beq.n	800958c <cleanup_stdio+0x30>
 8009582:	4620      	mov	r0, r4
 8009584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009588:	f002 bd3c 	b.w	800c004 <_fflush_r>
 800958c:	bd10      	pop	{r4, pc}
 800958e:	bf00      	nop
 8009590:	2000078c 	.word	0x2000078c
 8009594:	200007f4 	.word	0x200007f4
 8009598:	2000085c 	.word	0x2000085c

0800959c <global_stdio_init.part.0>:
 800959c:	b510      	push	{r4, lr}
 800959e:	4b0b      	ldr	r3, [pc, #44]	@ (80095cc <global_stdio_init.part.0+0x30>)
 80095a0:	4c0b      	ldr	r4, [pc, #44]	@ (80095d0 <global_stdio_init.part.0+0x34>)
 80095a2:	4a0c      	ldr	r2, [pc, #48]	@ (80095d4 <global_stdio_init.part.0+0x38>)
 80095a4:	601a      	str	r2, [r3, #0]
 80095a6:	4620      	mov	r0, r4
 80095a8:	2200      	movs	r2, #0
 80095aa:	2104      	movs	r1, #4
 80095ac:	f7ff ff94 	bl	80094d8 <std>
 80095b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80095b4:	2201      	movs	r2, #1
 80095b6:	2109      	movs	r1, #9
 80095b8:	f7ff ff8e 	bl	80094d8 <std>
 80095bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80095c0:	2202      	movs	r2, #2
 80095c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095c6:	2112      	movs	r1, #18
 80095c8:	f7ff bf86 	b.w	80094d8 <std>
 80095cc:	200008c4 	.word	0x200008c4
 80095d0:	2000078c 	.word	0x2000078c
 80095d4:	08009545 	.word	0x08009545

080095d8 <__sfp_lock_acquire>:
 80095d8:	4801      	ldr	r0, [pc, #4]	@ (80095e0 <__sfp_lock_acquire+0x8>)
 80095da:	f000 bf94 	b.w	800a506 <__retarget_lock_acquire_recursive>
 80095de:	bf00      	nop
 80095e0:	200008c9 	.word	0x200008c9

080095e4 <__sfp_lock_release>:
 80095e4:	4801      	ldr	r0, [pc, #4]	@ (80095ec <__sfp_lock_release+0x8>)
 80095e6:	f000 bf8f 	b.w	800a508 <__retarget_lock_release_recursive>
 80095ea:	bf00      	nop
 80095ec:	200008c9 	.word	0x200008c9

080095f0 <__sinit>:
 80095f0:	b510      	push	{r4, lr}
 80095f2:	4604      	mov	r4, r0
 80095f4:	f7ff fff0 	bl	80095d8 <__sfp_lock_acquire>
 80095f8:	6a23      	ldr	r3, [r4, #32]
 80095fa:	b11b      	cbz	r3, 8009604 <__sinit+0x14>
 80095fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009600:	f7ff bff0 	b.w	80095e4 <__sfp_lock_release>
 8009604:	4b04      	ldr	r3, [pc, #16]	@ (8009618 <__sinit+0x28>)
 8009606:	6223      	str	r3, [r4, #32]
 8009608:	4b04      	ldr	r3, [pc, #16]	@ (800961c <__sinit+0x2c>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d1f5      	bne.n	80095fc <__sinit+0xc>
 8009610:	f7ff ffc4 	bl	800959c <global_stdio_init.part.0>
 8009614:	e7f2      	b.n	80095fc <__sinit+0xc>
 8009616:	bf00      	nop
 8009618:	0800955d 	.word	0x0800955d
 800961c:	200008c4 	.word	0x200008c4

08009620 <sulp>:
 8009620:	b570      	push	{r4, r5, r6, lr}
 8009622:	4604      	mov	r4, r0
 8009624:	460d      	mov	r5, r1
 8009626:	ec45 4b10 	vmov	d0, r4, r5
 800962a:	4616      	mov	r6, r2
 800962c:	f003 f892 	bl	800c754 <__ulp>
 8009630:	ec51 0b10 	vmov	r0, r1, d0
 8009634:	b17e      	cbz	r6, 8009656 <sulp+0x36>
 8009636:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800963a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800963e:	2b00      	cmp	r3, #0
 8009640:	dd09      	ble.n	8009656 <sulp+0x36>
 8009642:	051b      	lsls	r3, r3, #20
 8009644:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009648:	2400      	movs	r4, #0
 800964a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800964e:	4622      	mov	r2, r4
 8009650:	462b      	mov	r3, r5
 8009652:	f7f6 ffe9 	bl	8000628 <__aeabi_dmul>
 8009656:	ec41 0b10 	vmov	d0, r0, r1
 800965a:	bd70      	pop	{r4, r5, r6, pc}
 800965c:	0000      	movs	r0, r0
	...

08009660 <_strtod_l>:
 8009660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009664:	b09f      	sub	sp, #124	@ 0x7c
 8009666:	460c      	mov	r4, r1
 8009668:	9217      	str	r2, [sp, #92]	@ 0x5c
 800966a:	2200      	movs	r2, #0
 800966c:	921a      	str	r2, [sp, #104]	@ 0x68
 800966e:	9005      	str	r0, [sp, #20]
 8009670:	f04f 0a00 	mov.w	sl, #0
 8009674:	f04f 0b00 	mov.w	fp, #0
 8009678:	460a      	mov	r2, r1
 800967a:	9219      	str	r2, [sp, #100]	@ 0x64
 800967c:	7811      	ldrb	r1, [r2, #0]
 800967e:	292b      	cmp	r1, #43	@ 0x2b
 8009680:	d04a      	beq.n	8009718 <_strtod_l+0xb8>
 8009682:	d838      	bhi.n	80096f6 <_strtod_l+0x96>
 8009684:	290d      	cmp	r1, #13
 8009686:	d832      	bhi.n	80096ee <_strtod_l+0x8e>
 8009688:	2908      	cmp	r1, #8
 800968a:	d832      	bhi.n	80096f2 <_strtod_l+0x92>
 800968c:	2900      	cmp	r1, #0
 800968e:	d03b      	beq.n	8009708 <_strtod_l+0xa8>
 8009690:	2200      	movs	r2, #0
 8009692:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009694:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009696:	782a      	ldrb	r2, [r5, #0]
 8009698:	2a30      	cmp	r2, #48	@ 0x30
 800969a:	f040 80b3 	bne.w	8009804 <_strtod_l+0x1a4>
 800969e:	786a      	ldrb	r2, [r5, #1]
 80096a0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80096a4:	2a58      	cmp	r2, #88	@ 0x58
 80096a6:	d16e      	bne.n	8009786 <_strtod_l+0x126>
 80096a8:	9302      	str	r3, [sp, #8]
 80096aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80096ac:	9301      	str	r3, [sp, #4]
 80096ae:	ab1a      	add	r3, sp, #104	@ 0x68
 80096b0:	9300      	str	r3, [sp, #0]
 80096b2:	4a8e      	ldr	r2, [pc, #568]	@ (80098ec <_strtod_l+0x28c>)
 80096b4:	9805      	ldr	r0, [sp, #20]
 80096b6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80096b8:	a919      	add	r1, sp, #100	@ 0x64
 80096ba:	f001 fdf9 	bl	800b2b0 <__gethex>
 80096be:	f010 060f 	ands.w	r6, r0, #15
 80096c2:	4604      	mov	r4, r0
 80096c4:	d005      	beq.n	80096d2 <_strtod_l+0x72>
 80096c6:	2e06      	cmp	r6, #6
 80096c8:	d128      	bne.n	800971c <_strtod_l+0xbc>
 80096ca:	3501      	adds	r5, #1
 80096cc:	2300      	movs	r3, #0
 80096ce:	9519      	str	r5, [sp, #100]	@ 0x64
 80096d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80096d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	f040 858e 	bne.w	800a1f6 <_strtod_l+0xb96>
 80096da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80096dc:	b1cb      	cbz	r3, 8009712 <_strtod_l+0xb2>
 80096de:	4652      	mov	r2, sl
 80096e0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80096e4:	ec43 2b10 	vmov	d0, r2, r3
 80096e8:	b01f      	add	sp, #124	@ 0x7c
 80096ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096ee:	2920      	cmp	r1, #32
 80096f0:	d1ce      	bne.n	8009690 <_strtod_l+0x30>
 80096f2:	3201      	adds	r2, #1
 80096f4:	e7c1      	b.n	800967a <_strtod_l+0x1a>
 80096f6:	292d      	cmp	r1, #45	@ 0x2d
 80096f8:	d1ca      	bne.n	8009690 <_strtod_l+0x30>
 80096fa:	2101      	movs	r1, #1
 80096fc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80096fe:	1c51      	adds	r1, r2, #1
 8009700:	9119      	str	r1, [sp, #100]	@ 0x64
 8009702:	7852      	ldrb	r2, [r2, #1]
 8009704:	2a00      	cmp	r2, #0
 8009706:	d1c5      	bne.n	8009694 <_strtod_l+0x34>
 8009708:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800970a:	9419      	str	r4, [sp, #100]	@ 0x64
 800970c:	2b00      	cmp	r3, #0
 800970e:	f040 8570 	bne.w	800a1f2 <_strtod_l+0xb92>
 8009712:	4652      	mov	r2, sl
 8009714:	465b      	mov	r3, fp
 8009716:	e7e5      	b.n	80096e4 <_strtod_l+0x84>
 8009718:	2100      	movs	r1, #0
 800971a:	e7ef      	b.n	80096fc <_strtod_l+0x9c>
 800971c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800971e:	b13a      	cbz	r2, 8009730 <_strtod_l+0xd0>
 8009720:	2135      	movs	r1, #53	@ 0x35
 8009722:	a81c      	add	r0, sp, #112	@ 0x70
 8009724:	f003 f910 	bl	800c948 <__copybits>
 8009728:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800972a:	9805      	ldr	r0, [sp, #20]
 800972c:	f002 fcde 	bl	800c0ec <_Bfree>
 8009730:	3e01      	subs	r6, #1
 8009732:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009734:	2e04      	cmp	r6, #4
 8009736:	d806      	bhi.n	8009746 <_strtod_l+0xe6>
 8009738:	e8df f006 	tbb	[pc, r6]
 800973c:	201d0314 	.word	0x201d0314
 8009740:	14          	.byte	0x14
 8009741:	00          	.byte	0x00
 8009742:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009746:	05e1      	lsls	r1, r4, #23
 8009748:	bf48      	it	mi
 800974a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800974e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009752:	0d1b      	lsrs	r3, r3, #20
 8009754:	051b      	lsls	r3, r3, #20
 8009756:	2b00      	cmp	r3, #0
 8009758:	d1bb      	bne.n	80096d2 <_strtod_l+0x72>
 800975a:	f000 fea9 	bl	800a4b0 <__errno>
 800975e:	2322      	movs	r3, #34	@ 0x22
 8009760:	6003      	str	r3, [r0, #0]
 8009762:	e7b6      	b.n	80096d2 <_strtod_l+0x72>
 8009764:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009768:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800976c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009770:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009774:	e7e7      	b.n	8009746 <_strtod_l+0xe6>
 8009776:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80098f4 <_strtod_l+0x294>
 800977a:	e7e4      	b.n	8009746 <_strtod_l+0xe6>
 800977c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009780:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009784:	e7df      	b.n	8009746 <_strtod_l+0xe6>
 8009786:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009788:	1c5a      	adds	r2, r3, #1
 800978a:	9219      	str	r2, [sp, #100]	@ 0x64
 800978c:	785b      	ldrb	r3, [r3, #1]
 800978e:	2b30      	cmp	r3, #48	@ 0x30
 8009790:	d0f9      	beq.n	8009786 <_strtod_l+0x126>
 8009792:	2b00      	cmp	r3, #0
 8009794:	d09d      	beq.n	80096d2 <_strtod_l+0x72>
 8009796:	2301      	movs	r3, #1
 8009798:	9309      	str	r3, [sp, #36]	@ 0x24
 800979a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800979c:	930c      	str	r3, [sp, #48]	@ 0x30
 800979e:	2300      	movs	r3, #0
 80097a0:	9308      	str	r3, [sp, #32]
 80097a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80097a4:	461f      	mov	r7, r3
 80097a6:	220a      	movs	r2, #10
 80097a8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80097aa:	7805      	ldrb	r5, [r0, #0]
 80097ac:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80097b0:	b2d9      	uxtb	r1, r3
 80097b2:	2909      	cmp	r1, #9
 80097b4:	d928      	bls.n	8009808 <_strtod_l+0x1a8>
 80097b6:	494e      	ldr	r1, [pc, #312]	@ (80098f0 <_strtod_l+0x290>)
 80097b8:	2201      	movs	r2, #1
 80097ba:	f000 fe45 	bl	800a448 <strncmp>
 80097be:	2800      	cmp	r0, #0
 80097c0:	d032      	beq.n	8009828 <_strtod_l+0x1c8>
 80097c2:	2000      	movs	r0, #0
 80097c4:	462a      	mov	r2, r5
 80097c6:	4681      	mov	r9, r0
 80097c8:	463d      	mov	r5, r7
 80097ca:	4603      	mov	r3, r0
 80097cc:	2a65      	cmp	r2, #101	@ 0x65
 80097ce:	d001      	beq.n	80097d4 <_strtod_l+0x174>
 80097d0:	2a45      	cmp	r2, #69	@ 0x45
 80097d2:	d114      	bne.n	80097fe <_strtod_l+0x19e>
 80097d4:	b91d      	cbnz	r5, 80097de <_strtod_l+0x17e>
 80097d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80097d8:	4302      	orrs	r2, r0
 80097da:	d095      	beq.n	8009708 <_strtod_l+0xa8>
 80097dc:	2500      	movs	r5, #0
 80097de:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80097e0:	1c62      	adds	r2, r4, #1
 80097e2:	9219      	str	r2, [sp, #100]	@ 0x64
 80097e4:	7862      	ldrb	r2, [r4, #1]
 80097e6:	2a2b      	cmp	r2, #43	@ 0x2b
 80097e8:	d077      	beq.n	80098da <_strtod_l+0x27a>
 80097ea:	2a2d      	cmp	r2, #45	@ 0x2d
 80097ec:	d07b      	beq.n	80098e6 <_strtod_l+0x286>
 80097ee:	f04f 0c00 	mov.w	ip, #0
 80097f2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80097f6:	2909      	cmp	r1, #9
 80097f8:	f240 8082 	bls.w	8009900 <_strtod_l+0x2a0>
 80097fc:	9419      	str	r4, [sp, #100]	@ 0x64
 80097fe:	f04f 0800 	mov.w	r8, #0
 8009802:	e0a2      	b.n	800994a <_strtod_l+0x2ea>
 8009804:	2300      	movs	r3, #0
 8009806:	e7c7      	b.n	8009798 <_strtod_l+0x138>
 8009808:	2f08      	cmp	r7, #8
 800980a:	bfd5      	itete	le
 800980c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800980e:	9908      	ldrgt	r1, [sp, #32]
 8009810:	fb02 3301 	mlale	r3, r2, r1, r3
 8009814:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009818:	f100 0001 	add.w	r0, r0, #1
 800981c:	bfd4      	ite	le
 800981e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009820:	9308      	strgt	r3, [sp, #32]
 8009822:	3701      	adds	r7, #1
 8009824:	9019      	str	r0, [sp, #100]	@ 0x64
 8009826:	e7bf      	b.n	80097a8 <_strtod_l+0x148>
 8009828:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800982a:	1c5a      	adds	r2, r3, #1
 800982c:	9219      	str	r2, [sp, #100]	@ 0x64
 800982e:	785a      	ldrb	r2, [r3, #1]
 8009830:	b37f      	cbz	r7, 8009892 <_strtod_l+0x232>
 8009832:	4681      	mov	r9, r0
 8009834:	463d      	mov	r5, r7
 8009836:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800983a:	2b09      	cmp	r3, #9
 800983c:	d912      	bls.n	8009864 <_strtod_l+0x204>
 800983e:	2301      	movs	r3, #1
 8009840:	e7c4      	b.n	80097cc <_strtod_l+0x16c>
 8009842:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009844:	1c5a      	adds	r2, r3, #1
 8009846:	9219      	str	r2, [sp, #100]	@ 0x64
 8009848:	785a      	ldrb	r2, [r3, #1]
 800984a:	3001      	adds	r0, #1
 800984c:	2a30      	cmp	r2, #48	@ 0x30
 800984e:	d0f8      	beq.n	8009842 <_strtod_l+0x1e2>
 8009850:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009854:	2b08      	cmp	r3, #8
 8009856:	f200 84d3 	bhi.w	800a200 <_strtod_l+0xba0>
 800985a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800985c:	930c      	str	r3, [sp, #48]	@ 0x30
 800985e:	4681      	mov	r9, r0
 8009860:	2000      	movs	r0, #0
 8009862:	4605      	mov	r5, r0
 8009864:	3a30      	subs	r2, #48	@ 0x30
 8009866:	f100 0301 	add.w	r3, r0, #1
 800986a:	d02a      	beq.n	80098c2 <_strtod_l+0x262>
 800986c:	4499      	add	r9, r3
 800986e:	eb00 0c05 	add.w	ip, r0, r5
 8009872:	462b      	mov	r3, r5
 8009874:	210a      	movs	r1, #10
 8009876:	4563      	cmp	r3, ip
 8009878:	d10d      	bne.n	8009896 <_strtod_l+0x236>
 800987a:	1c69      	adds	r1, r5, #1
 800987c:	4401      	add	r1, r0
 800987e:	4428      	add	r0, r5
 8009880:	2808      	cmp	r0, #8
 8009882:	dc16      	bgt.n	80098b2 <_strtod_l+0x252>
 8009884:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009886:	230a      	movs	r3, #10
 8009888:	fb03 2300 	mla	r3, r3, r0, r2
 800988c:	930a      	str	r3, [sp, #40]	@ 0x28
 800988e:	2300      	movs	r3, #0
 8009890:	e018      	b.n	80098c4 <_strtod_l+0x264>
 8009892:	4638      	mov	r0, r7
 8009894:	e7da      	b.n	800984c <_strtod_l+0x1ec>
 8009896:	2b08      	cmp	r3, #8
 8009898:	f103 0301 	add.w	r3, r3, #1
 800989c:	dc03      	bgt.n	80098a6 <_strtod_l+0x246>
 800989e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80098a0:	434e      	muls	r6, r1
 80098a2:	960a      	str	r6, [sp, #40]	@ 0x28
 80098a4:	e7e7      	b.n	8009876 <_strtod_l+0x216>
 80098a6:	2b10      	cmp	r3, #16
 80098a8:	bfde      	ittt	le
 80098aa:	9e08      	ldrle	r6, [sp, #32]
 80098ac:	434e      	mulle	r6, r1
 80098ae:	9608      	strle	r6, [sp, #32]
 80098b0:	e7e1      	b.n	8009876 <_strtod_l+0x216>
 80098b2:	280f      	cmp	r0, #15
 80098b4:	dceb      	bgt.n	800988e <_strtod_l+0x22e>
 80098b6:	9808      	ldr	r0, [sp, #32]
 80098b8:	230a      	movs	r3, #10
 80098ba:	fb03 2300 	mla	r3, r3, r0, r2
 80098be:	9308      	str	r3, [sp, #32]
 80098c0:	e7e5      	b.n	800988e <_strtod_l+0x22e>
 80098c2:	4629      	mov	r1, r5
 80098c4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80098c6:	1c50      	adds	r0, r2, #1
 80098c8:	9019      	str	r0, [sp, #100]	@ 0x64
 80098ca:	7852      	ldrb	r2, [r2, #1]
 80098cc:	4618      	mov	r0, r3
 80098ce:	460d      	mov	r5, r1
 80098d0:	e7b1      	b.n	8009836 <_strtod_l+0x1d6>
 80098d2:	f04f 0900 	mov.w	r9, #0
 80098d6:	2301      	movs	r3, #1
 80098d8:	e77d      	b.n	80097d6 <_strtod_l+0x176>
 80098da:	f04f 0c00 	mov.w	ip, #0
 80098de:	1ca2      	adds	r2, r4, #2
 80098e0:	9219      	str	r2, [sp, #100]	@ 0x64
 80098e2:	78a2      	ldrb	r2, [r4, #2]
 80098e4:	e785      	b.n	80097f2 <_strtod_l+0x192>
 80098e6:	f04f 0c01 	mov.w	ip, #1
 80098ea:	e7f8      	b.n	80098de <_strtod_l+0x27e>
 80098ec:	0800dc78 	.word	0x0800dc78
 80098f0:	0800dc61 	.word	0x0800dc61
 80098f4:	7ff00000 	.word	0x7ff00000
 80098f8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80098fa:	1c51      	adds	r1, r2, #1
 80098fc:	9119      	str	r1, [sp, #100]	@ 0x64
 80098fe:	7852      	ldrb	r2, [r2, #1]
 8009900:	2a30      	cmp	r2, #48	@ 0x30
 8009902:	d0f9      	beq.n	80098f8 <_strtod_l+0x298>
 8009904:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009908:	2908      	cmp	r1, #8
 800990a:	f63f af78 	bhi.w	80097fe <_strtod_l+0x19e>
 800990e:	3a30      	subs	r2, #48	@ 0x30
 8009910:	920e      	str	r2, [sp, #56]	@ 0x38
 8009912:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009914:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009916:	f04f 080a 	mov.w	r8, #10
 800991a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800991c:	1c56      	adds	r6, r2, #1
 800991e:	9619      	str	r6, [sp, #100]	@ 0x64
 8009920:	7852      	ldrb	r2, [r2, #1]
 8009922:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009926:	f1be 0f09 	cmp.w	lr, #9
 800992a:	d939      	bls.n	80099a0 <_strtod_l+0x340>
 800992c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800992e:	1a76      	subs	r6, r6, r1
 8009930:	2e08      	cmp	r6, #8
 8009932:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009936:	dc03      	bgt.n	8009940 <_strtod_l+0x2e0>
 8009938:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800993a:	4588      	cmp	r8, r1
 800993c:	bfa8      	it	ge
 800993e:	4688      	movge	r8, r1
 8009940:	f1bc 0f00 	cmp.w	ip, #0
 8009944:	d001      	beq.n	800994a <_strtod_l+0x2ea>
 8009946:	f1c8 0800 	rsb	r8, r8, #0
 800994a:	2d00      	cmp	r5, #0
 800994c:	d14e      	bne.n	80099ec <_strtod_l+0x38c>
 800994e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009950:	4308      	orrs	r0, r1
 8009952:	f47f aebe 	bne.w	80096d2 <_strtod_l+0x72>
 8009956:	2b00      	cmp	r3, #0
 8009958:	f47f aed6 	bne.w	8009708 <_strtod_l+0xa8>
 800995c:	2a69      	cmp	r2, #105	@ 0x69
 800995e:	d028      	beq.n	80099b2 <_strtod_l+0x352>
 8009960:	dc25      	bgt.n	80099ae <_strtod_l+0x34e>
 8009962:	2a49      	cmp	r2, #73	@ 0x49
 8009964:	d025      	beq.n	80099b2 <_strtod_l+0x352>
 8009966:	2a4e      	cmp	r2, #78	@ 0x4e
 8009968:	f47f aece 	bne.w	8009708 <_strtod_l+0xa8>
 800996c:	499b      	ldr	r1, [pc, #620]	@ (8009bdc <_strtod_l+0x57c>)
 800996e:	a819      	add	r0, sp, #100	@ 0x64
 8009970:	f001 fec0 	bl	800b6f4 <__match>
 8009974:	2800      	cmp	r0, #0
 8009976:	f43f aec7 	beq.w	8009708 <_strtod_l+0xa8>
 800997a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800997c:	781b      	ldrb	r3, [r3, #0]
 800997e:	2b28      	cmp	r3, #40	@ 0x28
 8009980:	d12e      	bne.n	80099e0 <_strtod_l+0x380>
 8009982:	4997      	ldr	r1, [pc, #604]	@ (8009be0 <_strtod_l+0x580>)
 8009984:	aa1c      	add	r2, sp, #112	@ 0x70
 8009986:	a819      	add	r0, sp, #100	@ 0x64
 8009988:	f001 fec8 	bl	800b71c <__hexnan>
 800998c:	2805      	cmp	r0, #5
 800998e:	d127      	bne.n	80099e0 <_strtod_l+0x380>
 8009990:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009992:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009996:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800999a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800999e:	e698      	b.n	80096d2 <_strtod_l+0x72>
 80099a0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80099a2:	fb08 2101 	mla	r1, r8, r1, r2
 80099a6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80099aa:	920e      	str	r2, [sp, #56]	@ 0x38
 80099ac:	e7b5      	b.n	800991a <_strtod_l+0x2ba>
 80099ae:	2a6e      	cmp	r2, #110	@ 0x6e
 80099b0:	e7da      	b.n	8009968 <_strtod_l+0x308>
 80099b2:	498c      	ldr	r1, [pc, #560]	@ (8009be4 <_strtod_l+0x584>)
 80099b4:	a819      	add	r0, sp, #100	@ 0x64
 80099b6:	f001 fe9d 	bl	800b6f4 <__match>
 80099ba:	2800      	cmp	r0, #0
 80099bc:	f43f aea4 	beq.w	8009708 <_strtod_l+0xa8>
 80099c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80099c2:	4989      	ldr	r1, [pc, #548]	@ (8009be8 <_strtod_l+0x588>)
 80099c4:	3b01      	subs	r3, #1
 80099c6:	a819      	add	r0, sp, #100	@ 0x64
 80099c8:	9319      	str	r3, [sp, #100]	@ 0x64
 80099ca:	f001 fe93 	bl	800b6f4 <__match>
 80099ce:	b910      	cbnz	r0, 80099d6 <_strtod_l+0x376>
 80099d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80099d2:	3301      	adds	r3, #1
 80099d4:	9319      	str	r3, [sp, #100]	@ 0x64
 80099d6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009bf8 <_strtod_l+0x598>
 80099da:	f04f 0a00 	mov.w	sl, #0
 80099de:	e678      	b.n	80096d2 <_strtod_l+0x72>
 80099e0:	4882      	ldr	r0, [pc, #520]	@ (8009bec <_strtod_l+0x58c>)
 80099e2:	f000 fda1 	bl	800a528 <nan>
 80099e6:	ec5b ab10 	vmov	sl, fp, d0
 80099ea:	e672      	b.n	80096d2 <_strtod_l+0x72>
 80099ec:	eba8 0309 	sub.w	r3, r8, r9
 80099f0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80099f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80099f4:	2f00      	cmp	r7, #0
 80099f6:	bf08      	it	eq
 80099f8:	462f      	moveq	r7, r5
 80099fa:	2d10      	cmp	r5, #16
 80099fc:	462c      	mov	r4, r5
 80099fe:	bfa8      	it	ge
 8009a00:	2410      	movge	r4, #16
 8009a02:	f7f6 fd97 	bl	8000534 <__aeabi_ui2d>
 8009a06:	2d09      	cmp	r5, #9
 8009a08:	4682      	mov	sl, r0
 8009a0a:	468b      	mov	fp, r1
 8009a0c:	dc13      	bgt.n	8009a36 <_strtod_l+0x3d6>
 8009a0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	f43f ae5e 	beq.w	80096d2 <_strtod_l+0x72>
 8009a16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a18:	dd78      	ble.n	8009b0c <_strtod_l+0x4ac>
 8009a1a:	2b16      	cmp	r3, #22
 8009a1c:	dc5f      	bgt.n	8009ade <_strtod_l+0x47e>
 8009a1e:	4974      	ldr	r1, [pc, #464]	@ (8009bf0 <_strtod_l+0x590>)
 8009a20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009a24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a28:	4652      	mov	r2, sl
 8009a2a:	465b      	mov	r3, fp
 8009a2c:	f7f6 fdfc 	bl	8000628 <__aeabi_dmul>
 8009a30:	4682      	mov	sl, r0
 8009a32:	468b      	mov	fp, r1
 8009a34:	e64d      	b.n	80096d2 <_strtod_l+0x72>
 8009a36:	4b6e      	ldr	r3, [pc, #440]	@ (8009bf0 <_strtod_l+0x590>)
 8009a38:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009a3c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009a40:	f7f6 fdf2 	bl	8000628 <__aeabi_dmul>
 8009a44:	4682      	mov	sl, r0
 8009a46:	9808      	ldr	r0, [sp, #32]
 8009a48:	468b      	mov	fp, r1
 8009a4a:	f7f6 fd73 	bl	8000534 <__aeabi_ui2d>
 8009a4e:	4602      	mov	r2, r0
 8009a50:	460b      	mov	r3, r1
 8009a52:	4650      	mov	r0, sl
 8009a54:	4659      	mov	r1, fp
 8009a56:	f7f6 fc31 	bl	80002bc <__adddf3>
 8009a5a:	2d0f      	cmp	r5, #15
 8009a5c:	4682      	mov	sl, r0
 8009a5e:	468b      	mov	fp, r1
 8009a60:	ddd5      	ble.n	8009a0e <_strtod_l+0x3ae>
 8009a62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a64:	1b2c      	subs	r4, r5, r4
 8009a66:	441c      	add	r4, r3
 8009a68:	2c00      	cmp	r4, #0
 8009a6a:	f340 8096 	ble.w	8009b9a <_strtod_l+0x53a>
 8009a6e:	f014 030f 	ands.w	r3, r4, #15
 8009a72:	d00a      	beq.n	8009a8a <_strtod_l+0x42a>
 8009a74:	495e      	ldr	r1, [pc, #376]	@ (8009bf0 <_strtod_l+0x590>)
 8009a76:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009a7a:	4652      	mov	r2, sl
 8009a7c:	465b      	mov	r3, fp
 8009a7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a82:	f7f6 fdd1 	bl	8000628 <__aeabi_dmul>
 8009a86:	4682      	mov	sl, r0
 8009a88:	468b      	mov	fp, r1
 8009a8a:	f034 040f 	bics.w	r4, r4, #15
 8009a8e:	d073      	beq.n	8009b78 <_strtod_l+0x518>
 8009a90:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009a94:	dd48      	ble.n	8009b28 <_strtod_l+0x4c8>
 8009a96:	2400      	movs	r4, #0
 8009a98:	46a0      	mov	r8, r4
 8009a9a:	940a      	str	r4, [sp, #40]	@ 0x28
 8009a9c:	46a1      	mov	r9, r4
 8009a9e:	9a05      	ldr	r2, [sp, #20]
 8009aa0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009bf8 <_strtod_l+0x598>
 8009aa4:	2322      	movs	r3, #34	@ 0x22
 8009aa6:	6013      	str	r3, [r2, #0]
 8009aa8:	f04f 0a00 	mov.w	sl, #0
 8009aac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	f43f ae0f 	beq.w	80096d2 <_strtod_l+0x72>
 8009ab4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009ab6:	9805      	ldr	r0, [sp, #20]
 8009ab8:	f002 fb18 	bl	800c0ec <_Bfree>
 8009abc:	9805      	ldr	r0, [sp, #20]
 8009abe:	4649      	mov	r1, r9
 8009ac0:	f002 fb14 	bl	800c0ec <_Bfree>
 8009ac4:	9805      	ldr	r0, [sp, #20]
 8009ac6:	4641      	mov	r1, r8
 8009ac8:	f002 fb10 	bl	800c0ec <_Bfree>
 8009acc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009ace:	9805      	ldr	r0, [sp, #20]
 8009ad0:	f002 fb0c 	bl	800c0ec <_Bfree>
 8009ad4:	9805      	ldr	r0, [sp, #20]
 8009ad6:	4621      	mov	r1, r4
 8009ad8:	f002 fb08 	bl	800c0ec <_Bfree>
 8009adc:	e5f9      	b.n	80096d2 <_strtod_l+0x72>
 8009ade:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ae0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	dbbc      	blt.n	8009a62 <_strtod_l+0x402>
 8009ae8:	4c41      	ldr	r4, [pc, #260]	@ (8009bf0 <_strtod_l+0x590>)
 8009aea:	f1c5 050f 	rsb	r5, r5, #15
 8009aee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009af2:	4652      	mov	r2, sl
 8009af4:	465b      	mov	r3, fp
 8009af6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009afa:	f7f6 fd95 	bl	8000628 <__aeabi_dmul>
 8009afe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b00:	1b5d      	subs	r5, r3, r5
 8009b02:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009b06:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009b0a:	e78f      	b.n	8009a2c <_strtod_l+0x3cc>
 8009b0c:	3316      	adds	r3, #22
 8009b0e:	dba8      	blt.n	8009a62 <_strtod_l+0x402>
 8009b10:	4b37      	ldr	r3, [pc, #220]	@ (8009bf0 <_strtod_l+0x590>)
 8009b12:	eba9 0808 	sub.w	r8, r9, r8
 8009b16:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009b1a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009b1e:	4650      	mov	r0, sl
 8009b20:	4659      	mov	r1, fp
 8009b22:	f7f6 feab 	bl	800087c <__aeabi_ddiv>
 8009b26:	e783      	b.n	8009a30 <_strtod_l+0x3d0>
 8009b28:	4b32      	ldr	r3, [pc, #200]	@ (8009bf4 <_strtod_l+0x594>)
 8009b2a:	9308      	str	r3, [sp, #32]
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	1124      	asrs	r4, r4, #4
 8009b30:	4650      	mov	r0, sl
 8009b32:	4659      	mov	r1, fp
 8009b34:	461e      	mov	r6, r3
 8009b36:	2c01      	cmp	r4, #1
 8009b38:	dc21      	bgt.n	8009b7e <_strtod_l+0x51e>
 8009b3a:	b10b      	cbz	r3, 8009b40 <_strtod_l+0x4e0>
 8009b3c:	4682      	mov	sl, r0
 8009b3e:	468b      	mov	fp, r1
 8009b40:	492c      	ldr	r1, [pc, #176]	@ (8009bf4 <_strtod_l+0x594>)
 8009b42:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009b46:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009b4a:	4652      	mov	r2, sl
 8009b4c:	465b      	mov	r3, fp
 8009b4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b52:	f7f6 fd69 	bl	8000628 <__aeabi_dmul>
 8009b56:	4b28      	ldr	r3, [pc, #160]	@ (8009bf8 <_strtod_l+0x598>)
 8009b58:	460a      	mov	r2, r1
 8009b5a:	400b      	ands	r3, r1
 8009b5c:	4927      	ldr	r1, [pc, #156]	@ (8009bfc <_strtod_l+0x59c>)
 8009b5e:	428b      	cmp	r3, r1
 8009b60:	4682      	mov	sl, r0
 8009b62:	d898      	bhi.n	8009a96 <_strtod_l+0x436>
 8009b64:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009b68:	428b      	cmp	r3, r1
 8009b6a:	bf86      	itte	hi
 8009b6c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009c00 <_strtod_l+0x5a0>
 8009b70:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8009b74:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009b78:	2300      	movs	r3, #0
 8009b7a:	9308      	str	r3, [sp, #32]
 8009b7c:	e07a      	b.n	8009c74 <_strtod_l+0x614>
 8009b7e:	07e2      	lsls	r2, r4, #31
 8009b80:	d505      	bpl.n	8009b8e <_strtod_l+0x52e>
 8009b82:	9b08      	ldr	r3, [sp, #32]
 8009b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b88:	f7f6 fd4e 	bl	8000628 <__aeabi_dmul>
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	9a08      	ldr	r2, [sp, #32]
 8009b90:	3208      	adds	r2, #8
 8009b92:	3601      	adds	r6, #1
 8009b94:	1064      	asrs	r4, r4, #1
 8009b96:	9208      	str	r2, [sp, #32]
 8009b98:	e7cd      	b.n	8009b36 <_strtod_l+0x4d6>
 8009b9a:	d0ed      	beq.n	8009b78 <_strtod_l+0x518>
 8009b9c:	4264      	negs	r4, r4
 8009b9e:	f014 020f 	ands.w	r2, r4, #15
 8009ba2:	d00a      	beq.n	8009bba <_strtod_l+0x55a>
 8009ba4:	4b12      	ldr	r3, [pc, #72]	@ (8009bf0 <_strtod_l+0x590>)
 8009ba6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009baa:	4650      	mov	r0, sl
 8009bac:	4659      	mov	r1, fp
 8009bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb2:	f7f6 fe63 	bl	800087c <__aeabi_ddiv>
 8009bb6:	4682      	mov	sl, r0
 8009bb8:	468b      	mov	fp, r1
 8009bba:	1124      	asrs	r4, r4, #4
 8009bbc:	d0dc      	beq.n	8009b78 <_strtod_l+0x518>
 8009bbe:	2c1f      	cmp	r4, #31
 8009bc0:	dd20      	ble.n	8009c04 <_strtod_l+0x5a4>
 8009bc2:	2400      	movs	r4, #0
 8009bc4:	46a0      	mov	r8, r4
 8009bc6:	940a      	str	r4, [sp, #40]	@ 0x28
 8009bc8:	46a1      	mov	r9, r4
 8009bca:	9a05      	ldr	r2, [sp, #20]
 8009bcc:	2322      	movs	r3, #34	@ 0x22
 8009bce:	f04f 0a00 	mov.w	sl, #0
 8009bd2:	f04f 0b00 	mov.w	fp, #0
 8009bd6:	6013      	str	r3, [r2, #0]
 8009bd8:	e768      	b.n	8009aac <_strtod_l+0x44c>
 8009bda:	bf00      	nop
 8009bdc:	0800dc35 	.word	0x0800dc35
 8009be0:	0800dc64 	.word	0x0800dc64
 8009be4:	0800dc2d 	.word	0x0800dc2d
 8009be8:	0800ddc4 	.word	0x0800ddc4
 8009bec:	0800e053 	.word	0x0800e053
 8009bf0:	0800df50 	.word	0x0800df50
 8009bf4:	0800df28 	.word	0x0800df28
 8009bf8:	7ff00000 	.word	0x7ff00000
 8009bfc:	7ca00000 	.word	0x7ca00000
 8009c00:	7fefffff 	.word	0x7fefffff
 8009c04:	f014 0310 	ands.w	r3, r4, #16
 8009c08:	bf18      	it	ne
 8009c0a:	236a      	movne	r3, #106	@ 0x6a
 8009c0c:	4ea9      	ldr	r6, [pc, #676]	@ (8009eb4 <_strtod_l+0x854>)
 8009c0e:	9308      	str	r3, [sp, #32]
 8009c10:	4650      	mov	r0, sl
 8009c12:	4659      	mov	r1, fp
 8009c14:	2300      	movs	r3, #0
 8009c16:	07e2      	lsls	r2, r4, #31
 8009c18:	d504      	bpl.n	8009c24 <_strtod_l+0x5c4>
 8009c1a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009c1e:	f7f6 fd03 	bl	8000628 <__aeabi_dmul>
 8009c22:	2301      	movs	r3, #1
 8009c24:	1064      	asrs	r4, r4, #1
 8009c26:	f106 0608 	add.w	r6, r6, #8
 8009c2a:	d1f4      	bne.n	8009c16 <_strtod_l+0x5b6>
 8009c2c:	b10b      	cbz	r3, 8009c32 <_strtod_l+0x5d2>
 8009c2e:	4682      	mov	sl, r0
 8009c30:	468b      	mov	fp, r1
 8009c32:	9b08      	ldr	r3, [sp, #32]
 8009c34:	b1b3      	cbz	r3, 8009c64 <_strtod_l+0x604>
 8009c36:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009c3a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	4659      	mov	r1, fp
 8009c42:	dd0f      	ble.n	8009c64 <_strtod_l+0x604>
 8009c44:	2b1f      	cmp	r3, #31
 8009c46:	dd55      	ble.n	8009cf4 <_strtod_l+0x694>
 8009c48:	2b34      	cmp	r3, #52	@ 0x34
 8009c4a:	bfde      	ittt	le
 8009c4c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8009c50:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009c54:	4093      	lslle	r3, r2
 8009c56:	f04f 0a00 	mov.w	sl, #0
 8009c5a:	bfcc      	ite	gt
 8009c5c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009c60:	ea03 0b01 	andle.w	fp, r3, r1
 8009c64:	2200      	movs	r2, #0
 8009c66:	2300      	movs	r3, #0
 8009c68:	4650      	mov	r0, sl
 8009c6a:	4659      	mov	r1, fp
 8009c6c:	f7f6 ff44 	bl	8000af8 <__aeabi_dcmpeq>
 8009c70:	2800      	cmp	r0, #0
 8009c72:	d1a6      	bne.n	8009bc2 <_strtod_l+0x562>
 8009c74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c76:	9300      	str	r3, [sp, #0]
 8009c78:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009c7a:	9805      	ldr	r0, [sp, #20]
 8009c7c:	462b      	mov	r3, r5
 8009c7e:	463a      	mov	r2, r7
 8009c80:	f002 fa9c 	bl	800c1bc <__s2b>
 8009c84:	900a      	str	r0, [sp, #40]	@ 0x28
 8009c86:	2800      	cmp	r0, #0
 8009c88:	f43f af05 	beq.w	8009a96 <_strtod_l+0x436>
 8009c8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c8e:	2a00      	cmp	r2, #0
 8009c90:	eba9 0308 	sub.w	r3, r9, r8
 8009c94:	bfa8      	it	ge
 8009c96:	2300      	movge	r3, #0
 8009c98:	9312      	str	r3, [sp, #72]	@ 0x48
 8009c9a:	2400      	movs	r4, #0
 8009c9c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009ca0:	9316      	str	r3, [sp, #88]	@ 0x58
 8009ca2:	46a0      	mov	r8, r4
 8009ca4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ca6:	9805      	ldr	r0, [sp, #20]
 8009ca8:	6859      	ldr	r1, [r3, #4]
 8009caa:	f002 f9df 	bl	800c06c <_Balloc>
 8009cae:	4681      	mov	r9, r0
 8009cb0:	2800      	cmp	r0, #0
 8009cb2:	f43f aef4 	beq.w	8009a9e <_strtod_l+0x43e>
 8009cb6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009cb8:	691a      	ldr	r2, [r3, #16]
 8009cba:	3202      	adds	r2, #2
 8009cbc:	f103 010c 	add.w	r1, r3, #12
 8009cc0:	0092      	lsls	r2, r2, #2
 8009cc2:	300c      	adds	r0, #12
 8009cc4:	f000 fc21 	bl	800a50a <memcpy>
 8009cc8:	ec4b ab10 	vmov	d0, sl, fp
 8009ccc:	9805      	ldr	r0, [sp, #20]
 8009cce:	aa1c      	add	r2, sp, #112	@ 0x70
 8009cd0:	a91b      	add	r1, sp, #108	@ 0x6c
 8009cd2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009cd6:	f002 fdad 	bl	800c834 <__d2b>
 8009cda:	901a      	str	r0, [sp, #104]	@ 0x68
 8009cdc:	2800      	cmp	r0, #0
 8009cde:	f43f aede 	beq.w	8009a9e <_strtod_l+0x43e>
 8009ce2:	9805      	ldr	r0, [sp, #20]
 8009ce4:	2101      	movs	r1, #1
 8009ce6:	f002 faff 	bl	800c2e8 <__i2b>
 8009cea:	4680      	mov	r8, r0
 8009cec:	b948      	cbnz	r0, 8009d02 <_strtod_l+0x6a2>
 8009cee:	f04f 0800 	mov.w	r8, #0
 8009cf2:	e6d4      	b.n	8009a9e <_strtod_l+0x43e>
 8009cf4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8009cfc:	ea03 0a0a 	and.w	sl, r3, sl
 8009d00:	e7b0      	b.n	8009c64 <_strtod_l+0x604>
 8009d02:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009d04:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009d06:	2d00      	cmp	r5, #0
 8009d08:	bfab      	itete	ge
 8009d0a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009d0c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009d0e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009d10:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009d12:	bfac      	ite	ge
 8009d14:	18ef      	addge	r7, r5, r3
 8009d16:	1b5e      	sublt	r6, r3, r5
 8009d18:	9b08      	ldr	r3, [sp, #32]
 8009d1a:	1aed      	subs	r5, r5, r3
 8009d1c:	4415      	add	r5, r2
 8009d1e:	4b66      	ldr	r3, [pc, #408]	@ (8009eb8 <_strtod_l+0x858>)
 8009d20:	3d01      	subs	r5, #1
 8009d22:	429d      	cmp	r5, r3
 8009d24:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009d28:	da50      	bge.n	8009dcc <_strtod_l+0x76c>
 8009d2a:	1b5b      	subs	r3, r3, r5
 8009d2c:	2b1f      	cmp	r3, #31
 8009d2e:	eba2 0203 	sub.w	r2, r2, r3
 8009d32:	f04f 0101 	mov.w	r1, #1
 8009d36:	dc3d      	bgt.n	8009db4 <_strtod_l+0x754>
 8009d38:	fa01 f303 	lsl.w	r3, r1, r3
 8009d3c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009d3e:	2300      	movs	r3, #0
 8009d40:	9310      	str	r3, [sp, #64]	@ 0x40
 8009d42:	18bd      	adds	r5, r7, r2
 8009d44:	9b08      	ldr	r3, [sp, #32]
 8009d46:	42af      	cmp	r7, r5
 8009d48:	4416      	add	r6, r2
 8009d4a:	441e      	add	r6, r3
 8009d4c:	463b      	mov	r3, r7
 8009d4e:	bfa8      	it	ge
 8009d50:	462b      	movge	r3, r5
 8009d52:	42b3      	cmp	r3, r6
 8009d54:	bfa8      	it	ge
 8009d56:	4633      	movge	r3, r6
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	bfc2      	ittt	gt
 8009d5c:	1aed      	subgt	r5, r5, r3
 8009d5e:	1af6      	subgt	r6, r6, r3
 8009d60:	1aff      	subgt	r7, r7, r3
 8009d62:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	dd16      	ble.n	8009d96 <_strtod_l+0x736>
 8009d68:	4641      	mov	r1, r8
 8009d6a:	9805      	ldr	r0, [sp, #20]
 8009d6c:	461a      	mov	r2, r3
 8009d6e:	f002 fb7b 	bl	800c468 <__pow5mult>
 8009d72:	4680      	mov	r8, r0
 8009d74:	2800      	cmp	r0, #0
 8009d76:	d0ba      	beq.n	8009cee <_strtod_l+0x68e>
 8009d78:	4601      	mov	r1, r0
 8009d7a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009d7c:	9805      	ldr	r0, [sp, #20]
 8009d7e:	f002 fac9 	bl	800c314 <__multiply>
 8009d82:	900e      	str	r0, [sp, #56]	@ 0x38
 8009d84:	2800      	cmp	r0, #0
 8009d86:	f43f ae8a 	beq.w	8009a9e <_strtod_l+0x43e>
 8009d8a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009d8c:	9805      	ldr	r0, [sp, #20]
 8009d8e:	f002 f9ad 	bl	800c0ec <_Bfree>
 8009d92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d94:	931a      	str	r3, [sp, #104]	@ 0x68
 8009d96:	2d00      	cmp	r5, #0
 8009d98:	dc1d      	bgt.n	8009dd6 <_strtod_l+0x776>
 8009d9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	dd23      	ble.n	8009de8 <_strtod_l+0x788>
 8009da0:	4649      	mov	r1, r9
 8009da2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009da4:	9805      	ldr	r0, [sp, #20]
 8009da6:	f002 fb5f 	bl	800c468 <__pow5mult>
 8009daa:	4681      	mov	r9, r0
 8009dac:	b9e0      	cbnz	r0, 8009de8 <_strtod_l+0x788>
 8009dae:	f04f 0900 	mov.w	r9, #0
 8009db2:	e674      	b.n	8009a9e <_strtod_l+0x43e>
 8009db4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009db8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009dbc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009dc0:	35e2      	adds	r5, #226	@ 0xe2
 8009dc2:	fa01 f305 	lsl.w	r3, r1, r5
 8009dc6:	9310      	str	r3, [sp, #64]	@ 0x40
 8009dc8:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009dca:	e7ba      	b.n	8009d42 <_strtod_l+0x6e2>
 8009dcc:	2300      	movs	r3, #0
 8009dce:	9310      	str	r3, [sp, #64]	@ 0x40
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009dd4:	e7b5      	b.n	8009d42 <_strtod_l+0x6e2>
 8009dd6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009dd8:	9805      	ldr	r0, [sp, #20]
 8009dda:	462a      	mov	r2, r5
 8009ddc:	f002 fb9e 	bl	800c51c <__lshift>
 8009de0:	901a      	str	r0, [sp, #104]	@ 0x68
 8009de2:	2800      	cmp	r0, #0
 8009de4:	d1d9      	bne.n	8009d9a <_strtod_l+0x73a>
 8009de6:	e65a      	b.n	8009a9e <_strtod_l+0x43e>
 8009de8:	2e00      	cmp	r6, #0
 8009dea:	dd07      	ble.n	8009dfc <_strtod_l+0x79c>
 8009dec:	4649      	mov	r1, r9
 8009dee:	9805      	ldr	r0, [sp, #20]
 8009df0:	4632      	mov	r2, r6
 8009df2:	f002 fb93 	bl	800c51c <__lshift>
 8009df6:	4681      	mov	r9, r0
 8009df8:	2800      	cmp	r0, #0
 8009dfa:	d0d8      	beq.n	8009dae <_strtod_l+0x74e>
 8009dfc:	2f00      	cmp	r7, #0
 8009dfe:	dd08      	ble.n	8009e12 <_strtod_l+0x7b2>
 8009e00:	4641      	mov	r1, r8
 8009e02:	9805      	ldr	r0, [sp, #20]
 8009e04:	463a      	mov	r2, r7
 8009e06:	f002 fb89 	bl	800c51c <__lshift>
 8009e0a:	4680      	mov	r8, r0
 8009e0c:	2800      	cmp	r0, #0
 8009e0e:	f43f ae46 	beq.w	8009a9e <_strtod_l+0x43e>
 8009e12:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009e14:	9805      	ldr	r0, [sp, #20]
 8009e16:	464a      	mov	r2, r9
 8009e18:	f002 fc08 	bl	800c62c <__mdiff>
 8009e1c:	4604      	mov	r4, r0
 8009e1e:	2800      	cmp	r0, #0
 8009e20:	f43f ae3d 	beq.w	8009a9e <_strtod_l+0x43e>
 8009e24:	68c3      	ldr	r3, [r0, #12]
 8009e26:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009e28:	2300      	movs	r3, #0
 8009e2a:	60c3      	str	r3, [r0, #12]
 8009e2c:	4641      	mov	r1, r8
 8009e2e:	f002 fbe1 	bl	800c5f4 <__mcmp>
 8009e32:	2800      	cmp	r0, #0
 8009e34:	da46      	bge.n	8009ec4 <_strtod_l+0x864>
 8009e36:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e38:	ea53 030a 	orrs.w	r3, r3, sl
 8009e3c:	d16c      	bne.n	8009f18 <_strtod_l+0x8b8>
 8009e3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d168      	bne.n	8009f18 <_strtod_l+0x8b8>
 8009e46:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009e4a:	0d1b      	lsrs	r3, r3, #20
 8009e4c:	051b      	lsls	r3, r3, #20
 8009e4e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009e52:	d961      	bls.n	8009f18 <_strtod_l+0x8b8>
 8009e54:	6963      	ldr	r3, [r4, #20]
 8009e56:	b913      	cbnz	r3, 8009e5e <_strtod_l+0x7fe>
 8009e58:	6923      	ldr	r3, [r4, #16]
 8009e5a:	2b01      	cmp	r3, #1
 8009e5c:	dd5c      	ble.n	8009f18 <_strtod_l+0x8b8>
 8009e5e:	4621      	mov	r1, r4
 8009e60:	2201      	movs	r2, #1
 8009e62:	9805      	ldr	r0, [sp, #20]
 8009e64:	f002 fb5a 	bl	800c51c <__lshift>
 8009e68:	4641      	mov	r1, r8
 8009e6a:	4604      	mov	r4, r0
 8009e6c:	f002 fbc2 	bl	800c5f4 <__mcmp>
 8009e70:	2800      	cmp	r0, #0
 8009e72:	dd51      	ble.n	8009f18 <_strtod_l+0x8b8>
 8009e74:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009e78:	9a08      	ldr	r2, [sp, #32]
 8009e7a:	0d1b      	lsrs	r3, r3, #20
 8009e7c:	051b      	lsls	r3, r3, #20
 8009e7e:	2a00      	cmp	r2, #0
 8009e80:	d06b      	beq.n	8009f5a <_strtod_l+0x8fa>
 8009e82:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009e86:	d868      	bhi.n	8009f5a <_strtod_l+0x8fa>
 8009e88:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009e8c:	f67f ae9d 	bls.w	8009bca <_strtod_l+0x56a>
 8009e90:	4b0a      	ldr	r3, [pc, #40]	@ (8009ebc <_strtod_l+0x85c>)
 8009e92:	4650      	mov	r0, sl
 8009e94:	4659      	mov	r1, fp
 8009e96:	2200      	movs	r2, #0
 8009e98:	f7f6 fbc6 	bl	8000628 <__aeabi_dmul>
 8009e9c:	4b08      	ldr	r3, [pc, #32]	@ (8009ec0 <_strtod_l+0x860>)
 8009e9e:	400b      	ands	r3, r1
 8009ea0:	4682      	mov	sl, r0
 8009ea2:	468b      	mov	fp, r1
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	f47f ae05 	bne.w	8009ab4 <_strtod_l+0x454>
 8009eaa:	9a05      	ldr	r2, [sp, #20]
 8009eac:	2322      	movs	r3, #34	@ 0x22
 8009eae:	6013      	str	r3, [r2, #0]
 8009eb0:	e600      	b.n	8009ab4 <_strtod_l+0x454>
 8009eb2:	bf00      	nop
 8009eb4:	0800dc90 	.word	0x0800dc90
 8009eb8:	fffffc02 	.word	0xfffffc02
 8009ebc:	39500000 	.word	0x39500000
 8009ec0:	7ff00000 	.word	0x7ff00000
 8009ec4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009ec8:	d165      	bne.n	8009f96 <_strtod_l+0x936>
 8009eca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009ecc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009ed0:	b35a      	cbz	r2, 8009f2a <_strtod_l+0x8ca>
 8009ed2:	4a9f      	ldr	r2, [pc, #636]	@ (800a150 <_strtod_l+0xaf0>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d12b      	bne.n	8009f30 <_strtod_l+0x8d0>
 8009ed8:	9b08      	ldr	r3, [sp, #32]
 8009eda:	4651      	mov	r1, sl
 8009edc:	b303      	cbz	r3, 8009f20 <_strtod_l+0x8c0>
 8009ede:	4b9d      	ldr	r3, [pc, #628]	@ (800a154 <_strtod_l+0xaf4>)
 8009ee0:	465a      	mov	r2, fp
 8009ee2:	4013      	ands	r3, r2
 8009ee4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009ee8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009eec:	d81b      	bhi.n	8009f26 <_strtod_l+0x8c6>
 8009eee:	0d1b      	lsrs	r3, r3, #20
 8009ef0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ef8:	4299      	cmp	r1, r3
 8009efa:	d119      	bne.n	8009f30 <_strtod_l+0x8d0>
 8009efc:	4b96      	ldr	r3, [pc, #600]	@ (800a158 <_strtod_l+0xaf8>)
 8009efe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f00:	429a      	cmp	r2, r3
 8009f02:	d102      	bne.n	8009f0a <_strtod_l+0x8aa>
 8009f04:	3101      	adds	r1, #1
 8009f06:	f43f adca 	beq.w	8009a9e <_strtod_l+0x43e>
 8009f0a:	4b92      	ldr	r3, [pc, #584]	@ (800a154 <_strtod_l+0xaf4>)
 8009f0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f0e:	401a      	ands	r2, r3
 8009f10:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009f14:	f04f 0a00 	mov.w	sl, #0
 8009f18:	9b08      	ldr	r3, [sp, #32]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d1b8      	bne.n	8009e90 <_strtod_l+0x830>
 8009f1e:	e5c9      	b.n	8009ab4 <_strtod_l+0x454>
 8009f20:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009f24:	e7e8      	b.n	8009ef8 <_strtod_l+0x898>
 8009f26:	4613      	mov	r3, r2
 8009f28:	e7e6      	b.n	8009ef8 <_strtod_l+0x898>
 8009f2a:	ea53 030a 	orrs.w	r3, r3, sl
 8009f2e:	d0a1      	beq.n	8009e74 <_strtod_l+0x814>
 8009f30:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009f32:	b1db      	cbz	r3, 8009f6c <_strtod_l+0x90c>
 8009f34:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f36:	4213      	tst	r3, r2
 8009f38:	d0ee      	beq.n	8009f18 <_strtod_l+0x8b8>
 8009f3a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f3c:	9a08      	ldr	r2, [sp, #32]
 8009f3e:	4650      	mov	r0, sl
 8009f40:	4659      	mov	r1, fp
 8009f42:	b1bb      	cbz	r3, 8009f74 <_strtod_l+0x914>
 8009f44:	f7ff fb6c 	bl	8009620 <sulp>
 8009f48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009f4c:	ec53 2b10 	vmov	r2, r3, d0
 8009f50:	f7f6 f9b4 	bl	80002bc <__adddf3>
 8009f54:	4682      	mov	sl, r0
 8009f56:	468b      	mov	fp, r1
 8009f58:	e7de      	b.n	8009f18 <_strtod_l+0x8b8>
 8009f5a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009f5e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009f62:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009f66:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009f6a:	e7d5      	b.n	8009f18 <_strtod_l+0x8b8>
 8009f6c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009f6e:	ea13 0f0a 	tst.w	r3, sl
 8009f72:	e7e1      	b.n	8009f38 <_strtod_l+0x8d8>
 8009f74:	f7ff fb54 	bl	8009620 <sulp>
 8009f78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009f7c:	ec53 2b10 	vmov	r2, r3, d0
 8009f80:	f7f6 f99a 	bl	80002b8 <__aeabi_dsub>
 8009f84:	2200      	movs	r2, #0
 8009f86:	2300      	movs	r3, #0
 8009f88:	4682      	mov	sl, r0
 8009f8a:	468b      	mov	fp, r1
 8009f8c:	f7f6 fdb4 	bl	8000af8 <__aeabi_dcmpeq>
 8009f90:	2800      	cmp	r0, #0
 8009f92:	d0c1      	beq.n	8009f18 <_strtod_l+0x8b8>
 8009f94:	e619      	b.n	8009bca <_strtod_l+0x56a>
 8009f96:	4641      	mov	r1, r8
 8009f98:	4620      	mov	r0, r4
 8009f9a:	f002 fca3 	bl	800c8e4 <__ratio>
 8009f9e:	ec57 6b10 	vmov	r6, r7, d0
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009fa8:	4630      	mov	r0, r6
 8009faa:	4639      	mov	r1, r7
 8009fac:	f7f6 fdb8 	bl	8000b20 <__aeabi_dcmple>
 8009fb0:	2800      	cmp	r0, #0
 8009fb2:	d06f      	beq.n	800a094 <_strtod_l+0xa34>
 8009fb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d17a      	bne.n	800a0b0 <_strtod_l+0xa50>
 8009fba:	f1ba 0f00 	cmp.w	sl, #0
 8009fbe:	d158      	bne.n	800a072 <_strtod_l+0xa12>
 8009fc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009fc2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d15a      	bne.n	800a080 <_strtod_l+0xa20>
 8009fca:	4b64      	ldr	r3, [pc, #400]	@ (800a15c <_strtod_l+0xafc>)
 8009fcc:	2200      	movs	r2, #0
 8009fce:	4630      	mov	r0, r6
 8009fd0:	4639      	mov	r1, r7
 8009fd2:	f7f6 fd9b 	bl	8000b0c <__aeabi_dcmplt>
 8009fd6:	2800      	cmp	r0, #0
 8009fd8:	d159      	bne.n	800a08e <_strtod_l+0xa2e>
 8009fda:	4630      	mov	r0, r6
 8009fdc:	4639      	mov	r1, r7
 8009fde:	4b60      	ldr	r3, [pc, #384]	@ (800a160 <_strtod_l+0xb00>)
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	f7f6 fb21 	bl	8000628 <__aeabi_dmul>
 8009fe6:	4606      	mov	r6, r0
 8009fe8:	460f      	mov	r7, r1
 8009fea:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009fee:	9606      	str	r6, [sp, #24]
 8009ff0:	9307      	str	r3, [sp, #28]
 8009ff2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009ff6:	4d57      	ldr	r5, [pc, #348]	@ (800a154 <_strtod_l+0xaf4>)
 8009ff8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009ffc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ffe:	401d      	ands	r5, r3
 800a000:	4b58      	ldr	r3, [pc, #352]	@ (800a164 <_strtod_l+0xb04>)
 800a002:	429d      	cmp	r5, r3
 800a004:	f040 80b2 	bne.w	800a16c <_strtod_l+0xb0c>
 800a008:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a00a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a00e:	ec4b ab10 	vmov	d0, sl, fp
 800a012:	f002 fb9f 	bl	800c754 <__ulp>
 800a016:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a01a:	ec51 0b10 	vmov	r0, r1, d0
 800a01e:	f7f6 fb03 	bl	8000628 <__aeabi_dmul>
 800a022:	4652      	mov	r2, sl
 800a024:	465b      	mov	r3, fp
 800a026:	f7f6 f949 	bl	80002bc <__adddf3>
 800a02a:	460b      	mov	r3, r1
 800a02c:	4949      	ldr	r1, [pc, #292]	@ (800a154 <_strtod_l+0xaf4>)
 800a02e:	4a4e      	ldr	r2, [pc, #312]	@ (800a168 <_strtod_l+0xb08>)
 800a030:	4019      	ands	r1, r3
 800a032:	4291      	cmp	r1, r2
 800a034:	4682      	mov	sl, r0
 800a036:	d942      	bls.n	800a0be <_strtod_l+0xa5e>
 800a038:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a03a:	4b47      	ldr	r3, [pc, #284]	@ (800a158 <_strtod_l+0xaf8>)
 800a03c:	429a      	cmp	r2, r3
 800a03e:	d103      	bne.n	800a048 <_strtod_l+0x9e8>
 800a040:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a042:	3301      	adds	r3, #1
 800a044:	f43f ad2b 	beq.w	8009a9e <_strtod_l+0x43e>
 800a048:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a158 <_strtod_l+0xaf8>
 800a04c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800a050:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a052:	9805      	ldr	r0, [sp, #20]
 800a054:	f002 f84a 	bl	800c0ec <_Bfree>
 800a058:	9805      	ldr	r0, [sp, #20]
 800a05a:	4649      	mov	r1, r9
 800a05c:	f002 f846 	bl	800c0ec <_Bfree>
 800a060:	9805      	ldr	r0, [sp, #20]
 800a062:	4641      	mov	r1, r8
 800a064:	f002 f842 	bl	800c0ec <_Bfree>
 800a068:	9805      	ldr	r0, [sp, #20]
 800a06a:	4621      	mov	r1, r4
 800a06c:	f002 f83e 	bl	800c0ec <_Bfree>
 800a070:	e618      	b.n	8009ca4 <_strtod_l+0x644>
 800a072:	f1ba 0f01 	cmp.w	sl, #1
 800a076:	d103      	bne.n	800a080 <_strtod_l+0xa20>
 800a078:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	f43f ada5 	beq.w	8009bca <_strtod_l+0x56a>
 800a080:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a130 <_strtod_l+0xad0>
 800a084:	4f35      	ldr	r7, [pc, #212]	@ (800a15c <_strtod_l+0xafc>)
 800a086:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a08a:	2600      	movs	r6, #0
 800a08c:	e7b1      	b.n	8009ff2 <_strtod_l+0x992>
 800a08e:	4f34      	ldr	r7, [pc, #208]	@ (800a160 <_strtod_l+0xb00>)
 800a090:	2600      	movs	r6, #0
 800a092:	e7aa      	b.n	8009fea <_strtod_l+0x98a>
 800a094:	4b32      	ldr	r3, [pc, #200]	@ (800a160 <_strtod_l+0xb00>)
 800a096:	4630      	mov	r0, r6
 800a098:	4639      	mov	r1, r7
 800a09a:	2200      	movs	r2, #0
 800a09c:	f7f6 fac4 	bl	8000628 <__aeabi_dmul>
 800a0a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0a2:	4606      	mov	r6, r0
 800a0a4:	460f      	mov	r7, r1
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d09f      	beq.n	8009fea <_strtod_l+0x98a>
 800a0aa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a0ae:	e7a0      	b.n	8009ff2 <_strtod_l+0x992>
 800a0b0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a138 <_strtod_l+0xad8>
 800a0b4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a0b8:	ec57 6b17 	vmov	r6, r7, d7
 800a0bc:	e799      	b.n	8009ff2 <_strtod_l+0x992>
 800a0be:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a0c2:	9b08      	ldr	r3, [sp, #32]
 800a0c4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d1c1      	bne.n	800a050 <_strtod_l+0x9f0>
 800a0cc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a0d0:	0d1b      	lsrs	r3, r3, #20
 800a0d2:	051b      	lsls	r3, r3, #20
 800a0d4:	429d      	cmp	r5, r3
 800a0d6:	d1bb      	bne.n	800a050 <_strtod_l+0x9f0>
 800a0d8:	4630      	mov	r0, r6
 800a0da:	4639      	mov	r1, r7
 800a0dc:	f7f6 fe04 	bl	8000ce8 <__aeabi_d2lz>
 800a0e0:	f7f6 fa74 	bl	80005cc <__aeabi_l2d>
 800a0e4:	4602      	mov	r2, r0
 800a0e6:	460b      	mov	r3, r1
 800a0e8:	4630      	mov	r0, r6
 800a0ea:	4639      	mov	r1, r7
 800a0ec:	f7f6 f8e4 	bl	80002b8 <__aeabi_dsub>
 800a0f0:	460b      	mov	r3, r1
 800a0f2:	4602      	mov	r2, r0
 800a0f4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a0f8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a0fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0fe:	ea46 060a 	orr.w	r6, r6, sl
 800a102:	431e      	orrs	r6, r3
 800a104:	d06f      	beq.n	800a1e6 <_strtod_l+0xb86>
 800a106:	a30e      	add	r3, pc, #56	@ (adr r3, 800a140 <_strtod_l+0xae0>)
 800a108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a10c:	f7f6 fcfe 	bl	8000b0c <__aeabi_dcmplt>
 800a110:	2800      	cmp	r0, #0
 800a112:	f47f accf 	bne.w	8009ab4 <_strtod_l+0x454>
 800a116:	a30c      	add	r3, pc, #48	@ (adr r3, 800a148 <_strtod_l+0xae8>)
 800a118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a11c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a120:	f7f6 fd12 	bl	8000b48 <__aeabi_dcmpgt>
 800a124:	2800      	cmp	r0, #0
 800a126:	d093      	beq.n	800a050 <_strtod_l+0x9f0>
 800a128:	e4c4      	b.n	8009ab4 <_strtod_l+0x454>
 800a12a:	bf00      	nop
 800a12c:	f3af 8000 	nop.w
 800a130:	00000000 	.word	0x00000000
 800a134:	bff00000 	.word	0xbff00000
 800a138:	00000000 	.word	0x00000000
 800a13c:	3ff00000 	.word	0x3ff00000
 800a140:	94a03595 	.word	0x94a03595
 800a144:	3fdfffff 	.word	0x3fdfffff
 800a148:	35afe535 	.word	0x35afe535
 800a14c:	3fe00000 	.word	0x3fe00000
 800a150:	000fffff 	.word	0x000fffff
 800a154:	7ff00000 	.word	0x7ff00000
 800a158:	7fefffff 	.word	0x7fefffff
 800a15c:	3ff00000 	.word	0x3ff00000
 800a160:	3fe00000 	.word	0x3fe00000
 800a164:	7fe00000 	.word	0x7fe00000
 800a168:	7c9fffff 	.word	0x7c9fffff
 800a16c:	9b08      	ldr	r3, [sp, #32]
 800a16e:	b323      	cbz	r3, 800a1ba <_strtod_l+0xb5a>
 800a170:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a174:	d821      	bhi.n	800a1ba <_strtod_l+0xb5a>
 800a176:	a328      	add	r3, pc, #160	@ (adr r3, 800a218 <_strtod_l+0xbb8>)
 800a178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17c:	4630      	mov	r0, r6
 800a17e:	4639      	mov	r1, r7
 800a180:	f7f6 fcce 	bl	8000b20 <__aeabi_dcmple>
 800a184:	b1a0      	cbz	r0, 800a1b0 <_strtod_l+0xb50>
 800a186:	4639      	mov	r1, r7
 800a188:	4630      	mov	r0, r6
 800a18a:	f7f6 fd25 	bl	8000bd8 <__aeabi_d2uiz>
 800a18e:	2801      	cmp	r0, #1
 800a190:	bf38      	it	cc
 800a192:	2001      	movcc	r0, #1
 800a194:	f7f6 f9ce 	bl	8000534 <__aeabi_ui2d>
 800a198:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a19a:	4606      	mov	r6, r0
 800a19c:	460f      	mov	r7, r1
 800a19e:	b9fb      	cbnz	r3, 800a1e0 <_strtod_l+0xb80>
 800a1a0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a1a4:	9014      	str	r0, [sp, #80]	@ 0x50
 800a1a6:	9315      	str	r3, [sp, #84]	@ 0x54
 800a1a8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a1ac:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a1b0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a1b2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a1b6:	1b5b      	subs	r3, r3, r5
 800a1b8:	9311      	str	r3, [sp, #68]	@ 0x44
 800a1ba:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a1be:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a1c2:	f002 fac7 	bl	800c754 <__ulp>
 800a1c6:	4650      	mov	r0, sl
 800a1c8:	ec53 2b10 	vmov	r2, r3, d0
 800a1cc:	4659      	mov	r1, fp
 800a1ce:	f7f6 fa2b 	bl	8000628 <__aeabi_dmul>
 800a1d2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a1d6:	f7f6 f871 	bl	80002bc <__adddf3>
 800a1da:	4682      	mov	sl, r0
 800a1dc:	468b      	mov	fp, r1
 800a1de:	e770      	b.n	800a0c2 <_strtod_l+0xa62>
 800a1e0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a1e4:	e7e0      	b.n	800a1a8 <_strtod_l+0xb48>
 800a1e6:	a30e      	add	r3, pc, #56	@ (adr r3, 800a220 <_strtod_l+0xbc0>)
 800a1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ec:	f7f6 fc8e 	bl	8000b0c <__aeabi_dcmplt>
 800a1f0:	e798      	b.n	800a124 <_strtod_l+0xac4>
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a1f6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a1f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a1fa:	6013      	str	r3, [r2, #0]
 800a1fc:	f7ff ba6d 	b.w	80096da <_strtod_l+0x7a>
 800a200:	2a65      	cmp	r2, #101	@ 0x65
 800a202:	f43f ab66 	beq.w	80098d2 <_strtod_l+0x272>
 800a206:	2a45      	cmp	r2, #69	@ 0x45
 800a208:	f43f ab63 	beq.w	80098d2 <_strtod_l+0x272>
 800a20c:	2301      	movs	r3, #1
 800a20e:	f7ff bb9e 	b.w	800994e <_strtod_l+0x2ee>
 800a212:	bf00      	nop
 800a214:	f3af 8000 	nop.w
 800a218:	ffc00000 	.word	0xffc00000
 800a21c:	41dfffff 	.word	0x41dfffff
 800a220:	94a03595 	.word	0x94a03595
 800a224:	3fcfffff 	.word	0x3fcfffff

0800a228 <_strtod_r>:
 800a228:	4b01      	ldr	r3, [pc, #4]	@ (800a230 <_strtod_r+0x8>)
 800a22a:	f7ff ba19 	b.w	8009660 <_strtod_l>
 800a22e:	bf00      	nop
 800a230:	20000058 	.word	0x20000058

0800a234 <_strtol_l.constprop.0>:
 800a234:	2b24      	cmp	r3, #36	@ 0x24
 800a236:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a23a:	4686      	mov	lr, r0
 800a23c:	4690      	mov	r8, r2
 800a23e:	d801      	bhi.n	800a244 <_strtol_l.constprop.0+0x10>
 800a240:	2b01      	cmp	r3, #1
 800a242:	d106      	bne.n	800a252 <_strtol_l.constprop.0+0x1e>
 800a244:	f000 f934 	bl	800a4b0 <__errno>
 800a248:	2316      	movs	r3, #22
 800a24a:	6003      	str	r3, [r0, #0]
 800a24c:	2000      	movs	r0, #0
 800a24e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a252:	4834      	ldr	r0, [pc, #208]	@ (800a324 <_strtol_l.constprop.0+0xf0>)
 800a254:	460d      	mov	r5, r1
 800a256:	462a      	mov	r2, r5
 800a258:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a25c:	5d06      	ldrb	r6, [r0, r4]
 800a25e:	f016 0608 	ands.w	r6, r6, #8
 800a262:	d1f8      	bne.n	800a256 <_strtol_l.constprop.0+0x22>
 800a264:	2c2d      	cmp	r4, #45	@ 0x2d
 800a266:	d12d      	bne.n	800a2c4 <_strtol_l.constprop.0+0x90>
 800a268:	782c      	ldrb	r4, [r5, #0]
 800a26a:	2601      	movs	r6, #1
 800a26c:	1c95      	adds	r5, r2, #2
 800a26e:	f033 0210 	bics.w	r2, r3, #16
 800a272:	d109      	bne.n	800a288 <_strtol_l.constprop.0+0x54>
 800a274:	2c30      	cmp	r4, #48	@ 0x30
 800a276:	d12a      	bne.n	800a2ce <_strtol_l.constprop.0+0x9a>
 800a278:	782a      	ldrb	r2, [r5, #0]
 800a27a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a27e:	2a58      	cmp	r2, #88	@ 0x58
 800a280:	d125      	bne.n	800a2ce <_strtol_l.constprop.0+0x9a>
 800a282:	786c      	ldrb	r4, [r5, #1]
 800a284:	2310      	movs	r3, #16
 800a286:	3502      	adds	r5, #2
 800a288:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a28c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800a290:	2200      	movs	r2, #0
 800a292:	fbbc f9f3 	udiv	r9, ip, r3
 800a296:	4610      	mov	r0, r2
 800a298:	fb03 ca19 	mls	sl, r3, r9, ip
 800a29c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a2a0:	2f09      	cmp	r7, #9
 800a2a2:	d81b      	bhi.n	800a2dc <_strtol_l.constprop.0+0xa8>
 800a2a4:	463c      	mov	r4, r7
 800a2a6:	42a3      	cmp	r3, r4
 800a2a8:	dd27      	ble.n	800a2fa <_strtol_l.constprop.0+0xc6>
 800a2aa:	1c57      	adds	r7, r2, #1
 800a2ac:	d007      	beq.n	800a2be <_strtol_l.constprop.0+0x8a>
 800a2ae:	4581      	cmp	r9, r0
 800a2b0:	d320      	bcc.n	800a2f4 <_strtol_l.constprop.0+0xc0>
 800a2b2:	d101      	bne.n	800a2b8 <_strtol_l.constprop.0+0x84>
 800a2b4:	45a2      	cmp	sl, r4
 800a2b6:	db1d      	blt.n	800a2f4 <_strtol_l.constprop.0+0xc0>
 800a2b8:	fb00 4003 	mla	r0, r0, r3, r4
 800a2bc:	2201      	movs	r2, #1
 800a2be:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a2c2:	e7eb      	b.n	800a29c <_strtol_l.constprop.0+0x68>
 800a2c4:	2c2b      	cmp	r4, #43	@ 0x2b
 800a2c6:	bf04      	itt	eq
 800a2c8:	782c      	ldrbeq	r4, [r5, #0]
 800a2ca:	1c95      	addeq	r5, r2, #2
 800a2cc:	e7cf      	b.n	800a26e <_strtol_l.constprop.0+0x3a>
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d1da      	bne.n	800a288 <_strtol_l.constprop.0+0x54>
 800a2d2:	2c30      	cmp	r4, #48	@ 0x30
 800a2d4:	bf0c      	ite	eq
 800a2d6:	2308      	moveq	r3, #8
 800a2d8:	230a      	movne	r3, #10
 800a2da:	e7d5      	b.n	800a288 <_strtol_l.constprop.0+0x54>
 800a2dc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a2e0:	2f19      	cmp	r7, #25
 800a2e2:	d801      	bhi.n	800a2e8 <_strtol_l.constprop.0+0xb4>
 800a2e4:	3c37      	subs	r4, #55	@ 0x37
 800a2e6:	e7de      	b.n	800a2a6 <_strtol_l.constprop.0+0x72>
 800a2e8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a2ec:	2f19      	cmp	r7, #25
 800a2ee:	d804      	bhi.n	800a2fa <_strtol_l.constprop.0+0xc6>
 800a2f0:	3c57      	subs	r4, #87	@ 0x57
 800a2f2:	e7d8      	b.n	800a2a6 <_strtol_l.constprop.0+0x72>
 800a2f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a2f8:	e7e1      	b.n	800a2be <_strtol_l.constprop.0+0x8a>
 800a2fa:	1c53      	adds	r3, r2, #1
 800a2fc:	d108      	bne.n	800a310 <_strtol_l.constprop.0+0xdc>
 800a2fe:	2322      	movs	r3, #34	@ 0x22
 800a300:	f8ce 3000 	str.w	r3, [lr]
 800a304:	4660      	mov	r0, ip
 800a306:	f1b8 0f00 	cmp.w	r8, #0
 800a30a:	d0a0      	beq.n	800a24e <_strtol_l.constprop.0+0x1a>
 800a30c:	1e69      	subs	r1, r5, #1
 800a30e:	e006      	b.n	800a31e <_strtol_l.constprop.0+0xea>
 800a310:	b106      	cbz	r6, 800a314 <_strtol_l.constprop.0+0xe0>
 800a312:	4240      	negs	r0, r0
 800a314:	f1b8 0f00 	cmp.w	r8, #0
 800a318:	d099      	beq.n	800a24e <_strtol_l.constprop.0+0x1a>
 800a31a:	2a00      	cmp	r2, #0
 800a31c:	d1f6      	bne.n	800a30c <_strtol_l.constprop.0+0xd8>
 800a31e:	f8c8 1000 	str.w	r1, [r8]
 800a322:	e794      	b.n	800a24e <_strtol_l.constprop.0+0x1a>
 800a324:	0800dcc1 	.word	0x0800dcc1

0800a328 <_strtol_r>:
 800a328:	f7ff bf84 	b.w	800a234 <_strtol_l.constprop.0>

0800a32c <_fwalk_sglue>:
 800a32c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a330:	4607      	mov	r7, r0
 800a332:	4688      	mov	r8, r1
 800a334:	4614      	mov	r4, r2
 800a336:	2600      	movs	r6, #0
 800a338:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a33c:	f1b9 0901 	subs.w	r9, r9, #1
 800a340:	d505      	bpl.n	800a34e <_fwalk_sglue+0x22>
 800a342:	6824      	ldr	r4, [r4, #0]
 800a344:	2c00      	cmp	r4, #0
 800a346:	d1f7      	bne.n	800a338 <_fwalk_sglue+0xc>
 800a348:	4630      	mov	r0, r6
 800a34a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a34e:	89ab      	ldrh	r3, [r5, #12]
 800a350:	2b01      	cmp	r3, #1
 800a352:	d907      	bls.n	800a364 <_fwalk_sglue+0x38>
 800a354:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a358:	3301      	adds	r3, #1
 800a35a:	d003      	beq.n	800a364 <_fwalk_sglue+0x38>
 800a35c:	4629      	mov	r1, r5
 800a35e:	4638      	mov	r0, r7
 800a360:	47c0      	blx	r8
 800a362:	4306      	orrs	r6, r0
 800a364:	3568      	adds	r5, #104	@ 0x68
 800a366:	e7e9      	b.n	800a33c <_fwalk_sglue+0x10>

0800a368 <iprintf>:
 800a368:	b40f      	push	{r0, r1, r2, r3}
 800a36a:	b507      	push	{r0, r1, r2, lr}
 800a36c:	4906      	ldr	r1, [pc, #24]	@ (800a388 <iprintf+0x20>)
 800a36e:	ab04      	add	r3, sp, #16
 800a370:	6808      	ldr	r0, [r1, #0]
 800a372:	f853 2b04 	ldr.w	r2, [r3], #4
 800a376:	6881      	ldr	r1, [r0, #8]
 800a378:	9301      	str	r3, [sp, #4]
 800a37a:	f001 fbeb 	bl	800bb54 <_vfiprintf_r>
 800a37e:	b003      	add	sp, #12
 800a380:	f85d eb04 	ldr.w	lr, [sp], #4
 800a384:	b004      	add	sp, #16
 800a386:	4770      	bx	lr
 800a388:	200001c4 	.word	0x200001c4

0800a38c <_puts_r>:
 800a38c:	6a03      	ldr	r3, [r0, #32]
 800a38e:	b570      	push	{r4, r5, r6, lr}
 800a390:	6884      	ldr	r4, [r0, #8]
 800a392:	4605      	mov	r5, r0
 800a394:	460e      	mov	r6, r1
 800a396:	b90b      	cbnz	r3, 800a39c <_puts_r+0x10>
 800a398:	f7ff f92a 	bl	80095f0 <__sinit>
 800a39c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a39e:	07db      	lsls	r3, r3, #31
 800a3a0:	d405      	bmi.n	800a3ae <_puts_r+0x22>
 800a3a2:	89a3      	ldrh	r3, [r4, #12]
 800a3a4:	0598      	lsls	r0, r3, #22
 800a3a6:	d402      	bmi.n	800a3ae <_puts_r+0x22>
 800a3a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a3aa:	f000 f8ac 	bl	800a506 <__retarget_lock_acquire_recursive>
 800a3ae:	89a3      	ldrh	r3, [r4, #12]
 800a3b0:	0719      	lsls	r1, r3, #28
 800a3b2:	d502      	bpl.n	800a3ba <_puts_r+0x2e>
 800a3b4:	6923      	ldr	r3, [r4, #16]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d135      	bne.n	800a426 <_puts_r+0x9a>
 800a3ba:	4621      	mov	r1, r4
 800a3bc:	4628      	mov	r0, r5
 800a3be:	f002 fbb7 	bl	800cb30 <__swsetup_r>
 800a3c2:	b380      	cbz	r0, 800a426 <_puts_r+0x9a>
 800a3c4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800a3c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a3ca:	07da      	lsls	r2, r3, #31
 800a3cc:	d405      	bmi.n	800a3da <_puts_r+0x4e>
 800a3ce:	89a3      	ldrh	r3, [r4, #12]
 800a3d0:	059b      	lsls	r3, r3, #22
 800a3d2:	d402      	bmi.n	800a3da <_puts_r+0x4e>
 800a3d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a3d6:	f000 f897 	bl	800a508 <__retarget_lock_release_recursive>
 800a3da:	4628      	mov	r0, r5
 800a3dc:	bd70      	pop	{r4, r5, r6, pc}
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	da04      	bge.n	800a3ec <_puts_r+0x60>
 800a3e2:	69a2      	ldr	r2, [r4, #24]
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	dc17      	bgt.n	800a418 <_puts_r+0x8c>
 800a3e8:	290a      	cmp	r1, #10
 800a3ea:	d015      	beq.n	800a418 <_puts_r+0x8c>
 800a3ec:	6823      	ldr	r3, [r4, #0]
 800a3ee:	1c5a      	adds	r2, r3, #1
 800a3f0:	6022      	str	r2, [r4, #0]
 800a3f2:	7019      	strb	r1, [r3, #0]
 800a3f4:	68a3      	ldr	r3, [r4, #8]
 800a3f6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a3fa:	3b01      	subs	r3, #1
 800a3fc:	60a3      	str	r3, [r4, #8]
 800a3fe:	2900      	cmp	r1, #0
 800a400:	d1ed      	bne.n	800a3de <_puts_r+0x52>
 800a402:	2b00      	cmp	r3, #0
 800a404:	da11      	bge.n	800a42a <_puts_r+0x9e>
 800a406:	4622      	mov	r2, r4
 800a408:	210a      	movs	r1, #10
 800a40a:	4628      	mov	r0, r5
 800a40c:	f002 fb51 	bl	800cab2 <__swbuf_r>
 800a410:	3001      	adds	r0, #1
 800a412:	d0d7      	beq.n	800a3c4 <_puts_r+0x38>
 800a414:	250a      	movs	r5, #10
 800a416:	e7d7      	b.n	800a3c8 <_puts_r+0x3c>
 800a418:	4622      	mov	r2, r4
 800a41a:	4628      	mov	r0, r5
 800a41c:	f002 fb49 	bl	800cab2 <__swbuf_r>
 800a420:	3001      	adds	r0, #1
 800a422:	d1e7      	bne.n	800a3f4 <_puts_r+0x68>
 800a424:	e7ce      	b.n	800a3c4 <_puts_r+0x38>
 800a426:	3e01      	subs	r6, #1
 800a428:	e7e4      	b.n	800a3f4 <_puts_r+0x68>
 800a42a:	6823      	ldr	r3, [r4, #0]
 800a42c:	1c5a      	adds	r2, r3, #1
 800a42e:	6022      	str	r2, [r4, #0]
 800a430:	220a      	movs	r2, #10
 800a432:	701a      	strb	r2, [r3, #0]
 800a434:	e7ee      	b.n	800a414 <_puts_r+0x88>
	...

0800a438 <puts>:
 800a438:	4b02      	ldr	r3, [pc, #8]	@ (800a444 <puts+0xc>)
 800a43a:	4601      	mov	r1, r0
 800a43c:	6818      	ldr	r0, [r3, #0]
 800a43e:	f7ff bfa5 	b.w	800a38c <_puts_r>
 800a442:	bf00      	nop
 800a444:	200001c4 	.word	0x200001c4

0800a448 <strncmp>:
 800a448:	b510      	push	{r4, lr}
 800a44a:	b16a      	cbz	r2, 800a468 <strncmp+0x20>
 800a44c:	3901      	subs	r1, #1
 800a44e:	1884      	adds	r4, r0, r2
 800a450:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a454:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a458:	429a      	cmp	r2, r3
 800a45a:	d103      	bne.n	800a464 <strncmp+0x1c>
 800a45c:	42a0      	cmp	r0, r4
 800a45e:	d001      	beq.n	800a464 <strncmp+0x1c>
 800a460:	2a00      	cmp	r2, #0
 800a462:	d1f5      	bne.n	800a450 <strncmp+0x8>
 800a464:	1ad0      	subs	r0, r2, r3
 800a466:	bd10      	pop	{r4, pc}
 800a468:	4610      	mov	r0, r2
 800a46a:	e7fc      	b.n	800a466 <strncmp+0x1e>

0800a46c <strstr>:
 800a46c:	780a      	ldrb	r2, [r1, #0]
 800a46e:	b570      	push	{r4, r5, r6, lr}
 800a470:	b96a      	cbnz	r2, 800a48e <strstr+0x22>
 800a472:	bd70      	pop	{r4, r5, r6, pc}
 800a474:	429a      	cmp	r2, r3
 800a476:	d109      	bne.n	800a48c <strstr+0x20>
 800a478:	460c      	mov	r4, r1
 800a47a:	4605      	mov	r5, r0
 800a47c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800a480:	2b00      	cmp	r3, #0
 800a482:	d0f6      	beq.n	800a472 <strstr+0x6>
 800a484:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800a488:	429e      	cmp	r6, r3
 800a48a:	d0f7      	beq.n	800a47c <strstr+0x10>
 800a48c:	3001      	adds	r0, #1
 800a48e:	7803      	ldrb	r3, [r0, #0]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d1ef      	bne.n	800a474 <strstr+0x8>
 800a494:	4618      	mov	r0, r3
 800a496:	e7ec      	b.n	800a472 <strstr+0x6>

0800a498 <memset>:
 800a498:	4402      	add	r2, r0
 800a49a:	4603      	mov	r3, r0
 800a49c:	4293      	cmp	r3, r2
 800a49e:	d100      	bne.n	800a4a2 <memset+0xa>
 800a4a0:	4770      	bx	lr
 800a4a2:	f803 1b01 	strb.w	r1, [r3], #1
 800a4a6:	e7f9      	b.n	800a49c <memset+0x4>

0800a4a8 <_localeconv_r>:
 800a4a8:	4800      	ldr	r0, [pc, #0]	@ (800a4ac <_localeconv_r+0x4>)
 800a4aa:	4770      	bx	lr
 800a4ac:	20000148 	.word	0x20000148

0800a4b0 <__errno>:
 800a4b0:	4b01      	ldr	r3, [pc, #4]	@ (800a4b8 <__errno+0x8>)
 800a4b2:	6818      	ldr	r0, [r3, #0]
 800a4b4:	4770      	bx	lr
 800a4b6:	bf00      	nop
 800a4b8:	200001c4 	.word	0x200001c4

0800a4bc <__libc_init_array>:
 800a4bc:	b570      	push	{r4, r5, r6, lr}
 800a4be:	4d0d      	ldr	r5, [pc, #52]	@ (800a4f4 <__libc_init_array+0x38>)
 800a4c0:	4c0d      	ldr	r4, [pc, #52]	@ (800a4f8 <__libc_init_array+0x3c>)
 800a4c2:	1b64      	subs	r4, r4, r5
 800a4c4:	10a4      	asrs	r4, r4, #2
 800a4c6:	2600      	movs	r6, #0
 800a4c8:	42a6      	cmp	r6, r4
 800a4ca:	d109      	bne.n	800a4e0 <__libc_init_array+0x24>
 800a4cc:	4d0b      	ldr	r5, [pc, #44]	@ (800a4fc <__libc_init_array+0x40>)
 800a4ce:	4c0c      	ldr	r4, [pc, #48]	@ (800a500 <__libc_init_array+0x44>)
 800a4d0:	f002 ff08 	bl	800d2e4 <_init>
 800a4d4:	1b64      	subs	r4, r4, r5
 800a4d6:	10a4      	asrs	r4, r4, #2
 800a4d8:	2600      	movs	r6, #0
 800a4da:	42a6      	cmp	r6, r4
 800a4dc:	d105      	bne.n	800a4ea <__libc_init_array+0x2e>
 800a4de:	bd70      	pop	{r4, r5, r6, pc}
 800a4e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4e4:	4798      	blx	r3
 800a4e6:	3601      	adds	r6, #1
 800a4e8:	e7ee      	b.n	800a4c8 <__libc_init_array+0xc>
 800a4ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4ee:	4798      	blx	r3
 800a4f0:	3601      	adds	r6, #1
 800a4f2:	e7f2      	b.n	800a4da <__libc_init_array+0x1e>
 800a4f4:	0800e094 	.word	0x0800e094
 800a4f8:	0800e094 	.word	0x0800e094
 800a4fc:	0800e094 	.word	0x0800e094
 800a500:	0800e098 	.word	0x0800e098

0800a504 <__retarget_lock_init_recursive>:
 800a504:	4770      	bx	lr

0800a506 <__retarget_lock_acquire_recursive>:
 800a506:	4770      	bx	lr

0800a508 <__retarget_lock_release_recursive>:
 800a508:	4770      	bx	lr

0800a50a <memcpy>:
 800a50a:	440a      	add	r2, r1
 800a50c:	4291      	cmp	r1, r2
 800a50e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800a512:	d100      	bne.n	800a516 <memcpy+0xc>
 800a514:	4770      	bx	lr
 800a516:	b510      	push	{r4, lr}
 800a518:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a51c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a520:	4291      	cmp	r1, r2
 800a522:	d1f9      	bne.n	800a518 <memcpy+0xe>
 800a524:	bd10      	pop	{r4, pc}
	...

0800a528 <nan>:
 800a528:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a530 <nan+0x8>
 800a52c:	4770      	bx	lr
 800a52e:	bf00      	nop
 800a530:	00000000 	.word	0x00000000
 800a534:	7ff80000 	.word	0x7ff80000

0800a538 <nanf>:
 800a538:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a540 <nanf+0x8>
 800a53c:	4770      	bx	lr
 800a53e:	bf00      	nop
 800a540:	7fc00000 	.word	0x7fc00000

0800a544 <quorem>:
 800a544:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a548:	6903      	ldr	r3, [r0, #16]
 800a54a:	690c      	ldr	r4, [r1, #16]
 800a54c:	42a3      	cmp	r3, r4
 800a54e:	4607      	mov	r7, r0
 800a550:	db7e      	blt.n	800a650 <quorem+0x10c>
 800a552:	3c01      	subs	r4, #1
 800a554:	f101 0814 	add.w	r8, r1, #20
 800a558:	00a3      	lsls	r3, r4, #2
 800a55a:	f100 0514 	add.w	r5, r0, #20
 800a55e:	9300      	str	r3, [sp, #0]
 800a560:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a564:	9301      	str	r3, [sp, #4]
 800a566:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a56a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a56e:	3301      	adds	r3, #1
 800a570:	429a      	cmp	r2, r3
 800a572:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a576:	fbb2 f6f3 	udiv	r6, r2, r3
 800a57a:	d32e      	bcc.n	800a5da <quorem+0x96>
 800a57c:	f04f 0a00 	mov.w	sl, #0
 800a580:	46c4      	mov	ip, r8
 800a582:	46ae      	mov	lr, r5
 800a584:	46d3      	mov	fp, sl
 800a586:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a58a:	b298      	uxth	r0, r3
 800a58c:	fb06 a000 	mla	r0, r6, r0, sl
 800a590:	0c02      	lsrs	r2, r0, #16
 800a592:	0c1b      	lsrs	r3, r3, #16
 800a594:	fb06 2303 	mla	r3, r6, r3, r2
 800a598:	f8de 2000 	ldr.w	r2, [lr]
 800a59c:	b280      	uxth	r0, r0
 800a59e:	b292      	uxth	r2, r2
 800a5a0:	1a12      	subs	r2, r2, r0
 800a5a2:	445a      	add	r2, fp
 800a5a4:	f8de 0000 	ldr.w	r0, [lr]
 800a5a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a5ac:	b29b      	uxth	r3, r3
 800a5ae:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a5b2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a5b6:	b292      	uxth	r2, r2
 800a5b8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a5bc:	45e1      	cmp	r9, ip
 800a5be:	f84e 2b04 	str.w	r2, [lr], #4
 800a5c2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a5c6:	d2de      	bcs.n	800a586 <quorem+0x42>
 800a5c8:	9b00      	ldr	r3, [sp, #0]
 800a5ca:	58eb      	ldr	r3, [r5, r3]
 800a5cc:	b92b      	cbnz	r3, 800a5da <quorem+0x96>
 800a5ce:	9b01      	ldr	r3, [sp, #4]
 800a5d0:	3b04      	subs	r3, #4
 800a5d2:	429d      	cmp	r5, r3
 800a5d4:	461a      	mov	r2, r3
 800a5d6:	d32f      	bcc.n	800a638 <quorem+0xf4>
 800a5d8:	613c      	str	r4, [r7, #16]
 800a5da:	4638      	mov	r0, r7
 800a5dc:	f002 f80a 	bl	800c5f4 <__mcmp>
 800a5e0:	2800      	cmp	r0, #0
 800a5e2:	db25      	blt.n	800a630 <quorem+0xec>
 800a5e4:	4629      	mov	r1, r5
 800a5e6:	2000      	movs	r0, #0
 800a5e8:	f858 2b04 	ldr.w	r2, [r8], #4
 800a5ec:	f8d1 c000 	ldr.w	ip, [r1]
 800a5f0:	fa1f fe82 	uxth.w	lr, r2
 800a5f4:	fa1f f38c 	uxth.w	r3, ip
 800a5f8:	eba3 030e 	sub.w	r3, r3, lr
 800a5fc:	4403      	add	r3, r0
 800a5fe:	0c12      	lsrs	r2, r2, #16
 800a600:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a604:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a608:	b29b      	uxth	r3, r3
 800a60a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a60e:	45c1      	cmp	r9, r8
 800a610:	f841 3b04 	str.w	r3, [r1], #4
 800a614:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a618:	d2e6      	bcs.n	800a5e8 <quorem+0xa4>
 800a61a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a61e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a622:	b922      	cbnz	r2, 800a62e <quorem+0xea>
 800a624:	3b04      	subs	r3, #4
 800a626:	429d      	cmp	r5, r3
 800a628:	461a      	mov	r2, r3
 800a62a:	d30b      	bcc.n	800a644 <quorem+0x100>
 800a62c:	613c      	str	r4, [r7, #16]
 800a62e:	3601      	adds	r6, #1
 800a630:	4630      	mov	r0, r6
 800a632:	b003      	add	sp, #12
 800a634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a638:	6812      	ldr	r2, [r2, #0]
 800a63a:	3b04      	subs	r3, #4
 800a63c:	2a00      	cmp	r2, #0
 800a63e:	d1cb      	bne.n	800a5d8 <quorem+0x94>
 800a640:	3c01      	subs	r4, #1
 800a642:	e7c6      	b.n	800a5d2 <quorem+0x8e>
 800a644:	6812      	ldr	r2, [r2, #0]
 800a646:	3b04      	subs	r3, #4
 800a648:	2a00      	cmp	r2, #0
 800a64a:	d1ef      	bne.n	800a62c <quorem+0xe8>
 800a64c:	3c01      	subs	r4, #1
 800a64e:	e7ea      	b.n	800a626 <quorem+0xe2>
 800a650:	2000      	movs	r0, #0
 800a652:	e7ee      	b.n	800a632 <quorem+0xee>
 800a654:	0000      	movs	r0, r0
	...

0800a658 <_dtoa_r>:
 800a658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a65c:	69c7      	ldr	r7, [r0, #28]
 800a65e:	b099      	sub	sp, #100	@ 0x64
 800a660:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a664:	ec55 4b10 	vmov	r4, r5, d0
 800a668:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a66a:	9109      	str	r1, [sp, #36]	@ 0x24
 800a66c:	4683      	mov	fp, r0
 800a66e:	920e      	str	r2, [sp, #56]	@ 0x38
 800a670:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a672:	b97f      	cbnz	r7, 800a694 <_dtoa_r+0x3c>
 800a674:	2010      	movs	r0, #16
 800a676:	f001 fb85 	bl	800bd84 <malloc>
 800a67a:	4602      	mov	r2, r0
 800a67c:	f8cb 001c 	str.w	r0, [fp, #28]
 800a680:	b920      	cbnz	r0, 800a68c <_dtoa_r+0x34>
 800a682:	4ba7      	ldr	r3, [pc, #668]	@ (800a920 <_dtoa_r+0x2c8>)
 800a684:	21ef      	movs	r1, #239	@ 0xef
 800a686:	48a7      	ldr	r0, [pc, #668]	@ (800a924 <_dtoa_r+0x2cc>)
 800a688:	f002 fbaa 	bl	800cde0 <__assert_func>
 800a68c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a690:	6007      	str	r7, [r0, #0]
 800a692:	60c7      	str	r7, [r0, #12]
 800a694:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a698:	6819      	ldr	r1, [r3, #0]
 800a69a:	b159      	cbz	r1, 800a6b4 <_dtoa_r+0x5c>
 800a69c:	685a      	ldr	r2, [r3, #4]
 800a69e:	604a      	str	r2, [r1, #4]
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	4093      	lsls	r3, r2
 800a6a4:	608b      	str	r3, [r1, #8]
 800a6a6:	4658      	mov	r0, fp
 800a6a8:	f001 fd20 	bl	800c0ec <_Bfree>
 800a6ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	601a      	str	r2, [r3, #0]
 800a6b4:	1e2b      	subs	r3, r5, #0
 800a6b6:	bfb9      	ittee	lt
 800a6b8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a6bc:	9303      	strlt	r3, [sp, #12]
 800a6be:	2300      	movge	r3, #0
 800a6c0:	6033      	strge	r3, [r6, #0]
 800a6c2:	9f03      	ldr	r7, [sp, #12]
 800a6c4:	4b98      	ldr	r3, [pc, #608]	@ (800a928 <_dtoa_r+0x2d0>)
 800a6c6:	bfbc      	itt	lt
 800a6c8:	2201      	movlt	r2, #1
 800a6ca:	6032      	strlt	r2, [r6, #0]
 800a6cc:	43bb      	bics	r3, r7
 800a6ce:	d112      	bne.n	800a6f6 <_dtoa_r+0x9e>
 800a6d0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a6d2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a6d6:	6013      	str	r3, [r2, #0]
 800a6d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a6dc:	4323      	orrs	r3, r4
 800a6de:	f000 854d 	beq.w	800b17c <_dtoa_r+0xb24>
 800a6e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a6e4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a93c <_dtoa_r+0x2e4>
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	f000 854f 	beq.w	800b18c <_dtoa_r+0xb34>
 800a6ee:	f10a 0303 	add.w	r3, sl, #3
 800a6f2:	f000 bd49 	b.w	800b188 <_dtoa_r+0xb30>
 800a6f6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	ec51 0b17 	vmov	r0, r1, d7
 800a700:	2300      	movs	r3, #0
 800a702:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a706:	f7f6 f9f7 	bl	8000af8 <__aeabi_dcmpeq>
 800a70a:	4680      	mov	r8, r0
 800a70c:	b158      	cbz	r0, 800a726 <_dtoa_r+0xce>
 800a70e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a710:	2301      	movs	r3, #1
 800a712:	6013      	str	r3, [r2, #0]
 800a714:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a716:	b113      	cbz	r3, 800a71e <_dtoa_r+0xc6>
 800a718:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a71a:	4b84      	ldr	r3, [pc, #528]	@ (800a92c <_dtoa_r+0x2d4>)
 800a71c:	6013      	str	r3, [r2, #0]
 800a71e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a940 <_dtoa_r+0x2e8>
 800a722:	f000 bd33 	b.w	800b18c <_dtoa_r+0xb34>
 800a726:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a72a:	aa16      	add	r2, sp, #88	@ 0x58
 800a72c:	a917      	add	r1, sp, #92	@ 0x5c
 800a72e:	4658      	mov	r0, fp
 800a730:	f002 f880 	bl	800c834 <__d2b>
 800a734:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a738:	4681      	mov	r9, r0
 800a73a:	2e00      	cmp	r6, #0
 800a73c:	d077      	beq.n	800a82e <_dtoa_r+0x1d6>
 800a73e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a740:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a744:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a748:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a74c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a750:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a754:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a758:	4619      	mov	r1, r3
 800a75a:	2200      	movs	r2, #0
 800a75c:	4b74      	ldr	r3, [pc, #464]	@ (800a930 <_dtoa_r+0x2d8>)
 800a75e:	f7f5 fdab 	bl	80002b8 <__aeabi_dsub>
 800a762:	a369      	add	r3, pc, #420	@ (adr r3, 800a908 <_dtoa_r+0x2b0>)
 800a764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a768:	f7f5 ff5e 	bl	8000628 <__aeabi_dmul>
 800a76c:	a368      	add	r3, pc, #416	@ (adr r3, 800a910 <_dtoa_r+0x2b8>)
 800a76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a772:	f7f5 fda3 	bl	80002bc <__adddf3>
 800a776:	4604      	mov	r4, r0
 800a778:	4630      	mov	r0, r6
 800a77a:	460d      	mov	r5, r1
 800a77c:	f7f5 feea 	bl	8000554 <__aeabi_i2d>
 800a780:	a365      	add	r3, pc, #404	@ (adr r3, 800a918 <_dtoa_r+0x2c0>)
 800a782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a786:	f7f5 ff4f 	bl	8000628 <__aeabi_dmul>
 800a78a:	4602      	mov	r2, r0
 800a78c:	460b      	mov	r3, r1
 800a78e:	4620      	mov	r0, r4
 800a790:	4629      	mov	r1, r5
 800a792:	f7f5 fd93 	bl	80002bc <__adddf3>
 800a796:	4604      	mov	r4, r0
 800a798:	460d      	mov	r5, r1
 800a79a:	f7f6 f9f5 	bl	8000b88 <__aeabi_d2iz>
 800a79e:	2200      	movs	r2, #0
 800a7a0:	4607      	mov	r7, r0
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	4620      	mov	r0, r4
 800a7a6:	4629      	mov	r1, r5
 800a7a8:	f7f6 f9b0 	bl	8000b0c <__aeabi_dcmplt>
 800a7ac:	b140      	cbz	r0, 800a7c0 <_dtoa_r+0x168>
 800a7ae:	4638      	mov	r0, r7
 800a7b0:	f7f5 fed0 	bl	8000554 <__aeabi_i2d>
 800a7b4:	4622      	mov	r2, r4
 800a7b6:	462b      	mov	r3, r5
 800a7b8:	f7f6 f99e 	bl	8000af8 <__aeabi_dcmpeq>
 800a7bc:	b900      	cbnz	r0, 800a7c0 <_dtoa_r+0x168>
 800a7be:	3f01      	subs	r7, #1
 800a7c0:	2f16      	cmp	r7, #22
 800a7c2:	d851      	bhi.n	800a868 <_dtoa_r+0x210>
 800a7c4:	4b5b      	ldr	r3, [pc, #364]	@ (800a934 <_dtoa_r+0x2dc>)
 800a7c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a7d2:	f7f6 f99b 	bl	8000b0c <__aeabi_dcmplt>
 800a7d6:	2800      	cmp	r0, #0
 800a7d8:	d048      	beq.n	800a86c <_dtoa_r+0x214>
 800a7da:	3f01      	subs	r7, #1
 800a7dc:	2300      	movs	r3, #0
 800a7de:	9312      	str	r3, [sp, #72]	@ 0x48
 800a7e0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a7e2:	1b9b      	subs	r3, r3, r6
 800a7e4:	1e5a      	subs	r2, r3, #1
 800a7e6:	bf44      	itt	mi
 800a7e8:	f1c3 0801 	rsbmi	r8, r3, #1
 800a7ec:	2300      	movmi	r3, #0
 800a7ee:	9208      	str	r2, [sp, #32]
 800a7f0:	bf54      	ite	pl
 800a7f2:	f04f 0800 	movpl.w	r8, #0
 800a7f6:	9308      	strmi	r3, [sp, #32]
 800a7f8:	2f00      	cmp	r7, #0
 800a7fa:	db39      	blt.n	800a870 <_dtoa_r+0x218>
 800a7fc:	9b08      	ldr	r3, [sp, #32]
 800a7fe:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a800:	443b      	add	r3, r7
 800a802:	9308      	str	r3, [sp, #32]
 800a804:	2300      	movs	r3, #0
 800a806:	930a      	str	r3, [sp, #40]	@ 0x28
 800a808:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a80a:	2b09      	cmp	r3, #9
 800a80c:	d864      	bhi.n	800a8d8 <_dtoa_r+0x280>
 800a80e:	2b05      	cmp	r3, #5
 800a810:	bfc4      	itt	gt
 800a812:	3b04      	subgt	r3, #4
 800a814:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a816:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a818:	f1a3 0302 	sub.w	r3, r3, #2
 800a81c:	bfcc      	ite	gt
 800a81e:	2400      	movgt	r4, #0
 800a820:	2401      	movle	r4, #1
 800a822:	2b03      	cmp	r3, #3
 800a824:	d863      	bhi.n	800a8ee <_dtoa_r+0x296>
 800a826:	e8df f003 	tbb	[pc, r3]
 800a82a:	372a      	.short	0x372a
 800a82c:	5535      	.short	0x5535
 800a82e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a832:	441e      	add	r6, r3
 800a834:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a838:	2b20      	cmp	r3, #32
 800a83a:	bfc1      	itttt	gt
 800a83c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a840:	409f      	lslgt	r7, r3
 800a842:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a846:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a84a:	bfd6      	itet	le
 800a84c:	f1c3 0320 	rsble	r3, r3, #32
 800a850:	ea47 0003 	orrgt.w	r0, r7, r3
 800a854:	fa04 f003 	lslle.w	r0, r4, r3
 800a858:	f7f5 fe6c 	bl	8000534 <__aeabi_ui2d>
 800a85c:	2201      	movs	r2, #1
 800a85e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a862:	3e01      	subs	r6, #1
 800a864:	9214      	str	r2, [sp, #80]	@ 0x50
 800a866:	e777      	b.n	800a758 <_dtoa_r+0x100>
 800a868:	2301      	movs	r3, #1
 800a86a:	e7b8      	b.n	800a7de <_dtoa_r+0x186>
 800a86c:	9012      	str	r0, [sp, #72]	@ 0x48
 800a86e:	e7b7      	b.n	800a7e0 <_dtoa_r+0x188>
 800a870:	427b      	negs	r3, r7
 800a872:	930a      	str	r3, [sp, #40]	@ 0x28
 800a874:	2300      	movs	r3, #0
 800a876:	eba8 0807 	sub.w	r8, r8, r7
 800a87a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a87c:	e7c4      	b.n	800a808 <_dtoa_r+0x1b0>
 800a87e:	2300      	movs	r3, #0
 800a880:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a882:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a884:	2b00      	cmp	r3, #0
 800a886:	dc35      	bgt.n	800a8f4 <_dtoa_r+0x29c>
 800a888:	2301      	movs	r3, #1
 800a88a:	9300      	str	r3, [sp, #0]
 800a88c:	9307      	str	r3, [sp, #28]
 800a88e:	461a      	mov	r2, r3
 800a890:	920e      	str	r2, [sp, #56]	@ 0x38
 800a892:	e00b      	b.n	800a8ac <_dtoa_r+0x254>
 800a894:	2301      	movs	r3, #1
 800a896:	e7f3      	b.n	800a880 <_dtoa_r+0x228>
 800a898:	2300      	movs	r3, #0
 800a89a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a89c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a89e:	18fb      	adds	r3, r7, r3
 800a8a0:	9300      	str	r3, [sp, #0]
 800a8a2:	3301      	adds	r3, #1
 800a8a4:	2b01      	cmp	r3, #1
 800a8a6:	9307      	str	r3, [sp, #28]
 800a8a8:	bfb8      	it	lt
 800a8aa:	2301      	movlt	r3, #1
 800a8ac:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a8b0:	2100      	movs	r1, #0
 800a8b2:	2204      	movs	r2, #4
 800a8b4:	f102 0514 	add.w	r5, r2, #20
 800a8b8:	429d      	cmp	r5, r3
 800a8ba:	d91f      	bls.n	800a8fc <_dtoa_r+0x2a4>
 800a8bc:	6041      	str	r1, [r0, #4]
 800a8be:	4658      	mov	r0, fp
 800a8c0:	f001 fbd4 	bl	800c06c <_Balloc>
 800a8c4:	4682      	mov	sl, r0
 800a8c6:	2800      	cmp	r0, #0
 800a8c8:	d13c      	bne.n	800a944 <_dtoa_r+0x2ec>
 800a8ca:	4b1b      	ldr	r3, [pc, #108]	@ (800a938 <_dtoa_r+0x2e0>)
 800a8cc:	4602      	mov	r2, r0
 800a8ce:	f240 11af 	movw	r1, #431	@ 0x1af
 800a8d2:	e6d8      	b.n	800a686 <_dtoa_r+0x2e>
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	e7e0      	b.n	800a89a <_dtoa_r+0x242>
 800a8d8:	2401      	movs	r4, #1
 800a8da:	2300      	movs	r3, #0
 800a8dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8de:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a8e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a8e4:	9300      	str	r3, [sp, #0]
 800a8e6:	9307      	str	r3, [sp, #28]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	2312      	movs	r3, #18
 800a8ec:	e7d0      	b.n	800a890 <_dtoa_r+0x238>
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a8f2:	e7f5      	b.n	800a8e0 <_dtoa_r+0x288>
 800a8f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a8f6:	9300      	str	r3, [sp, #0]
 800a8f8:	9307      	str	r3, [sp, #28]
 800a8fa:	e7d7      	b.n	800a8ac <_dtoa_r+0x254>
 800a8fc:	3101      	adds	r1, #1
 800a8fe:	0052      	lsls	r2, r2, #1
 800a900:	e7d8      	b.n	800a8b4 <_dtoa_r+0x25c>
 800a902:	bf00      	nop
 800a904:	f3af 8000 	nop.w
 800a908:	636f4361 	.word	0x636f4361
 800a90c:	3fd287a7 	.word	0x3fd287a7
 800a910:	8b60c8b3 	.word	0x8b60c8b3
 800a914:	3fc68a28 	.word	0x3fc68a28
 800a918:	509f79fb 	.word	0x509f79fb
 800a91c:	3fd34413 	.word	0x3fd34413
 800a920:	0800ddce 	.word	0x0800ddce
 800a924:	0800dde5 	.word	0x0800dde5
 800a928:	7ff00000 	.word	0x7ff00000
 800a92c:	0800dc39 	.word	0x0800dc39
 800a930:	3ff80000 	.word	0x3ff80000
 800a934:	0800df50 	.word	0x0800df50
 800a938:	0800de3d 	.word	0x0800de3d
 800a93c:	0800ddca 	.word	0x0800ddca
 800a940:	0800dc38 	.word	0x0800dc38
 800a944:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a948:	6018      	str	r0, [r3, #0]
 800a94a:	9b07      	ldr	r3, [sp, #28]
 800a94c:	2b0e      	cmp	r3, #14
 800a94e:	f200 80a4 	bhi.w	800aa9a <_dtoa_r+0x442>
 800a952:	2c00      	cmp	r4, #0
 800a954:	f000 80a1 	beq.w	800aa9a <_dtoa_r+0x442>
 800a958:	2f00      	cmp	r7, #0
 800a95a:	dd33      	ble.n	800a9c4 <_dtoa_r+0x36c>
 800a95c:	4bad      	ldr	r3, [pc, #692]	@ (800ac14 <_dtoa_r+0x5bc>)
 800a95e:	f007 020f 	and.w	r2, r7, #15
 800a962:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a966:	ed93 7b00 	vldr	d7, [r3]
 800a96a:	05f8      	lsls	r0, r7, #23
 800a96c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a970:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a974:	d516      	bpl.n	800a9a4 <_dtoa_r+0x34c>
 800a976:	4ba8      	ldr	r3, [pc, #672]	@ (800ac18 <_dtoa_r+0x5c0>)
 800a978:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a97c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a980:	f7f5 ff7c 	bl	800087c <__aeabi_ddiv>
 800a984:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a988:	f004 040f 	and.w	r4, r4, #15
 800a98c:	2603      	movs	r6, #3
 800a98e:	4da2      	ldr	r5, [pc, #648]	@ (800ac18 <_dtoa_r+0x5c0>)
 800a990:	b954      	cbnz	r4, 800a9a8 <_dtoa_r+0x350>
 800a992:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a996:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a99a:	f7f5 ff6f 	bl	800087c <__aeabi_ddiv>
 800a99e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9a2:	e028      	b.n	800a9f6 <_dtoa_r+0x39e>
 800a9a4:	2602      	movs	r6, #2
 800a9a6:	e7f2      	b.n	800a98e <_dtoa_r+0x336>
 800a9a8:	07e1      	lsls	r1, r4, #31
 800a9aa:	d508      	bpl.n	800a9be <_dtoa_r+0x366>
 800a9ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a9b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a9b4:	f7f5 fe38 	bl	8000628 <__aeabi_dmul>
 800a9b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a9bc:	3601      	adds	r6, #1
 800a9be:	1064      	asrs	r4, r4, #1
 800a9c0:	3508      	adds	r5, #8
 800a9c2:	e7e5      	b.n	800a990 <_dtoa_r+0x338>
 800a9c4:	f000 80d2 	beq.w	800ab6c <_dtoa_r+0x514>
 800a9c8:	427c      	negs	r4, r7
 800a9ca:	4b92      	ldr	r3, [pc, #584]	@ (800ac14 <_dtoa_r+0x5bc>)
 800a9cc:	4d92      	ldr	r5, [pc, #584]	@ (800ac18 <_dtoa_r+0x5c0>)
 800a9ce:	f004 020f 	and.w	r2, r4, #15
 800a9d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a9de:	f7f5 fe23 	bl	8000628 <__aeabi_dmul>
 800a9e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9e6:	1124      	asrs	r4, r4, #4
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	2602      	movs	r6, #2
 800a9ec:	2c00      	cmp	r4, #0
 800a9ee:	f040 80b2 	bne.w	800ab56 <_dtoa_r+0x4fe>
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d1d3      	bne.n	800a99e <_dtoa_r+0x346>
 800a9f6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a9f8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	f000 80b7 	beq.w	800ab70 <_dtoa_r+0x518>
 800aa02:	4b86      	ldr	r3, [pc, #536]	@ (800ac1c <_dtoa_r+0x5c4>)
 800aa04:	2200      	movs	r2, #0
 800aa06:	4620      	mov	r0, r4
 800aa08:	4629      	mov	r1, r5
 800aa0a:	f7f6 f87f 	bl	8000b0c <__aeabi_dcmplt>
 800aa0e:	2800      	cmp	r0, #0
 800aa10:	f000 80ae 	beq.w	800ab70 <_dtoa_r+0x518>
 800aa14:	9b07      	ldr	r3, [sp, #28]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	f000 80aa 	beq.w	800ab70 <_dtoa_r+0x518>
 800aa1c:	9b00      	ldr	r3, [sp, #0]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	dd37      	ble.n	800aa92 <_dtoa_r+0x43a>
 800aa22:	1e7b      	subs	r3, r7, #1
 800aa24:	9304      	str	r3, [sp, #16]
 800aa26:	4620      	mov	r0, r4
 800aa28:	4b7d      	ldr	r3, [pc, #500]	@ (800ac20 <_dtoa_r+0x5c8>)
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	4629      	mov	r1, r5
 800aa2e:	f7f5 fdfb 	bl	8000628 <__aeabi_dmul>
 800aa32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa36:	9c00      	ldr	r4, [sp, #0]
 800aa38:	3601      	adds	r6, #1
 800aa3a:	4630      	mov	r0, r6
 800aa3c:	f7f5 fd8a 	bl	8000554 <__aeabi_i2d>
 800aa40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aa44:	f7f5 fdf0 	bl	8000628 <__aeabi_dmul>
 800aa48:	4b76      	ldr	r3, [pc, #472]	@ (800ac24 <_dtoa_r+0x5cc>)
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	f7f5 fc36 	bl	80002bc <__adddf3>
 800aa50:	4605      	mov	r5, r0
 800aa52:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800aa56:	2c00      	cmp	r4, #0
 800aa58:	f040 808d 	bne.w	800ab76 <_dtoa_r+0x51e>
 800aa5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa60:	4b71      	ldr	r3, [pc, #452]	@ (800ac28 <_dtoa_r+0x5d0>)
 800aa62:	2200      	movs	r2, #0
 800aa64:	f7f5 fc28 	bl	80002b8 <__aeabi_dsub>
 800aa68:	4602      	mov	r2, r0
 800aa6a:	460b      	mov	r3, r1
 800aa6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aa70:	462a      	mov	r2, r5
 800aa72:	4633      	mov	r3, r6
 800aa74:	f7f6 f868 	bl	8000b48 <__aeabi_dcmpgt>
 800aa78:	2800      	cmp	r0, #0
 800aa7a:	f040 828b 	bne.w	800af94 <_dtoa_r+0x93c>
 800aa7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa82:	462a      	mov	r2, r5
 800aa84:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800aa88:	f7f6 f840 	bl	8000b0c <__aeabi_dcmplt>
 800aa8c:	2800      	cmp	r0, #0
 800aa8e:	f040 8128 	bne.w	800ace2 <_dtoa_r+0x68a>
 800aa92:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800aa96:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800aa9a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	f2c0 815a 	blt.w	800ad56 <_dtoa_r+0x6fe>
 800aaa2:	2f0e      	cmp	r7, #14
 800aaa4:	f300 8157 	bgt.w	800ad56 <_dtoa_r+0x6fe>
 800aaa8:	4b5a      	ldr	r3, [pc, #360]	@ (800ac14 <_dtoa_r+0x5bc>)
 800aaaa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800aaae:	ed93 7b00 	vldr	d7, [r3]
 800aab2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	ed8d 7b00 	vstr	d7, [sp]
 800aaba:	da03      	bge.n	800aac4 <_dtoa_r+0x46c>
 800aabc:	9b07      	ldr	r3, [sp, #28]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	f340 8101 	ble.w	800acc6 <_dtoa_r+0x66e>
 800aac4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800aac8:	4656      	mov	r6, sl
 800aaca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aace:	4620      	mov	r0, r4
 800aad0:	4629      	mov	r1, r5
 800aad2:	f7f5 fed3 	bl	800087c <__aeabi_ddiv>
 800aad6:	f7f6 f857 	bl	8000b88 <__aeabi_d2iz>
 800aada:	4680      	mov	r8, r0
 800aadc:	f7f5 fd3a 	bl	8000554 <__aeabi_i2d>
 800aae0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aae4:	f7f5 fda0 	bl	8000628 <__aeabi_dmul>
 800aae8:	4602      	mov	r2, r0
 800aaea:	460b      	mov	r3, r1
 800aaec:	4620      	mov	r0, r4
 800aaee:	4629      	mov	r1, r5
 800aaf0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800aaf4:	f7f5 fbe0 	bl	80002b8 <__aeabi_dsub>
 800aaf8:	f806 4b01 	strb.w	r4, [r6], #1
 800aafc:	9d07      	ldr	r5, [sp, #28]
 800aafe:	eba6 040a 	sub.w	r4, r6, sl
 800ab02:	42a5      	cmp	r5, r4
 800ab04:	4602      	mov	r2, r0
 800ab06:	460b      	mov	r3, r1
 800ab08:	f040 8117 	bne.w	800ad3a <_dtoa_r+0x6e2>
 800ab0c:	f7f5 fbd6 	bl	80002bc <__adddf3>
 800ab10:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab14:	4604      	mov	r4, r0
 800ab16:	460d      	mov	r5, r1
 800ab18:	f7f6 f816 	bl	8000b48 <__aeabi_dcmpgt>
 800ab1c:	2800      	cmp	r0, #0
 800ab1e:	f040 80f9 	bne.w	800ad14 <_dtoa_r+0x6bc>
 800ab22:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab26:	4620      	mov	r0, r4
 800ab28:	4629      	mov	r1, r5
 800ab2a:	f7f5 ffe5 	bl	8000af8 <__aeabi_dcmpeq>
 800ab2e:	b118      	cbz	r0, 800ab38 <_dtoa_r+0x4e0>
 800ab30:	f018 0f01 	tst.w	r8, #1
 800ab34:	f040 80ee 	bne.w	800ad14 <_dtoa_r+0x6bc>
 800ab38:	4649      	mov	r1, r9
 800ab3a:	4658      	mov	r0, fp
 800ab3c:	f001 fad6 	bl	800c0ec <_Bfree>
 800ab40:	2300      	movs	r3, #0
 800ab42:	7033      	strb	r3, [r6, #0]
 800ab44:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ab46:	3701      	adds	r7, #1
 800ab48:	601f      	str	r7, [r3, #0]
 800ab4a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	f000 831d 	beq.w	800b18c <_dtoa_r+0xb34>
 800ab52:	601e      	str	r6, [r3, #0]
 800ab54:	e31a      	b.n	800b18c <_dtoa_r+0xb34>
 800ab56:	07e2      	lsls	r2, r4, #31
 800ab58:	d505      	bpl.n	800ab66 <_dtoa_r+0x50e>
 800ab5a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ab5e:	f7f5 fd63 	bl	8000628 <__aeabi_dmul>
 800ab62:	3601      	adds	r6, #1
 800ab64:	2301      	movs	r3, #1
 800ab66:	1064      	asrs	r4, r4, #1
 800ab68:	3508      	adds	r5, #8
 800ab6a:	e73f      	b.n	800a9ec <_dtoa_r+0x394>
 800ab6c:	2602      	movs	r6, #2
 800ab6e:	e742      	b.n	800a9f6 <_dtoa_r+0x39e>
 800ab70:	9c07      	ldr	r4, [sp, #28]
 800ab72:	9704      	str	r7, [sp, #16]
 800ab74:	e761      	b.n	800aa3a <_dtoa_r+0x3e2>
 800ab76:	4b27      	ldr	r3, [pc, #156]	@ (800ac14 <_dtoa_r+0x5bc>)
 800ab78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ab7a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ab7e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ab82:	4454      	add	r4, sl
 800ab84:	2900      	cmp	r1, #0
 800ab86:	d053      	beq.n	800ac30 <_dtoa_r+0x5d8>
 800ab88:	4928      	ldr	r1, [pc, #160]	@ (800ac2c <_dtoa_r+0x5d4>)
 800ab8a:	2000      	movs	r0, #0
 800ab8c:	f7f5 fe76 	bl	800087c <__aeabi_ddiv>
 800ab90:	4633      	mov	r3, r6
 800ab92:	462a      	mov	r2, r5
 800ab94:	f7f5 fb90 	bl	80002b8 <__aeabi_dsub>
 800ab98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ab9c:	4656      	mov	r6, sl
 800ab9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aba2:	f7f5 fff1 	bl	8000b88 <__aeabi_d2iz>
 800aba6:	4605      	mov	r5, r0
 800aba8:	f7f5 fcd4 	bl	8000554 <__aeabi_i2d>
 800abac:	4602      	mov	r2, r0
 800abae:	460b      	mov	r3, r1
 800abb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abb4:	f7f5 fb80 	bl	80002b8 <__aeabi_dsub>
 800abb8:	3530      	adds	r5, #48	@ 0x30
 800abba:	4602      	mov	r2, r0
 800abbc:	460b      	mov	r3, r1
 800abbe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800abc2:	f806 5b01 	strb.w	r5, [r6], #1
 800abc6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800abca:	f7f5 ff9f 	bl	8000b0c <__aeabi_dcmplt>
 800abce:	2800      	cmp	r0, #0
 800abd0:	d171      	bne.n	800acb6 <_dtoa_r+0x65e>
 800abd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800abd6:	4911      	ldr	r1, [pc, #68]	@ (800ac1c <_dtoa_r+0x5c4>)
 800abd8:	2000      	movs	r0, #0
 800abda:	f7f5 fb6d 	bl	80002b8 <__aeabi_dsub>
 800abde:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800abe2:	f7f5 ff93 	bl	8000b0c <__aeabi_dcmplt>
 800abe6:	2800      	cmp	r0, #0
 800abe8:	f040 8095 	bne.w	800ad16 <_dtoa_r+0x6be>
 800abec:	42a6      	cmp	r6, r4
 800abee:	f43f af50 	beq.w	800aa92 <_dtoa_r+0x43a>
 800abf2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800abf6:	4b0a      	ldr	r3, [pc, #40]	@ (800ac20 <_dtoa_r+0x5c8>)
 800abf8:	2200      	movs	r2, #0
 800abfa:	f7f5 fd15 	bl	8000628 <__aeabi_dmul>
 800abfe:	4b08      	ldr	r3, [pc, #32]	@ (800ac20 <_dtoa_r+0x5c8>)
 800ac00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ac04:	2200      	movs	r2, #0
 800ac06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac0a:	f7f5 fd0d 	bl	8000628 <__aeabi_dmul>
 800ac0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac12:	e7c4      	b.n	800ab9e <_dtoa_r+0x546>
 800ac14:	0800df50 	.word	0x0800df50
 800ac18:	0800df28 	.word	0x0800df28
 800ac1c:	3ff00000 	.word	0x3ff00000
 800ac20:	40240000 	.word	0x40240000
 800ac24:	401c0000 	.word	0x401c0000
 800ac28:	40140000 	.word	0x40140000
 800ac2c:	3fe00000 	.word	0x3fe00000
 800ac30:	4631      	mov	r1, r6
 800ac32:	4628      	mov	r0, r5
 800ac34:	f7f5 fcf8 	bl	8000628 <__aeabi_dmul>
 800ac38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ac3c:	9415      	str	r4, [sp, #84]	@ 0x54
 800ac3e:	4656      	mov	r6, sl
 800ac40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac44:	f7f5 ffa0 	bl	8000b88 <__aeabi_d2iz>
 800ac48:	4605      	mov	r5, r0
 800ac4a:	f7f5 fc83 	bl	8000554 <__aeabi_i2d>
 800ac4e:	4602      	mov	r2, r0
 800ac50:	460b      	mov	r3, r1
 800ac52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac56:	f7f5 fb2f 	bl	80002b8 <__aeabi_dsub>
 800ac5a:	3530      	adds	r5, #48	@ 0x30
 800ac5c:	f806 5b01 	strb.w	r5, [r6], #1
 800ac60:	4602      	mov	r2, r0
 800ac62:	460b      	mov	r3, r1
 800ac64:	42a6      	cmp	r6, r4
 800ac66:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ac6a:	f04f 0200 	mov.w	r2, #0
 800ac6e:	d124      	bne.n	800acba <_dtoa_r+0x662>
 800ac70:	4bac      	ldr	r3, [pc, #688]	@ (800af24 <_dtoa_r+0x8cc>)
 800ac72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ac76:	f7f5 fb21 	bl	80002bc <__adddf3>
 800ac7a:	4602      	mov	r2, r0
 800ac7c:	460b      	mov	r3, r1
 800ac7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac82:	f7f5 ff61 	bl	8000b48 <__aeabi_dcmpgt>
 800ac86:	2800      	cmp	r0, #0
 800ac88:	d145      	bne.n	800ad16 <_dtoa_r+0x6be>
 800ac8a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ac8e:	49a5      	ldr	r1, [pc, #660]	@ (800af24 <_dtoa_r+0x8cc>)
 800ac90:	2000      	movs	r0, #0
 800ac92:	f7f5 fb11 	bl	80002b8 <__aeabi_dsub>
 800ac96:	4602      	mov	r2, r0
 800ac98:	460b      	mov	r3, r1
 800ac9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac9e:	f7f5 ff35 	bl	8000b0c <__aeabi_dcmplt>
 800aca2:	2800      	cmp	r0, #0
 800aca4:	f43f aef5 	beq.w	800aa92 <_dtoa_r+0x43a>
 800aca8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800acaa:	1e73      	subs	r3, r6, #1
 800acac:	9315      	str	r3, [sp, #84]	@ 0x54
 800acae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800acb2:	2b30      	cmp	r3, #48	@ 0x30
 800acb4:	d0f8      	beq.n	800aca8 <_dtoa_r+0x650>
 800acb6:	9f04      	ldr	r7, [sp, #16]
 800acb8:	e73e      	b.n	800ab38 <_dtoa_r+0x4e0>
 800acba:	4b9b      	ldr	r3, [pc, #620]	@ (800af28 <_dtoa_r+0x8d0>)
 800acbc:	f7f5 fcb4 	bl	8000628 <__aeabi_dmul>
 800acc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800acc4:	e7bc      	b.n	800ac40 <_dtoa_r+0x5e8>
 800acc6:	d10c      	bne.n	800ace2 <_dtoa_r+0x68a>
 800acc8:	4b98      	ldr	r3, [pc, #608]	@ (800af2c <_dtoa_r+0x8d4>)
 800acca:	2200      	movs	r2, #0
 800accc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800acd0:	f7f5 fcaa 	bl	8000628 <__aeabi_dmul>
 800acd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800acd8:	f7f5 ff2c 	bl	8000b34 <__aeabi_dcmpge>
 800acdc:	2800      	cmp	r0, #0
 800acde:	f000 8157 	beq.w	800af90 <_dtoa_r+0x938>
 800ace2:	2400      	movs	r4, #0
 800ace4:	4625      	mov	r5, r4
 800ace6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ace8:	43db      	mvns	r3, r3
 800acea:	9304      	str	r3, [sp, #16]
 800acec:	4656      	mov	r6, sl
 800acee:	2700      	movs	r7, #0
 800acf0:	4621      	mov	r1, r4
 800acf2:	4658      	mov	r0, fp
 800acf4:	f001 f9fa 	bl	800c0ec <_Bfree>
 800acf8:	2d00      	cmp	r5, #0
 800acfa:	d0dc      	beq.n	800acb6 <_dtoa_r+0x65e>
 800acfc:	b12f      	cbz	r7, 800ad0a <_dtoa_r+0x6b2>
 800acfe:	42af      	cmp	r7, r5
 800ad00:	d003      	beq.n	800ad0a <_dtoa_r+0x6b2>
 800ad02:	4639      	mov	r1, r7
 800ad04:	4658      	mov	r0, fp
 800ad06:	f001 f9f1 	bl	800c0ec <_Bfree>
 800ad0a:	4629      	mov	r1, r5
 800ad0c:	4658      	mov	r0, fp
 800ad0e:	f001 f9ed 	bl	800c0ec <_Bfree>
 800ad12:	e7d0      	b.n	800acb6 <_dtoa_r+0x65e>
 800ad14:	9704      	str	r7, [sp, #16]
 800ad16:	4633      	mov	r3, r6
 800ad18:	461e      	mov	r6, r3
 800ad1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad1e:	2a39      	cmp	r2, #57	@ 0x39
 800ad20:	d107      	bne.n	800ad32 <_dtoa_r+0x6da>
 800ad22:	459a      	cmp	sl, r3
 800ad24:	d1f8      	bne.n	800ad18 <_dtoa_r+0x6c0>
 800ad26:	9a04      	ldr	r2, [sp, #16]
 800ad28:	3201      	adds	r2, #1
 800ad2a:	9204      	str	r2, [sp, #16]
 800ad2c:	2230      	movs	r2, #48	@ 0x30
 800ad2e:	f88a 2000 	strb.w	r2, [sl]
 800ad32:	781a      	ldrb	r2, [r3, #0]
 800ad34:	3201      	adds	r2, #1
 800ad36:	701a      	strb	r2, [r3, #0]
 800ad38:	e7bd      	b.n	800acb6 <_dtoa_r+0x65e>
 800ad3a:	4b7b      	ldr	r3, [pc, #492]	@ (800af28 <_dtoa_r+0x8d0>)
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	f7f5 fc73 	bl	8000628 <__aeabi_dmul>
 800ad42:	2200      	movs	r2, #0
 800ad44:	2300      	movs	r3, #0
 800ad46:	4604      	mov	r4, r0
 800ad48:	460d      	mov	r5, r1
 800ad4a:	f7f5 fed5 	bl	8000af8 <__aeabi_dcmpeq>
 800ad4e:	2800      	cmp	r0, #0
 800ad50:	f43f aebb 	beq.w	800aaca <_dtoa_r+0x472>
 800ad54:	e6f0      	b.n	800ab38 <_dtoa_r+0x4e0>
 800ad56:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ad58:	2a00      	cmp	r2, #0
 800ad5a:	f000 80db 	beq.w	800af14 <_dtoa_r+0x8bc>
 800ad5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad60:	2a01      	cmp	r2, #1
 800ad62:	f300 80bf 	bgt.w	800aee4 <_dtoa_r+0x88c>
 800ad66:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ad68:	2a00      	cmp	r2, #0
 800ad6a:	f000 80b7 	beq.w	800aedc <_dtoa_r+0x884>
 800ad6e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ad72:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ad74:	4646      	mov	r6, r8
 800ad76:	9a08      	ldr	r2, [sp, #32]
 800ad78:	2101      	movs	r1, #1
 800ad7a:	441a      	add	r2, r3
 800ad7c:	4658      	mov	r0, fp
 800ad7e:	4498      	add	r8, r3
 800ad80:	9208      	str	r2, [sp, #32]
 800ad82:	f001 fab1 	bl	800c2e8 <__i2b>
 800ad86:	4605      	mov	r5, r0
 800ad88:	b15e      	cbz	r6, 800ada2 <_dtoa_r+0x74a>
 800ad8a:	9b08      	ldr	r3, [sp, #32]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	dd08      	ble.n	800ada2 <_dtoa_r+0x74a>
 800ad90:	42b3      	cmp	r3, r6
 800ad92:	9a08      	ldr	r2, [sp, #32]
 800ad94:	bfa8      	it	ge
 800ad96:	4633      	movge	r3, r6
 800ad98:	eba8 0803 	sub.w	r8, r8, r3
 800ad9c:	1af6      	subs	r6, r6, r3
 800ad9e:	1ad3      	subs	r3, r2, r3
 800ada0:	9308      	str	r3, [sp, #32]
 800ada2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ada4:	b1f3      	cbz	r3, 800ade4 <_dtoa_r+0x78c>
 800ada6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	f000 80b7 	beq.w	800af1c <_dtoa_r+0x8c4>
 800adae:	b18c      	cbz	r4, 800add4 <_dtoa_r+0x77c>
 800adb0:	4629      	mov	r1, r5
 800adb2:	4622      	mov	r2, r4
 800adb4:	4658      	mov	r0, fp
 800adb6:	f001 fb57 	bl	800c468 <__pow5mult>
 800adba:	464a      	mov	r2, r9
 800adbc:	4601      	mov	r1, r0
 800adbe:	4605      	mov	r5, r0
 800adc0:	4658      	mov	r0, fp
 800adc2:	f001 faa7 	bl	800c314 <__multiply>
 800adc6:	4649      	mov	r1, r9
 800adc8:	9004      	str	r0, [sp, #16]
 800adca:	4658      	mov	r0, fp
 800adcc:	f001 f98e 	bl	800c0ec <_Bfree>
 800add0:	9b04      	ldr	r3, [sp, #16]
 800add2:	4699      	mov	r9, r3
 800add4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800add6:	1b1a      	subs	r2, r3, r4
 800add8:	d004      	beq.n	800ade4 <_dtoa_r+0x78c>
 800adda:	4649      	mov	r1, r9
 800addc:	4658      	mov	r0, fp
 800adde:	f001 fb43 	bl	800c468 <__pow5mult>
 800ade2:	4681      	mov	r9, r0
 800ade4:	2101      	movs	r1, #1
 800ade6:	4658      	mov	r0, fp
 800ade8:	f001 fa7e 	bl	800c2e8 <__i2b>
 800adec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800adee:	4604      	mov	r4, r0
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	f000 81cf 	beq.w	800b194 <_dtoa_r+0xb3c>
 800adf6:	461a      	mov	r2, r3
 800adf8:	4601      	mov	r1, r0
 800adfa:	4658      	mov	r0, fp
 800adfc:	f001 fb34 	bl	800c468 <__pow5mult>
 800ae00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae02:	2b01      	cmp	r3, #1
 800ae04:	4604      	mov	r4, r0
 800ae06:	f300 8095 	bgt.w	800af34 <_dtoa_r+0x8dc>
 800ae0a:	9b02      	ldr	r3, [sp, #8]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	f040 8087 	bne.w	800af20 <_dtoa_r+0x8c8>
 800ae12:	9b03      	ldr	r3, [sp, #12]
 800ae14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	f040 8089 	bne.w	800af30 <_dtoa_r+0x8d8>
 800ae1e:	9b03      	ldr	r3, [sp, #12]
 800ae20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ae24:	0d1b      	lsrs	r3, r3, #20
 800ae26:	051b      	lsls	r3, r3, #20
 800ae28:	b12b      	cbz	r3, 800ae36 <_dtoa_r+0x7de>
 800ae2a:	9b08      	ldr	r3, [sp, #32]
 800ae2c:	3301      	adds	r3, #1
 800ae2e:	9308      	str	r3, [sp, #32]
 800ae30:	f108 0801 	add.w	r8, r8, #1
 800ae34:	2301      	movs	r3, #1
 800ae36:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	f000 81b0 	beq.w	800b1a0 <_dtoa_r+0xb48>
 800ae40:	6923      	ldr	r3, [r4, #16]
 800ae42:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ae46:	6918      	ldr	r0, [r3, #16]
 800ae48:	f001 fa02 	bl	800c250 <__hi0bits>
 800ae4c:	f1c0 0020 	rsb	r0, r0, #32
 800ae50:	9b08      	ldr	r3, [sp, #32]
 800ae52:	4418      	add	r0, r3
 800ae54:	f010 001f 	ands.w	r0, r0, #31
 800ae58:	d077      	beq.n	800af4a <_dtoa_r+0x8f2>
 800ae5a:	f1c0 0320 	rsb	r3, r0, #32
 800ae5e:	2b04      	cmp	r3, #4
 800ae60:	dd6b      	ble.n	800af3a <_dtoa_r+0x8e2>
 800ae62:	9b08      	ldr	r3, [sp, #32]
 800ae64:	f1c0 001c 	rsb	r0, r0, #28
 800ae68:	4403      	add	r3, r0
 800ae6a:	4480      	add	r8, r0
 800ae6c:	4406      	add	r6, r0
 800ae6e:	9308      	str	r3, [sp, #32]
 800ae70:	f1b8 0f00 	cmp.w	r8, #0
 800ae74:	dd05      	ble.n	800ae82 <_dtoa_r+0x82a>
 800ae76:	4649      	mov	r1, r9
 800ae78:	4642      	mov	r2, r8
 800ae7a:	4658      	mov	r0, fp
 800ae7c:	f001 fb4e 	bl	800c51c <__lshift>
 800ae80:	4681      	mov	r9, r0
 800ae82:	9b08      	ldr	r3, [sp, #32]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	dd05      	ble.n	800ae94 <_dtoa_r+0x83c>
 800ae88:	4621      	mov	r1, r4
 800ae8a:	461a      	mov	r2, r3
 800ae8c:	4658      	mov	r0, fp
 800ae8e:	f001 fb45 	bl	800c51c <__lshift>
 800ae92:	4604      	mov	r4, r0
 800ae94:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d059      	beq.n	800af4e <_dtoa_r+0x8f6>
 800ae9a:	4621      	mov	r1, r4
 800ae9c:	4648      	mov	r0, r9
 800ae9e:	f001 fba9 	bl	800c5f4 <__mcmp>
 800aea2:	2800      	cmp	r0, #0
 800aea4:	da53      	bge.n	800af4e <_dtoa_r+0x8f6>
 800aea6:	1e7b      	subs	r3, r7, #1
 800aea8:	9304      	str	r3, [sp, #16]
 800aeaa:	4649      	mov	r1, r9
 800aeac:	2300      	movs	r3, #0
 800aeae:	220a      	movs	r2, #10
 800aeb0:	4658      	mov	r0, fp
 800aeb2:	f001 f93d 	bl	800c130 <__multadd>
 800aeb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aeb8:	4681      	mov	r9, r0
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	f000 8172 	beq.w	800b1a4 <_dtoa_r+0xb4c>
 800aec0:	2300      	movs	r3, #0
 800aec2:	4629      	mov	r1, r5
 800aec4:	220a      	movs	r2, #10
 800aec6:	4658      	mov	r0, fp
 800aec8:	f001 f932 	bl	800c130 <__multadd>
 800aecc:	9b00      	ldr	r3, [sp, #0]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	4605      	mov	r5, r0
 800aed2:	dc67      	bgt.n	800afa4 <_dtoa_r+0x94c>
 800aed4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aed6:	2b02      	cmp	r3, #2
 800aed8:	dc41      	bgt.n	800af5e <_dtoa_r+0x906>
 800aeda:	e063      	b.n	800afa4 <_dtoa_r+0x94c>
 800aedc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800aede:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800aee2:	e746      	b.n	800ad72 <_dtoa_r+0x71a>
 800aee4:	9b07      	ldr	r3, [sp, #28]
 800aee6:	1e5c      	subs	r4, r3, #1
 800aee8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aeea:	42a3      	cmp	r3, r4
 800aeec:	bfbf      	itttt	lt
 800aeee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800aef0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800aef2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800aef4:	1ae3      	sublt	r3, r4, r3
 800aef6:	bfb4      	ite	lt
 800aef8:	18d2      	addlt	r2, r2, r3
 800aefa:	1b1c      	subge	r4, r3, r4
 800aefc:	9b07      	ldr	r3, [sp, #28]
 800aefe:	bfbc      	itt	lt
 800af00:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800af02:	2400      	movlt	r4, #0
 800af04:	2b00      	cmp	r3, #0
 800af06:	bfb5      	itete	lt
 800af08:	eba8 0603 	sublt.w	r6, r8, r3
 800af0c:	9b07      	ldrge	r3, [sp, #28]
 800af0e:	2300      	movlt	r3, #0
 800af10:	4646      	movge	r6, r8
 800af12:	e730      	b.n	800ad76 <_dtoa_r+0x71e>
 800af14:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800af16:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800af18:	4646      	mov	r6, r8
 800af1a:	e735      	b.n	800ad88 <_dtoa_r+0x730>
 800af1c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800af1e:	e75c      	b.n	800adda <_dtoa_r+0x782>
 800af20:	2300      	movs	r3, #0
 800af22:	e788      	b.n	800ae36 <_dtoa_r+0x7de>
 800af24:	3fe00000 	.word	0x3fe00000
 800af28:	40240000 	.word	0x40240000
 800af2c:	40140000 	.word	0x40140000
 800af30:	9b02      	ldr	r3, [sp, #8]
 800af32:	e780      	b.n	800ae36 <_dtoa_r+0x7de>
 800af34:	2300      	movs	r3, #0
 800af36:	930a      	str	r3, [sp, #40]	@ 0x28
 800af38:	e782      	b.n	800ae40 <_dtoa_r+0x7e8>
 800af3a:	d099      	beq.n	800ae70 <_dtoa_r+0x818>
 800af3c:	9a08      	ldr	r2, [sp, #32]
 800af3e:	331c      	adds	r3, #28
 800af40:	441a      	add	r2, r3
 800af42:	4498      	add	r8, r3
 800af44:	441e      	add	r6, r3
 800af46:	9208      	str	r2, [sp, #32]
 800af48:	e792      	b.n	800ae70 <_dtoa_r+0x818>
 800af4a:	4603      	mov	r3, r0
 800af4c:	e7f6      	b.n	800af3c <_dtoa_r+0x8e4>
 800af4e:	9b07      	ldr	r3, [sp, #28]
 800af50:	9704      	str	r7, [sp, #16]
 800af52:	2b00      	cmp	r3, #0
 800af54:	dc20      	bgt.n	800af98 <_dtoa_r+0x940>
 800af56:	9300      	str	r3, [sp, #0]
 800af58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af5a:	2b02      	cmp	r3, #2
 800af5c:	dd1e      	ble.n	800af9c <_dtoa_r+0x944>
 800af5e:	9b00      	ldr	r3, [sp, #0]
 800af60:	2b00      	cmp	r3, #0
 800af62:	f47f aec0 	bne.w	800ace6 <_dtoa_r+0x68e>
 800af66:	4621      	mov	r1, r4
 800af68:	2205      	movs	r2, #5
 800af6a:	4658      	mov	r0, fp
 800af6c:	f001 f8e0 	bl	800c130 <__multadd>
 800af70:	4601      	mov	r1, r0
 800af72:	4604      	mov	r4, r0
 800af74:	4648      	mov	r0, r9
 800af76:	f001 fb3d 	bl	800c5f4 <__mcmp>
 800af7a:	2800      	cmp	r0, #0
 800af7c:	f77f aeb3 	ble.w	800ace6 <_dtoa_r+0x68e>
 800af80:	4656      	mov	r6, sl
 800af82:	2331      	movs	r3, #49	@ 0x31
 800af84:	f806 3b01 	strb.w	r3, [r6], #1
 800af88:	9b04      	ldr	r3, [sp, #16]
 800af8a:	3301      	adds	r3, #1
 800af8c:	9304      	str	r3, [sp, #16]
 800af8e:	e6ae      	b.n	800acee <_dtoa_r+0x696>
 800af90:	9c07      	ldr	r4, [sp, #28]
 800af92:	9704      	str	r7, [sp, #16]
 800af94:	4625      	mov	r5, r4
 800af96:	e7f3      	b.n	800af80 <_dtoa_r+0x928>
 800af98:	9b07      	ldr	r3, [sp, #28]
 800af9a:	9300      	str	r3, [sp, #0]
 800af9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	f000 8104 	beq.w	800b1ac <_dtoa_r+0xb54>
 800afa4:	2e00      	cmp	r6, #0
 800afa6:	dd05      	ble.n	800afb4 <_dtoa_r+0x95c>
 800afa8:	4629      	mov	r1, r5
 800afaa:	4632      	mov	r2, r6
 800afac:	4658      	mov	r0, fp
 800afae:	f001 fab5 	bl	800c51c <__lshift>
 800afb2:	4605      	mov	r5, r0
 800afb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d05a      	beq.n	800b070 <_dtoa_r+0xa18>
 800afba:	6869      	ldr	r1, [r5, #4]
 800afbc:	4658      	mov	r0, fp
 800afbe:	f001 f855 	bl	800c06c <_Balloc>
 800afc2:	4606      	mov	r6, r0
 800afc4:	b928      	cbnz	r0, 800afd2 <_dtoa_r+0x97a>
 800afc6:	4b84      	ldr	r3, [pc, #528]	@ (800b1d8 <_dtoa_r+0xb80>)
 800afc8:	4602      	mov	r2, r0
 800afca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800afce:	f7ff bb5a 	b.w	800a686 <_dtoa_r+0x2e>
 800afd2:	692a      	ldr	r2, [r5, #16]
 800afd4:	3202      	adds	r2, #2
 800afd6:	0092      	lsls	r2, r2, #2
 800afd8:	f105 010c 	add.w	r1, r5, #12
 800afdc:	300c      	adds	r0, #12
 800afde:	f7ff fa94 	bl	800a50a <memcpy>
 800afe2:	2201      	movs	r2, #1
 800afe4:	4631      	mov	r1, r6
 800afe6:	4658      	mov	r0, fp
 800afe8:	f001 fa98 	bl	800c51c <__lshift>
 800afec:	f10a 0301 	add.w	r3, sl, #1
 800aff0:	9307      	str	r3, [sp, #28]
 800aff2:	9b00      	ldr	r3, [sp, #0]
 800aff4:	4453      	add	r3, sl
 800aff6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aff8:	9b02      	ldr	r3, [sp, #8]
 800affa:	f003 0301 	and.w	r3, r3, #1
 800affe:	462f      	mov	r7, r5
 800b000:	930a      	str	r3, [sp, #40]	@ 0x28
 800b002:	4605      	mov	r5, r0
 800b004:	9b07      	ldr	r3, [sp, #28]
 800b006:	4621      	mov	r1, r4
 800b008:	3b01      	subs	r3, #1
 800b00a:	4648      	mov	r0, r9
 800b00c:	9300      	str	r3, [sp, #0]
 800b00e:	f7ff fa99 	bl	800a544 <quorem>
 800b012:	4639      	mov	r1, r7
 800b014:	9002      	str	r0, [sp, #8]
 800b016:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b01a:	4648      	mov	r0, r9
 800b01c:	f001 faea 	bl	800c5f4 <__mcmp>
 800b020:	462a      	mov	r2, r5
 800b022:	9008      	str	r0, [sp, #32]
 800b024:	4621      	mov	r1, r4
 800b026:	4658      	mov	r0, fp
 800b028:	f001 fb00 	bl	800c62c <__mdiff>
 800b02c:	68c2      	ldr	r2, [r0, #12]
 800b02e:	4606      	mov	r6, r0
 800b030:	bb02      	cbnz	r2, 800b074 <_dtoa_r+0xa1c>
 800b032:	4601      	mov	r1, r0
 800b034:	4648      	mov	r0, r9
 800b036:	f001 fadd 	bl	800c5f4 <__mcmp>
 800b03a:	4602      	mov	r2, r0
 800b03c:	4631      	mov	r1, r6
 800b03e:	4658      	mov	r0, fp
 800b040:	920e      	str	r2, [sp, #56]	@ 0x38
 800b042:	f001 f853 	bl	800c0ec <_Bfree>
 800b046:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b048:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b04a:	9e07      	ldr	r6, [sp, #28]
 800b04c:	ea43 0102 	orr.w	r1, r3, r2
 800b050:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b052:	4319      	orrs	r1, r3
 800b054:	d110      	bne.n	800b078 <_dtoa_r+0xa20>
 800b056:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b05a:	d029      	beq.n	800b0b0 <_dtoa_r+0xa58>
 800b05c:	9b08      	ldr	r3, [sp, #32]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	dd02      	ble.n	800b068 <_dtoa_r+0xa10>
 800b062:	9b02      	ldr	r3, [sp, #8]
 800b064:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b068:	9b00      	ldr	r3, [sp, #0]
 800b06a:	f883 8000 	strb.w	r8, [r3]
 800b06e:	e63f      	b.n	800acf0 <_dtoa_r+0x698>
 800b070:	4628      	mov	r0, r5
 800b072:	e7bb      	b.n	800afec <_dtoa_r+0x994>
 800b074:	2201      	movs	r2, #1
 800b076:	e7e1      	b.n	800b03c <_dtoa_r+0x9e4>
 800b078:	9b08      	ldr	r3, [sp, #32]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	db04      	blt.n	800b088 <_dtoa_r+0xa30>
 800b07e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b080:	430b      	orrs	r3, r1
 800b082:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b084:	430b      	orrs	r3, r1
 800b086:	d120      	bne.n	800b0ca <_dtoa_r+0xa72>
 800b088:	2a00      	cmp	r2, #0
 800b08a:	dded      	ble.n	800b068 <_dtoa_r+0xa10>
 800b08c:	4649      	mov	r1, r9
 800b08e:	2201      	movs	r2, #1
 800b090:	4658      	mov	r0, fp
 800b092:	f001 fa43 	bl	800c51c <__lshift>
 800b096:	4621      	mov	r1, r4
 800b098:	4681      	mov	r9, r0
 800b09a:	f001 faab 	bl	800c5f4 <__mcmp>
 800b09e:	2800      	cmp	r0, #0
 800b0a0:	dc03      	bgt.n	800b0aa <_dtoa_r+0xa52>
 800b0a2:	d1e1      	bne.n	800b068 <_dtoa_r+0xa10>
 800b0a4:	f018 0f01 	tst.w	r8, #1
 800b0a8:	d0de      	beq.n	800b068 <_dtoa_r+0xa10>
 800b0aa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b0ae:	d1d8      	bne.n	800b062 <_dtoa_r+0xa0a>
 800b0b0:	9a00      	ldr	r2, [sp, #0]
 800b0b2:	2339      	movs	r3, #57	@ 0x39
 800b0b4:	7013      	strb	r3, [r2, #0]
 800b0b6:	4633      	mov	r3, r6
 800b0b8:	461e      	mov	r6, r3
 800b0ba:	3b01      	subs	r3, #1
 800b0bc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b0c0:	2a39      	cmp	r2, #57	@ 0x39
 800b0c2:	d052      	beq.n	800b16a <_dtoa_r+0xb12>
 800b0c4:	3201      	adds	r2, #1
 800b0c6:	701a      	strb	r2, [r3, #0]
 800b0c8:	e612      	b.n	800acf0 <_dtoa_r+0x698>
 800b0ca:	2a00      	cmp	r2, #0
 800b0cc:	dd07      	ble.n	800b0de <_dtoa_r+0xa86>
 800b0ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b0d2:	d0ed      	beq.n	800b0b0 <_dtoa_r+0xa58>
 800b0d4:	9a00      	ldr	r2, [sp, #0]
 800b0d6:	f108 0301 	add.w	r3, r8, #1
 800b0da:	7013      	strb	r3, [r2, #0]
 800b0dc:	e608      	b.n	800acf0 <_dtoa_r+0x698>
 800b0de:	9b07      	ldr	r3, [sp, #28]
 800b0e0:	9a07      	ldr	r2, [sp, #28]
 800b0e2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b0e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b0e8:	4293      	cmp	r3, r2
 800b0ea:	d028      	beq.n	800b13e <_dtoa_r+0xae6>
 800b0ec:	4649      	mov	r1, r9
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	220a      	movs	r2, #10
 800b0f2:	4658      	mov	r0, fp
 800b0f4:	f001 f81c 	bl	800c130 <__multadd>
 800b0f8:	42af      	cmp	r7, r5
 800b0fa:	4681      	mov	r9, r0
 800b0fc:	f04f 0300 	mov.w	r3, #0
 800b100:	f04f 020a 	mov.w	r2, #10
 800b104:	4639      	mov	r1, r7
 800b106:	4658      	mov	r0, fp
 800b108:	d107      	bne.n	800b11a <_dtoa_r+0xac2>
 800b10a:	f001 f811 	bl	800c130 <__multadd>
 800b10e:	4607      	mov	r7, r0
 800b110:	4605      	mov	r5, r0
 800b112:	9b07      	ldr	r3, [sp, #28]
 800b114:	3301      	adds	r3, #1
 800b116:	9307      	str	r3, [sp, #28]
 800b118:	e774      	b.n	800b004 <_dtoa_r+0x9ac>
 800b11a:	f001 f809 	bl	800c130 <__multadd>
 800b11e:	4629      	mov	r1, r5
 800b120:	4607      	mov	r7, r0
 800b122:	2300      	movs	r3, #0
 800b124:	220a      	movs	r2, #10
 800b126:	4658      	mov	r0, fp
 800b128:	f001 f802 	bl	800c130 <__multadd>
 800b12c:	4605      	mov	r5, r0
 800b12e:	e7f0      	b.n	800b112 <_dtoa_r+0xaba>
 800b130:	9b00      	ldr	r3, [sp, #0]
 800b132:	2b00      	cmp	r3, #0
 800b134:	bfcc      	ite	gt
 800b136:	461e      	movgt	r6, r3
 800b138:	2601      	movle	r6, #1
 800b13a:	4456      	add	r6, sl
 800b13c:	2700      	movs	r7, #0
 800b13e:	4649      	mov	r1, r9
 800b140:	2201      	movs	r2, #1
 800b142:	4658      	mov	r0, fp
 800b144:	f001 f9ea 	bl	800c51c <__lshift>
 800b148:	4621      	mov	r1, r4
 800b14a:	4681      	mov	r9, r0
 800b14c:	f001 fa52 	bl	800c5f4 <__mcmp>
 800b150:	2800      	cmp	r0, #0
 800b152:	dcb0      	bgt.n	800b0b6 <_dtoa_r+0xa5e>
 800b154:	d102      	bne.n	800b15c <_dtoa_r+0xb04>
 800b156:	f018 0f01 	tst.w	r8, #1
 800b15a:	d1ac      	bne.n	800b0b6 <_dtoa_r+0xa5e>
 800b15c:	4633      	mov	r3, r6
 800b15e:	461e      	mov	r6, r3
 800b160:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b164:	2a30      	cmp	r2, #48	@ 0x30
 800b166:	d0fa      	beq.n	800b15e <_dtoa_r+0xb06>
 800b168:	e5c2      	b.n	800acf0 <_dtoa_r+0x698>
 800b16a:	459a      	cmp	sl, r3
 800b16c:	d1a4      	bne.n	800b0b8 <_dtoa_r+0xa60>
 800b16e:	9b04      	ldr	r3, [sp, #16]
 800b170:	3301      	adds	r3, #1
 800b172:	9304      	str	r3, [sp, #16]
 800b174:	2331      	movs	r3, #49	@ 0x31
 800b176:	f88a 3000 	strb.w	r3, [sl]
 800b17a:	e5b9      	b.n	800acf0 <_dtoa_r+0x698>
 800b17c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b17e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b1dc <_dtoa_r+0xb84>
 800b182:	b11b      	cbz	r3, 800b18c <_dtoa_r+0xb34>
 800b184:	f10a 0308 	add.w	r3, sl, #8
 800b188:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b18a:	6013      	str	r3, [r2, #0]
 800b18c:	4650      	mov	r0, sl
 800b18e:	b019      	add	sp, #100	@ 0x64
 800b190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b194:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b196:	2b01      	cmp	r3, #1
 800b198:	f77f ae37 	ble.w	800ae0a <_dtoa_r+0x7b2>
 800b19c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b19e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b1a0:	2001      	movs	r0, #1
 800b1a2:	e655      	b.n	800ae50 <_dtoa_r+0x7f8>
 800b1a4:	9b00      	ldr	r3, [sp, #0]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	f77f aed6 	ble.w	800af58 <_dtoa_r+0x900>
 800b1ac:	4656      	mov	r6, sl
 800b1ae:	4621      	mov	r1, r4
 800b1b0:	4648      	mov	r0, r9
 800b1b2:	f7ff f9c7 	bl	800a544 <quorem>
 800b1b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b1ba:	f806 8b01 	strb.w	r8, [r6], #1
 800b1be:	9b00      	ldr	r3, [sp, #0]
 800b1c0:	eba6 020a 	sub.w	r2, r6, sl
 800b1c4:	4293      	cmp	r3, r2
 800b1c6:	ddb3      	ble.n	800b130 <_dtoa_r+0xad8>
 800b1c8:	4649      	mov	r1, r9
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	220a      	movs	r2, #10
 800b1ce:	4658      	mov	r0, fp
 800b1d0:	f000 ffae 	bl	800c130 <__multadd>
 800b1d4:	4681      	mov	r9, r0
 800b1d6:	e7ea      	b.n	800b1ae <_dtoa_r+0xb56>
 800b1d8:	0800de3d 	.word	0x0800de3d
 800b1dc:	0800ddc1 	.word	0x0800ddc1

0800b1e0 <rshift>:
 800b1e0:	6903      	ldr	r3, [r0, #16]
 800b1e2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b1e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b1ea:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b1ee:	f100 0414 	add.w	r4, r0, #20
 800b1f2:	dd45      	ble.n	800b280 <rshift+0xa0>
 800b1f4:	f011 011f 	ands.w	r1, r1, #31
 800b1f8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b1fc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b200:	d10c      	bne.n	800b21c <rshift+0x3c>
 800b202:	f100 0710 	add.w	r7, r0, #16
 800b206:	4629      	mov	r1, r5
 800b208:	42b1      	cmp	r1, r6
 800b20a:	d334      	bcc.n	800b276 <rshift+0x96>
 800b20c:	1a9b      	subs	r3, r3, r2
 800b20e:	009b      	lsls	r3, r3, #2
 800b210:	1eea      	subs	r2, r5, #3
 800b212:	4296      	cmp	r6, r2
 800b214:	bf38      	it	cc
 800b216:	2300      	movcc	r3, #0
 800b218:	4423      	add	r3, r4
 800b21a:	e015      	b.n	800b248 <rshift+0x68>
 800b21c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b220:	f1c1 0820 	rsb	r8, r1, #32
 800b224:	40cf      	lsrs	r7, r1
 800b226:	f105 0e04 	add.w	lr, r5, #4
 800b22a:	46a1      	mov	r9, r4
 800b22c:	4576      	cmp	r6, lr
 800b22e:	46f4      	mov	ip, lr
 800b230:	d815      	bhi.n	800b25e <rshift+0x7e>
 800b232:	1a9a      	subs	r2, r3, r2
 800b234:	0092      	lsls	r2, r2, #2
 800b236:	3a04      	subs	r2, #4
 800b238:	3501      	adds	r5, #1
 800b23a:	42ae      	cmp	r6, r5
 800b23c:	bf38      	it	cc
 800b23e:	2200      	movcc	r2, #0
 800b240:	18a3      	adds	r3, r4, r2
 800b242:	50a7      	str	r7, [r4, r2]
 800b244:	b107      	cbz	r7, 800b248 <rshift+0x68>
 800b246:	3304      	adds	r3, #4
 800b248:	1b1a      	subs	r2, r3, r4
 800b24a:	42a3      	cmp	r3, r4
 800b24c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b250:	bf08      	it	eq
 800b252:	2300      	moveq	r3, #0
 800b254:	6102      	str	r2, [r0, #16]
 800b256:	bf08      	it	eq
 800b258:	6143      	streq	r3, [r0, #20]
 800b25a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b25e:	f8dc c000 	ldr.w	ip, [ip]
 800b262:	fa0c fc08 	lsl.w	ip, ip, r8
 800b266:	ea4c 0707 	orr.w	r7, ip, r7
 800b26a:	f849 7b04 	str.w	r7, [r9], #4
 800b26e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b272:	40cf      	lsrs	r7, r1
 800b274:	e7da      	b.n	800b22c <rshift+0x4c>
 800b276:	f851 cb04 	ldr.w	ip, [r1], #4
 800b27a:	f847 cf04 	str.w	ip, [r7, #4]!
 800b27e:	e7c3      	b.n	800b208 <rshift+0x28>
 800b280:	4623      	mov	r3, r4
 800b282:	e7e1      	b.n	800b248 <rshift+0x68>

0800b284 <__hexdig_fun>:
 800b284:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b288:	2b09      	cmp	r3, #9
 800b28a:	d802      	bhi.n	800b292 <__hexdig_fun+0xe>
 800b28c:	3820      	subs	r0, #32
 800b28e:	b2c0      	uxtb	r0, r0
 800b290:	4770      	bx	lr
 800b292:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b296:	2b05      	cmp	r3, #5
 800b298:	d801      	bhi.n	800b29e <__hexdig_fun+0x1a>
 800b29a:	3847      	subs	r0, #71	@ 0x47
 800b29c:	e7f7      	b.n	800b28e <__hexdig_fun+0xa>
 800b29e:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b2a2:	2b05      	cmp	r3, #5
 800b2a4:	d801      	bhi.n	800b2aa <__hexdig_fun+0x26>
 800b2a6:	3827      	subs	r0, #39	@ 0x27
 800b2a8:	e7f1      	b.n	800b28e <__hexdig_fun+0xa>
 800b2aa:	2000      	movs	r0, #0
 800b2ac:	4770      	bx	lr
	...

0800b2b0 <__gethex>:
 800b2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2b4:	b085      	sub	sp, #20
 800b2b6:	468a      	mov	sl, r1
 800b2b8:	9302      	str	r3, [sp, #8]
 800b2ba:	680b      	ldr	r3, [r1, #0]
 800b2bc:	9001      	str	r0, [sp, #4]
 800b2be:	4690      	mov	r8, r2
 800b2c0:	1c9c      	adds	r4, r3, #2
 800b2c2:	46a1      	mov	r9, r4
 800b2c4:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b2c8:	2830      	cmp	r0, #48	@ 0x30
 800b2ca:	d0fa      	beq.n	800b2c2 <__gethex+0x12>
 800b2cc:	eba9 0303 	sub.w	r3, r9, r3
 800b2d0:	f1a3 0b02 	sub.w	fp, r3, #2
 800b2d4:	f7ff ffd6 	bl	800b284 <__hexdig_fun>
 800b2d8:	4605      	mov	r5, r0
 800b2da:	2800      	cmp	r0, #0
 800b2dc:	d168      	bne.n	800b3b0 <__gethex+0x100>
 800b2de:	49a0      	ldr	r1, [pc, #640]	@ (800b560 <__gethex+0x2b0>)
 800b2e0:	2201      	movs	r2, #1
 800b2e2:	4648      	mov	r0, r9
 800b2e4:	f7ff f8b0 	bl	800a448 <strncmp>
 800b2e8:	4607      	mov	r7, r0
 800b2ea:	2800      	cmp	r0, #0
 800b2ec:	d167      	bne.n	800b3be <__gethex+0x10e>
 800b2ee:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b2f2:	4626      	mov	r6, r4
 800b2f4:	f7ff ffc6 	bl	800b284 <__hexdig_fun>
 800b2f8:	2800      	cmp	r0, #0
 800b2fa:	d062      	beq.n	800b3c2 <__gethex+0x112>
 800b2fc:	4623      	mov	r3, r4
 800b2fe:	7818      	ldrb	r0, [r3, #0]
 800b300:	2830      	cmp	r0, #48	@ 0x30
 800b302:	4699      	mov	r9, r3
 800b304:	f103 0301 	add.w	r3, r3, #1
 800b308:	d0f9      	beq.n	800b2fe <__gethex+0x4e>
 800b30a:	f7ff ffbb 	bl	800b284 <__hexdig_fun>
 800b30e:	fab0 f580 	clz	r5, r0
 800b312:	096d      	lsrs	r5, r5, #5
 800b314:	f04f 0b01 	mov.w	fp, #1
 800b318:	464a      	mov	r2, r9
 800b31a:	4616      	mov	r6, r2
 800b31c:	3201      	adds	r2, #1
 800b31e:	7830      	ldrb	r0, [r6, #0]
 800b320:	f7ff ffb0 	bl	800b284 <__hexdig_fun>
 800b324:	2800      	cmp	r0, #0
 800b326:	d1f8      	bne.n	800b31a <__gethex+0x6a>
 800b328:	498d      	ldr	r1, [pc, #564]	@ (800b560 <__gethex+0x2b0>)
 800b32a:	2201      	movs	r2, #1
 800b32c:	4630      	mov	r0, r6
 800b32e:	f7ff f88b 	bl	800a448 <strncmp>
 800b332:	2800      	cmp	r0, #0
 800b334:	d13f      	bne.n	800b3b6 <__gethex+0x106>
 800b336:	b944      	cbnz	r4, 800b34a <__gethex+0x9a>
 800b338:	1c74      	adds	r4, r6, #1
 800b33a:	4622      	mov	r2, r4
 800b33c:	4616      	mov	r6, r2
 800b33e:	3201      	adds	r2, #1
 800b340:	7830      	ldrb	r0, [r6, #0]
 800b342:	f7ff ff9f 	bl	800b284 <__hexdig_fun>
 800b346:	2800      	cmp	r0, #0
 800b348:	d1f8      	bne.n	800b33c <__gethex+0x8c>
 800b34a:	1ba4      	subs	r4, r4, r6
 800b34c:	00a7      	lsls	r7, r4, #2
 800b34e:	7833      	ldrb	r3, [r6, #0]
 800b350:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b354:	2b50      	cmp	r3, #80	@ 0x50
 800b356:	d13e      	bne.n	800b3d6 <__gethex+0x126>
 800b358:	7873      	ldrb	r3, [r6, #1]
 800b35a:	2b2b      	cmp	r3, #43	@ 0x2b
 800b35c:	d033      	beq.n	800b3c6 <__gethex+0x116>
 800b35e:	2b2d      	cmp	r3, #45	@ 0x2d
 800b360:	d034      	beq.n	800b3cc <__gethex+0x11c>
 800b362:	1c71      	adds	r1, r6, #1
 800b364:	2400      	movs	r4, #0
 800b366:	7808      	ldrb	r0, [r1, #0]
 800b368:	f7ff ff8c 	bl	800b284 <__hexdig_fun>
 800b36c:	1e43      	subs	r3, r0, #1
 800b36e:	b2db      	uxtb	r3, r3
 800b370:	2b18      	cmp	r3, #24
 800b372:	d830      	bhi.n	800b3d6 <__gethex+0x126>
 800b374:	f1a0 0210 	sub.w	r2, r0, #16
 800b378:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b37c:	f7ff ff82 	bl	800b284 <__hexdig_fun>
 800b380:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800b384:	fa5f fc8c 	uxtb.w	ip, ip
 800b388:	f1bc 0f18 	cmp.w	ip, #24
 800b38c:	f04f 030a 	mov.w	r3, #10
 800b390:	d91e      	bls.n	800b3d0 <__gethex+0x120>
 800b392:	b104      	cbz	r4, 800b396 <__gethex+0xe6>
 800b394:	4252      	negs	r2, r2
 800b396:	4417      	add	r7, r2
 800b398:	f8ca 1000 	str.w	r1, [sl]
 800b39c:	b1ed      	cbz	r5, 800b3da <__gethex+0x12a>
 800b39e:	f1bb 0f00 	cmp.w	fp, #0
 800b3a2:	bf0c      	ite	eq
 800b3a4:	2506      	moveq	r5, #6
 800b3a6:	2500      	movne	r5, #0
 800b3a8:	4628      	mov	r0, r5
 800b3aa:	b005      	add	sp, #20
 800b3ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3b0:	2500      	movs	r5, #0
 800b3b2:	462c      	mov	r4, r5
 800b3b4:	e7b0      	b.n	800b318 <__gethex+0x68>
 800b3b6:	2c00      	cmp	r4, #0
 800b3b8:	d1c7      	bne.n	800b34a <__gethex+0x9a>
 800b3ba:	4627      	mov	r7, r4
 800b3bc:	e7c7      	b.n	800b34e <__gethex+0x9e>
 800b3be:	464e      	mov	r6, r9
 800b3c0:	462f      	mov	r7, r5
 800b3c2:	2501      	movs	r5, #1
 800b3c4:	e7c3      	b.n	800b34e <__gethex+0x9e>
 800b3c6:	2400      	movs	r4, #0
 800b3c8:	1cb1      	adds	r1, r6, #2
 800b3ca:	e7cc      	b.n	800b366 <__gethex+0xb6>
 800b3cc:	2401      	movs	r4, #1
 800b3ce:	e7fb      	b.n	800b3c8 <__gethex+0x118>
 800b3d0:	fb03 0002 	mla	r0, r3, r2, r0
 800b3d4:	e7ce      	b.n	800b374 <__gethex+0xc4>
 800b3d6:	4631      	mov	r1, r6
 800b3d8:	e7de      	b.n	800b398 <__gethex+0xe8>
 800b3da:	eba6 0309 	sub.w	r3, r6, r9
 800b3de:	3b01      	subs	r3, #1
 800b3e0:	4629      	mov	r1, r5
 800b3e2:	2b07      	cmp	r3, #7
 800b3e4:	dc0a      	bgt.n	800b3fc <__gethex+0x14c>
 800b3e6:	9801      	ldr	r0, [sp, #4]
 800b3e8:	f000 fe40 	bl	800c06c <_Balloc>
 800b3ec:	4604      	mov	r4, r0
 800b3ee:	b940      	cbnz	r0, 800b402 <__gethex+0x152>
 800b3f0:	4b5c      	ldr	r3, [pc, #368]	@ (800b564 <__gethex+0x2b4>)
 800b3f2:	4602      	mov	r2, r0
 800b3f4:	21e4      	movs	r1, #228	@ 0xe4
 800b3f6:	485c      	ldr	r0, [pc, #368]	@ (800b568 <__gethex+0x2b8>)
 800b3f8:	f001 fcf2 	bl	800cde0 <__assert_func>
 800b3fc:	3101      	adds	r1, #1
 800b3fe:	105b      	asrs	r3, r3, #1
 800b400:	e7ef      	b.n	800b3e2 <__gethex+0x132>
 800b402:	f100 0a14 	add.w	sl, r0, #20
 800b406:	2300      	movs	r3, #0
 800b408:	4655      	mov	r5, sl
 800b40a:	469b      	mov	fp, r3
 800b40c:	45b1      	cmp	r9, r6
 800b40e:	d337      	bcc.n	800b480 <__gethex+0x1d0>
 800b410:	f845 bb04 	str.w	fp, [r5], #4
 800b414:	eba5 050a 	sub.w	r5, r5, sl
 800b418:	10ad      	asrs	r5, r5, #2
 800b41a:	6125      	str	r5, [r4, #16]
 800b41c:	4658      	mov	r0, fp
 800b41e:	f000 ff17 	bl	800c250 <__hi0bits>
 800b422:	016d      	lsls	r5, r5, #5
 800b424:	f8d8 6000 	ldr.w	r6, [r8]
 800b428:	1a2d      	subs	r5, r5, r0
 800b42a:	42b5      	cmp	r5, r6
 800b42c:	dd54      	ble.n	800b4d8 <__gethex+0x228>
 800b42e:	1bad      	subs	r5, r5, r6
 800b430:	4629      	mov	r1, r5
 800b432:	4620      	mov	r0, r4
 800b434:	f001 faab 	bl	800c98e <__any_on>
 800b438:	4681      	mov	r9, r0
 800b43a:	b178      	cbz	r0, 800b45c <__gethex+0x1ac>
 800b43c:	1e6b      	subs	r3, r5, #1
 800b43e:	1159      	asrs	r1, r3, #5
 800b440:	f003 021f 	and.w	r2, r3, #31
 800b444:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b448:	f04f 0901 	mov.w	r9, #1
 800b44c:	fa09 f202 	lsl.w	r2, r9, r2
 800b450:	420a      	tst	r2, r1
 800b452:	d003      	beq.n	800b45c <__gethex+0x1ac>
 800b454:	454b      	cmp	r3, r9
 800b456:	dc36      	bgt.n	800b4c6 <__gethex+0x216>
 800b458:	f04f 0902 	mov.w	r9, #2
 800b45c:	4629      	mov	r1, r5
 800b45e:	4620      	mov	r0, r4
 800b460:	f7ff febe 	bl	800b1e0 <rshift>
 800b464:	442f      	add	r7, r5
 800b466:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b46a:	42bb      	cmp	r3, r7
 800b46c:	da42      	bge.n	800b4f4 <__gethex+0x244>
 800b46e:	9801      	ldr	r0, [sp, #4]
 800b470:	4621      	mov	r1, r4
 800b472:	f000 fe3b 	bl	800c0ec <_Bfree>
 800b476:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b478:	2300      	movs	r3, #0
 800b47a:	6013      	str	r3, [r2, #0]
 800b47c:	25a3      	movs	r5, #163	@ 0xa3
 800b47e:	e793      	b.n	800b3a8 <__gethex+0xf8>
 800b480:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b484:	2a2e      	cmp	r2, #46	@ 0x2e
 800b486:	d012      	beq.n	800b4ae <__gethex+0x1fe>
 800b488:	2b20      	cmp	r3, #32
 800b48a:	d104      	bne.n	800b496 <__gethex+0x1e6>
 800b48c:	f845 bb04 	str.w	fp, [r5], #4
 800b490:	f04f 0b00 	mov.w	fp, #0
 800b494:	465b      	mov	r3, fp
 800b496:	7830      	ldrb	r0, [r6, #0]
 800b498:	9303      	str	r3, [sp, #12]
 800b49a:	f7ff fef3 	bl	800b284 <__hexdig_fun>
 800b49e:	9b03      	ldr	r3, [sp, #12]
 800b4a0:	f000 000f 	and.w	r0, r0, #15
 800b4a4:	4098      	lsls	r0, r3
 800b4a6:	ea4b 0b00 	orr.w	fp, fp, r0
 800b4aa:	3304      	adds	r3, #4
 800b4ac:	e7ae      	b.n	800b40c <__gethex+0x15c>
 800b4ae:	45b1      	cmp	r9, r6
 800b4b0:	d8ea      	bhi.n	800b488 <__gethex+0x1d8>
 800b4b2:	492b      	ldr	r1, [pc, #172]	@ (800b560 <__gethex+0x2b0>)
 800b4b4:	9303      	str	r3, [sp, #12]
 800b4b6:	2201      	movs	r2, #1
 800b4b8:	4630      	mov	r0, r6
 800b4ba:	f7fe ffc5 	bl	800a448 <strncmp>
 800b4be:	9b03      	ldr	r3, [sp, #12]
 800b4c0:	2800      	cmp	r0, #0
 800b4c2:	d1e1      	bne.n	800b488 <__gethex+0x1d8>
 800b4c4:	e7a2      	b.n	800b40c <__gethex+0x15c>
 800b4c6:	1ea9      	subs	r1, r5, #2
 800b4c8:	4620      	mov	r0, r4
 800b4ca:	f001 fa60 	bl	800c98e <__any_on>
 800b4ce:	2800      	cmp	r0, #0
 800b4d0:	d0c2      	beq.n	800b458 <__gethex+0x1a8>
 800b4d2:	f04f 0903 	mov.w	r9, #3
 800b4d6:	e7c1      	b.n	800b45c <__gethex+0x1ac>
 800b4d8:	da09      	bge.n	800b4ee <__gethex+0x23e>
 800b4da:	1b75      	subs	r5, r6, r5
 800b4dc:	4621      	mov	r1, r4
 800b4de:	9801      	ldr	r0, [sp, #4]
 800b4e0:	462a      	mov	r2, r5
 800b4e2:	f001 f81b 	bl	800c51c <__lshift>
 800b4e6:	1b7f      	subs	r7, r7, r5
 800b4e8:	4604      	mov	r4, r0
 800b4ea:	f100 0a14 	add.w	sl, r0, #20
 800b4ee:	f04f 0900 	mov.w	r9, #0
 800b4f2:	e7b8      	b.n	800b466 <__gethex+0x1b6>
 800b4f4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b4f8:	42bd      	cmp	r5, r7
 800b4fa:	dd6f      	ble.n	800b5dc <__gethex+0x32c>
 800b4fc:	1bed      	subs	r5, r5, r7
 800b4fe:	42ae      	cmp	r6, r5
 800b500:	dc34      	bgt.n	800b56c <__gethex+0x2bc>
 800b502:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b506:	2b02      	cmp	r3, #2
 800b508:	d022      	beq.n	800b550 <__gethex+0x2a0>
 800b50a:	2b03      	cmp	r3, #3
 800b50c:	d024      	beq.n	800b558 <__gethex+0x2a8>
 800b50e:	2b01      	cmp	r3, #1
 800b510:	d115      	bne.n	800b53e <__gethex+0x28e>
 800b512:	42ae      	cmp	r6, r5
 800b514:	d113      	bne.n	800b53e <__gethex+0x28e>
 800b516:	2e01      	cmp	r6, #1
 800b518:	d10b      	bne.n	800b532 <__gethex+0x282>
 800b51a:	9a02      	ldr	r2, [sp, #8]
 800b51c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b520:	6013      	str	r3, [r2, #0]
 800b522:	2301      	movs	r3, #1
 800b524:	6123      	str	r3, [r4, #16]
 800b526:	f8ca 3000 	str.w	r3, [sl]
 800b52a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b52c:	2562      	movs	r5, #98	@ 0x62
 800b52e:	601c      	str	r4, [r3, #0]
 800b530:	e73a      	b.n	800b3a8 <__gethex+0xf8>
 800b532:	1e71      	subs	r1, r6, #1
 800b534:	4620      	mov	r0, r4
 800b536:	f001 fa2a 	bl	800c98e <__any_on>
 800b53a:	2800      	cmp	r0, #0
 800b53c:	d1ed      	bne.n	800b51a <__gethex+0x26a>
 800b53e:	9801      	ldr	r0, [sp, #4]
 800b540:	4621      	mov	r1, r4
 800b542:	f000 fdd3 	bl	800c0ec <_Bfree>
 800b546:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b548:	2300      	movs	r3, #0
 800b54a:	6013      	str	r3, [r2, #0]
 800b54c:	2550      	movs	r5, #80	@ 0x50
 800b54e:	e72b      	b.n	800b3a8 <__gethex+0xf8>
 800b550:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b552:	2b00      	cmp	r3, #0
 800b554:	d1f3      	bne.n	800b53e <__gethex+0x28e>
 800b556:	e7e0      	b.n	800b51a <__gethex+0x26a>
 800b558:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d1dd      	bne.n	800b51a <__gethex+0x26a>
 800b55e:	e7ee      	b.n	800b53e <__gethex+0x28e>
 800b560:	0800dc61 	.word	0x0800dc61
 800b564:	0800de3d 	.word	0x0800de3d
 800b568:	0800de4e 	.word	0x0800de4e
 800b56c:	1e6f      	subs	r7, r5, #1
 800b56e:	f1b9 0f00 	cmp.w	r9, #0
 800b572:	d130      	bne.n	800b5d6 <__gethex+0x326>
 800b574:	b127      	cbz	r7, 800b580 <__gethex+0x2d0>
 800b576:	4639      	mov	r1, r7
 800b578:	4620      	mov	r0, r4
 800b57a:	f001 fa08 	bl	800c98e <__any_on>
 800b57e:	4681      	mov	r9, r0
 800b580:	117a      	asrs	r2, r7, #5
 800b582:	2301      	movs	r3, #1
 800b584:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b588:	f007 071f 	and.w	r7, r7, #31
 800b58c:	40bb      	lsls	r3, r7
 800b58e:	4213      	tst	r3, r2
 800b590:	4629      	mov	r1, r5
 800b592:	4620      	mov	r0, r4
 800b594:	bf18      	it	ne
 800b596:	f049 0902 	orrne.w	r9, r9, #2
 800b59a:	f7ff fe21 	bl	800b1e0 <rshift>
 800b59e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b5a2:	1b76      	subs	r6, r6, r5
 800b5a4:	2502      	movs	r5, #2
 800b5a6:	f1b9 0f00 	cmp.w	r9, #0
 800b5aa:	d047      	beq.n	800b63c <__gethex+0x38c>
 800b5ac:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b5b0:	2b02      	cmp	r3, #2
 800b5b2:	d015      	beq.n	800b5e0 <__gethex+0x330>
 800b5b4:	2b03      	cmp	r3, #3
 800b5b6:	d017      	beq.n	800b5e8 <__gethex+0x338>
 800b5b8:	2b01      	cmp	r3, #1
 800b5ba:	d109      	bne.n	800b5d0 <__gethex+0x320>
 800b5bc:	f019 0f02 	tst.w	r9, #2
 800b5c0:	d006      	beq.n	800b5d0 <__gethex+0x320>
 800b5c2:	f8da 3000 	ldr.w	r3, [sl]
 800b5c6:	ea49 0903 	orr.w	r9, r9, r3
 800b5ca:	f019 0f01 	tst.w	r9, #1
 800b5ce:	d10e      	bne.n	800b5ee <__gethex+0x33e>
 800b5d0:	f045 0510 	orr.w	r5, r5, #16
 800b5d4:	e032      	b.n	800b63c <__gethex+0x38c>
 800b5d6:	f04f 0901 	mov.w	r9, #1
 800b5da:	e7d1      	b.n	800b580 <__gethex+0x2d0>
 800b5dc:	2501      	movs	r5, #1
 800b5de:	e7e2      	b.n	800b5a6 <__gethex+0x2f6>
 800b5e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5e2:	f1c3 0301 	rsb	r3, r3, #1
 800b5e6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b5e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d0f0      	beq.n	800b5d0 <__gethex+0x320>
 800b5ee:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b5f2:	f104 0314 	add.w	r3, r4, #20
 800b5f6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b5fa:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b5fe:	f04f 0c00 	mov.w	ip, #0
 800b602:	4618      	mov	r0, r3
 800b604:	f853 2b04 	ldr.w	r2, [r3], #4
 800b608:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800b60c:	d01b      	beq.n	800b646 <__gethex+0x396>
 800b60e:	3201      	adds	r2, #1
 800b610:	6002      	str	r2, [r0, #0]
 800b612:	2d02      	cmp	r5, #2
 800b614:	f104 0314 	add.w	r3, r4, #20
 800b618:	d13c      	bne.n	800b694 <__gethex+0x3e4>
 800b61a:	f8d8 2000 	ldr.w	r2, [r8]
 800b61e:	3a01      	subs	r2, #1
 800b620:	42b2      	cmp	r2, r6
 800b622:	d109      	bne.n	800b638 <__gethex+0x388>
 800b624:	1171      	asrs	r1, r6, #5
 800b626:	2201      	movs	r2, #1
 800b628:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b62c:	f006 061f 	and.w	r6, r6, #31
 800b630:	fa02 f606 	lsl.w	r6, r2, r6
 800b634:	421e      	tst	r6, r3
 800b636:	d13a      	bne.n	800b6ae <__gethex+0x3fe>
 800b638:	f045 0520 	orr.w	r5, r5, #32
 800b63c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b63e:	601c      	str	r4, [r3, #0]
 800b640:	9b02      	ldr	r3, [sp, #8]
 800b642:	601f      	str	r7, [r3, #0]
 800b644:	e6b0      	b.n	800b3a8 <__gethex+0xf8>
 800b646:	4299      	cmp	r1, r3
 800b648:	f843 cc04 	str.w	ip, [r3, #-4]
 800b64c:	d8d9      	bhi.n	800b602 <__gethex+0x352>
 800b64e:	68a3      	ldr	r3, [r4, #8]
 800b650:	459b      	cmp	fp, r3
 800b652:	db17      	blt.n	800b684 <__gethex+0x3d4>
 800b654:	6861      	ldr	r1, [r4, #4]
 800b656:	9801      	ldr	r0, [sp, #4]
 800b658:	3101      	adds	r1, #1
 800b65a:	f000 fd07 	bl	800c06c <_Balloc>
 800b65e:	4681      	mov	r9, r0
 800b660:	b918      	cbnz	r0, 800b66a <__gethex+0x3ba>
 800b662:	4b1a      	ldr	r3, [pc, #104]	@ (800b6cc <__gethex+0x41c>)
 800b664:	4602      	mov	r2, r0
 800b666:	2184      	movs	r1, #132	@ 0x84
 800b668:	e6c5      	b.n	800b3f6 <__gethex+0x146>
 800b66a:	6922      	ldr	r2, [r4, #16]
 800b66c:	3202      	adds	r2, #2
 800b66e:	f104 010c 	add.w	r1, r4, #12
 800b672:	0092      	lsls	r2, r2, #2
 800b674:	300c      	adds	r0, #12
 800b676:	f7fe ff48 	bl	800a50a <memcpy>
 800b67a:	4621      	mov	r1, r4
 800b67c:	9801      	ldr	r0, [sp, #4]
 800b67e:	f000 fd35 	bl	800c0ec <_Bfree>
 800b682:	464c      	mov	r4, r9
 800b684:	6923      	ldr	r3, [r4, #16]
 800b686:	1c5a      	adds	r2, r3, #1
 800b688:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b68c:	6122      	str	r2, [r4, #16]
 800b68e:	2201      	movs	r2, #1
 800b690:	615a      	str	r2, [r3, #20]
 800b692:	e7be      	b.n	800b612 <__gethex+0x362>
 800b694:	6922      	ldr	r2, [r4, #16]
 800b696:	455a      	cmp	r2, fp
 800b698:	dd0b      	ble.n	800b6b2 <__gethex+0x402>
 800b69a:	2101      	movs	r1, #1
 800b69c:	4620      	mov	r0, r4
 800b69e:	f7ff fd9f 	bl	800b1e0 <rshift>
 800b6a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b6a6:	3701      	adds	r7, #1
 800b6a8:	42bb      	cmp	r3, r7
 800b6aa:	f6ff aee0 	blt.w	800b46e <__gethex+0x1be>
 800b6ae:	2501      	movs	r5, #1
 800b6b0:	e7c2      	b.n	800b638 <__gethex+0x388>
 800b6b2:	f016 061f 	ands.w	r6, r6, #31
 800b6b6:	d0fa      	beq.n	800b6ae <__gethex+0x3fe>
 800b6b8:	4453      	add	r3, sl
 800b6ba:	f1c6 0620 	rsb	r6, r6, #32
 800b6be:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b6c2:	f000 fdc5 	bl	800c250 <__hi0bits>
 800b6c6:	42b0      	cmp	r0, r6
 800b6c8:	dbe7      	blt.n	800b69a <__gethex+0x3ea>
 800b6ca:	e7f0      	b.n	800b6ae <__gethex+0x3fe>
 800b6cc:	0800de3d 	.word	0x0800de3d

0800b6d0 <L_shift>:
 800b6d0:	f1c2 0208 	rsb	r2, r2, #8
 800b6d4:	0092      	lsls	r2, r2, #2
 800b6d6:	b570      	push	{r4, r5, r6, lr}
 800b6d8:	f1c2 0620 	rsb	r6, r2, #32
 800b6dc:	6843      	ldr	r3, [r0, #4]
 800b6de:	6804      	ldr	r4, [r0, #0]
 800b6e0:	fa03 f506 	lsl.w	r5, r3, r6
 800b6e4:	432c      	orrs	r4, r5
 800b6e6:	40d3      	lsrs	r3, r2
 800b6e8:	6004      	str	r4, [r0, #0]
 800b6ea:	f840 3f04 	str.w	r3, [r0, #4]!
 800b6ee:	4288      	cmp	r0, r1
 800b6f0:	d3f4      	bcc.n	800b6dc <L_shift+0xc>
 800b6f2:	bd70      	pop	{r4, r5, r6, pc}

0800b6f4 <__match>:
 800b6f4:	b530      	push	{r4, r5, lr}
 800b6f6:	6803      	ldr	r3, [r0, #0]
 800b6f8:	3301      	adds	r3, #1
 800b6fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6fe:	b914      	cbnz	r4, 800b706 <__match+0x12>
 800b700:	6003      	str	r3, [r0, #0]
 800b702:	2001      	movs	r0, #1
 800b704:	bd30      	pop	{r4, r5, pc}
 800b706:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b70a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b70e:	2d19      	cmp	r5, #25
 800b710:	bf98      	it	ls
 800b712:	3220      	addls	r2, #32
 800b714:	42a2      	cmp	r2, r4
 800b716:	d0f0      	beq.n	800b6fa <__match+0x6>
 800b718:	2000      	movs	r0, #0
 800b71a:	e7f3      	b.n	800b704 <__match+0x10>

0800b71c <__hexnan>:
 800b71c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b720:	680b      	ldr	r3, [r1, #0]
 800b722:	6801      	ldr	r1, [r0, #0]
 800b724:	115e      	asrs	r6, r3, #5
 800b726:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b72a:	f013 031f 	ands.w	r3, r3, #31
 800b72e:	b087      	sub	sp, #28
 800b730:	bf18      	it	ne
 800b732:	3604      	addne	r6, #4
 800b734:	2500      	movs	r5, #0
 800b736:	1f37      	subs	r7, r6, #4
 800b738:	4682      	mov	sl, r0
 800b73a:	4690      	mov	r8, r2
 800b73c:	9301      	str	r3, [sp, #4]
 800b73e:	f846 5c04 	str.w	r5, [r6, #-4]
 800b742:	46b9      	mov	r9, r7
 800b744:	463c      	mov	r4, r7
 800b746:	9502      	str	r5, [sp, #8]
 800b748:	46ab      	mov	fp, r5
 800b74a:	784a      	ldrb	r2, [r1, #1]
 800b74c:	1c4b      	adds	r3, r1, #1
 800b74e:	9303      	str	r3, [sp, #12]
 800b750:	b342      	cbz	r2, 800b7a4 <__hexnan+0x88>
 800b752:	4610      	mov	r0, r2
 800b754:	9105      	str	r1, [sp, #20]
 800b756:	9204      	str	r2, [sp, #16]
 800b758:	f7ff fd94 	bl	800b284 <__hexdig_fun>
 800b75c:	2800      	cmp	r0, #0
 800b75e:	d151      	bne.n	800b804 <__hexnan+0xe8>
 800b760:	9a04      	ldr	r2, [sp, #16]
 800b762:	9905      	ldr	r1, [sp, #20]
 800b764:	2a20      	cmp	r2, #32
 800b766:	d818      	bhi.n	800b79a <__hexnan+0x7e>
 800b768:	9b02      	ldr	r3, [sp, #8]
 800b76a:	459b      	cmp	fp, r3
 800b76c:	dd13      	ble.n	800b796 <__hexnan+0x7a>
 800b76e:	454c      	cmp	r4, r9
 800b770:	d206      	bcs.n	800b780 <__hexnan+0x64>
 800b772:	2d07      	cmp	r5, #7
 800b774:	dc04      	bgt.n	800b780 <__hexnan+0x64>
 800b776:	462a      	mov	r2, r5
 800b778:	4649      	mov	r1, r9
 800b77a:	4620      	mov	r0, r4
 800b77c:	f7ff ffa8 	bl	800b6d0 <L_shift>
 800b780:	4544      	cmp	r4, r8
 800b782:	d952      	bls.n	800b82a <__hexnan+0x10e>
 800b784:	2300      	movs	r3, #0
 800b786:	f1a4 0904 	sub.w	r9, r4, #4
 800b78a:	f844 3c04 	str.w	r3, [r4, #-4]
 800b78e:	f8cd b008 	str.w	fp, [sp, #8]
 800b792:	464c      	mov	r4, r9
 800b794:	461d      	mov	r5, r3
 800b796:	9903      	ldr	r1, [sp, #12]
 800b798:	e7d7      	b.n	800b74a <__hexnan+0x2e>
 800b79a:	2a29      	cmp	r2, #41	@ 0x29
 800b79c:	d157      	bne.n	800b84e <__hexnan+0x132>
 800b79e:	3102      	adds	r1, #2
 800b7a0:	f8ca 1000 	str.w	r1, [sl]
 800b7a4:	f1bb 0f00 	cmp.w	fp, #0
 800b7a8:	d051      	beq.n	800b84e <__hexnan+0x132>
 800b7aa:	454c      	cmp	r4, r9
 800b7ac:	d206      	bcs.n	800b7bc <__hexnan+0xa0>
 800b7ae:	2d07      	cmp	r5, #7
 800b7b0:	dc04      	bgt.n	800b7bc <__hexnan+0xa0>
 800b7b2:	462a      	mov	r2, r5
 800b7b4:	4649      	mov	r1, r9
 800b7b6:	4620      	mov	r0, r4
 800b7b8:	f7ff ff8a 	bl	800b6d0 <L_shift>
 800b7bc:	4544      	cmp	r4, r8
 800b7be:	d936      	bls.n	800b82e <__hexnan+0x112>
 800b7c0:	f1a8 0204 	sub.w	r2, r8, #4
 800b7c4:	4623      	mov	r3, r4
 800b7c6:	f853 1b04 	ldr.w	r1, [r3], #4
 800b7ca:	f842 1f04 	str.w	r1, [r2, #4]!
 800b7ce:	429f      	cmp	r7, r3
 800b7d0:	d2f9      	bcs.n	800b7c6 <__hexnan+0xaa>
 800b7d2:	1b3b      	subs	r3, r7, r4
 800b7d4:	f023 0303 	bic.w	r3, r3, #3
 800b7d8:	3304      	adds	r3, #4
 800b7da:	3401      	adds	r4, #1
 800b7dc:	3e03      	subs	r6, #3
 800b7de:	42b4      	cmp	r4, r6
 800b7e0:	bf88      	it	hi
 800b7e2:	2304      	movhi	r3, #4
 800b7e4:	4443      	add	r3, r8
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	f843 2b04 	str.w	r2, [r3], #4
 800b7ec:	429f      	cmp	r7, r3
 800b7ee:	d2fb      	bcs.n	800b7e8 <__hexnan+0xcc>
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	b91b      	cbnz	r3, 800b7fc <__hexnan+0xe0>
 800b7f4:	4547      	cmp	r7, r8
 800b7f6:	d128      	bne.n	800b84a <__hexnan+0x12e>
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	603b      	str	r3, [r7, #0]
 800b7fc:	2005      	movs	r0, #5
 800b7fe:	b007      	add	sp, #28
 800b800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b804:	3501      	adds	r5, #1
 800b806:	2d08      	cmp	r5, #8
 800b808:	f10b 0b01 	add.w	fp, fp, #1
 800b80c:	dd06      	ble.n	800b81c <__hexnan+0x100>
 800b80e:	4544      	cmp	r4, r8
 800b810:	d9c1      	bls.n	800b796 <__hexnan+0x7a>
 800b812:	2300      	movs	r3, #0
 800b814:	f844 3c04 	str.w	r3, [r4, #-4]
 800b818:	2501      	movs	r5, #1
 800b81a:	3c04      	subs	r4, #4
 800b81c:	6822      	ldr	r2, [r4, #0]
 800b81e:	f000 000f 	and.w	r0, r0, #15
 800b822:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b826:	6020      	str	r0, [r4, #0]
 800b828:	e7b5      	b.n	800b796 <__hexnan+0x7a>
 800b82a:	2508      	movs	r5, #8
 800b82c:	e7b3      	b.n	800b796 <__hexnan+0x7a>
 800b82e:	9b01      	ldr	r3, [sp, #4]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d0dd      	beq.n	800b7f0 <__hexnan+0xd4>
 800b834:	f1c3 0320 	rsb	r3, r3, #32
 800b838:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b83c:	40da      	lsrs	r2, r3
 800b83e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b842:	4013      	ands	r3, r2
 800b844:	f846 3c04 	str.w	r3, [r6, #-4]
 800b848:	e7d2      	b.n	800b7f0 <__hexnan+0xd4>
 800b84a:	3f04      	subs	r7, #4
 800b84c:	e7d0      	b.n	800b7f0 <__hexnan+0xd4>
 800b84e:	2004      	movs	r0, #4
 800b850:	e7d5      	b.n	800b7fe <__hexnan+0xe2>

0800b852 <__ssputs_r>:
 800b852:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b856:	688e      	ldr	r6, [r1, #8]
 800b858:	461f      	mov	r7, r3
 800b85a:	42be      	cmp	r6, r7
 800b85c:	680b      	ldr	r3, [r1, #0]
 800b85e:	4682      	mov	sl, r0
 800b860:	460c      	mov	r4, r1
 800b862:	4690      	mov	r8, r2
 800b864:	d82d      	bhi.n	800b8c2 <__ssputs_r+0x70>
 800b866:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b86a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b86e:	d026      	beq.n	800b8be <__ssputs_r+0x6c>
 800b870:	6965      	ldr	r5, [r4, #20]
 800b872:	6909      	ldr	r1, [r1, #16]
 800b874:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b878:	eba3 0901 	sub.w	r9, r3, r1
 800b87c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b880:	1c7b      	adds	r3, r7, #1
 800b882:	444b      	add	r3, r9
 800b884:	106d      	asrs	r5, r5, #1
 800b886:	429d      	cmp	r5, r3
 800b888:	bf38      	it	cc
 800b88a:	461d      	movcc	r5, r3
 800b88c:	0553      	lsls	r3, r2, #21
 800b88e:	d527      	bpl.n	800b8e0 <__ssputs_r+0x8e>
 800b890:	4629      	mov	r1, r5
 800b892:	f000 faa1 	bl	800bdd8 <_malloc_r>
 800b896:	4606      	mov	r6, r0
 800b898:	b360      	cbz	r0, 800b8f4 <__ssputs_r+0xa2>
 800b89a:	6921      	ldr	r1, [r4, #16]
 800b89c:	464a      	mov	r2, r9
 800b89e:	f7fe fe34 	bl	800a50a <memcpy>
 800b8a2:	89a3      	ldrh	r3, [r4, #12]
 800b8a4:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b8a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b8ac:	81a3      	strh	r3, [r4, #12]
 800b8ae:	6126      	str	r6, [r4, #16]
 800b8b0:	6165      	str	r5, [r4, #20]
 800b8b2:	444e      	add	r6, r9
 800b8b4:	eba5 0509 	sub.w	r5, r5, r9
 800b8b8:	6026      	str	r6, [r4, #0]
 800b8ba:	60a5      	str	r5, [r4, #8]
 800b8bc:	463e      	mov	r6, r7
 800b8be:	42be      	cmp	r6, r7
 800b8c0:	d900      	bls.n	800b8c4 <__ssputs_r+0x72>
 800b8c2:	463e      	mov	r6, r7
 800b8c4:	6820      	ldr	r0, [r4, #0]
 800b8c6:	4632      	mov	r2, r6
 800b8c8:	4641      	mov	r1, r8
 800b8ca:	f001 f9f6 	bl	800ccba <memmove>
 800b8ce:	68a3      	ldr	r3, [r4, #8]
 800b8d0:	1b9b      	subs	r3, r3, r6
 800b8d2:	60a3      	str	r3, [r4, #8]
 800b8d4:	6823      	ldr	r3, [r4, #0]
 800b8d6:	4433      	add	r3, r6
 800b8d8:	6023      	str	r3, [r4, #0]
 800b8da:	2000      	movs	r0, #0
 800b8dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8e0:	462a      	mov	r2, r5
 800b8e2:	f001 f8b8 	bl	800ca56 <_realloc_r>
 800b8e6:	4606      	mov	r6, r0
 800b8e8:	2800      	cmp	r0, #0
 800b8ea:	d1e0      	bne.n	800b8ae <__ssputs_r+0x5c>
 800b8ec:	6921      	ldr	r1, [r4, #16]
 800b8ee:	4650      	mov	r0, sl
 800b8f0:	f001 faa8 	bl	800ce44 <_free_r>
 800b8f4:	230c      	movs	r3, #12
 800b8f6:	f8ca 3000 	str.w	r3, [sl]
 800b8fa:	89a3      	ldrh	r3, [r4, #12]
 800b8fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b900:	81a3      	strh	r3, [r4, #12]
 800b902:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b906:	e7e9      	b.n	800b8dc <__ssputs_r+0x8a>

0800b908 <_svfiprintf_r>:
 800b908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b90c:	4698      	mov	r8, r3
 800b90e:	898b      	ldrh	r3, [r1, #12]
 800b910:	061b      	lsls	r3, r3, #24
 800b912:	b09d      	sub	sp, #116	@ 0x74
 800b914:	4607      	mov	r7, r0
 800b916:	460d      	mov	r5, r1
 800b918:	4614      	mov	r4, r2
 800b91a:	d510      	bpl.n	800b93e <_svfiprintf_r+0x36>
 800b91c:	690b      	ldr	r3, [r1, #16]
 800b91e:	b973      	cbnz	r3, 800b93e <_svfiprintf_r+0x36>
 800b920:	2140      	movs	r1, #64	@ 0x40
 800b922:	f000 fa59 	bl	800bdd8 <_malloc_r>
 800b926:	6028      	str	r0, [r5, #0]
 800b928:	6128      	str	r0, [r5, #16]
 800b92a:	b930      	cbnz	r0, 800b93a <_svfiprintf_r+0x32>
 800b92c:	230c      	movs	r3, #12
 800b92e:	603b      	str	r3, [r7, #0]
 800b930:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b934:	b01d      	add	sp, #116	@ 0x74
 800b936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b93a:	2340      	movs	r3, #64	@ 0x40
 800b93c:	616b      	str	r3, [r5, #20]
 800b93e:	2300      	movs	r3, #0
 800b940:	9309      	str	r3, [sp, #36]	@ 0x24
 800b942:	2320      	movs	r3, #32
 800b944:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b948:	f8cd 800c 	str.w	r8, [sp, #12]
 800b94c:	2330      	movs	r3, #48	@ 0x30
 800b94e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800baec <_svfiprintf_r+0x1e4>
 800b952:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b956:	f04f 0901 	mov.w	r9, #1
 800b95a:	4623      	mov	r3, r4
 800b95c:	469a      	mov	sl, r3
 800b95e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b962:	b10a      	cbz	r2, 800b968 <_svfiprintf_r+0x60>
 800b964:	2a25      	cmp	r2, #37	@ 0x25
 800b966:	d1f9      	bne.n	800b95c <_svfiprintf_r+0x54>
 800b968:	ebba 0b04 	subs.w	fp, sl, r4
 800b96c:	d00b      	beq.n	800b986 <_svfiprintf_r+0x7e>
 800b96e:	465b      	mov	r3, fp
 800b970:	4622      	mov	r2, r4
 800b972:	4629      	mov	r1, r5
 800b974:	4638      	mov	r0, r7
 800b976:	f7ff ff6c 	bl	800b852 <__ssputs_r>
 800b97a:	3001      	adds	r0, #1
 800b97c:	f000 80a7 	beq.w	800bace <_svfiprintf_r+0x1c6>
 800b980:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b982:	445a      	add	r2, fp
 800b984:	9209      	str	r2, [sp, #36]	@ 0x24
 800b986:	f89a 3000 	ldrb.w	r3, [sl]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	f000 809f 	beq.w	800bace <_svfiprintf_r+0x1c6>
 800b990:	2300      	movs	r3, #0
 800b992:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b996:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b99a:	f10a 0a01 	add.w	sl, sl, #1
 800b99e:	9304      	str	r3, [sp, #16]
 800b9a0:	9307      	str	r3, [sp, #28]
 800b9a2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b9a6:	931a      	str	r3, [sp, #104]	@ 0x68
 800b9a8:	4654      	mov	r4, sl
 800b9aa:	2205      	movs	r2, #5
 800b9ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9b0:	484e      	ldr	r0, [pc, #312]	@ (800baec <_svfiprintf_r+0x1e4>)
 800b9b2:	f7f4 fc25 	bl	8000200 <memchr>
 800b9b6:	9a04      	ldr	r2, [sp, #16]
 800b9b8:	b9d8      	cbnz	r0, 800b9f2 <_svfiprintf_r+0xea>
 800b9ba:	06d0      	lsls	r0, r2, #27
 800b9bc:	bf44      	itt	mi
 800b9be:	2320      	movmi	r3, #32
 800b9c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9c4:	0711      	lsls	r1, r2, #28
 800b9c6:	bf44      	itt	mi
 800b9c8:	232b      	movmi	r3, #43	@ 0x2b
 800b9ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9ce:	f89a 3000 	ldrb.w	r3, [sl]
 800b9d2:	2b2a      	cmp	r3, #42	@ 0x2a
 800b9d4:	d015      	beq.n	800ba02 <_svfiprintf_r+0xfa>
 800b9d6:	9a07      	ldr	r2, [sp, #28]
 800b9d8:	4654      	mov	r4, sl
 800b9da:	2000      	movs	r0, #0
 800b9dc:	f04f 0c0a 	mov.w	ip, #10
 800b9e0:	4621      	mov	r1, r4
 800b9e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9e6:	3b30      	subs	r3, #48	@ 0x30
 800b9e8:	2b09      	cmp	r3, #9
 800b9ea:	d94b      	bls.n	800ba84 <_svfiprintf_r+0x17c>
 800b9ec:	b1b0      	cbz	r0, 800ba1c <_svfiprintf_r+0x114>
 800b9ee:	9207      	str	r2, [sp, #28]
 800b9f0:	e014      	b.n	800ba1c <_svfiprintf_r+0x114>
 800b9f2:	eba0 0308 	sub.w	r3, r0, r8
 800b9f6:	fa09 f303 	lsl.w	r3, r9, r3
 800b9fa:	4313      	orrs	r3, r2
 800b9fc:	9304      	str	r3, [sp, #16]
 800b9fe:	46a2      	mov	sl, r4
 800ba00:	e7d2      	b.n	800b9a8 <_svfiprintf_r+0xa0>
 800ba02:	9b03      	ldr	r3, [sp, #12]
 800ba04:	1d19      	adds	r1, r3, #4
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	9103      	str	r1, [sp, #12]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	bfbb      	ittet	lt
 800ba0e:	425b      	neglt	r3, r3
 800ba10:	f042 0202 	orrlt.w	r2, r2, #2
 800ba14:	9307      	strge	r3, [sp, #28]
 800ba16:	9307      	strlt	r3, [sp, #28]
 800ba18:	bfb8      	it	lt
 800ba1a:	9204      	strlt	r2, [sp, #16]
 800ba1c:	7823      	ldrb	r3, [r4, #0]
 800ba1e:	2b2e      	cmp	r3, #46	@ 0x2e
 800ba20:	d10a      	bne.n	800ba38 <_svfiprintf_r+0x130>
 800ba22:	7863      	ldrb	r3, [r4, #1]
 800ba24:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba26:	d132      	bne.n	800ba8e <_svfiprintf_r+0x186>
 800ba28:	9b03      	ldr	r3, [sp, #12]
 800ba2a:	1d1a      	adds	r2, r3, #4
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	9203      	str	r2, [sp, #12]
 800ba30:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ba34:	3402      	adds	r4, #2
 800ba36:	9305      	str	r3, [sp, #20]
 800ba38:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bafc <_svfiprintf_r+0x1f4>
 800ba3c:	7821      	ldrb	r1, [r4, #0]
 800ba3e:	2203      	movs	r2, #3
 800ba40:	4650      	mov	r0, sl
 800ba42:	f7f4 fbdd 	bl	8000200 <memchr>
 800ba46:	b138      	cbz	r0, 800ba58 <_svfiprintf_r+0x150>
 800ba48:	9b04      	ldr	r3, [sp, #16]
 800ba4a:	eba0 000a 	sub.w	r0, r0, sl
 800ba4e:	2240      	movs	r2, #64	@ 0x40
 800ba50:	4082      	lsls	r2, r0
 800ba52:	4313      	orrs	r3, r2
 800ba54:	3401      	adds	r4, #1
 800ba56:	9304      	str	r3, [sp, #16]
 800ba58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba5c:	4824      	ldr	r0, [pc, #144]	@ (800baf0 <_svfiprintf_r+0x1e8>)
 800ba5e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ba62:	2206      	movs	r2, #6
 800ba64:	f7f4 fbcc 	bl	8000200 <memchr>
 800ba68:	2800      	cmp	r0, #0
 800ba6a:	d036      	beq.n	800bada <_svfiprintf_r+0x1d2>
 800ba6c:	4b21      	ldr	r3, [pc, #132]	@ (800baf4 <_svfiprintf_r+0x1ec>)
 800ba6e:	bb1b      	cbnz	r3, 800bab8 <_svfiprintf_r+0x1b0>
 800ba70:	9b03      	ldr	r3, [sp, #12]
 800ba72:	3307      	adds	r3, #7
 800ba74:	f023 0307 	bic.w	r3, r3, #7
 800ba78:	3308      	adds	r3, #8
 800ba7a:	9303      	str	r3, [sp, #12]
 800ba7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba7e:	4433      	add	r3, r6
 800ba80:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba82:	e76a      	b.n	800b95a <_svfiprintf_r+0x52>
 800ba84:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba88:	460c      	mov	r4, r1
 800ba8a:	2001      	movs	r0, #1
 800ba8c:	e7a8      	b.n	800b9e0 <_svfiprintf_r+0xd8>
 800ba8e:	2300      	movs	r3, #0
 800ba90:	3401      	adds	r4, #1
 800ba92:	9305      	str	r3, [sp, #20]
 800ba94:	4619      	mov	r1, r3
 800ba96:	f04f 0c0a 	mov.w	ip, #10
 800ba9a:	4620      	mov	r0, r4
 800ba9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800baa0:	3a30      	subs	r2, #48	@ 0x30
 800baa2:	2a09      	cmp	r2, #9
 800baa4:	d903      	bls.n	800baae <_svfiprintf_r+0x1a6>
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d0c6      	beq.n	800ba38 <_svfiprintf_r+0x130>
 800baaa:	9105      	str	r1, [sp, #20]
 800baac:	e7c4      	b.n	800ba38 <_svfiprintf_r+0x130>
 800baae:	fb0c 2101 	mla	r1, ip, r1, r2
 800bab2:	4604      	mov	r4, r0
 800bab4:	2301      	movs	r3, #1
 800bab6:	e7f0      	b.n	800ba9a <_svfiprintf_r+0x192>
 800bab8:	ab03      	add	r3, sp, #12
 800baba:	9300      	str	r3, [sp, #0]
 800babc:	462a      	mov	r2, r5
 800babe:	4b0e      	ldr	r3, [pc, #56]	@ (800baf8 <_svfiprintf_r+0x1f0>)
 800bac0:	a904      	add	r1, sp, #16
 800bac2:	4638      	mov	r0, r7
 800bac4:	f7fc ff1c 	bl	8008900 <_printf_float>
 800bac8:	1c42      	adds	r2, r0, #1
 800baca:	4606      	mov	r6, r0
 800bacc:	d1d6      	bne.n	800ba7c <_svfiprintf_r+0x174>
 800bace:	89ab      	ldrh	r3, [r5, #12]
 800bad0:	065b      	lsls	r3, r3, #25
 800bad2:	f53f af2d 	bmi.w	800b930 <_svfiprintf_r+0x28>
 800bad6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bad8:	e72c      	b.n	800b934 <_svfiprintf_r+0x2c>
 800bada:	ab03      	add	r3, sp, #12
 800badc:	9300      	str	r3, [sp, #0]
 800bade:	462a      	mov	r2, r5
 800bae0:	4b05      	ldr	r3, [pc, #20]	@ (800baf8 <_svfiprintf_r+0x1f0>)
 800bae2:	a904      	add	r1, sp, #16
 800bae4:	4638      	mov	r0, r7
 800bae6:	f7fd f9a3 	bl	8008e30 <_printf_i>
 800baea:	e7ed      	b.n	800bac8 <_svfiprintf_r+0x1c0>
 800baec:	0800deae 	.word	0x0800deae
 800baf0:	0800deb8 	.word	0x0800deb8
 800baf4:	08008901 	.word	0x08008901
 800baf8:	0800b853 	.word	0x0800b853
 800bafc:	0800deb4 	.word	0x0800deb4

0800bb00 <__sfputc_r>:
 800bb00:	6893      	ldr	r3, [r2, #8]
 800bb02:	3b01      	subs	r3, #1
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	b410      	push	{r4}
 800bb08:	6093      	str	r3, [r2, #8]
 800bb0a:	da08      	bge.n	800bb1e <__sfputc_r+0x1e>
 800bb0c:	6994      	ldr	r4, [r2, #24]
 800bb0e:	42a3      	cmp	r3, r4
 800bb10:	db01      	blt.n	800bb16 <__sfputc_r+0x16>
 800bb12:	290a      	cmp	r1, #10
 800bb14:	d103      	bne.n	800bb1e <__sfputc_r+0x1e>
 800bb16:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb1a:	f000 bfca 	b.w	800cab2 <__swbuf_r>
 800bb1e:	6813      	ldr	r3, [r2, #0]
 800bb20:	1c58      	adds	r0, r3, #1
 800bb22:	6010      	str	r0, [r2, #0]
 800bb24:	7019      	strb	r1, [r3, #0]
 800bb26:	4608      	mov	r0, r1
 800bb28:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb2c:	4770      	bx	lr

0800bb2e <__sfputs_r>:
 800bb2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb30:	4606      	mov	r6, r0
 800bb32:	460f      	mov	r7, r1
 800bb34:	4614      	mov	r4, r2
 800bb36:	18d5      	adds	r5, r2, r3
 800bb38:	42ac      	cmp	r4, r5
 800bb3a:	d101      	bne.n	800bb40 <__sfputs_r+0x12>
 800bb3c:	2000      	movs	r0, #0
 800bb3e:	e007      	b.n	800bb50 <__sfputs_r+0x22>
 800bb40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb44:	463a      	mov	r2, r7
 800bb46:	4630      	mov	r0, r6
 800bb48:	f7ff ffda 	bl	800bb00 <__sfputc_r>
 800bb4c:	1c43      	adds	r3, r0, #1
 800bb4e:	d1f3      	bne.n	800bb38 <__sfputs_r+0xa>
 800bb50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bb54 <_vfiprintf_r>:
 800bb54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb58:	460d      	mov	r5, r1
 800bb5a:	b09d      	sub	sp, #116	@ 0x74
 800bb5c:	4614      	mov	r4, r2
 800bb5e:	4698      	mov	r8, r3
 800bb60:	4606      	mov	r6, r0
 800bb62:	b118      	cbz	r0, 800bb6c <_vfiprintf_r+0x18>
 800bb64:	6a03      	ldr	r3, [r0, #32]
 800bb66:	b90b      	cbnz	r3, 800bb6c <_vfiprintf_r+0x18>
 800bb68:	f7fd fd42 	bl	80095f0 <__sinit>
 800bb6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb6e:	07d9      	lsls	r1, r3, #31
 800bb70:	d405      	bmi.n	800bb7e <_vfiprintf_r+0x2a>
 800bb72:	89ab      	ldrh	r3, [r5, #12]
 800bb74:	059a      	lsls	r2, r3, #22
 800bb76:	d402      	bmi.n	800bb7e <_vfiprintf_r+0x2a>
 800bb78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb7a:	f7fe fcc4 	bl	800a506 <__retarget_lock_acquire_recursive>
 800bb7e:	89ab      	ldrh	r3, [r5, #12]
 800bb80:	071b      	lsls	r3, r3, #28
 800bb82:	d501      	bpl.n	800bb88 <_vfiprintf_r+0x34>
 800bb84:	692b      	ldr	r3, [r5, #16]
 800bb86:	b99b      	cbnz	r3, 800bbb0 <_vfiprintf_r+0x5c>
 800bb88:	4629      	mov	r1, r5
 800bb8a:	4630      	mov	r0, r6
 800bb8c:	f000 ffd0 	bl	800cb30 <__swsetup_r>
 800bb90:	b170      	cbz	r0, 800bbb0 <_vfiprintf_r+0x5c>
 800bb92:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb94:	07dc      	lsls	r4, r3, #31
 800bb96:	d504      	bpl.n	800bba2 <_vfiprintf_r+0x4e>
 800bb98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bb9c:	b01d      	add	sp, #116	@ 0x74
 800bb9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bba2:	89ab      	ldrh	r3, [r5, #12]
 800bba4:	0598      	lsls	r0, r3, #22
 800bba6:	d4f7      	bmi.n	800bb98 <_vfiprintf_r+0x44>
 800bba8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bbaa:	f7fe fcad 	bl	800a508 <__retarget_lock_release_recursive>
 800bbae:	e7f3      	b.n	800bb98 <_vfiprintf_r+0x44>
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbb4:	2320      	movs	r3, #32
 800bbb6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bbba:	f8cd 800c 	str.w	r8, [sp, #12]
 800bbbe:	2330      	movs	r3, #48	@ 0x30
 800bbc0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bd70 <_vfiprintf_r+0x21c>
 800bbc4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bbc8:	f04f 0901 	mov.w	r9, #1
 800bbcc:	4623      	mov	r3, r4
 800bbce:	469a      	mov	sl, r3
 800bbd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbd4:	b10a      	cbz	r2, 800bbda <_vfiprintf_r+0x86>
 800bbd6:	2a25      	cmp	r2, #37	@ 0x25
 800bbd8:	d1f9      	bne.n	800bbce <_vfiprintf_r+0x7a>
 800bbda:	ebba 0b04 	subs.w	fp, sl, r4
 800bbde:	d00b      	beq.n	800bbf8 <_vfiprintf_r+0xa4>
 800bbe0:	465b      	mov	r3, fp
 800bbe2:	4622      	mov	r2, r4
 800bbe4:	4629      	mov	r1, r5
 800bbe6:	4630      	mov	r0, r6
 800bbe8:	f7ff ffa1 	bl	800bb2e <__sfputs_r>
 800bbec:	3001      	adds	r0, #1
 800bbee:	f000 80a7 	beq.w	800bd40 <_vfiprintf_r+0x1ec>
 800bbf2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bbf4:	445a      	add	r2, fp
 800bbf6:	9209      	str	r2, [sp, #36]	@ 0x24
 800bbf8:	f89a 3000 	ldrb.w	r3, [sl]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	f000 809f 	beq.w	800bd40 <_vfiprintf_r+0x1ec>
 800bc02:	2300      	movs	r3, #0
 800bc04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bc08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc0c:	f10a 0a01 	add.w	sl, sl, #1
 800bc10:	9304      	str	r3, [sp, #16]
 800bc12:	9307      	str	r3, [sp, #28]
 800bc14:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bc18:	931a      	str	r3, [sp, #104]	@ 0x68
 800bc1a:	4654      	mov	r4, sl
 800bc1c:	2205      	movs	r2, #5
 800bc1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc22:	4853      	ldr	r0, [pc, #332]	@ (800bd70 <_vfiprintf_r+0x21c>)
 800bc24:	f7f4 faec 	bl	8000200 <memchr>
 800bc28:	9a04      	ldr	r2, [sp, #16]
 800bc2a:	b9d8      	cbnz	r0, 800bc64 <_vfiprintf_r+0x110>
 800bc2c:	06d1      	lsls	r1, r2, #27
 800bc2e:	bf44      	itt	mi
 800bc30:	2320      	movmi	r3, #32
 800bc32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc36:	0713      	lsls	r3, r2, #28
 800bc38:	bf44      	itt	mi
 800bc3a:	232b      	movmi	r3, #43	@ 0x2b
 800bc3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc40:	f89a 3000 	ldrb.w	r3, [sl]
 800bc44:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc46:	d015      	beq.n	800bc74 <_vfiprintf_r+0x120>
 800bc48:	9a07      	ldr	r2, [sp, #28]
 800bc4a:	4654      	mov	r4, sl
 800bc4c:	2000      	movs	r0, #0
 800bc4e:	f04f 0c0a 	mov.w	ip, #10
 800bc52:	4621      	mov	r1, r4
 800bc54:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc58:	3b30      	subs	r3, #48	@ 0x30
 800bc5a:	2b09      	cmp	r3, #9
 800bc5c:	d94b      	bls.n	800bcf6 <_vfiprintf_r+0x1a2>
 800bc5e:	b1b0      	cbz	r0, 800bc8e <_vfiprintf_r+0x13a>
 800bc60:	9207      	str	r2, [sp, #28]
 800bc62:	e014      	b.n	800bc8e <_vfiprintf_r+0x13a>
 800bc64:	eba0 0308 	sub.w	r3, r0, r8
 800bc68:	fa09 f303 	lsl.w	r3, r9, r3
 800bc6c:	4313      	orrs	r3, r2
 800bc6e:	9304      	str	r3, [sp, #16]
 800bc70:	46a2      	mov	sl, r4
 800bc72:	e7d2      	b.n	800bc1a <_vfiprintf_r+0xc6>
 800bc74:	9b03      	ldr	r3, [sp, #12]
 800bc76:	1d19      	adds	r1, r3, #4
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	9103      	str	r1, [sp, #12]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	bfbb      	ittet	lt
 800bc80:	425b      	neglt	r3, r3
 800bc82:	f042 0202 	orrlt.w	r2, r2, #2
 800bc86:	9307      	strge	r3, [sp, #28]
 800bc88:	9307      	strlt	r3, [sp, #28]
 800bc8a:	bfb8      	it	lt
 800bc8c:	9204      	strlt	r2, [sp, #16]
 800bc8e:	7823      	ldrb	r3, [r4, #0]
 800bc90:	2b2e      	cmp	r3, #46	@ 0x2e
 800bc92:	d10a      	bne.n	800bcaa <_vfiprintf_r+0x156>
 800bc94:	7863      	ldrb	r3, [r4, #1]
 800bc96:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc98:	d132      	bne.n	800bd00 <_vfiprintf_r+0x1ac>
 800bc9a:	9b03      	ldr	r3, [sp, #12]
 800bc9c:	1d1a      	adds	r2, r3, #4
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	9203      	str	r2, [sp, #12]
 800bca2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bca6:	3402      	adds	r4, #2
 800bca8:	9305      	str	r3, [sp, #20]
 800bcaa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bd80 <_vfiprintf_r+0x22c>
 800bcae:	7821      	ldrb	r1, [r4, #0]
 800bcb0:	2203      	movs	r2, #3
 800bcb2:	4650      	mov	r0, sl
 800bcb4:	f7f4 faa4 	bl	8000200 <memchr>
 800bcb8:	b138      	cbz	r0, 800bcca <_vfiprintf_r+0x176>
 800bcba:	9b04      	ldr	r3, [sp, #16]
 800bcbc:	eba0 000a 	sub.w	r0, r0, sl
 800bcc0:	2240      	movs	r2, #64	@ 0x40
 800bcc2:	4082      	lsls	r2, r0
 800bcc4:	4313      	orrs	r3, r2
 800bcc6:	3401      	adds	r4, #1
 800bcc8:	9304      	str	r3, [sp, #16]
 800bcca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcce:	4829      	ldr	r0, [pc, #164]	@ (800bd74 <_vfiprintf_r+0x220>)
 800bcd0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bcd4:	2206      	movs	r2, #6
 800bcd6:	f7f4 fa93 	bl	8000200 <memchr>
 800bcda:	2800      	cmp	r0, #0
 800bcdc:	d03f      	beq.n	800bd5e <_vfiprintf_r+0x20a>
 800bcde:	4b26      	ldr	r3, [pc, #152]	@ (800bd78 <_vfiprintf_r+0x224>)
 800bce0:	bb1b      	cbnz	r3, 800bd2a <_vfiprintf_r+0x1d6>
 800bce2:	9b03      	ldr	r3, [sp, #12]
 800bce4:	3307      	adds	r3, #7
 800bce6:	f023 0307 	bic.w	r3, r3, #7
 800bcea:	3308      	adds	r3, #8
 800bcec:	9303      	str	r3, [sp, #12]
 800bcee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcf0:	443b      	add	r3, r7
 800bcf2:	9309      	str	r3, [sp, #36]	@ 0x24
 800bcf4:	e76a      	b.n	800bbcc <_vfiprintf_r+0x78>
 800bcf6:	fb0c 3202 	mla	r2, ip, r2, r3
 800bcfa:	460c      	mov	r4, r1
 800bcfc:	2001      	movs	r0, #1
 800bcfe:	e7a8      	b.n	800bc52 <_vfiprintf_r+0xfe>
 800bd00:	2300      	movs	r3, #0
 800bd02:	3401      	adds	r4, #1
 800bd04:	9305      	str	r3, [sp, #20]
 800bd06:	4619      	mov	r1, r3
 800bd08:	f04f 0c0a 	mov.w	ip, #10
 800bd0c:	4620      	mov	r0, r4
 800bd0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd12:	3a30      	subs	r2, #48	@ 0x30
 800bd14:	2a09      	cmp	r2, #9
 800bd16:	d903      	bls.n	800bd20 <_vfiprintf_r+0x1cc>
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d0c6      	beq.n	800bcaa <_vfiprintf_r+0x156>
 800bd1c:	9105      	str	r1, [sp, #20]
 800bd1e:	e7c4      	b.n	800bcaa <_vfiprintf_r+0x156>
 800bd20:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd24:	4604      	mov	r4, r0
 800bd26:	2301      	movs	r3, #1
 800bd28:	e7f0      	b.n	800bd0c <_vfiprintf_r+0x1b8>
 800bd2a:	ab03      	add	r3, sp, #12
 800bd2c:	9300      	str	r3, [sp, #0]
 800bd2e:	462a      	mov	r2, r5
 800bd30:	4b12      	ldr	r3, [pc, #72]	@ (800bd7c <_vfiprintf_r+0x228>)
 800bd32:	a904      	add	r1, sp, #16
 800bd34:	4630      	mov	r0, r6
 800bd36:	f7fc fde3 	bl	8008900 <_printf_float>
 800bd3a:	4607      	mov	r7, r0
 800bd3c:	1c78      	adds	r0, r7, #1
 800bd3e:	d1d6      	bne.n	800bcee <_vfiprintf_r+0x19a>
 800bd40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd42:	07d9      	lsls	r1, r3, #31
 800bd44:	d405      	bmi.n	800bd52 <_vfiprintf_r+0x1fe>
 800bd46:	89ab      	ldrh	r3, [r5, #12]
 800bd48:	059a      	lsls	r2, r3, #22
 800bd4a:	d402      	bmi.n	800bd52 <_vfiprintf_r+0x1fe>
 800bd4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd4e:	f7fe fbdb 	bl	800a508 <__retarget_lock_release_recursive>
 800bd52:	89ab      	ldrh	r3, [r5, #12]
 800bd54:	065b      	lsls	r3, r3, #25
 800bd56:	f53f af1f 	bmi.w	800bb98 <_vfiprintf_r+0x44>
 800bd5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bd5c:	e71e      	b.n	800bb9c <_vfiprintf_r+0x48>
 800bd5e:	ab03      	add	r3, sp, #12
 800bd60:	9300      	str	r3, [sp, #0]
 800bd62:	462a      	mov	r2, r5
 800bd64:	4b05      	ldr	r3, [pc, #20]	@ (800bd7c <_vfiprintf_r+0x228>)
 800bd66:	a904      	add	r1, sp, #16
 800bd68:	4630      	mov	r0, r6
 800bd6a:	f7fd f861 	bl	8008e30 <_printf_i>
 800bd6e:	e7e4      	b.n	800bd3a <_vfiprintf_r+0x1e6>
 800bd70:	0800deae 	.word	0x0800deae
 800bd74:	0800deb8 	.word	0x0800deb8
 800bd78:	08008901 	.word	0x08008901
 800bd7c:	0800bb2f 	.word	0x0800bb2f
 800bd80:	0800deb4 	.word	0x0800deb4

0800bd84 <malloc>:
 800bd84:	4b02      	ldr	r3, [pc, #8]	@ (800bd90 <malloc+0xc>)
 800bd86:	4601      	mov	r1, r0
 800bd88:	6818      	ldr	r0, [r3, #0]
 800bd8a:	f000 b825 	b.w	800bdd8 <_malloc_r>
 800bd8e:	bf00      	nop
 800bd90:	200001c4 	.word	0x200001c4

0800bd94 <sbrk_aligned>:
 800bd94:	b570      	push	{r4, r5, r6, lr}
 800bd96:	4e0f      	ldr	r6, [pc, #60]	@ (800bdd4 <sbrk_aligned+0x40>)
 800bd98:	460c      	mov	r4, r1
 800bd9a:	6831      	ldr	r1, [r6, #0]
 800bd9c:	4605      	mov	r5, r0
 800bd9e:	b911      	cbnz	r1, 800bda6 <sbrk_aligned+0x12>
 800bda0:	f000 fffc 	bl	800cd9c <_sbrk_r>
 800bda4:	6030      	str	r0, [r6, #0]
 800bda6:	4621      	mov	r1, r4
 800bda8:	4628      	mov	r0, r5
 800bdaa:	f000 fff7 	bl	800cd9c <_sbrk_r>
 800bdae:	1c43      	adds	r3, r0, #1
 800bdb0:	d103      	bne.n	800bdba <sbrk_aligned+0x26>
 800bdb2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800bdb6:	4620      	mov	r0, r4
 800bdb8:	bd70      	pop	{r4, r5, r6, pc}
 800bdba:	1cc4      	adds	r4, r0, #3
 800bdbc:	f024 0403 	bic.w	r4, r4, #3
 800bdc0:	42a0      	cmp	r0, r4
 800bdc2:	d0f8      	beq.n	800bdb6 <sbrk_aligned+0x22>
 800bdc4:	1a21      	subs	r1, r4, r0
 800bdc6:	4628      	mov	r0, r5
 800bdc8:	f000 ffe8 	bl	800cd9c <_sbrk_r>
 800bdcc:	3001      	adds	r0, #1
 800bdce:	d1f2      	bne.n	800bdb6 <sbrk_aligned+0x22>
 800bdd0:	e7ef      	b.n	800bdb2 <sbrk_aligned+0x1e>
 800bdd2:	bf00      	nop
 800bdd4:	200008cc 	.word	0x200008cc

0800bdd8 <_malloc_r>:
 800bdd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bddc:	1ccd      	adds	r5, r1, #3
 800bdde:	f025 0503 	bic.w	r5, r5, #3
 800bde2:	3508      	adds	r5, #8
 800bde4:	2d0c      	cmp	r5, #12
 800bde6:	bf38      	it	cc
 800bde8:	250c      	movcc	r5, #12
 800bdea:	2d00      	cmp	r5, #0
 800bdec:	4606      	mov	r6, r0
 800bdee:	db01      	blt.n	800bdf4 <_malloc_r+0x1c>
 800bdf0:	42a9      	cmp	r1, r5
 800bdf2:	d904      	bls.n	800bdfe <_malloc_r+0x26>
 800bdf4:	230c      	movs	r3, #12
 800bdf6:	6033      	str	r3, [r6, #0]
 800bdf8:	2000      	movs	r0, #0
 800bdfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdfe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bed4 <_malloc_r+0xfc>
 800be02:	f000 f927 	bl	800c054 <__malloc_lock>
 800be06:	f8d8 3000 	ldr.w	r3, [r8]
 800be0a:	461c      	mov	r4, r3
 800be0c:	bb44      	cbnz	r4, 800be60 <_malloc_r+0x88>
 800be0e:	4629      	mov	r1, r5
 800be10:	4630      	mov	r0, r6
 800be12:	f7ff ffbf 	bl	800bd94 <sbrk_aligned>
 800be16:	1c43      	adds	r3, r0, #1
 800be18:	4604      	mov	r4, r0
 800be1a:	d158      	bne.n	800bece <_malloc_r+0xf6>
 800be1c:	f8d8 4000 	ldr.w	r4, [r8]
 800be20:	4627      	mov	r7, r4
 800be22:	2f00      	cmp	r7, #0
 800be24:	d143      	bne.n	800beae <_malloc_r+0xd6>
 800be26:	2c00      	cmp	r4, #0
 800be28:	d04b      	beq.n	800bec2 <_malloc_r+0xea>
 800be2a:	6823      	ldr	r3, [r4, #0]
 800be2c:	4639      	mov	r1, r7
 800be2e:	4630      	mov	r0, r6
 800be30:	eb04 0903 	add.w	r9, r4, r3
 800be34:	f000 ffb2 	bl	800cd9c <_sbrk_r>
 800be38:	4581      	cmp	r9, r0
 800be3a:	d142      	bne.n	800bec2 <_malloc_r+0xea>
 800be3c:	6821      	ldr	r1, [r4, #0]
 800be3e:	1a6d      	subs	r5, r5, r1
 800be40:	4629      	mov	r1, r5
 800be42:	4630      	mov	r0, r6
 800be44:	f7ff ffa6 	bl	800bd94 <sbrk_aligned>
 800be48:	3001      	adds	r0, #1
 800be4a:	d03a      	beq.n	800bec2 <_malloc_r+0xea>
 800be4c:	6823      	ldr	r3, [r4, #0]
 800be4e:	442b      	add	r3, r5
 800be50:	6023      	str	r3, [r4, #0]
 800be52:	f8d8 3000 	ldr.w	r3, [r8]
 800be56:	685a      	ldr	r2, [r3, #4]
 800be58:	bb62      	cbnz	r2, 800beb4 <_malloc_r+0xdc>
 800be5a:	f8c8 7000 	str.w	r7, [r8]
 800be5e:	e00f      	b.n	800be80 <_malloc_r+0xa8>
 800be60:	6822      	ldr	r2, [r4, #0]
 800be62:	1b52      	subs	r2, r2, r5
 800be64:	d420      	bmi.n	800bea8 <_malloc_r+0xd0>
 800be66:	2a0b      	cmp	r2, #11
 800be68:	d917      	bls.n	800be9a <_malloc_r+0xc2>
 800be6a:	1961      	adds	r1, r4, r5
 800be6c:	42a3      	cmp	r3, r4
 800be6e:	6025      	str	r5, [r4, #0]
 800be70:	bf18      	it	ne
 800be72:	6059      	strne	r1, [r3, #4]
 800be74:	6863      	ldr	r3, [r4, #4]
 800be76:	bf08      	it	eq
 800be78:	f8c8 1000 	streq.w	r1, [r8]
 800be7c:	5162      	str	r2, [r4, r5]
 800be7e:	604b      	str	r3, [r1, #4]
 800be80:	4630      	mov	r0, r6
 800be82:	f000 f8ed 	bl	800c060 <__malloc_unlock>
 800be86:	f104 000b 	add.w	r0, r4, #11
 800be8a:	1d23      	adds	r3, r4, #4
 800be8c:	f020 0007 	bic.w	r0, r0, #7
 800be90:	1ac2      	subs	r2, r0, r3
 800be92:	bf1c      	itt	ne
 800be94:	1a1b      	subne	r3, r3, r0
 800be96:	50a3      	strne	r3, [r4, r2]
 800be98:	e7af      	b.n	800bdfa <_malloc_r+0x22>
 800be9a:	6862      	ldr	r2, [r4, #4]
 800be9c:	42a3      	cmp	r3, r4
 800be9e:	bf0c      	ite	eq
 800bea0:	f8c8 2000 	streq.w	r2, [r8]
 800bea4:	605a      	strne	r2, [r3, #4]
 800bea6:	e7eb      	b.n	800be80 <_malloc_r+0xa8>
 800bea8:	4623      	mov	r3, r4
 800beaa:	6864      	ldr	r4, [r4, #4]
 800beac:	e7ae      	b.n	800be0c <_malloc_r+0x34>
 800beae:	463c      	mov	r4, r7
 800beb0:	687f      	ldr	r7, [r7, #4]
 800beb2:	e7b6      	b.n	800be22 <_malloc_r+0x4a>
 800beb4:	461a      	mov	r2, r3
 800beb6:	685b      	ldr	r3, [r3, #4]
 800beb8:	42a3      	cmp	r3, r4
 800beba:	d1fb      	bne.n	800beb4 <_malloc_r+0xdc>
 800bebc:	2300      	movs	r3, #0
 800bebe:	6053      	str	r3, [r2, #4]
 800bec0:	e7de      	b.n	800be80 <_malloc_r+0xa8>
 800bec2:	230c      	movs	r3, #12
 800bec4:	6033      	str	r3, [r6, #0]
 800bec6:	4630      	mov	r0, r6
 800bec8:	f000 f8ca 	bl	800c060 <__malloc_unlock>
 800becc:	e794      	b.n	800bdf8 <_malloc_r+0x20>
 800bece:	6005      	str	r5, [r0, #0]
 800bed0:	e7d6      	b.n	800be80 <_malloc_r+0xa8>
 800bed2:	bf00      	nop
 800bed4:	200008d0 	.word	0x200008d0

0800bed8 <__ascii_mbtowc>:
 800bed8:	b082      	sub	sp, #8
 800beda:	b901      	cbnz	r1, 800bede <__ascii_mbtowc+0x6>
 800bedc:	a901      	add	r1, sp, #4
 800bede:	b142      	cbz	r2, 800bef2 <__ascii_mbtowc+0x1a>
 800bee0:	b14b      	cbz	r3, 800bef6 <__ascii_mbtowc+0x1e>
 800bee2:	7813      	ldrb	r3, [r2, #0]
 800bee4:	600b      	str	r3, [r1, #0]
 800bee6:	7812      	ldrb	r2, [r2, #0]
 800bee8:	1e10      	subs	r0, r2, #0
 800beea:	bf18      	it	ne
 800beec:	2001      	movne	r0, #1
 800beee:	b002      	add	sp, #8
 800bef0:	4770      	bx	lr
 800bef2:	4610      	mov	r0, r2
 800bef4:	e7fb      	b.n	800beee <__ascii_mbtowc+0x16>
 800bef6:	f06f 0001 	mvn.w	r0, #1
 800befa:	e7f8      	b.n	800beee <__ascii_mbtowc+0x16>

0800befc <__sflush_r>:
 800befc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bf00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf04:	0716      	lsls	r6, r2, #28
 800bf06:	4605      	mov	r5, r0
 800bf08:	460c      	mov	r4, r1
 800bf0a:	d454      	bmi.n	800bfb6 <__sflush_r+0xba>
 800bf0c:	684b      	ldr	r3, [r1, #4]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	dc02      	bgt.n	800bf18 <__sflush_r+0x1c>
 800bf12:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	dd48      	ble.n	800bfaa <__sflush_r+0xae>
 800bf18:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bf1a:	2e00      	cmp	r6, #0
 800bf1c:	d045      	beq.n	800bfaa <__sflush_r+0xae>
 800bf1e:	2300      	movs	r3, #0
 800bf20:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bf24:	682f      	ldr	r7, [r5, #0]
 800bf26:	6a21      	ldr	r1, [r4, #32]
 800bf28:	602b      	str	r3, [r5, #0]
 800bf2a:	d030      	beq.n	800bf8e <__sflush_r+0x92>
 800bf2c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bf2e:	89a3      	ldrh	r3, [r4, #12]
 800bf30:	0759      	lsls	r1, r3, #29
 800bf32:	d505      	bpl.n	800bf40 <__sflush_r+0x44>
 800bf34:	6863      	ldr	r3, [r4, #4]
 800bf36:	1ad2      	subs	r2, r2, r3
 800bf38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bf3a:	b10b      	cbz	r3, 800bf40 <__sflush_r+0x44>
 800bf3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bf3e:	1ad2      	subs	r2, r2, r3
 800bf40:	2300      	movs	r3, #0
 800bf42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bf44:	6a21      	ldr	r1, [r4, #32]
 800bf46:	4628      	mov	r0, r5
 800bf48:	47b0      	blx	r6
 800bf4a:	1c43      	adds	r3, r0, #1
 800bf4c:	89a3      	ldrh	r3, [r4, #12]
 800bf4e:	d106      	bne.n	800bf5e <__sflush_r+0x62>
 800bf50:	6829      	ldr	r1, [r5, #0]
 800bf52:	291d      	cmp	r1, #29
 800bf54:	d82b      	bhi.n	800bfae <__sflush_r+0xb2>
 800bf56:	4a2a      	ldr	r2, [pc, #168]	@ (800c000 <__sflush_r+0x104>)
 800bf58:	410a      	asrs	r2, r1
 800bf5a:	07d6      	lsls	r6, r2, #31
 800bf5c:	d427      	bmi.n	800bfae <__sflush_r+0xb2>
 800bf5e:	2200      	movs	r2, #0
 800bf60:	6062      	str	r2, [r4, #4]
 800bf62:	04d9      	lsls	r1, r3, #19
 800bf64:	6922      	ldr	r2, [r4, #16]
 800bf66:	6022      	str	r2, [r4, #0]
 800bf68:	d504      	bpl.n	800bf74 <__sflush_r+0x78>
 800bf6a:	1c42      	adds	r2, r0, #1
 800bf6c:	d101      	bne.n	800bf72 <__sflush_r+0x76>
 800bf6e:	682b      	ldr	r3, [r5, #0]
 800bf70:	b903      	cbnz	r3, 800bf74 <__sflush_r+0x78>
 800bf72:	6560      	str	r0, [r4, #84]	@ 0x54
 800bf74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bf76:	602f      	str	r7, [r5, #0]
 800bf78:	b1b9      	cbz	r1, 800bfaa <__sflush_r+0xae>
 800bf7a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bf7e:	4299      	cmp	r1, r3
 800bf80:	d002      	beq.n	800bf88 <__sflush_r+0x8c>
 800bf82:	4628      	mov	r0, r5
 800bf84:	f000 ff5e 	bl	800ce44 <_free_r>
 800bf88:	2300      	movs	r3, #0
 800bf8a:	6363      	str	r3, [r4, #52]	@ 0x34
 800bf8c:	e00d      	b.n	800bfaa <__sflush_r+0xae>
 800bf8e:	2301      	movs	r3, #1
 800bf90:	4628      	mov	r0, r5
 800bf92:	47b0      	blx	r6
 800bf94:	4602      	mov	r2, r0
 800bf96:	1c50      	adds	r0, r2, #1
 800bf98:	d1c9      	bne.n	800bf2e <__sflush_r+0x32>
 800bf9a:	682b      	ldr	r3, [r5, #0]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d0c6      	beq.n	800bf2e <__sflush_r+0x32>
 800bfa0:	2b1d      	cmp	r3, #29
 800bfa2:	d001      	beq.n	800bfa8 <__sflush_r+0xac>
 800bfa4:	2b16      	cmp	r3, #22
 800bfa6:	d11e      	bne.n	800bfe6 <__sflush_r+0xea>
 800bfa8:	602f      	str	r7, [r5, #0]
 800bfaa:	2000      	movs	r0, #0
 800bfac:	e022      	b.n	800bff4 <__sflush_r+0xf8>
 800bfae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bfb2:	b21b      	sxth	r3, r3
 800bfb4:	e01b      	b.n	800bfee <__sflush_r+0xf2>
 800bfb6:	690f      	ldr	r7, [r1, #16]
 800bfb8:	2f00      	cmp	r7, #0
 800bfba:	d0f6      	beq.n	800bfaa <__sflush_r+0xae>
 800bfbc:	0793      	lsls	r3, r2, #30
 800bfbe:	680e      	ldr	r6, [r1, #0]
 800bfc0:	bf08      	it	eq
 800bfc2:	694b      	ldreq	r3, [r1, #20]
 800bfc4:	600f      	str	r7, [r1, #0]
 800bfc6:	bf18      	it	ne
 800bfc8:	2300      	movne	r3, #0
 800bfca:	eba6 0807 	sub.w	r8, r6, r7
 800bfce:	608b      	str	r3, [r1, #8]
 800bfd0:	f1b8 0f00 	cmp.w	r8, #0
 800bfd4:	dde9      	ble.n	800bfaa <__sflush_r+0xae>
 800bfd6:	6a21      	ldr	r1, [r4, #32]
 800bfd8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bfda:	4643      	mov	r3, r8
 800bfdc:	463a      	mov	r2, r7
 800bfde:	4628      	mov	r0, r5
 800bfe0:	47b0      	blx	r6
 800bfe2:	2800      	cmp	r0, #0
 800bfe4:	dc08      	bgt.n	800bff8 <__sflush_r+0xfc>
 800bfe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bfee:	81a3      	strh	r3, [r4, #12]
 800bff0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bff8:	4407      	add	r7, r0
 800bffa:	eba8 0800 	sub.w	r8, r8, r0
 800bffe:	e7e7      	b.n	800bfd0 <__sflush_r+0xd4>
 800c000:	dfbffffe 	.word	0xdfbffffe

0800c004 <_fflush_r>:
 800c004:	b538      	push	{r3, r4, r5, lr}
 800c006:	690b      	ldr	r3, [r1, #16]
 800c008:	4605      	mov	r5, r0
 800c00a:	460c      	mov	r4, r1
 800c00c:	b913      	cbnz	r3, 800c014 <_fflush_r+0x10>
 800c00e:	2500      	movs	r5, #0
 800c010:	4628      	mov	r0, r5
 800c012:	bd38      	pop	{r3, r4, r5, pc}
 800c014:	b118      	cbz	r0, 800c01e <_fflush_r+0x1a>
 800c016:	6a03      	ldr	r3, [r0, #32]
 800c018:	b90b      	cbnz	r3, 800c01e <_fflush_r+0x1a>
 800c01a:	f7fd fae9 	bl	80095f0 <__sinit>
 800c01e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d0f3      	beq.n	800c00e <_fflush_r+0xa>
 800c026:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c028:	07d0      	lsls	r0, r2, #31
 800c02a:	d404      	bmi.n	800c036 <_fflush_r+0x32>
 800c02c:	0599      	lsls	r1, r3, #22
 800c02e:	d402      	bmi.n	800c036 <_fflush_r+0x32>
 800c030:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c032:	f7fe fa68 	bl	800a506 <__retarget_lock_acquire_recursive>
 800c036:	4628      	mov	r0, r5
 800c038:	4621      	mov	r1, r4
 800c03a:	f7ff ff5f 	bl	800befc <__sflush_r>
 800c03e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c040:	07da      	lsls	r2, r3, #31
 800c042:	4605      	mov	r5, r0
 800c044:	d4e4      	bmi.n	800c010 <_fflush_r+0xc>
 800c046:	89a3      	ldrh	r3, [r4, #12]
 800c048:	059b      	lsls	r3, r3, #22
 800c04a:	d4e1      	bmi.n	800c010 <_fflush_r+0xc>
 800c04c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c04e:	f7fe fa5b 	bl	800a508 <__retarget_lock_release_recursive>
 800c052:	e7dd      	b.n	800c010 <_fflush_r+0xc>

0800c054 <__malloc_lock>:
 800c054:	4801      	ldr	r0, [pc, #4]	@ (800c05c <__malloc_lock+0x8>)
 800c056:	f7fe ba56 	b.w	800a506 <__retarget_lock_acquire_recursive>
 800c05a:	bf00      	nop
 800c05c:	200008c8 	.word	0x200008c8

0800c060 <__malloc_unlock>:
 800c060:	4801      	ldr	r0, [pc, #4]	@ (800c068 <__malloc_unlock+0x8>)
 800c062:	f7fe ba51 	b.w	800a508 <__retarget_lock_release_recursive>
 800c066:	bf00      	nop
 800c068:	200008c8 	.word	0x200008c8

0800c06c <_Balloc>:
 800c06c:	b570      	push	{r4, r5, r6, lr}
 800c06e:	69c6      	ldr	r6, [r0, #28]
 800c070:	4604      	mov	r4, r0
 800c072:	460d      	mov	r5, r1
 800c074:	b976      	cbnz	r6, 800c094 <_Balloc+0x28>
 800c076:	2010      	movs	r0, #16
 800c078:	f7ff fe84 	bl	800bd84 <malloc>
 800c07c:	4602      	mov	r2, r0
 800c07e:	61e0      	str	r0, [r4, #28]
 800c080:	b920      	cbnz	r0, 800c08c <_Balloc+0x20>
 800c082:	4b18      	ldr	r3, [pc, #96]	@ (800c0e4 <_Balloc+0x78>)
 800c084:	4818      	ldr	r0, [pc, #96]	@ (800c0e8 <_Balloc+0x7c>)
 800c086:	216b      	movs	r1, #107	@ 0x6b
 800c088:	f000 feaa 	bl	800cde0 <__assert_func>
 800c08c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c090:	6006      	str	r6, [r0, #0]
 800c092:	60c6      	str	r6, [r0, #12]
 800c094:	69e6      	ldr	r6, [r4, #28]
 800c096:	68f3      	ldr	r3, [r6, #12]
 800c098:	b183      	cbz	r3, 800c0bc <_Balloc+0x50>
 800c09a:	69e3      	ldr	r3, [r4, #28]
 800c09c:	68db      	ldr	r3, [r3, #12]
 800c09e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c0a2:	b9b8      	cbnz	r0, 800c0d4 <_Balloc+0x68>
 800c0a4:	2101      	movs	r1, #1
 800c0a6:	fa01 f605 	lsl.w	r6, r1, r5
 800c0aa:	1d72      	adds	r2, r6, #5
 800c0ac:	0092      	lsls	r2, r2, #2
 800c0ae:	4620      	mov	r0, r4
 800c0b0:	f000 feb4 	bl	800ce1c <_calloc_r>
 800c0b4:	b160      	cbz	r0, 800c0d0 <_Balloc+0x64>
 800c0b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c0ba:	e00e      	b.n	800c0da <_Balloc+0x6e>
 800c0bc:	2221      	movs	r2, #33	@ 0x21
 800c0be:	2104      	movs	r1, #4
 800c0c0:	4620      	mov	r0, r4
 800c0c2:	f000 feab 	bl	800ce1c <_calloc_r>
 800c0c6:	69e3      	ldr	r3, [r4, #28]
 800c0c8:	60f0      	str	r0, [r6, #12]
 800c0ca:	68db      	ldr	r3, [r3, #12]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d1e4      	bne.n	800c09a <_Balloc+0x2e>
 800c0d0:	2000      	movs	r0, #0
 800c0d2:	bd70      	pop	{r4, r5, r6, pc}
 800c0d4:	6802      	ldr	r2, [r0, #0]
 800c0d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c0da:	2300      	movs	r3, #0
 800c0dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c0e0:	e7f7      	b.n	800c0d2 <_Balloc+0x66>
 800c0e2:	bf00      	nop
 800c0e4:	0800ddce 	.word	0x0800ddce
 800c0e8:	0800debf 	.word	0x0800debf

0800c0ec <_Bfree>:
 800c0ec:	b570      	push	{r4, r5, r6, lr}
 800c0ee:	69c6      	ldr	r6, [r0, #28]
 800c0f0:	4605      	mov	r5, r0
 800c0f2:	460c      	mov	r4, r1
 800c0f4:	b976      	cbnz	r6, 800c114 <_Bfree+0x28>
 800c0f6:	2010      	movs	r0, #16
 800c0f8:	f7ff fe44 	bl	800bd84 <malloc>
 800c0fc:	4602      	mov	r2, r0
 800c0fe:	61e8      	str	r0, [r5, #28]
 800c100:	b920      	cbnz	r0, 800c10c <_Bfree+0x20>
 800c102:	4b09      	ldr	r3, [pc, #36]	@ (800c128 <_Bfree+0x3c>)
 800c104:	4809      	ldr	r0, [pc, #36]	@ (800c12c <_Bfree+0x40>)
 800c106:	218f      	movs	r1, #143	@ 0x8f
 800c108:	f000 fe6a 	bl	800cde0 <__assert_func>
 800c10c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c110:	6006      	str	r6, [r0, #0]
 800c112:	60c6      	str	r6, [r0, #12]
 800c114:	b13c      	cbz	r4, 800c126 <_Bfree+0x3a>
 800c116:	69eb      	ldr	r3, [r5, #28]
 800c118:	6862      	ldr	r2, [r4, #4]
 800c11a:	68db      	ldr	r3, [r3, #12]
 800c11c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c120:	6021      	str	r1, [r4, #0]
 800c122:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c126:	bd70      	pop	{r4, r5, r6, pc}
 800c128:	0800ddce 	.word	0x0800ddce
 800c12c:	0800debf 	.word	0x0800debf

0800c130 <__multadd>:
 800c130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c134:	690d      	ldr	r5, [r1, #16]
 800c136:	4607      	mov	r7, r0
 800c138:	460c      	mov	r4, r1
 800c13a:	461e      	mov	r6, r3
 800c13c:	f101 0c14 	add.w	ip, r1, #20
 800c140:	2000      	movs	r0, #0
 800c142:	f8dc 3000 	ldr.w	r3, [ip]
 800c146:	b299      	uxth	r1, r3
 800c148:	fb02 6101 	mla	r1, r2, r1, r6
 800c14c:	0c1e      	lsrs	r6, r3, #16
 800c14e:	0c0b      	lsrs	r3, r1, #16
 800c150:	fb02 3306 	mla	r3, r2, r6, r3
 800c154:	b289      	uxth	r1, r1
 800c156:	3001      	adds	r0, #1
 800c158:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c15c:	4285      	cmp	r5, r0
 800c15e:	f84c 1b04 	str.w	r1, [ip], #4
 800c162:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c166:	dcec      	bgt.n	800c142 <__multadd+0x12>
 800c168:	b30e      	cbz	r6, 800c1ae <__multadd+0x7e>
 800c16a:	68a3      	ldr	r3, [r4, #8]
 800c16c:	42ab      	cmp	r3, r5
 800c16e:	dc19      	bgt.n	800c1a4 <__multadd+0x74>
 800c170:	6861      	ldr	r1, [r4, #4]
 800c172:	4638      	mov	r0, r7
 800c174:	3101      	adds	r1, #1
 800c176:	f7ff ff79 	bl	800c06c <_Balloc>
 800c17a:	4680      	mov	r8, r0
 800c17c:	b928      	cbnz	r0, 800c18a <__multadd+0x5a>
 800c17e:	4602      	mov	r2, r0
 800c180:	4b0c      	ldr	r3, [pc, #48]	@ (800c1b4 <__multadd+0x84>)
 800c182:	480d      	ldr	r0, [pc, #52]	@ (800c1b8 <__multadd+0x88>)
 800c184:	21ba      	movs	r1, #186	@ 0xba
 800c186:	f000 fe2b 	bl	800cde0 <__assert_func>
 800c18a:	6922      	ldr	r2, [r4, #16]
 800c18c:	3202      	adds	r2, #2
 800c18e:	f104 010c 	add.w	r1, r4, #12
 800c192:	0092      	lsls	r2, r2, #2
 800c194:	300c      	adds	r0, #12
 800c196:	f7fe f9b8 	bl	800a50a <memcpy>
 800c19a:	4621      	mov	r1, r4
 800c19c:	4638      	mov	r0, r7
 800c19e:	f7ff ffa5 	bl	800c0ec <_Bfree>
 800c1a2:	4644      	mov	r4, r8
 800c1a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c1a8:	3501      	adds	r5, #1
 800c1aa:	615e      	str	r6, [r3, #20]
 800c1ac:	6125      	str	r5, [r4, #16]
 800c1ae:	4620      	mov	r0, r4
 800c1b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1b4:	0800de3d 	.word	0x0800de3d
 800c1b8:	0800debf 	.word	0x0800debf

0800c1bc <__s2b>:
 800c1bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1c0:	460c      	mov	r4, r1
 800c1c2:	4615      	mov	r5, r2
 800c1c4:	461f      	mov	r7, r3
 800c1c6:	2209      	movs	r2, #9
 800c1c8:	3308      	adds	r3, #8
 800c1ca:	4606      	mov	r6, r0
 800c1cc:	fb93 f3f2 	sdiv	r3, r3, r2
 800c1d0:	2100      	movs	r1, #0
 800c1d2:	2201      	movs	r2, #1
 800c1d4:	429a      	cmp	r2, r3
 800c1d6:	db09      	blt.n	800c1ec <__s2b+0x30>
 800c1d8:	4630      	mov	r0, r6
 800c1da:	f7ff ff47 	bl	800c06c <_Balloc>
 800c1de:	b940      	cbnz	r0, 800c1f2 <__s2b+0x36>
 800c1e0:	4602      	mov	r2, r0
 800c1e2:	4b19      	ldr	r3, [pc, #100]	@ (800c248 <__s2b+0x8c>)
 800c1e4:	4819      	ldr	r0, [pc, #100]	@ (800c24c <__s2b+0x90>)
 800c1e6:	21d3      	movs	r1, #211	@ 0xd3
 800c1e8:	f000 fdfa 	bl	800cde0 <__assert_func>
 800c1ec:	0052      	lsls	r2, r2, #1
 800c1ee:	3101      	adds	r1, #1
 800c1f0:	e7f0      	b.n	800c1d4 <__s2b+0x18>
 800c1f2:	9b08      	ldr	r3, [sp, #32]
 800c1f4:	6143      	str	r3, [r0, #20]
 800c1f6:	2d09      	cmp	r5, #9
 800c1f8:	f04f 0301 	mov.w	r3, #1
 800c1fc:	6103      	str	r3, [r0, #16]
 800c1fe:	dd16      	ble.n	800c22e <__s2b+0x72>
 800c200:	f104 0909 	add.w	r9, r4, #9
 800c204:	46c8      	mov	r8, r9
 800c206:	442c      	add	r4, r5
 800c208:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c20c:	4601      	mov	r1, r0
 800c20e:	3b30      	subs	r3, #48	@ 0x30
 800c210:	220a      	movs	r2, #10
 800c212:	4630      	mov	r0, r6
 800c214:	f7ff ff8c 	bl	800c130 <__multadd>
 800c218:	45a0      	cmp	r8, r4
 800c21a:	d1f5      	bne.n	800c208 <__s2b+0x4c>
 800c21c:	f1a5 0408 	sub.w	r4, r5, #8
 800c220:	444c      	add	r4, r9
 800c222:	1b2d      	subs	r5, r5, r4
 800c224:	1963      	adds	r3, r4, r5
 800c226:	42bb      	cmp	r3, r7
 800c228:	db04      	blt.n	800c234 <__s2b+0x78>
 800c22a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c22e:	340a      	adds	r4, #10
 800c230:	2509      	movs	r5, #9
 800c232:	e7f6      	b.n	800c222 <__s2b+0x66>
 800c234:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c238:	4601      	mov	r1, r0
 800c23a:	3b30      	subs	r3, #48	@ 0x30
 800c23c:	220a      	movs	r2, #10
 800c23e:	4630      	mov	r0, r6
 800c240:	f7ff ff76 	bl	800c130 <__multadd>
 800c244:	e7ee      	b.n	800c224 <__s2b+0x68>
 800c246:	bf00      	nop
 800c248:	0800de3d 	.word	0x0800de3d
 800c24c:	0800debf 	.word	0x0800debf

0800c250 <__hi0bits>:
 800c250:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c254:	4603      	mov	r3, r0
 800c256:	bf36      	itet	cc
 800c258:	0403      	lslcc	r3, r0, #16
 800c25a:	2000      	movcs	r0, #0
 800c25c:	2010      	movcc	r0, #16
 800c25e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c262:	bf3c      	itt	cc
 800c264:	021b      	lslcc	r3, r3, #8
 800c266:	3008      	addcc	r0, #8
 800c268:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c26c:	bf3c      	itt	cc
 800c26e:	011b      	lslcc	r3, r3, #4
 800c270:	3004      	addcc	r0, #4
 800c272:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c276:	bf3c      	itt	cc
 800c278:	009b      	lslcc	r3, r3, #2
 800c27a:	3002      	addcc	r0, #2
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	db05      	blt.n	800c28c <__hi0bits+0x3c>
 800c280:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c284:	f100 0001 	add.w	r0, r0, #1
 800c288:	bf08      	it	eq
 800c28a:	2020      	moveq	r0, #32
 800c28c:	4770      	bx	lr

0800c28e <__lo0bits>:
 800c28e:	6803      	ldr	r3, [r0, #0]
 800c290:	4602      	mov	r2, r0
 800c292:	f013 0007 	ands.w	r0, r3, #7
 800c296:	d00b      	beq.n	800c2b0 <__lo0bits+0x22>
 800c298:	07d9      	lsls	r1, r3, #31
 800c29a:	d421      	bmi.n	800c2e0 <__lo0bits+0x52>
 800c29c:	0798      	lsls	r0, r3, #30
 800c29e:	bf49      	itett	mi
 800c2a0:	085b      	lsrmi	r3, r3, #1
 800c2a2:	089b      	lsrpl	r3, r3, #2
 800c2a4:	2001      	movmi	r0, #1
 800c2a6:	6013      	strmi	r3, [r2, #0]
 800c2a8:	bf5c      	itt	pl
 800c2aa:	6013      	strpl	r3, [r2, #0]
 800c2ac:	2002      	movpl	r0, #2
 800c2ae:	4770      	bx	lr
 800c2b0:	b299      	uxth	r1, r3
 800c2b2:	b909      	cbnz	r1, 800c2b8 <__lo0bits+0x2a>
 800c2b4:	0c1b      	lsrs	r3, r3, #16
 800c2b6:	2010      	movs	r0, #16
 800c2b8:	b2d9      	uxtb	r1, r3
 800c2ba:	b909      	cbnz	r1, 800c2c0 <__lo0bits+0x32>
 800c2bc:	3008      	adds	r0, #8
 800c2be:	0a1b      	lsrs	r3, r3, #8
 800c2c0:	0719      	lsls	r1, r3, #28
 800c2c2:	bf04      	itt	eq
 800c2c4:	091b      	lsreq	r3, r3, #4
 800c2c6:	3004      	addeq	r0, #4
 800c2c8:	0799      	lsls	r1, r3, #30
 800c2ca:	bf04      	itt	eq
 800c2cc:	089b      	lsreq	r3, r3, #2
 800c2ce:	3002      	addeq	r0, #2
 800c2d0:	07d9      	lsls	r1, r3, #31
 800c2d2:	d403      	bmi.n	800c2dc <__lo0bits+0x4e>
 800c2d4:	085b      	lsrs	r3, r3, #1
 800c2d6:	f100 0001 	add.w	r0, r0, #1
 800c2da:	d003      	beq.n	800c2e4 <__lo0bits+0x56>
 800c2dc:	6013      	str	r3, [r2, #0]
 800c2de:	4770      	bx	lr
 800c2e0:	2000      	movs	r0, #0
 800c2e2:	4770      	bx	lr
 800c2e4:	2020      	movs	r0, #32
 800c2e6:	4770      	bx	lr

0800c2e8 <__i2b>:
 800c2e8:	b510      	push	{r4, lr}
 800c2ea:	460c      	mov	r4, r1
 800c2ec:	2101      	movs	r1, #1
 800c2ee:	f7ff febd 	bl	800c06c <_Balloc>
 800c2f2:	4602      	mov	r2, r0
 800c2f4:	b928      	cbnz	r0, 800c302 <__i2b+0x1a>
 800c2f6:	4b05      	ldr	r3, [pc, #20]	@ (800c30c <__i2b+0x24>)
 800c2f8:	4805      	ldr	r0, [pc, #20]	@ (800c310 <__i2b+0x28>)
 800c2fa:	f240 1145 	movw	r1, #325	@ 0x145
 800c2fe:	f000 fd6f 	bl	800cde0 <__assert_func>
 800c302:	2301      	movs	r3, #1
 800c304:	6144      	str	r4, [r0, #20]
 800c306:	6103      	str	r3, [r0, #16]
 800c308:	bd10      	pop	{r4, pc}
 800c30a:	bf00      	nop
 800c30c:	0800de3d 	.word	0x0800de3d
 800c310:	0800debf 	.word	0x0800debf

0800c314 <__multiply>:
 800c314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c318:	4614      	mov	r4, r2
 800c31a:	690a      	ldr	r2, [r1, #16]
 800c31c:	6923      	ldr	r3, [r4, #16]
 800c31e:	429a      	cmp	r2, r3
 800c320:	bfa8      	it	ge
 800c322:	4623      	movge	r3, r4
 800c324:	460f      	mov	r7, r1
 800c326:	bfa4      	itt	ge
 800c328:	460c      	movge	r4, r1
 800c32a:	461f      	movge	r7, r3
 800c32c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c330:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c334:	68a3      	ldr	r3, [r4, #8]
 800c336:	6861      	ldr	r1, [r4, #4]
 800c338:	eb0a 0609 	add.w	r6, sl, r9
 800c33c:	42b3      	cmp	r3, r6
 800c33e:	b085      	sub	sp, #20
 800c340:	bfb8      	it	lt
 800c342:	3101      	addlt	r1, #1
 800c344:	f7ff fe92 	bl	800c06c <_Balloc>
 800c348:	b930      	cbnz	r0, 800c358 <__multiply+0x44>
 800c34a:	4602      	mov	r2, r0
 800c34c:	4b44      	ldr	r3, [pc, #272]	@ (800c460 <__multiply+0x14c>)
 800c34e:	4845      	ldr	r0, [pc, #276]	@ (800c464 <__multiply+0x150>)
 800c350:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c354:	f000 fd44 	bl	800cde0 <__assert_func>
 800c358:	f100 0514 	add.w	r5, r0, #20
 800c35c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c360:	462b      	mov	r3, r5
 800c362:	2200      	movs	r2, #0
 800c364:	4543      	cmp	r3, r8
 800c366:	d321      	bcc.n	800c3ac <__multiply+0x98>
 800c368:	f107 0114 	add.w	r1, r7, #20
 800c36c:	f104 0214 	add.w	r2, r4, #20
 800c370:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c374:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c378:	9302      	str	r3, [sp, #8]
 800c37a:	1b13      	subs	r3, r2, r4
 800c37c:	3b15      	subs	r3, #21
 800c37e:	f023 0303 	bic.w	r3, r3, #3
 800c382:	3304      	adds	r3, #4
 800c384:	f104 0715 	add.w	r7, r4, #21
 800c388:	42ba      	cmp	r2, r7
 800c38a:	bf38      	it	cc
 800c38c:	2304      	movcc	r3, #4
 800c38e:	9301      	str	r3, [sp, #4]
 800c390:	9b02      	ldr	r3, [sp, #8]
 800c392:	9103      	str	r1, [sp, #12]
 800c394:	428b      	cmp	r3, r1
 800c396:	d80c      	bhi.n	800c3b2 <__multiply+0x9e>
 800c398:	2e00      	cmp	r6, #0
 800c39a:	dd03      	ble.n	800c3a4 <__multiply+0x90>
 800c39c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d05b      	beq.n	800c45c <__multiply+0x148>
 800c3a4:	6106      	str	r6, [r0, #16]
 800c3a6:	b005      	add	sp, #20
 800c3a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3ac:	f843 2b04 	str.w	r2, [r3], #4
 800c3b0:	e7d8      	b.n	800c364 <__multiply+0x50>
 800c3b2:	f8b1 a000 	ldrh.w	sl, [r1]
 800c3b6:	f1ba 0f00 	cmp.w	sl, #0
 800c3ba:	d024      	beq.n	800c406 <__multiply+0xf2>
 800c3bc:	f104 0e14 	add.w	lr, r4, #20
 800c3c0:	46a9      	mov	r9, r5
 800c3c2:	f04f 0c00 	mov.w	ip, #0
 800c3c6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c3ca:	f8d9 3000 	ldr.w	r3, [r9]
 800c3ce:	fa1f fb87 	uxth.w	fp, r7
 800c3d2:	b29b      	uxth	r3, r3
 800c3d4:	fb0a 330b 	mla	r3, sl, fp, r3
 800c3d8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c3dc:	f8d9 7000 	ldr.w	r7, [r9]
 800c3e0:	4463      	add	r3, ip
 800c3e2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c3e6:	fb0a c70b 	mla	r7, sl, fp, ip
 800c3ea:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c3ee:	b29b      	uxth	r3, r3
 800c3f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c3f4:	4572      	cmp	r2, lr
 800c3f6:	f849 3b04 	str.w	r3, [r9], #4
 800c3fa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c3fe:	d8e2      	bhi.n	800c3c6 <__multiply+0xb2>
 800c400:	9b01      	ldr	r3, [sp, #4]
 800c402:	f845 c003 	str.w	ip, [r5, r3]
 800c406:	9b03      	ldr	r3, [sp, #12]
 800c408:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c40c:	3104      	adds	r1, #4
 800c40e:	f1b9 0f00 	cmp.w	r9, #0
 800c412:	d021      	beq.n	800c458 <__multiply+0x144>
 800c414:	682b      	ldr	r3, [r5, #0]
 800c416:	f104 0c14 	add.w	ip, r4, #20
 800c41a:	46ae      	mov	lr, r5
 800c41c:	f04f 0a00 	mov.w	sl, #0
 800c420:	f8bc b000 	ldrh.w	fp, [ip]
 800c424:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c428:	fb09 770b 	mla	r7, r9, fp, r7
 800c42c:	4457      	add	r7, sl
 800c42e:	b29b      	uxth	r3, r3
 800c430:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c434:	f84e 3b04 	str.w	r3, [lr], #4
 800c438:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c43c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c440:	f8be 3000 	ldrh.w	r3, [lr]
 800c444:	fb09 330a 	mla	r3, r9, sl, r3
 800c448:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c44c:	4562      	cmp	r2, ip
 800c44e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c452:	d8e5      	bhi.n	800c420 <__multiply+0x10c>
 800c454:	9f01      	ldr	r7, [sp, #4]
 800c456:	51eb      	str	r3, [r5, r7]
 800c458:	3504      	adds	r5, #4
 800c45a:	e799      	b.n	800c390 <__multiply+0x7c>
 800c45c:	3e01      	subs	r6, #1
 800c45e:	e79b      	b.n	800c398 <__multiply+0x84>
 800c460:	0800de3d 	.word	0x0800de3d
 800c464:	0800debf 	.word	0x0800debf

0800c468 <__pow5mult>:
 800c468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c46c:	4615      	mov	r5, r2
 800c46e:	f012 0203 	ands.w	r2, r2, #3
 800c472:	4607      	mov	r7, r0
 800c474:	460e      	mov	r6, r1
 800c476:	d007      	beq.n	800c488 <__pow5mult+0x20>
 800c478:	4c25      	ldr	r4, [pc, #148]	@ (800c510 <__pow5mult+0xa8>)
 800c47a:	3a01      	subs	r2, #1
 800c47c:	2300      	movs	r3, #0
 800c47e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c482:	f7ff fe55 	bl	800c130 <__multadd>
 800c486:	4606      	mov	r6, r0
 800c488:	10ad      	asrs	r5, r5, #2
 800c48a:	d03d      	beq.n	800c508 <__pow5mult+0xa0>
 800c48c:	69fc      	ldr	r4, [r7, #28]
 800c48e:	b97c      	cbnz	r4, 800c4b0 <__pow5mult+0x48>
 800c490:	2010      	movs	r0, #16
 800c492:	f7ff fc77 	bl	800bd84 <malloc>
 800c496:	4602      	mov	r2, r0
 800c498:	61f8      	str	r0, [r7, #28]
 800c49a:	b928      	cbnz	r0, 800c4a8 <__pow5mult+0x40>
 800c49c:	4b1d      	ldr	r3, [pc, #116]	@ (800c514 <__pow5mult+0xac>)
 800c49e:	481e      	ldr	r0, [pc, #120]	@ (800c518 <__pow5mult+0xb0>)
 800c4a0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c4a4:	f000 fc9c 	bl	800cde0 <__assert_func>
 800c4a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c4ac:	6004      	str	r4, [r0, #0]
 800c4ae:	60c4      	str	r4, [r0, #12]
 800c4b0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c4b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c4b8:	b94c      	cbnz	r4, 800c4ce <__pow5mult+0x66>
 800c4ba:	f240 2171 	movw	r1, #625	@ 0x271
 800c4be:	4638      	mov	r0, r7
 800c4c0:	f7ff ff12 	bl	800c2e8 <__i2b>
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	f8c8 0008 	str.w	r0, [r8, #8]
 800c4ca:	4604      	mov	r4, r0
 800c4cc:	6003      	str	r3, [r0, #0]
 800c4ce:	f04f 0900 	mov.w	r9, #0
 800c4d2:	07eb      	lsls	r3, r5, #31
 800c4d4:	d50a      	bpl.n	800c4ec <__pow5mult+0x84>
 800c4d6:	4631      	mov	r1, r6
 800c4d8:	4622      	mov	r2, r4
 800c4da:	4638      	mov	r0, r7
 800c4dc:	f7ff ff1a 	bl	800c314 <__multiply>
 800c4e0:	4631      	mov	r1, r6
 800c4e2:	4680      	mov	r8, r0
 800c4e4:	4638      	mov	r0, r7
 800c4e6:	f7ff fe01 	bl	800c0ec <_Bfree>
 800c4ea:	4646      	mov	r6, r8
 800c4ec:	106d      	asrs	r5, r5, #1
 800c4ee:	d00b      	beq.n	800c508 <__pow5mult+0xa0>
 800c4f0:	6820      	ldr	r0, [r4, #0]
 800c4f2:	b938      	cbnz	r0, 800c504 <__pow5mult+0x9c>
 800c4f4:	4622      	mov	r2, r4
 800c4f6:	4621      	mov	r1, r4
 800c4f8:	4638      	mov	r0, r7
 800c4fa:	f7ff ff0b 	bl	800c314 <__multiply>
 800c4fe:	6020      	str	r0, [r4, #0]
 800c500:	f8c0 9000 	str.w	r9, [r0]
 800c504:	4604      	mov	r4, r0
 800c506:	e7e4      	b.n	800c4d2 <__pow5mult+0x6a>
 800c508:	4630      	mov	r0, r6
 800c50a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c50e:	bf00      	nop
 800c510:	0800df18 	.word	0x0800df18
 800c514:	0800ddce 	.word	0x0800ddce
 800c518:	0800debf 	.word	0x0800debf

0800c51c <__lshift>:
 800c51c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c520:	460c      	mov	r4, r1
 800c522:	6849      	ldr	r1, [r1, #4]
 800c524:	6923      	ldr	r3, [r4, #16]
 800c526:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c52a:	68a3      	ldr	r3, [r4, #8]
 800c52c:	4607      	mov	r7, r0
 800c52e:	4691      	mov	r9, r2
 800c530:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c534:	f108 0601 	add.w	r6, r8, #1
 800c538:	42b3      	cmp	r3, r6
 800c53a:	db0b      	blt.n	800c554 <__lshift+0x38>
 800c53c:	4638      	mov	r0, r7
 800c53e:	f7ff fd95 	bl	800c06c <_Balloc>
 800c542:	4605      	mov	r5, r0
 800c544:	b948      	cbnz	r0, 800c55a <__lshift+0x3e>
 800c546:	4602      	mov	r2, r0
 800c548:	4b28      	ldr	r3, [pc, #160]	@ (800c5ec <__lshift+0xd0>)
 800c54a:	4829      	ldr	r0, [pc, #164]	@ (800c5f0 <__lshift+0xd4>)
 800c54c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c550:	f000 fc46 	bl	800cde0 <__assert_func>
 800c554:	3101      	adds	r1, #1
 800c556:	005b      	lsls	r3, r3, #1
 800c558:	e7ee      	b.n	800c538 <__lshift+0x1c>
 800c55a:	2300      	movs	r3, #0
 800c55c:	f100 0114 	add.w	r1, r0, #20
 800c560:	f100 0210 	add.w	r2, r0, #16
 800c564:	4618      	mov	r0, r3
 800c566:	4553      	cmp	r3, sl
 800c568:	db33      	blt.n	800c5d2 <__lshift+0xb6>
 800c56a:	6920      	ldr	r0, [r4, #16]
 800c56c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c570:	f104 0314 	add.w	r3, r4, #20
 800c574:	f019 091f 	ands.w	r9, r9, #31
 800c578:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c57c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c580:	d02b      	beq.n	800c5da <__lshift+0xbe>
 800c582:	f1c9 0e20 	rsb	lr, r9, #32
 800c586:	468a      	mov	sl, r1
 800c588:	2200      	movs	r2, #0
 800c58a:	6818      	ldr	r0, [r3, #0]
 800c58c:	fa00 f009 	lsl.w	r0, r0, r9
 800c590:	4310      	orrs	r0, r2
 800c592:	f84a 0b04 	str.w	r0, [sl], #4
 800c596:	f853 2b04 	ldr.w	r2, [r3], #4
 800c59a:	459c      	cmp	ip, r3
 800c59c:	fa22 f20e 	lsr.w	r2, r2, lr
 800c5a0:	d8f3      	bhi.n	800c58a <__lshift+0x6e>
 800c5a2:	ebac 0304 	sub.w	r3, ip, r4
 800c5a6:	3b15      	subs	r3, #21
 800c5a8:	f023 0303 	bic.w	r3, r3, #3
 800c5ac:	3304      	adds	r3, #4
 800c5ae:	f104 0015 	add.w	r0, r4, #21
 800c5b2:	4584      	cmp	ip, r0
 800c5b4:	bf38      	it	cc
 800c5b6:	2304      	movcc	r3, #4
 800c5b8:	50ca      	str	r2, [r1, r3]
 800c5ba:	b10a      	cbz	r2, 800c5c0 <__lshift+0xa4>
 800c5bc:	f108 0602 	add.w	r6, r8, #2
 800c5c0:	3e01      	subs	r6, #1
 800c5c2:	4638      	mov	r0, r7
 800c5c4:	612e      	str	r6, [r5, #16]
 800c5c6:	4621      	mov	r1, r4
 800c5c8:	f7ff fd90 	bl	800c0ec <_Bfree>
 800c5cc:	4628      	mov	r0, r5
 800c5ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5d2:	f842 0f04 	str.w	r0, [r2, #4]!
 800c5d6:	3301      	adds	r3, #1
 800c5d8:	e7c5      	b.n	800c566 <__lshift+0x4a>
 800c5da:	3904      	subs	r1, #4
 800c5dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5e0:	f841 2f04 	str.w	r2, [r1, #4]!
 800c5e4:	459c      	cmp	ip, r3
 800c5e6:	d8f9      	bhi.n	800c5dc <__lshift+0xc0>
 800c5e8:	e7ea      	b.n	800c5c0 <__lshift+0xa4>
 800c5ea:	bf00      	nop
 800c5ec:	0800de3d 	.word	0x0800de3d
 800c5f0:	0800debf 	.word	0x0800debf

0800c5f4 <__mcmp>:
 800c5f4:	690a      	ldr	r2, [r1, #16]
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	6900      	ldr	r0, [r0, #16]
 800c5fa:	1a80      	subs	r0, r0, r2
 800c5fc:	b530      	push	{r4, r5, lr}
 800c5fe:	d10e      	bne.n	800c61e <__mcmp+0x2a>
 800c600:	3314      	adds	r3, #20
 800c602:	3114      	adds	r1, #20
 800c604:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c608:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c60c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c610:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c614:	4295      	cmp	r5, r2
 800c616:	d003      	beq.n	800c620 <__mcmp+0x2c>
 800c618:	d205      	bcs.n	800c626 <__mcmp+0x32>
 800c61a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c61e:	bd30      	pop	{r4, r5, pc}
 800c620:	42a3      	cmp	r3, r4
 800c622:	d3f3      	bcc.n	800c60c <__mcmp+0x18>
 800c624:	e7fb      	b.n	800c61e <__mcmp+0x2a>
 800c626:	2001      	movs	r0, #1
 800c628:	e7f9      	b.n	800c61e <__mcmp+0x2a>
	...

0800c62c <__mdiff>:
 800c62c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c630:	4689      	mov	r9, r1
 800c632:	4606      	mov	r6, r0
 800c634:	4611      	mov	r1, r2
 800c636:	4648      	mov	r0, r9
 800c638:	4614      	mov	r4, r2
 800c63a:	f7ff ffdb 	bl	800c5f4 <__mcmp>
 800c63e:	1e05      	subs	r5, r0, #0
 800c640:	d112      	bne.n	800c668 <__mdiff+0x3c>
 800c642:	4629      	mov	r1, r5
 800c644:	4630      	mov	r0, r6
 800c646:	f7ff fd11 	bl	800c06c <_Balloc>
 800c64a:	4602      	mov	r2, r0
 800c64c:	b928      	cbnz	r0, 800c65a <__mdiff+0x2e>
 800c64e:	4b3f      	ldr	r3, [pc, #252]	@ (800c74c <__mdiff+0x120>)
 800c650:	f240 2137 	movw	r1, #567	@ 0x237
 800c654:	483e      	ldr	r0, [pc, #248]	@ (800c750 <__mdiff+0x124>)
 800c656:	f000 fbc3 	bl	800cde0 <__assert_func>
 800c65a:	2301      	movs	r3, #1
 800c65c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c660:	4610      	mov	r0, r2
 800c662:	b003      	add	sp, #12
 800c664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c668:	bfbc      	itt	lt
 800c66a:	464b      	movlt	r3, r9
 800c66c:	46a1      	movlt	r9, r4
 800c66e:	4630      	mov	r0, r6
 800c670:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c674:	bfba      	itte	lt
 800c676:	461c      	movlt	r4, r3
 800c678:	2501      	movlt	r5, #1
 800c67a:	2500      	movge	r5, #0
 800c67c:	f7ff fcf6 	bl	800c06c <_Balloc>
 800c680:	4602      	mov	r2, r0
 800c682:	b918      	cbnz	r0, 800c68c <__mdiff+0x60>
 800c684:	4b31      	ldr	r3, [pc, #196]	@ (800c74c <__mdiff+0x120>)
 800c686:	f240 2145 	movw	r1, #581	@ 0x245
 800c68a:	e7e3      	b.n	800c654 <__mdiff+0x28>
 800c68c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c690:	6926      	ldr	r6, [r4, #16]
 800c692:	60c5      	str	r5, [r0, #12]
 800c694:	f109 0310 	add.w	r3, r9, #16
 800c698:	f109 0514 	add.w	r5, r9, #20
 800c69c:	f104 0e14 	add.w	lr, r4, #20
 800c6a0:	f100 0b14 	add.w	fp, r0, #20
 800c6a4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c6a8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c6ac:	9301      	str	r3, [sp, #4]
 800c6ae:	46d9      	mov	r9, fp
 800c6b0:	f04f 0c00 	mov.w	ip, #0
 800c6b4:	9b01      	ldr	r3, [sp, #4]
 800c6b6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c6ba:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c6be:	9301      	str	r3, [sp, #4]
 800c6c0:	fa1f f38a 	uxth.w	r3, sl
 800c6c4:	4619      	mov	r1, r3
 800c6c6:	b283      	uxth	r3, r0
 800c6c8:	1acb      	subs	r3, r1, r3
 800c6ca:	0c00      	lsrs	r0, r0, #16
 800c6cc:	4463      	add	r3, ip
 800c6ce:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c6d2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c6d6:	b29b      	uxth	r3, r3
 800c6d8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c6dc:	4576      	cmp	r6, lr
 800c6de:	f849 3b04 	str.w	r3, [r9], #4
 800c6e2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c6e6:	d8e5      	bhi.n	800c6b4 <__mdiff+0x88>
 800c6e8:	1b33      	subs	r3, r6, r4
 800c6ea:	3b15      	subs	r3, #21
 800c6ec:	f023 0303 	bic.w	r3, r3, #3
 800c6f0:	3415      	adds	r4, #21
 800c6f2:	3304      	adds	r3, #4
 800c6f4:	42a6      	cmp	r6, r4
 800c6f6:	bf38      	it	cc
 800c6f8:	2304      	movcc	r3, #4
 800c6fa:	441d      	add	r5, r3
 800c6fc:	445b      	add	r3, fp
 800c6fe:	461e      	mov	r6, r3
 800c700:	462c      	mov	r4, r5
 800c702:	4544      	cmp	r4, r8
 800c704:	d30e      	bcc.n	800c724 <__mdiff+0xf8>
 800c706:	f108 0103 	add.w	r1, r8, #3
 800c70a:	1b49      	subs	r1, r1, r5
 800c70c:	f021 0103 	bic.w	r1, r1, #3
 800c710:	3d03      	subs	r5, #3
 800c712:	45a8      	cmp	r8, r5
 800c714:	bf38      	it	cc
 800c716:	2100      	movcc	r1, #0
 800c718:	440b      	add	r3, r1
 800c71a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c71e:	b191      	cbz	r1, 800c746 <__mdiff+0x11a>
 800c720:	6117      	str	r7, [r2, #16]
 800c722:	e79d      	b.n	800c660 <__mdiff+0x34>
 800c724:	f854 1b04 	ldr.w	r1, [r4], #4
 800c728:	46e6      	mov	lr, ip
 800c72a:	0c08      	lsrs	r0, r1, #16
 800c72c:	fa1c fc81 	uxtah	ip, ip, r1
 800c730:	4471      	add	r1, lr
 800c732:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c736:	b289      	uxth	r1, r1
 800c738:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c73c:	f846 1b04 	str.w	r1, [r6], #4
 800c740:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c744:	e7dd      	b.n	800c702 <__mdiff+0xd6>
 800c746:	3f01      	subs	r7, #1
 800c748:	e7e7      	b.n	800c71a <__mdiff+0xee>
 800c74a:	bf00      	nop
 800c74c:	0800de3d 	.word	0x0800de3d
 800c750:	0800debf 	.word	0x0800debf

0800c754 <__ulp>:
 800c754:	b082      	sub	sp, #8
 800c756:	ed8d 0b00 	vstr	d0, [sp]
 800c75a:	9a01      	ldr	r2, [sp, #4]
 800c75c:	4b0f      	ldr	r3, [pc, #60]	@ (800c79c <__ulp+0x48>)
 800c75e:	4013      	ands	r3, r2
 800c760:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c764:	2b00      	cmp	r3, #0
 800c766:	dc08      	bgt.n	800c77a <__ulp+0x26>
 800c768:	425b      	negs	r3, r3
 800c76a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c76e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c772:	da04      	bge.n	800c77e <__ulp+0x2a>
 800c774:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c778:	4113      	asrs	r3, r2
 800c77a:	2200      	movs	r2, #0
 800c77c:	e008      	b.n	800c790 <__ulp+0x3c>
 800c77e:	f1a2 0314 	sub.w	r3, r2, #20
 800c782:	2b1e      	cmp	r3, #30
 800c784:	bfda      	itte	le
 800c786:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c78a:	40da      	lsrle	r2, r3
 800c78c:	2201      	movgt	r2, #1
 800c78e:	2300      	movs	r3, #0
 800c790:	4619      	mov	r1, r3
 800c792:	4610      	mov	r0, r2
 800c794:	ec41 0b10 	vmov	d0, r0, r1
 800c798:	b002      	add	sp, #8
 800c79a:	4770      	bx	lr
 800c79c:	7ff00000 	.word	0x7ff00000

0800c7a0 <__b2d>:
 800c7a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7a4:	6906      	ldr	r6, [r0, #16]
 800c7a6:	f100 0814 	add.w	r8, r0, #20
 800c7aa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c7ae:	1f37      	subs	r7, r6, #4
 800c7b0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c7b4:	4610      	mov	r0, r2
 800c7b6:	f7ff fd4b 	bl	800c250 <__hi0bits>
 800c7ba:	f1c0 0320 	rsb	r3, r0, #32
 800c7be:	280a      	cmp	r0, #10
 800c7c0:	600b      	str	r3, [r1, #0]
 800c7c2:	491b      	ldr	r1, [pc, #108]	@ (800c830 <__b2d+0x90>)
 800c7c4:	dc15      	bgt.n	800c7f2 <__b2d+0x52>
 800c7c6:	f1c0 0c0b 	rsb	ip, r0, #11
 800c7ca:	fa22 f30c 	lsr.w	r3, r2, ip
 800c7ce:	45b8      	cmp	r8, r7
 800c7d0:	ea43 0501 	orr.w	r5, r3, r1
 800c7d4:	bf34      	ite	cc
 800c7d6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c7da:	2300      	movcs	r3, #0
 800c7dc:	3015      	adds	r0, #21
 800c7de:	fa02 f000 	lsl.w	r0, r2, r0
 800c7e2:	fa23 f30c 	lsr.w	r3, r3, ip
 800c7e6:	4303      	orrs	r3, r0
 800c7e8:	461c      	mov	r4, r3
 800c7ea:	ec45 4b10 	vmov	d0, r4, r5
 800c7ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7f2:	45b8      	cmp	r8, r7
 800c7f4:	bf3a      	itte	cc
 800c7f6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c7fa:	f1a6 0708 	subcc.w	r7, r6, #8
 800c7fe:	2300      	movcs	r3, #0
 800c800:	380b      	subs	r0, #11
 800c802:	d012      	beq.n	800c82a <__b2d+0x8a>
 800c804:	f1c0 0120 	rsb	r1, r0, #32
 800c808:	fa23 f401 	lsr.w	r4, r3, r1
 800c80c:	4082      	lsls	r2, r0
 800c80e:	4322      	orrs	r2, r4
 800c810:	4547      	cmp	r7, r8
 800c812:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c816:	bf8c      	ite	hi
 800c818:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c81c:	2200      	movls	r2, #0
 800c81e:	4083      	lsls	r3, r0
 800c820:	40ca      	lsrs	r2, r1
 800c822:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c826:	4313      	orrs	r3, r2
 800c828:	e7de      	b.n	800c7e8 <__b2d+0x48>
 800c82a:	ea42 0501 	orr.w	r5, r2, r1
 800c82e:	e7db      	b.n	800c7e8 <__b2d+0x48>
 800c830:	3ff00000 	.word	0x3ff00000

0800c834 <__d2b>:
 800c834:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c838:	460f      	mov	r7, r1
 800c83a:	2101      	movs	r1, #1
 800c83c:	ec59 8b10 	vmov	r8, r9, d0
 800c840:	4616      	mov	r6, r2
 800c842:	f7ff fc13 	bl	800c06c <_Balloc>
 800c846:	4604      	mov	r4, r0
 800c848:	b930      	cbnz	r0, 800c858 <__d2b+0x24>
 800c84a:	4602      	mov	r2, r0
 800c84c:	4b23      	ldr	r3, [pc, #140]	@ (800c8dc <__d2b+0xa8>)
 800c84e:	4824      	ldr	r0, [pc, #144]	@ (800c8e0 <__d2b+0xac>)
 800c850:	f240 310f 	movw	r1, #783	@ 0x30f
 800c854:	f000 fac4 	bl	800cde0 <__assert_func>
 800c858:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c85c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c860:	b10d      	cbz	r5, 800c866 <__d2b+0x32>
 800c862:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c866:	9301      	str	r3, [sp, #4]
 800c868:	f1b8 0300 	subs.w	r3, r8, #0
 800c86c:	d023      	beq.n	800c8b6 <__d2b+0x82>
 800c86e:	4668      	mov	r0, sp
 800c870:	9300      	str	r3, [sp, #0]
 800c872:	f7ff fd0c 	bl	800c28e <__lo0bits>
 800c876:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c87a:	b1d0      	cbz	r0, 800c8b2 <__d2b+0x7e>
 800c87c:	f1c0 0320 	rsb	r3, r0, #32
 800c880:	fa02 f303 	lsl.w	r3, r2, r3
 800c884:	430b      	orrs	r3, r1
 800c886:	40c2      	lsrs	r2, r0
 800c888:	6163      	str	r3, [r4, #20]
 800c88a:	9201      	str	r2, [sp, #4]
 800c88c:	9b01      	ldr	r3, [sp, #4]
 800c88e:	61a3      	str	r3, [r4, #24]
 800c890:	2b00      	cmp	r3, #0
 800c892:	bf0c      	ite	eq
 800c894:	2201      	moveq	r2, #1
 800c896:	2202      	movne	r2, #2
 800c898:	6122      	str	r2, [r4, #16]
 800c89a:	b1a5      	cbz	r5, 800c8c6 <__d2b+0x92>
 800c89c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c8a0:	4405      	add	r5, r0
 800c8a2:	603d      	str	r5, [r7, #0]
 800c8a4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c8a8:	6030      	str	r0, [r6, #0]
 800c8aa:	4620      	mov	r0, r4
 800c8ac:	b003      	add	sp, #12
 800c8ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c8b2:	6161      	str	r1, [r4, #20]
 800c8b4:	e7ea      	b.n	800c88c <__d2b+0x58>
 800c8b6:	a801      	add	r0, sp, #4
 800c8b8:	f7ff fce9 	bl	800c28e <__lo0bits>
 800c8bc:	9b01      	ldr	r3, [sp, #4]
 800c8be:	6163      	str	r3, [r4, #20]
 800c8c0:	3020      	adds	r0, #32
 800c8c2:	2201      	movs	r2, #1
 800c8c4:	e7e8      	b.n	800c898 <__d2b+0x64>
 800c8c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c8ca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c8ce:	6038      	str	r0, [r7, #0]
 800c8d0:	6918      	ldr	r0, [r3, #16]
 800c8d2:	f7ff fcbd 	bl	800c250 <__hi0bits>
 800c8d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c8da:	e7e5      	b.n	800c8a8 <__d2b+0x74>
 800c8dc:	0800de3d 	.word	0x0800de3d
 800c8e0:	0800debf 	.word	0x0800debf

0800c8e4 <__ratio>:
 800c8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8e8:	b085      	sub	sp, #20
 800c8ea:	e9cd 1000 	strd	r1, r0, [sp]
 800c8ee:	a902      	add	r1, sp, #8
 800c8f0:	f7ff ff56 	bl	800c7a0 <__b2d>
 800c8f4:	9800      	ldr	r0, [sp, #0]
 800c8f6:	a903      	add	r1, sp, #12
 800c8f8:	ec55 4b10 	vmov	r4, r5, d0
 800c8fc:	f7ff ff50 	bl	800c7a0 <__b2d>
 800c900:	9b01      	ldr	r3, [sp, #4]
 800c902:	6919      	ldr	r1, [r3, #16]
 800c904:	9b00      	ldr	r3, [sp, #0]
 800c906:	691b      	ldr	r3, [r3, #16]
 800c908:	1ac9      	subs	r1, r1, r3
 800c90a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c90e:	1a9b      	subs	r3, r3, r2
 800c910:	ec5b ab10 	vmov	sl, fp, d0
 800c914:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c918:	2b00      	cmp	r3, #0
 800c91a:	bfce      	itee	gt
 800c91c:	462a      	movgt	r2, r5
 800c91e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c922:	465a      	movle	r2, fp
 800c924:	462f      	mov	r7, r5
 800c926:	46d9      	mov	r9, fp
 800c928:	bfcc      	ite	gt
 800c92a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c92e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c932:	464b      	mov	r3, r9
 800c934:	4652      	mov	r2, sl
 800c936:	4620      	mov	r0, r4
 800c938:	4639      	mov	r1, r7
 800c93a:	f7f3 ff9f 	bl	800087c <__aeabi_ddiv>
 800c93e:	ec41 0b10 	vmov	d0, r0, r1
 800c942:	b005      	add	sp, #20
 800c944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c948 <__copybits>:
 800c948:	3901      	subs	r1, #1
 800c94a:	b570      	push	{r4, r5, r6, lr}
 800c94c:	1149      	asrs	r1, r1, #5
 800c94e:	6914      	ldr	r4, [r2, #16]
 800c950:	3101      	adds	r1, #1
 800c952:	f102 0314 	add.w	r3, r2, #20
 800c956:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c95a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c95e:	1f05      	subs	r5, r0, #4
 800c960:	42a3      	cmp	r3, r4
 800c962:	d30c      	bcc.n	800c97e <__copybits+0x36>
 800c964:	1aa3      	subs	r3, r4, r2
 800c966:	3b11      	subs	r3, #17
 800c968:	f023 0303 	bic.w	r3, r3, #3
 800c96c:	3211      	adds	r2, #17
 800c96e:	42a2      	cmp	r2, r4
 800c970:	bf88      	it	hi
 800c972:	2300      	movhi	r3, #0
 800c974:	4418      	add	r0, r3
 800c976:	2300      	movs	r3, #0
 800c978:	4288      	cmp	r0, r1
 800c97a:	d305      	bcc.n	800c988 <__copybits+0x40>
 800c97c:	bd70      	pop	{r4, r5, r6, pc}
 800c97e:	f853 6b04 	ldr.w	r6, [r3], #4
 800c982:	f845 6f04 	str.w	r6, [r5, #4]!
 800c986:	e7eb      	b.n	800c960 <__copybits+0x18>
 800c988:	f840 3b04 	str.w	r3, [r0], #4
 800c98c:	e7f4      	b.n	800c978 <__copybits+0x30>

0800c98e <__any_on>:
 800c98e:	f100 0214 	add.w	r2, r0, #20
 800c992:	6900      	ldr	r0, [r0, #16]
 800c994:	114b      	asrs	r3, r1, #5
 800c996:	4298      	cmp	r0, r3
 800c998:	b510      	push	{r4, lr}
 800c99a:	db11      	blt.n	800c9c0 <__any_on+0x32>
 800c99c:	dd0a      	ble.n	800c9b4 <__any_on+0x26>
 800c99e:	f011 011f 	ands.w	r1, r1, #31
 800c9a2:	d007      	beq.n	800c9b4 <__any_on+0x26>
 800c9a4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c9a8:	fa24 f001 	lsr.w	r0, r4, r1
 800c9ac:	fa00 f101 	lsl.w	r1, r0, r1
 800c9b0:	428c      	cmp	r4, r1
 800c9b2:	d10b      	bne.n	800c9cc <__any_on+0x3e>
 800c9b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c9b8:	4293      	cmp	r3, r2
 800c9ba:	d803      	bhi.n	800c9c4 <__any_on+0x36>
 800c9bc:	2000      	movs	r0, #0
 800c9be:	bd10      	pop	{r4, pc}
 800c9c0:	4603      	mov	r3, r0
 800c9c2:	e7f7      	b.n	800c9b4 <__any_on+0x26>
 800c9c4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c9c8:	2900      	cmp	r1, #0
 800c9ca:	d0f5      	beq.n	800c9b8 <__any_on+0x2a>
 800c9cc:	2001      	movs	r0, #1
 800c9ce:	e7f6      	b.n	800c9be <__any_on+0x30>

0800c9d0 <__sread>:
 800c9d0:	b510      	push	{r4, lr}
 800c9d2:	460c      	mov	r4, r1
 800c9d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9d8:	f000 f9ce 	bl	800cd78 <_read_r>
 800c9dc:	2800      	cmp	r0, #0
 800c9de:	bfab      	itete	ge
 800c9e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c9e2:	89a3      	ldrhlt	r3, [r4, #12]
 800c9e4:	181b      	addge	r3, r3, r0
 800c9e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c9ea:	bfac      	ite	ge
 800c9ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c9ee:	81a3      	strhlt	r3, [r4, #12]
 800c9f0:	bd10      	pop	{r4, pc}

0800c9f2 <__swrite>:
 800c9f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9f6:	461f      	mov	r7, r3
 800c9f8:	898b      	ldrh	r3, [r1, #12]
 800c9fa:	05db      	lsls	r3, r3, #23
 800c9fc:	4605      	mov	r5, r0
 800c9fe:	460c      	mov	r4, r1
 800ca00:	4616      	mov	r6, r2
 800ca02:	d505      	bpl.n	800ca10 <__swrite+0x1e>
 800ca04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca08:	2302      	movs	r3, #2
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	f000 f9a2 	bl	800cd54 <_lseek_r>
 800ca10:	89a3      	ldrh	r3, [r4, #12]
 800ca12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ca1a:	81a3      	strh	r3, [r4, #12]
 800ca1c:	4632      	mov	r2, r6
 800ca1e:	463b      	mov	r3, r7
 800ca20:	4628      	mov	r0, r5
 800ca22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca26:	f000 b9c9 	b.w	800cdbc <_write_r>

0800ca2a <__sseek>:
 800ca2a:	b510      	push	{r4, lr}
 800ca2c:	460c      	mov	r4, r1
 800ca2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca32:	f000 f98f 	bl	800cd54 <_lseek_r>
 800ca36:	1c43      	adds	r3, r0, #1
 800ca38:	89a3      	ldrh	r3, [r4, #12]
 800ca3a:	bf15      	itete	ne
 800ca3c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ca3e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ca42:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ca46:	81a3      	strheq	r3, [r4, #12]
 800ca48:	bf18      	it	ne
 800ca4a:	81a3      	strhne	r3, [r4, #12]
 800ca4c:	bd10      	pop	{r4, pc}

0800ca4e <__sclose>:
 800ca4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca52:	f000 b94d 	b.w	800ccf0 <_close_r>

0800ca56 <_realloc_r>:
 800ca56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca5a:	4680      	mov	r8, r0
 800ca5c:	4615      	mov	r5, r2
 800ca5e:	460c      	mov	r4, r1
 800ca60:	b921      	cbnz	r1, 800ca6c <_realloc_r+0x16>
 800ca62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca66:	4611      	mov	r1, r2
 800ca68:	f7ff b9b6 	b.w	800bdd8 <_malloc_r>
 800ca6c:	b92a      	cbnz	r2, 800ca7a <_realloc_r+0x24>
 800ca6e:	f000 f9e9 	bl	800ce44 <_free_r>
 800ca72:	2400      	movs	r4, #0
 800ca74:	4620      	mov	r0, r4
 800ca76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca7a:	f000 fa2d 	bl	800ced8 <_malloc_usable_size_r>
 800ca7e:	4285      	cmp	r5, r0
 800ca80:	4606      	mov	r6, r0
 800ca82:	d802      	bhi.n	800ca8a <_realloc_r+0x34>
 800ca84:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ca88:	d8f4      	bhi.n	800ca74 <_realloc_r+0x1e>
 800ca8a:	4629      	mov	r1, r5
 800ca8c:	4640      	mov	r0, r8
 800ca8e:	f7ff f9a3 	bl	800bdd8 <_malloc_r>
 800ca92:	4607      	mov	r7, r0
 800ca94:	2800      	cmp	r0, #0
 800ca96:	d0ec      	beq.n	800ca72 <_realloc_r+0x1c>
 800ca98:	42b5      	cmp	r5, r6
 800ca9a:	462a      	mov	r2, r5
 800ca9c:	4621      	mov	r1, r4
 800ca9e:	bf28      	it	cs
 800caa0:	4632      	movcs	r2, r6
 800caa2:	f7fd fd32 	bl	800a50a <memcpy>
 800caa6:	4621      	mov	r1, r4
 800caa8:	4640      	mov	r0, r8
 800caaa:	f000 f9cb 	bl	800ce44 <_free_r>
 800caae:	463c      	mov	r4, r7
 800cab0:	e7e0      	b.n	800ca74 <_realloc_r+0x1e>

0800cab2 <__swbuf_r>:
 800cab2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cab4:	460e      	mov	r6, r1
 800cab6:	4614      	mov	r4, r2
 800cab8:	4605      	mov	r5, r0
 800caba:	b118      	cbz	r0, 800cac4 <__swbuf_r+0x12>
 800cabc:	6a03      	ldr	r3, [r0, #32]
 800cabe:	b90b      	cbnz	r3, 800cac4 <__swbuf_r+0x12>
 800cac0:	f7fc fd96 	bl	80095f0 <__sinit>
 800cac4:	69a3      	ldr	r3, [r4, #24]
 800cac6:	60a3      	str	r3, [r4, #8]
 800cac8:	89a3      	ldrh	r3, [r4, #12]
 800caca:	071a      	lsls	r2, r3, #28
 800cacc:	d501      	bpl.n	800cad2 <__swbuf_r+0x20>
 800cace:	6923      	ldr	r3, [r4, #16]
 800cad0:	b943      	cbnz	r3, 800cae4 <__swbuf_r+0x32>
 800cad2:	4621      	mov	r1, r4
 800cad4:	4628      	mov	r0, r5
 800cad6:	f000 f82b 	bl	800cb30 <__swsetup_r>
 800cada:	b118      	cbz	r0, 800cae4 <__swbuf_r+0x32>
 800cadc:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800cae0:	4638      	mov	r0, r7
 800cae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cae4:	6823      	ldr	r3, [r4, #0]
 800cae6:	6922      	ldr	r2, [r4, #16]
 800cae8:	1a98      	subs	r0, r3, r2
 800caea:	6963      	ldr	r3, [r4, #20]
 800caec:	b2f6      	uxtb	r6, r6
 800caee:	4283      	cmp	r3, r0
 800caf0:	4637      	mov	r7, r6
 800caf2:	dc05      	bgt.n	800cb00 <__swbuf_r+0x4e>
 800caf4:	4621      	mov	r1, r4
 800caf6:	4628      	mov	r0, r5
 800caf8:	f7ff fa84 	bl	800c004 <_fflush_r>
 800cafc:	2800      	cmp	r0, #0
 800cafe:	d1ed      	bne.n	800cadc <__swbuf_r+0x2a>
 800cb00:	68a3      	ldr	r3, [r4, #8]
 800cb02:	3b01      	subs	r3, #1
 800cb04:	60a3      	str	r3, [r4, #8]
 800cb06:	6823      	ldr	r3, [r4, #0]
 800cb08:	1c5a      	adds	r2, r3, #1
 800cb0a:	6022      	str	r2, [r4, #0]
 800cb0c:	701e      	strb	r6, [r3, #0]
 800cb0e:	6962      	ldr	r2, [r4, #20]
 800cb10:	1c43      	adds	r3, r0, #1
 800cb12:	429a      	cmp	r2, r3
 800cb14:	d004      	beq.n	800cb20 <__swbuf_r+0x6e>
 800cb16:	89a3      	ldrh	r3, [r4, #12]
 800cb18:	07db      	lsls	r3, r3, #31
 800cb1a:	d5e1      	bpl.n	800cae0 <__swbuf_r+0x2e>
 800cb1c:	2e0a      	cmp	r6, #10
 800cb1e:	d1df      	bne.n	800cae0 <__swbuf_r+0x2e>
 800cb20:	4621      	mov	r1, r4
 800cb22:	4628      	mov	r0, r5
 800cb24:	f7ff fa6e 	bl	800c004 <_fflush_r>
 800cb28:	2800      	cmp	r0, #0
 800cb2a:	d0d9      	beq.n	800cae0 <__swbuf_r+0x2e>
 800cb2c:	e7d6      	b.n	800cadc <__swbuf_r+0x2a>
	...

0800cb30 <__swsetup_r>:
 800cb30:	b538      	push	{r3, r4, r5, lr}
 800cb32:	4b29      	ldr	r3, [pc, #164]	@ (800cbd8 <__swsetup_r+0xa8>)
 800cb34:	4605      	mov	r5, r0
 800cb36:	6818      	ldr	r0, [r3, #0]
 800cb38:	460c      	mov	r4, r1
 800cb3a:	b118      	cbz	r0, 800cb44 <__swsetup_r+0x14>
 800cb3c:	6a03      	ldr	r3, [r0, #32]
 800cb3e:	b90b      	cbnz	r3, 800cb44 <__swsetup_r+0x14>
 800cb40:	f7fc fd56 	bl	80095f0 <__sinit>
 800cb44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb48:	0719      	lsls	r1, r3, #28
 800cb4a:	d422      	bmi.n	800cb92 <__swsetup_r+0x62>
 800cb4c:	06da      	lsls	r2, r3, #27
 800cb4e:	d407      	bmi.n	800cb60 <__swsetup_r+0x30>
 800cb50:	2209      	movs	r2, #9
 800cb52:	602a      	str	r2, [r5, #0]
 800cb54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb58:	81a3      	strh	r3, [r4, #12]
 800cb5a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cb5e:	e033      	b.n	800cbc8 <__swsetup_r+0x98>
 800cb60:	0758      	lsls	r0, r3, #29
 800cb62:	d512      	bpl.n	800cb8a <__swsetup_r+0x5a>
 800cb64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cb66:	b141      	cbz	r1, 800cb7a <__swsetup_r+0x4a>
 800cb68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cb6c:	4299      	cmp	r1, r3
 800cb6e:	d002      	beq.n	800cb76 <__swsetup_r+0x46>
 800cb70:	4628      	mov	r0, r5
 800cb72:	f000 f967 	bl	800ce44 <_free_r>
 800cb76:	2300      	movs	r3, #0
 800cb78:	6363      	str	r3, [r4, #52]	@ 0x34
 800cb7a:	89a3      	ldrh	r3, [r4, #12]
 800cb7c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cb80:	81a3      	strh	r3, [r4, #12]
 800cb82:	2300      	movs	r3, #0
 800cb84:	6063      	str	r3, [r4, #4]
 800cb86:	6923      	ldr	r3, [r4, #16]
 800cb88:	6023      	str	r3, [r4, #0]
 800cb8a:	89a3      	ldrh	r3, [r4, #12]
 800cb8c:	f043 0308 	orr.w	r3, r3, #8
 800cb90:	81a3      	strh	r3, [r4, #12]
 800cb92:	6923      	ldr	r3, [r4, #16]
 800cb94:	b94b      	cbnz	r3, 800cbaa <__swsetup_r+0x7a>
 800cb96:	89a3      	ldrh	r3, [r4, #12]
 800cb98:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cb9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cba0:	d003      	beq.n	800cbaa <__swsetup_r+0x7a>
 800cba2:	4621      	mov	r1, r4
 800cba4:	4628      	mov	r0, r5
 800cba6:	f000 f84c 	bl	800cc42 <__smakebuf_r>
 800cbaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbae:	f013 0201 	ands.w	r2, r3, #1
 800cbb2:	d00a      	beq.n	800cbca <__swsetup_r+0x9a>
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	60a2      	str	r2, [r4, #8]
 800cbb8:	6962      	ldr	r2, [r4, #20]
 800cbba:	4252      	negs	r2, r2
 800cbbc:	61a2      	str	r2, [r4, #24]
 800cbbe:	6922      	ldr	r2, [r4, #16]
 800cbc0:	b942      	cbnz	r2, 800cbd4 <__swsetup_r+0xa4>
 800cbc2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cbc6:	d1c5      	bne.n	800cb54 <__swsetup_r+0x24>
 800cbc8:	bd38      	pop	{r3, r4, r5, pc}
 800cbca:	0799      	lsls	r1, r3, #30
 800cbcc:	bf58      	it	pl
 800cbce:	6962      	ldrpl	r2, [r4, #20]
 800cbd0:	60a2      	str	r2, [r4, #8]
 800cbd2:	e7f4      	b.n	800cbbe <__swsetup_r+0x8e>
 800cbd4:	2000      	movs	r0, #0
 800cbd6:	e7f7      	b.n	800cbc8 <__swsetup_r+0x98>
 800cbd8:	200001c4 	.word	0x200001c4

0800cbdc <__ascii_wctomb>:
 800cbdc:	4603      	mov	r3, r0
 800cbde:	4608      	mov	r0, r1
 800cbe0:	b141      	cbz	r1, 800cbf4 <__ascii_wctomb+0x18>
 800cbe2:	2aff      	cmp	r2, #255	@ 0xff
 800cbe4:	d904      	bls.n	800cbf0 <__ascii_wctomb+0x14>
 800cbe6:	228a      	movs	r2, #138	@ 0x8a
 800cbe8:	601a      	str	r2, [r3, #0]
 800cbea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cbee:	4770      	bx	lr
 800cbf0:	700a      	strb	r2, [r1, #0]
 800cbf2:	2001      	movs	r0, #1
 800cbf4:	4770      	bx	lr

0800cbf6 <__swhatbuf_r>:
 800cbf6:	b570      	push	{r4, r5, r6, lr}
 800cbf8:	460c      	mov	r4, r1
 800cbfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbfe:	2900      	cmp	r1, #0
 800cc00:	b096      	sub	sp, #88	@ 0x58
 800cc02:	4615      	mov	r5, r2
 800cc04:	461e      	mov	r6, r3
 800cc06:	da0d      	bge.n	800cc24 <__swhatbuf_r+0x2e>
 800cc08:	89a3      	ldrh	r3, [r4, #12]
 800cc0a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cc0e:	f04f 0100 	mov.w	r1, #0
 800cc12:	bf14      	ite	ne
 800cc14:	2340      	movne	r3, #64	@ 0x40
 800cc16:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cc1a:	2000      	movs	r0, #0
 800cc1c:	6031      	str	r1, [r6, #0]
 800cc1e:	602b      	str	r3, [r5, #0]
 800cc20:	b016      	add	sp, #88	@ 0x58
 800cc22:	bd70      	pop	{r4, r5, r6, pc}
 800cc24:	466a      	mov	r2, sp
 800cc26:	f000 f873 	bl	800cd10 <_fstat_r>
 800cc2a:	2800      	cmp	r0, #0
 800cc2c:	dbec      	blt.n	800cc08 <__swhatbuf_r+0x12>
 800cc2e:	9901      	ldr	r1, [sp, #4]
 800cc30:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cc34:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cc38:	4259      	negs	r1, r3
 800cc3a:	4159      	adcs	r1, r3
 800cc3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cc40:	e7eb      	b.n	800cc1a <__swhatbuf_r+0x24>

0800cc42 <__smakebuf_r>:
 800cc42:	898b      	ldrh	r3, [r1, #12]
 800cc44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc46:	079d      	lsls	r5, r3, #30
 800cc48:	4606      	mov	r6, r0
 800cc4a:	460c      	mov	r4, r1
 800cc4c:	d507      	bpl.n	800cc5e <__smakebuf_r+0x1c>
 800cc4e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cc52:	6023      	str	r3, [r4, #0]
 800cc54:	6123      	str	r3, [r4, #16]
 800cc56:	2301      	movs	r3, #1
 800cc58:	6163      	str	r3, [r4, #20]
 800cc5a:	b003      	add	sp, #12
 800cc5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc5e:	ab01      	add	r3, sp, #4
 800cc60:	466a      	mov	r2, sp
 800cc62:	f7ff ffc8 	bl	800cbf6 <__swhatbuf_r>
 800cc66:	9f00      	ldr	r7, [sp, #0]
 800cc68:	4605      	mov	r5, r0
 800cc6a:	4639      	mov	r1, r7
 800cc6c:	4630      	mov	r0, r6
 800cc6e:	f7ff f8b3 	bl	800bdd8 <_malloc_r>
 800cc72:	b948      	cbnz	r0, 800cc88 <__smakebuf_r+0x46>
 800cc74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc78:	059a      	lsls	r2, r3, #22
 800cc7a:	d4ee      	bmi.n	800cc5a <__smakebuf_r+0x18>
 800cc7c:	f023 0303 	bic.w	r3, r3, #3
 800cc80:	f043 0302 	orr.w	r3, r3, #2
 800cc84:	81a3      	strh	r3, [r4, #12]
 800cc86:	e7e2      	b.n	800cc4e <__smakebuf_r+0xc>
 800cc88:	89a3      	ldrh	r3, [r4, #12]
 800cc8a:	6020      	str	r0, [r4, #0]
 800cc8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc90:	81a3      	strh	r3, [r4, #12]
 800cc92:	9b01      	ldr	r3, [sp, #4]
 800cc94:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cc98:	b15b      	cbz	r3, 800ccb2 <__smakebuf_r+0x70>
 800cc9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc9e:	4630      	mov	r0, r6
 800cca0:	f000 f848 	bl	800cd34 <_isatty_r>
 800cca4:	b128      	cbz	r0, 800ccb2 <__smakebuf_r+0x70>
 800cca6:	89a3      	ldrh	r3, [r4, #12]
 800cca8:	f023 0303 	bic.w	r3, r3, #3
 800ccac:	f043 0301 	orr.w	r3, r3, #1
 800ccb0:	81a3      	strh	r3, [r4, #12]
 800ccb2:	89a3      	ldrh	r3, [r4, #12]
 800ccb4:	431d      	orrs	r5, r3
 800ccb6:	81a5      	strh	r5, [r4, #12]
 800ccb8:	e7cf      	b.n	800cc5a <__smakebuf_r+0x18>

0800ccba <memmove>:
 800ccba:	4288      	cmp	r0, r1
 800ccbc:	b510      	push	{r4, lr}
 800ccbe:	eb01 0402 	add.w	r4, r1, r2
 800ccc2:	d902      	bls.n	800ccca <memmove+0x10>
 800ccc4:	4284      	cmp	r4, r0
 800ccc6:	4623      	mov	r3, r4
 800ccc8:	d807      	bhi.n	800ccda <memmove+0x20>
 800ccca:	1e43      	subs	r3, r0, #1
 800cccc:	42a1      	cmp	r1, r4
 800ccce:	d008      	beq.n	800cce2 <memmove+0x28>
 800ccd0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ccd4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ccd8:	e7f8      	b.n	800cccc <memmove+0x12>
 800ccda:	4402      	add	r2, r0
 800ccdc:	4601      	mov	r1, r0
 800ccde:	428a      	cmp	r2, r1
 800cce0:	d100      	bne.n	800cce4 <memmove+0x2a>
 800cce2:	bd10      	pop	{r4, pc}
 800cce4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cce8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ccec:	e7f7      	b.n	800ccde <memmove+0x24>
	...

0800ccf0 <_close_r>:
 800ccf0:	b538      	push	{r3, r4, r5, lr}
 800ccf2:	4d06      	ldr	r5, [pc, #24]	@ (800cd0c <_close_r+0x1c>)
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	4604      	mov	r4, r0
 800ccf8:	4608      	mov	r0, r1
 800ccfa:	602b      	str	r3, [r5, #0]
 800ccfc:	f7f5 fada 	bl	80022b4 <_close>
 800cd00:	1c43      	adds	r3, r0, #1
 800cd02:	d102      	bne.n	800cd0a <_close_r+0x1a>
 800cd04:	682b      	ldr	r3, [r5, #0]
 800cd06:	b103      	cbz	r3, 800cd0a <_close_r+0x1a>
 800cd08:	6023      	str	r3, [r4, #0]
 800cd0a:	bd38      	pop	{r3, r4, r5, pc}
 800cd0c:	200008d4 	.word	0x200008d4

0800cd10 <_fstat_r>:
 800cd10:	b538      	push	{r3, r4, r5, lr}
 800cd12:	4d07      	ldr	r5, [pc, #28]	@ (800cd30 <_fstat_r+0x20>)
 800cd14:	2300      	movs	r3, #0
 800cd16:	4604      	mov	r4, r0
 800cd18:	4608      	mov	r0, r1
 800cd1a:	4611      	mov	r1, r2
 800cd1c:	602b      	str	r3, [r5, #0]
 800cd1e:	f7f5 fad5 	bl	80022cc <_fstat>
 800cd22:	1c43      	adds	r3, r0, #1
 800cd24:	d102      	bne.n	800cd2c <_fstat_r+0x1c>
 800cd26:	682b      	ldr	r3, [r5, #0]
 800cd28:	b103      	cbz	r3, 800cd2c <_fstat_r+0x1c>
 800cd2a:	6023      	str	r3, [r4, #0]
 800cd2c:	bd38      	pop	{r3, r4, r5, pc}
 800cd2e:	bf00      	nop
 800cd30:	200008d4 	.word	0x200008d4

0800cd34 <_isatty_r>:
 800cd34:	b538      	push	{r3, r4, r5, lr}
 800cd36:	4d06      	ldr	r5, [pc, #24]	@ (800cd50 <_isatty_r+0x1c>)
 800cd38:	2300      	movs	r3, #0
 800cd3a:	4604      	mov	r4, r0
 800cd3c:	4608      	mov	r0, r1
 800cd3e:	602b      	str	r3, [r5, #0]
 800cd40:	f7f5 fad4 	bl	80022ec <_isatty>
 800cd44:	1c43      	adds	r3, r0, #1
 800cd46:	d102      	bne.n	800cd4e <_isatty_r+0x1a>
 800cd48:	682b      	ldr	r3, [r5, #0]
 800cd4a:	b103      	cbz	r3, 800cd4e <_isatty_r+0x1a>
 800cd4c:	6023      	str	r3, [r4, #0]
 800cd4e:	bd38      	pop	{r3, r4, r5, pc}
 800cd50:	200008d4 	.word	0x200008d4

0800cd54 <_lseek_r>:
 800cd54:	b538      	push	{r3, r4, r5, lr}
 800cd56:	4d07      	ldr	r5, [pc, #28]	@ (800cd74 <_lseek_r+0x20>)
 800cd58:	4604      	mov	r4, r0
 800cd5a:	4608      	mov	r0, r1
 800cd5c:	4611      	mov	r1, r2
 800cd5e:	2200      	movs	r2, #0
 800cd60:	602a      	str	r2, [r5, #0]
 800cd62:	461a      	mov	r2, r3
 800cd64:	f7f5 facd 	bl	8002302 <_lseek>
 800cd68:	1c43      	adds	r3, r0, #1
 800cd6a:	d102      	bne.n	800cd72 <_lseek_r+0x1e>
 800cd6c:	682b      	ldr	r3, [r5, #0]
 800cd6e:	b103      	cbz	r3, 800cd72 <_lseek_r+0x1e>
 800cd70:	6023      	str	r3, [r4, #0]
 800cd72:	bd38      	pop	{r3, r4, r5, pc}
 800cd74:	200008d4 	.word	0x200008d4

0800cd78 <_read_r>:
 800cd78:	b538      	push	{r3, r4, r5, lr}
 800cd7a:	4d07      	ldr	r5, [pc, #28]	@ (800cd98 <_read_r+0x20>)
 800cd7c:	4604      	mov	r4, r0
 800cd7e:	4608      	mov	r0, r1
 800cd80:	4611      	mov	r1, r2
 800cd82:	2200      	movs	r2, #0
 800cd84:	602a      	str	r2, [r5, #0]
 800cd86:	461a      	mov	r2, r3
 800cd88:	f7f5 fa5b 	bl	8002242 <_read>
 800cd8c:	1c43      	adds	r3, r0, #1
 800cd8e:	d102      	bne.n	800cd96 <_read_r+0x1e>
 800cd90:	682b      	ldr	r3, [r5, #0]
 800cd92:	b103      	cbz	r3, 800cd96 <_read_r+0x1e>
 800cd94:	6023      	str	r3, [r4, #0]
 800cd96:	bd38      	pop	{r3, r4, r5, pc}
 800cd98:	200008d4 	.word	0x200008d4

0800cd9c <_sbrk_r>:
 800cd9c:	b538      	push	{r3, r4, r5, lr}
 800cd9e:	4d06      	ldr	r5, [pc, #24]	@ (800cdb8 <_sbrk_r+0x1c>)
 800cda0:	2300      	movs	r3, #0
 800cda2:	4604      	mov	r4, r0
 800cda4:	4608      	mov	r0, r1
 800cda6:	602b      	str	r3, [r5, #0]
 800cda8:	f7f5 fab8 	bl	800231c <_sbrk>
 800cdac:	1c43      	adds	r3, r0, #1
 800cdae:	d102      	bne.n	800cdb6 <_sbrk_r+0x1a>
 800cdb0:	682b      	ldr	r3, [r5, #0]
 800cdb2:	b103      	cbz	r3, 800cdb6 <_sbrk_r+0x1a>
 800cdb4:	6023      	str	r3, [r4, #0]
 800cdb6:	bd38      	pop	{r3, r4, r5, pc}
 800cdb8:	200008d4 	.word	0x200008d4

0800cdbc <_write_r>:
 800cdbc:	b538      	push	{r3, r4, r5, lr}
 800cdbe:	4d07      	ldr	r5, [pc, #28]	@ (800cddc <_write_r+0x20>)
 800cdc0:	4604      	mov	r4, r0
 800cdc2:	4608      	mov	r0, r1
 800cdc4:	4611      	mov	r1, r2
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	602a      	str	r2, [r5, #0]
 800cdca:	461a      	mov	r2, r3
 800cdcc:	f7f5 fa56 	bl	800227c <_write>
 800cdd0:	1c43      	adds	r3, r0, #1
 800cdd2:	d102      	bne.n	800cdda <_write_r+0x1e>
 800cdd4:	682b      	ldr	r3, [r5, #0]
 800cdd6:	b103      	cbz	r3, 800cdda <_write_r+0x1e>
 800cdd8:	6023      	str	r3, [r4, #0]
 800cdda:	bd38      	pop	{r3, r4, r5, pc}
 800cddc:	200008d4 	.word	0x200008d4

0800cde0 <__assert_func>:
 800cde0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cde2:	4614      	mov	r4, r2
 800cde4:	461a      	mov	r2, r3
 800cde6:	4b09      	ldr	r3, [pc, #36]	@ (800ce0c <__assert_func+0x2c>)
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	4605      	mov	r5, r0
 800cdec:	68d8      	ldr	r0, [r3, #12]
 800cdee:	b954      	cbnz	r4, 800ce06 <__assert_func+0x26>
 800cdf0:	4b07      	ldr	r3, [pc, #28]	@ (800ce10 <__assert_func+0x30>)
 800cdf2:	461c      	mov	r4, r3
 800cdf4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cdf8:	9100      	str	r1, [sp, #0]
 800cdfa:	462b      	mov	r3, r5
 800cdfc:	4905      	ldr	r1, [pc, #20]	@ (800ce14 <__assert_func+0x34>)
 800cdfe:	f000 f873 	bl	800cee8 <fiprintf>
 800ce02:	f000 f883 	bl	800cf0c <abort>
 800ce06:	4b04      	ldr	r3, [pc, #16]	@ (800ce18 <__assert_func+0x38>)
 800ce08:	e7f4      	b.n	800cdf4 <__assert_func+0x14>
 800ce0a:	bf00      	nop
 800ce0c:	200001c4 	.word	0x200001c4
 800ce10:	0800e053 	.word	0x0800e053
 800ce14:	0800e025 	.word	0x0800e025
 800ce18:	0800e018 	.word	0x0800e018

0800ce1c <_calloc_r>:
 800ce1c:	b570      	push	{r4, r5, r6, lr}
 800ce1e:	fba1 5402 	umull	r5, r4, r1, r2
 800ce22:	b93c      	cbnz	r4, 800ce34 <_calloc_r+0x18>
 800ce24:	4629      	mov	r1, r5
 800ce26:	f7fe ffd7 	bl	800bdd8 <_malloc_r>
 800ce2a:	4606      	mov	r6, r0
 800ce2c:	b928      	cbnz	r0, 800ce3a <_calloc_r+0x1e>
 800ce2e:	2600      	movs	r6, #0
 800ce30:	4630      	mov	r0, r6
 800ce32:	bd70      	pop	{r4, r5, r6, pc}
 800ce34:	220c      	movs	r2, #12
 800ce36:	6002      	str	r2, [r0, #0]
 800ce38:	e7f9      	b.n	800ce2e <_calloc_r+0x12>
 800ce3a:	462a      	mov	r2, r5
 800ce3c:	4621      	mov	r1, r4
 800ce3e:	f7fd fb2b 	bl	800a498 <memset>
 800ce42:	e7f5      	b.n	800ce30 <_calloc_r+0x14>

0800ce44 <_free_r>:
 800ce44:	b538      	push	{r3, r4, r5, lr}
 800ce46:	4605      	mov	r5, r0
 800ce48:	2900      	cmp	r1, #0
 800ce4a:	d041      	beq.n	800ced0 <_free_r+0x8c>
 800ce4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce50:	1f0c      	subs	r4, r1, #4
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	bfb8      	it	lt
 800ce56:	18e4      	addlt	r4, r4, r3
 800ce58:	f7ff f8fc 	bl	800c054 <__malloc_lock>
 800ce5c:	4a1d      	ldr	r2, [pc, #116]	@ (800ced4 <_free_r+0x90>)
 800ce5e:	6813      	ldr	r3, [r2, #0]
 800ce60:	b933      	cbnz	r3, 800ce70 <_free_r+0x2c>
 800ce62:	6063      	str	r3, [r4, #4]
 800ce64:	6014      	str	r4, [r2, #0]
 800ce66:	4628      	mov	r0, r5
 800ce68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce6c:	f7ff b8f8 	b.w	800c060 <__malloc_unlock>
 800ce70:	42a3      	cmp	r3, r4
 800ce72:	d908      	bls.n	800ce86 <_free_r+0x42>
 800ce74:	6820      	ldr	r0, [r4, #0]
 800ce76:	1821      	adds	r1, r4, r0
 800ce78:	428b      	cmp	r3, r1
 800ce7a:	bf01      	itttt	eq
 800ce7c:	6819      	ldreq	r1, [r3, #0]
 800ce7e:	685b      	ldreq	r3, [r3, #4]
 800ce80:	1809      	addeq	r1, r1, r0
 800ce82:	6021      	streq	r1, [r4, #0]
 800ce84:	e7ed      	b.n	800ce62 <_free_r+0x1e>
 800ce86:	461a      	mov	r2, r3
 800ce88:	685b      	ldr	r3, [r3, #4]
 800ce8a:	b10b      	cbz	r3, 800ce90 <_free_r+0x4c>
 800ce8c:	42a3      	cmp	r3, r4
 800ce8e:	d9fa      	bls.n	800ce86 <_free_r+0x42>
 800ce90:	6811      	ldr	r1, [r2, #0]
 800ce92:	1850      	adds	r0, r2, r1
 800ce94:	42a0      	cmp	r0, r4
 800ce96:	d10b      	bne.n	800ceb0 <_free_r+0x6c>
 800ce98:	6820      	ldr	r0, [r4, #0]
 800ce9a:	4401      	add	r1, r0
 800ce9c:	1850      	adds	r0, r2, r1
 800ce9e:	4283      	cmp	r3, r0
 800cea0:	6011      	str	r1, [r2, #0]
 800cea2:	d1e0      	bne.n	800ce66 <_free_r+0x22>
 800cea4:	6818      	ldr	r0, [r3, #0]
 800cea6:	685b      	ldr	r3, [r3, #4]
 800cea8:	6053      	str	r3, [r2, #4]
 800ceaa:	4408      	add	r0, r1
 800ceac:	6010      	str	r0, [r2, #0]
 800ceae:	e7da      	b.n	800ce66 <_free_r+0x22>
 800ceb0:	d902      	bls.n	800ceb8 <_free_r+0x74>
 800ceb2:	230c      	movs	r3, #12
 800ceb4:	602b      	str	r3, [r5, #0]
 800ceb6:	e7d6      	b.n	800ce66 <_free_r+0x22>
 800ceb8:	6820      	ldr	r0, [r4, #0]
 800ceba:	1821      	adds	r1, r4, r0
 800cebc:	428b      	cmp	r3, r1
 800cebe:	bf04      	itt	eq
 800cec0:	6819      	ldreq	r1, [r3, #0]
 800cec2:	685b      	ldreq	r3, [r3, #4]
 800cec4:	6063      	str	r3, [r4, #4]
 800cec6:	bf04      	itt	eq
 800cec8:	1809      	addeq	r1, r1, r0
 800ceca:	6021      	streq	r1, [r4, #0]
 800cecc:	6054      	str	r4, [r2, #4]
 800cece:	e7ca      	b.n	800ce66 <_free_r+0x22>
 800ced0:	bd38      	pop	{r3, r4, r5, pc}
 800ced2:	bf00      	nop
 800ced4:	200008d0 	.word	0x200008d0

0800ced8 <_malloc_usable_size_r>:
 800ced8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cedc:	1f18      	subs	r0, r3, #4
 800cede:	2b00      	cmp	r3, #0
 800cee0:	bfbc      	itt	lt
 800cee2:	580b      	ldrlt	r3, [r1, r0]
 800cee4:	18c0      	addlt	r0, r0, r3
 800cee6:	4770      	bx	lr

0800cee8 <fiprintf>:
 800cee8:	b40e      	push	{r1, r2, r3}
 800ceea:	b503      	push	{r0, r1, lr}
 800ceec:	4601      	mov	r1, r0
 800ceee:	ab03      	add	r3, sp, #12
 800cef0:	4805      	ldr	r0, [pc, #20]	@ (800cf08 <fiprintf+0x20>)
 800cef2:	f853 2b04 	ldr.w	r2, [r3], #4
 800cef6:	6800      	ldr	r0, [r0, #0]
 800cef8:	9301      	str	r3, [sp, #4]
 800cefa:	f7fe fe2b 	bl	800bb54 <_vfiprintf_r>
 800cefe:	b002      	add	sp, #8
 800cf00:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf04:	b003      	add	sp, #12
 800cf06:	4770      	bx	lr
 800cf08:	200001c4 	.word	0x200001c4

0800cf0c <abort>:
 800cf0c:	b508      	push	{r3, lr}
 800cf0e:	2006      	movs	r0, #6
 800cf10:	f000 f82c 	bl	800cf6c <raise>
 800cf14:	2001      	movs	r0, #1
 800cf16:	f7f5 f989 	bl	800222c <_exit>

0800cf1a <_raise_r>:
 800cf1a:	291f      	cmp	r1, #31
 800cf1c:	b538      	push	{r3, r4, r5, lr}
 800cf1e:	4605      	mov	r5, r0
 800cf20:	460c      	mov	r4, r1
 800cf22:	d904      	bls.n	800cf2e <_raise_r+0x14>
 800cf24:	2316      	movs	r3, #22
 800cf26:	6003      	str	r3, [r0, #0]
 800cf28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cf2c:	bd38      	pop	{r3, r4, r5, pc}
 800cf2e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cf30:	b112      	cbz	r2, 800cf38 <_raise_r+0x1e>
 800cf32:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cf36:	b94b      	cbnz	r3, 800cf4c <_raise_r+0x32>
 800cf38:	4628      	mov	r0, r5
 800cf3a:	f000 f831 	bl	800cfa0 <_getpid_r>
 800cf3e:	4622      	mov	r2, r4
 800cf40:	4601      	mov	r1, r0
 800cf42:	4628      	mov	r0, r5
 800cf44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf48:	f000 b818 	b.w	800cf7c <_kill_r>
 800cf4c:	2b01      	cmp	r3, #1
 800cf4e:	d00a      	beq.n	800cf66 <_raise_r+0x4c>
 800cf50:	1c59      	adds	r1, r3, #1
 800cf52:	d103      	bne.n	800cf5c <_raise_r+0x42>
 800cf54:	2316      	movs	r3, #22
 800cf56:	6003      	str	r3, [r0, #0]
 800cf58:	2001      	movs	r0, #1
 800cf5a:	e7e7      	b.n	800cf2c <_raise_r+0x12>
 800cf5c:	2100      	movs	r1, #0
 800cf5e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cf62:	4620      	mov	r0, r4
 800cf64:	4798      	blx	r3
 800cf66:	2000      	movs	r0, #0
 800cf68:	e7e0      	b.n	800cf2c <_raise_r+0x12>
	...

0800cf6c <raise>:
 800cf6c:	4b02      	ldr	r3, [pc, #8]	@ (800cf78 <raise+0xc>)
 800cf6e:	4601      	mov	r1, r0
 800cf70:	6818      	ldr	r0, [r3, #0]
 800cf72:	f7ff bfd2 	b.w	800cf1a <_raise_r>
 800cf76:	bf00      	nop
 800cf78:	200001c4 	.word	0x200001c4

0800cf7c <_kill_r>:
 800cf7c:	b538      	push	{r3, r4, r5, lr}
 800cf7e:	4d07      	ldr	r5, [pc, #28]	@ (800cf9c <_kill_r+0x20>)
 800cf80:	2300      	movs	r3, #0
 800cf82:	4604      	mov	r4, r0
 800cf84:	4608      	mov	r0, r1
 800cf86:	4611      	mov	r1, r2
 800cf88:	602b      	str	r3, [r5, #0]
 800cf8a:	f7f5 f93f 	bl	800220c <_kill>
 800cf8e:	1c43      	adds	r3, r0, #1
 800cf90:	d102      	bne.n	800cf98 <_kill_r+0x1c>
 800cf92:	682b      	ldr	r3, [r5, #0]
 800cf94:	b103      	cbz	r3, 800cf98 <_kill_r+0x1c>
 800cf96:	6023      	str	r3, [r4, #0]
 800cf98:	bd38      	pop	{r3, r4, r5, pc}
 800cf9a:	bf00      	nop
 800cf9c:	200008d4 	.word	0x200008d4

0800cfa0 <_getpid_r>:
 800cfa0:	f7f5 b92c 	b.w	80021fc <_getpid>

0800cfa4 <atan2f>:
 800cfa4:	f000 b81e 	b.w	800cfe4 <__ieee754_atan2f>

0800cfa8 <sqrtf>:
 800cfa8:	b508      	push	{r3, lr}
 800cfaa:	ed2d 8b02 	vpush	{d8}
 800cfae:	eeb0 8a40 	vmov.f32	s16, s0
 800cfb2:	f000 f8b7 	bl	800d124 <__ieee754_sqrtf>
 800cfb6:	eeb4 8a48 	vcmp.f32	s16, s16
 800cfba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfbe:	d60c      	bvs.n	800cfda <sqrtf+0x32>
 800cfc0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800cfe0 <sqrtf+0x38>
 800cfc4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800cfc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfcc:	d505      	bpl.n	800cfda <sqrtf+0x32>
 800cfce:	f7fd fa6f 	bl	800a4b0 <__errno>
 800cfd2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800cfd6:	2321      	movs	r3, #33	@ 0x21
 800cfd8:	6003      	str	r3, [r0, #0]
 800cfda:	ecbd 8b02 	vpop	{d8}
 800cfde:	bd08      	pop	{r3, pc}
 800cfe0:	00000000 	.word	0x00000000

0800cfe4 <__ieee754_atan2f>:
 800cfe4:	ee10 2a90 	vmov	r2, s1
 800cfe8:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800cfec:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800cff0:	b510      	push	{r4, lr}
 800cff2:	eef0 7a40 	vmov.f32	s15, s0
 800cff6:	d806      	bhi.n	800d006 <__ieee754_atan2f+0x22>
 800cff8:	ee10 0a10 	vmov	r0, s0
 800cffc:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800d000:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d004:	d904      	bls.n	800d010 <__ieee754_atan2f+0x2c>
 800d006:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800d00a:	eeb0 0a67 	vmov.f32	s0, s15
 800d00e:	bd10      	pop	{r4, pc}
 800d010:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800d014:	d103      	bne.n	800d01e <__ieee754_atan2f+0x3a>
 800d016:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d01a:	f000 b887 	b.w	800d12c <atanf>
 800d01e:	1794      	asrs	r4, r2, #30
 800d020:	f004 0402 	and.w	r4, r4, #2
 800d024:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800d028:	b943      	cbnz	r3, 800d03c <__ieee754_atan2f+0x58>
 800d02a:	2c02      	cmp	r4, #2
 800d02c:	d05e      	beq.n	800d0ec <__ieee754_atan2f+0x108>
 800d02e:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800d100 <__ieee754_atan2f+0x11c>
 800d032:	2c03      	cmp	r4, #3
 800d034:	bf08      	it	eq
 800d036:	eef0 7a47 	vmoveq.f32	s15, s14
 800d03a:	e7e6      	b.n	800d00a <__ieee754_atan2f+0x26>
 800d03c:	b941      	cbnz	r1, 800d050 <__ieee754_atan2f+0x6c>
 800d03e:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800d104 <__ieee754_atan2f+0x120>
 800d042:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800d108 <__ieee754_atan2f+0x124>
 800d046:	2800      	cmp	r0, #0
 800d048:	bfb8      	it	lt
 800d04a:	eef0 7a47 	vmovlt.f32	s15, s14
 800d04e:	e7dc      	b.n	800d00a <__ieee754_atan2f+0x26>
 800d050:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800d054:	d110      	bne.n	800d078 <__ieee754_atan2f+0x94>
 800d056:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d05a:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 800d05e:	d107      	bne.n	800d070 <__ieee754_atan2f+0x8c>
 800d060:	2c02      	cmp	r4, #2
 800d062:	d846      	bhi.n	800d0f2 <__ieee754_atan2f+0x10e>
 800d064:	4b29      	ldr	r3, [pc, #164]	@ (800d10c <__ieee754_atan2f+0x128>)
 800d066:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d06a:	edd3 7a00 	vldr	s15, [r3]
 800d06e:	e7cc      	b.n	800d00a <__ieee754_atan2f+0x26>
 800d070:	2c02      	cmp	r4, #2
 800d072:	d841      	bhi.n	800d0f8 <__ieee754_atan2f+0x114>
 800d074:	4b26      	ldr	r3, [pc, #152]	@ (800d110 <__ieee754_atan2f+0x12c>)
 800d076:	e7f6      	b.n	800d066 <__ieee754_atan2f+0x82>
 800d078:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d07c:	d0df      	beq.n	800d03e <__ieee754_atan2f+0x5a>
 800d07e:	1a5b      	subs	r3, r3, r1
 800d080:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800d084:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800d088:	da1a      	bge.n	800d0c0 <__ieee754_atan2f+0xdc>
 800d08a:	2a00      	cmp	r2, #0
 800d08c:	da01      	bge.n	800d092 <__ieee754_atan2f+0xae>
 800d08e:	313c      	adds	r1, #60	@ 0x3c
 800d090:	db19      	blt.n	800d0c6 <__ieee754_atan2f+0xe2>
 800d092:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800d096:	f000 f91d 	bl	800d2d4 <fabsf>
 800d09a:	f000 f847 	bl	800d12c <atanf>
 800d09e:	eef0 7a40 	vmov.f32	s15, s0
 800d0a2:	2c01      	cmp	r4, #1
 800d0a4:	d012      	beq.n	800d0cc <__ieee754_atan2f+0xe8>
 800d0a6:	2c02      	cmp	r4, #2
 800d0a8:	d017      	beq.n	800d0da <__ieee754_atan2f+0xf6>
 800d0aa:	2c00      	cmp	r4, #0
 800d0ac:	d0ad      	beq.n	800d00a <__ieee754_atan2f+0x26>
 800d0ae:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800d114 <__ieee754_atan2f+0x130>
 800d0b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d0b6:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800d118 <__ieee754_atan2f+0x134>
 800d0ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d0be:	e7a4      	b.n	800d00a <__ieee754_atan2f+0x26>
 800d0c0:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800d104 <__ieee754_atan2f+0x120>
 800d0c4:	e7ed      	b.n	800d0a2 <__ieee754_atan2f+0xbe>
 800d0c6:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800d11c <__ieee754_atan2f+0x138>
 800d0ca:	e7ea      	b.n	800d0a2 <__ieee754_atan2f+0xbe>
 800d0cc:	ee17 3a90 	vmov	r3, s15
 800d0d0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800d0d4:	ee07 3a90 	vmov	s15, r3
 800d0d8:	e797      	b.n	800d00a <__ieee754_atan2f+0x26>
 800d0da:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800d114 <__ieee754_atan2f+0x130>
 800d0de:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d0e2:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800d118 <__ieee754_atan2f+0x134>
 800d0e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d0ea:	e78e      	b.n	800d00a <__ieee754_atan2f+0x26>
 800d0ec:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800d118 <__ieee754_atan2f+0x134>
 800d0f0:	e78b      	b.n	800d00a <__ieee754_atan2f+0x26>
 800d0f2:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800d120 <__ieee754_atan2f+0x13c>
 800d0f6:	e788      	b.n	800d00a <__ieee754_atan2f+0x26>
 800d0f8:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800d11c <__ieee754_atan2f+0x138>
 800d0fc:	e785      	b.n	800d00a <__ieee754_atan2f+0x26>
 800d0fe:	bf00      	nop
 800d100:	c0490fdb 	.word	0xc0490fdb
 800d104:	3fc90fdb 	.word	0x3fc90fdb
 800d108:	bfc90fdb 	.word	0xbfc90fdb
 800d10c:	0800e060 	.word	0x0800e060
 800d110:	0800e054 	.word	0x0800e054
 800d114:	33bbbd2e 	.word	0x33bbbd2e
 800d118:	40490fdb 	.word	0x40490fdb
 800d11c:	00000000 	.word	0x00000000
 800d120:	3f490fdb 	.word	0x3f490fdb

0800d124 <__ieee754_sqrtf>:
 800d124:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d128:	4770      	bx	lr
	...

0800d12c <atanf>:
 800d12c:	b538      	push	{r3, r4, r5, lr}
 800d12e:	ee10 5a10 	vmov	r5, s0
 800d132:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800d136:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800d13a:	eef0 7a40 	vmov.f32	s15, s0
 800d13e:	d310      	bcc.n	800d162 <atanf+0x36>
 800d140:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800d144:	d904      	bls.n	800d150 <atanf+0x24>
 800d146:	ee70 7a00 	vadd.f32	s15, s0, s0
 800d14a:	eeb0 0a67 	vmov.f32	s0, s15
 800d14e:	bd38      	pop	{r3, r4, r5, pc}
 800d150:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800d288 <atanf+0x15c>
 800d154:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800d28c <atanf+0x160>
 800d158:	2d00      	cmp	r5, #0
 800d15a:	bfc8      	it	gt
 800d15c:	eef0 7a47 	vmovgt.f32	s15, s14
 800d160:	e7f3      	b.n	800d14a <atanf+0x1e>
 800d162:	4b4b      	ldr	r3, [pc, #300]	@ (800d290 <atanf+0x164>)
 800d164:	429c      	cmp	r4, r3
 800d166:	d810      	bhi.n	800d18a <atanf+0x5e>
 800d168:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800d16c:	d20a      	bcs.n	800d184 <atanf+0x58>
 800d16e:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800d294 <atanf+0x168>
 800d172:	ee30 7a07 	vadd.f32	s14, s0, s14
 800d176:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d17a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800d17e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d182:	dce2      	bgt.n	800d14a <atanf+0x1e>
 800d184:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d188:	e013      	b.n	800d1b2 <atanf+0x86>
 800d18a:	f000 f8a3 	bl	800d2d4 <fabsf>
 800d18e:	4b42      	ldr	r3, [pc, #264]	@ (800d298 <atanf+0x16c>)
 800d190:	429c      	cmp	r4, r3
 800d192:	d84f      	bhi.n	800d234 <atanf+0x108>
 800d194:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800d198:	429c      	cmp	r4, r3
 800d19a:	d841      	bhi.n	800d220 <atanf+0xf4>
 800d19c:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800d1a0:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800d1a4:	eea0 7a27 	vfma.f32	s14, s0, s15
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d1ae:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d1b2:	1c5a      	adds	r2, r3, #1
 800d1b4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800d1b8:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800d29c <atanf+0x170>
 800d1bc:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800d2a0 <atanf+0x174>
 800d1c0:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800d2a4 <atanf+0x178>
 800d1c4:	ee66 6a06 	vmul.f32	s13, s12, s12
 800d1c8:	eee6 5a87 	vfma.f32	s11, s13, s14
 800d1cc:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800d2a8 <atanf+0x17c>
 800d1d0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800d1d4:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800d2ac <atanf+0x180>
 800d1d8:	eee7 5a26 	vfma.f32	s11, s14, s13
 800d1dc:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800d2b0 <atanf+0x184>
 800d1e0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800d1e4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800d2b4 <atanf+0x188>
 800d1e8:	eee7 5a26 	vfma.f32	s11, s14, s13
 800d1ec:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800d2b8 <atanf+0x18c>
 800d1f0:	eea6 5a87 	vfma.f32	s10, s13, s14
 800d1f4:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800d2bc <atanf+0x190>
 800d1f8:	eea5 7a26 	vfma.f32	s14, s10, s13
 800d1fc:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800d2c0 <atanf+0x194>
 800d200:	eea7 5a26 	vfma.f32	s10, s14, s13
 800d204:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800d2c4 <atanf+0x198>
 800d208:	eea5 7a26 	vfma.f32	s14, s10, s13
 800d20c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d210:	eea5 7a86 	vfma.f32	s14, s11, s12
 800d214:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d218:	d121      	bne.n	800d25e <atanf+0x132>
 800d21a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d21e:	e794      	b.n	800d14a <atanf+0x1e>
 800d220:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800d224:	ee30 7a67 	vsub.f32	s14, s0, s15
 800d228:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d22c:	2301      	movs	r3, #1
 800d22e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d232:	e7be      	b.n	800d1b2 <atanf+0x86>
 800d234:	4b24      	ldr	r3, [pc, #144]	@ (800d2c8 <atanf+0x19c>)
 800d236:	429c      	cmp	r4, r3
 800d238:	d80b      	bhi.n	800d252 <atanf+0x126>
 800d23a:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800d23e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d242:	eea0 7a27 	vfma.f32	s14, s0, s15
 800d246:	2302      	movs	r3, #2
 800d248:	ee70 6a67 	vsub.f32	s13, s0, s15
 800d24c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d250:	e7af      	b.n	800d1b2 <atanf+0x86>
 800d252:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800d256:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d25a:	2303      	movs	r3, #3
 800d25c:	e7a9      	b.n	800d1b2 <atanf+0x86>
 800d25e:	4a1b      	ldr	r2, [pc, #108]	@ (800d2cc <atanf+0x1a0>)
 800d260:	491b      	ldr	r1, [pc, #108]	@ (800d2d0 <atanf+0x1a4>)
 800d262:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d266:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800d26a:	edd3 6a00 	vldr	s13, [r3]
 800d26e:	ee37 7a66 	vsub.f32	s14, s14, s13
 800d272:	2d00      	cmp	r5, #0
 800d274:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d278:	edd2 7a00 	vldr	s15, [r2]
 800d27c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d280:	bfb8      	it	lt
 800d282:	eef1 7a67 	vneglt.f32	s15, s15
 800d286:	e760      	b.n	800d14a <atanf+0x1e>
 800d288:	bfc90fdb 	.word	0xbfc90fdb
 800d28c:	3fc90fdb 	.word	0x3fc90fdb
 800d290:	3edfffff 	.word	0x3edfffff
 800d294:	7149f2ca 	.word	0x7149f2ca
 800d298:	3f97ffff 	.word	0x3f97ffff
 800d29c:	3c8569d7 	.word	0x3c8569d7
 800d2a0:	3d4bda59 	.word	0x3d4bda59
 800d2a4:	bd6ef16b 	.word	0xbd6ef16b
 800d2a8:	3d886b35 	.word	0x3d886b35
 800d2ac:	3dba2e6e 	.word	0x3dba2e6e
 800d2b0:	3e124925 	.word	0x3e124925
 800d2b4:	3eaaaaab 	.word	0x3eaaaaab
 800d2b8:	bd15a221 	.word	0xbd15a221
 800d2bc:	bd9d8795 	.word	0xbd9d8795
 800d2c0:	bde38e38 	.word	0xbde38e38
 800d2c4:	be4ccccd 	.word	0xbe4ccccd
 800d2c8:	401bffff 	.word	0x401bffff
 800d2cc:	0800e07c 	.word	0x0800e07c
 800d2d0:	0800e06c 	.word	0x0800e06c

0800d2d4 <fabsf>:
 800d2d4:	ee10 3a10 	vmov	r3, s0
 800d2d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d2dc:	ee00 3a10 	vmov	s0, r3
 800d2e0:	4770      	bx	lr
	...

0800d2e4 <_init>:
 800d2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2e6:	bf00      	nop
 800d2e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2ea:	bc08      	pop	{r3}
 800d2ec:	469e      	mov	lr, r3
 800d2ee:	4770      	bx	lr

0800d2f0 <_fini>:
 800d2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2f2:	bf00      	nop
 800d2f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2f6:	bc08      	pop	{r3}
 800d2f8:	469e      	mov	lr, r3
 800d2fa:	4770      	bx	lr
=======
 8008704:	e031      	b.n	800876a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008706:	2308      	movs	r3, #8
 8008708:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800870a:	2308      	movs	r3, #8
 800870c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	0e5b      	lsrs	r3, r3, #25
 8008716:	b2db      	uxtb	r3, r3
 8008718:	f003 0307 	and.w	r3, r3, #7
 800871c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	689b      	ldr	r3, [r3, #8]
 8008724:	0f5b      	lsrs	r3, r3, #29
 8008726:	b2db      	uxtb	r3, r3
 8008728:	f003 0307 	and.w	r3, r3, #7
 800872c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800872e:	7bbb      	ldrb	r3, [r7, #14]
 8008730:	7b3a      	ldrb	r2, [r7, #12]
 8008732:	4911      	ldr	r1, [pc, #68]	@ (8008778 <UARTEx_SetNbDataToProcess+0x94>)
 8008734:	5c8a      	ldrb	r2, [r1, r2]
 8008736:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800873a:	7b3a      	ldrb	r2, [r7, #12]
 800873c:	490f      	ldr	r1, [pc, #60]	@ (800877c <UARTEx_SetNbDataToProcess+0x98>)
 800873e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008740:	fb93 f3f2 	sdiv	r3, r3, r2
 8008744:	b29a      	uxth	r2, r3
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800874c:	7bfb      	ldrb	r3, [r7, #15]
 800874e:	7b7a      	ldrb	r2, [r7, #13]
 8008750:	4909      	ldr	r1, [pc, #36]	@ (8008778 <UARTEx_SetNbDataToProcess+0x94>)
 8008752:	5c8a      	ldrb	r2, [r1, r2]
 8008754:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008758:	7b7a      	ldrb	r2, [r7, #13]
 800875a:	4908      	ldr	r1, [pc, #32]	@ (800877c <UARTEx_SetNbDataToProcess+0x98>)
 800875c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800875e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008762:	b29a      	uxth	r2, r3
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800876a:	bf00      	nop
 800876c:	3714      	adds	r7, #20
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr
 8008776:	bf00      	nop
 8008778:	0800d468 	.word	0x0800d468
 800877c:	0800d470 	.word	0x0800d470

08008780 <arm_sin_f32>:
 8008780:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8008800 <arm_sin_f32+0x80>
 8008784:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008788:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800878c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008790:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008794:	d504      	bpl.n	80087a0 <arm_sin_f32+0x20>
 8008796:	ee17 3a90 	vmov	r3, s15
 800879a:	3b01      	subs	r3, #1
 800879c:	ee07 3a90 	vmov	s15, r3
 80087a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80087a4:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8008804 <arm_sin_f32+0x84>
 80087a8:	ee30 0a67 	vsub.f32	s0, s0, s15
 80087ac:	ee20 0a07 	vmul.f32	s0, s0, s14
 80087b0:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80087b4:	ee17 3a90 	vmov	r3, s15
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087be:	d21a      	bcs.n	80087f6 <arm_sin_f32+0x76>
 80087c0:	ee07 3a90 	vmov	s15, r3
 80087c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087c8:	1c59      	adds	r1, r3, #1
 80087ca:	ee30 0a67 	vsub.f32	s0, s0, s15
 80087ce:	4a0e      	ldr	r2, [pc, #56]	@ (8008808 <arm_sin_f32+0x88>)
 80087d0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80087d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80087d8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80087dc:	ed93 7a00 	vldr	s14, [r3]
 80087e0:	edd2 6a00 	vldr	s13, [r2]
 80087e4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80087e8:	ee20 0a26 	vmul.f32	s0, s0, s13
 80087ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80087f0:	ee37 0a80 	vadd.f32	s0, s15, s0
 80087f4:	4770      	bx	lr
 80087f6:	ee30 0a47 	vsub.f32	s0, s0, s14
 80087fa:	2101      	movs	r1, #1
 80087fc:	2300      	movs	r3, #0
 80087fe:	e7e6      	b.n	80087ce <arm_sin_f32+0x4e>
 8008800:	3e22f983 	.word	0x3e22f983
 8008804:	44000000 	.word	0x44000000
 8008808:	0800d478 	.word	0x0800d478

0800880c <__cvt>:
 800880c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008810:	ec57 6b10 	vmov	r6, r7, d0
 8008814:	2f00      	cmp	r7, #0
 8008816:	460c      	mov	r4, r1
 8008818:	4619      	mov	r1, r3
 800881a:	463b      	mov	r3, r7
 800881c:	bfbb      	ittet	lt
 800881e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008822:	461f      	movlt	r7, r3
 8008824:	2300      	movge	r3, #0
 8008826:	232d      	movlt	r3, #45	@ 0x2d
 8008828:	700b      	strb	r3, [r1, #0]
 800882a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800882c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008830:	4691      	mov	r9, r2
 8008832:	f023 0820 	bic.w	r8, r3, #32
 8008836:	bfbc      	itt	lt
 8008838:	4632      	movlt	r2, r6
 800883a:	4616      	movlt	r6, r2
 800883c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008840:	d005      	beq.n	800884e <__cvt+0x42>
 8008842:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008846:	d100      	bne.n	800884a <__cvt+0x3e>
 8008848:	3401      	adds	r4, #1
 800884a:	2102      	movs	r1, #2
 800884c:	e000      	b.n	8008850 <__cvt+0x44>
 800884e:	2103      	movs	r1, #3
 8008850:	ab03      	add	r3, sp, #12
 8008852:	9301      	str	r3, [sp, #4]
 8008854:	ab02      	add	r3, sp, #8
 8008856:	9300      	str	r3, [sp, #0]
 8008858:	ec47 6b10 	vmov	d0, r6, r7
 800885c:	4653      	mov	r3, sl
 800885e:	4622      	mov	r2, r4
 8008860:	f001 ff1e 	bl	800a6a0 <_dtoa_r>
 8008864:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008868:	4605      	mov	r5, r0
 800886a:	d119      	bne.n	80088a0 <__cvt+0x94>
 800886c:	f019 0f01 	tst.w	r9, #1
 8008870:	d00e      	beq.n	8008890 <__cvt+0x84>
 8008872:	eb00 0904 	add.w	r9, r0, r4
 8008876:	2200      	movs	r2, #0
 8008878:	2300      	movs	r3, #0
 800887a:	4630      	mov	r0, r6
 800887c:	4639      	mov	r1, r7
 800887e:	f7f8 f93b 	bl	8000af8 <__aeabi_dcmpeq>
 8008882:	b108      	cbz	r0, 8008888 <__cvt+0x7c>
 8008884:	f8cd 900c 	str.w	r9, [sp, #12]
 8008888:	2230      	movs	r2, #48	@ 0x30
 800888a:	9b03      	ldr	r3, [sp, #12]
 800888c:	454b      	cmp	r3, r9
 800888e:	d31e      	bcc.n	80088ce <__cvt+0xc2>
 8008890:	9b03      	ldr	r3, [sp, #12]
 8008892:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008894:	1b5b      	subs	r3, r3, r5
 8008896:	4628      	mov	r0, r5
 8008898:	6013      	str	r3, [r2, #0]
 800889a:	b004      	add	sp, #16
 800889c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088a0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80088a4:	eb00 0904 	add.w	r9, r0, r4
 80088a8:	d1e5      	bne.n	8008876 <__cvt+0x6a>
 80088aa:	7803      	ldrb	r3, [r0, #0]
 80088ac:	2b30      	cmp	r3, #48	@ 0x30
 80088ae:	d10a      	bne.n	80088c6 <__cvt+0xba>
 80088b0:	2200      	movs	r2, #0
 80088b2:	2300      	movs	r3, #0
 80088b4:	4630      	mov	r0, r6
 80088b6:	4639      	mov	r1, r7
 80088b8:	f7f8 f91e 	bl	8000af8 <__aeabi_dcmpeq>
 80088bc:	b918      	cbnz	r0, 80088c6 <__cvt+0xba>
 80088be:	f1c4 0401 	rsb	r4, r4, #1
 80088c2:	f8ca 4000 	str.w	r4, [sl]
 80088c6:	f8da 3000 	ldr.w	r3, [sl]
 80088ca:	4499      	add	r9, r3
 80088cc:	e7d3      	b.n	8008876 <__cvt+0x6a>
 80088ce:	1c59      	adds	r1, r3, #1
 80088d0:	9103      	str	r1, [sp, #12]
 80088d2:	701a      	strb	r2, [r3, #0]
 80088d4:	e7d9      	b.n	800888a <__cvt+0x7e>

080088d6 <__exponent>:
 80088d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80088d8:	2900      	cmp	r1, #0
 80088da:	bfba      	itte	lt
 80088dc:	4249      	neglt	r1, r1
 80088de:	232d      	movlt	r3, #45	@ 0x2d
 80088e0:	232b      	movge	r3, #43	@ 0x2b
 80088e2:	2909      	cmp	r1, #9
 80088e4:	7002      	strb	r2, [r0, #0]
 80088e6:	7043      	strb	r3, [r0, #1]
 80088e8:	dd29      	ble.n	800893e <__exponent+0x68>
 80088ea:	f10d 0307 	add.w	r3, sp, #7
 80088ee:	461d      	mov	r5, r3
 80088f0:	270a      	movs	r7, #10
 80088f2:	461a      	mov	r2, r3
 80088f4:	fbb1 f6f7 	udiv	r6, r1, r7
 80088f8:	fb07 1416 	mls	r4, r7, r6, r1
 80088fc:	3430      	adds	r4, #48	@ 0x30
 80088fe:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008902:	460c      	mov	r4, r1
 8008904:	2c63      	cmp	r4, #99	@ 0x63
 8008906:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800890a:	4631      	mov	r1, r6
 800890c:	dcf1      	bgt.n	80088f2 <__exponent+0x1c>
 800890e:	3130      	adds	r1, #48	@ 0x30
 8008910:	1e94      	subs	r4, r2, #2
 8008912:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008916:	1c41      	adds	r1, r0, #1
 8008918:	4623      	mov	r3, r4
 800891a:	42ab      	cmp	r3, r5
 800891c:	d30a      	bcc.n	8008934 <__exponent+0x5e>
 800891e:	f10d 0309 	add.w	r3, sp, #9
 8008922:	1a9b      	subs	r3, r3, r2
 8008924:	42ac      	cmp	r4, r5
 8008926:	bf88      	it	hi
 8008928:	2300      	movhi	r3, #0
 800892a:	3302      	adds	r3, #2
 800892c:	4403      	add	r3, r0
 800892e:	1a18      	subs	r0, r3, r0
 8008930:	b003      	add	sp, #12
 8008932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008934:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008938:	f801 6f01 	strb.w	r6, [r1, #1]!
 800893c:	e7ed      	b.n	800891a <__exponent+0x44>
 800893e:	2330      	movs	r3, #48	@ 0x30
 8008940:	3130      	adds	r1, #48	@ 0x30
 8008942:	7083      	strb	r3, [r0, #2]
 8008944:	70c1      	strb	r1, [r0, #3]
 8008946:	1d03      	adds	r3, r0, #4
 8008948:	e7f1      	b.n	800892e <__exponent+0x58>
	...

0800894c <_printf_float>:
 800894c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008950:	b08d      	sub	sp, #52	@ 0x34
 8008952:	460c      	mov	r4, r1
 8008954:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008958:	4616      	mov	r6, r2
 800895a:	461f      	mov	r7, r3
 800895c:	4605      	mov	r5, r0
 800895e:	f001 fdc7 	bl	800a4f0 <_localeconv_r>
 8008962:	6803      	ldr	r3, [r0, #0]
 8008964:	9304      	str	r3, [sp, #16]
 8008966:	4618      	mov	r0, r3
 8008968:	f7f7 fc9a 	bl	80002a0 <strlen>
 800896c:	2300      	movs	r3, #0
 800896e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008970:	f8d8 3000 	ldr.w	r3, [r8]
 8008974:	9005      	str	r0, [sp, #20]
 8008976:	3307      	adds	r3, #7
 8008978:	f023 0307 	bic.w	r3, r3, #7
 800897c:	f103 0208 	add.w	r2, r3, #8
 8008980:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008984:	f8d4 b000 	ldr.w	fp, [r4]
 8008988:	f8c8 2000 	str.w	r2, [r8]
 800898c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008990:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008994:	9307      	str	r3, [sp, #28]
 8008996:	f8cd 8018 	str.w	r8, [sp, #24]
 800899a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800899e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80089a2:	4b9c      	ldr	r3, [pc, #624]	@ (8008c14 <_printf_float+0x2c8>)
 80089a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80089a8:	f7f8 f8d8 	bl	8000b5c <__aeabi_dcmpun>
 80089ac:	bb70      	cbnz	r0, 8008a0c <_printf_float+0xc0>
 80089ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80089b2:	4b98      	ldr	r3, [pc, #608]	@ (8008c14 <_printf_float+0x2c8>)
 80089b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80089b8:	f7f8 f8b2 	bl	8000b20 <__aeabi_dcmple>
 80089bc:	bb30      	cbnz	r0, 8008a0c <_printf_float+0xc0>
 80089be:	2200      	movs	r2, #0
 80089c0:	2300      	movs	r3, #0
 80089c2:	4640      	mov	r0, r8
 80089c4:	4649      	mov	r1, r9
 80089c6:	f7f8 f8a1 	bl	8000b0c <__aeabi_dcmplt>
 80089ca:	b110      	cbz	r0, 80089d2 <_printf_float+0x86>
 80089cc:	232d      	movs	r3, #45	@ 0x2d
 80089ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80089d2:	4a91      	ldr	r2, [pc, #580]	@ (8008c18 <_printf_float+0x2cc>)
 80089d4:	4b91      	ldr	r3, [pc, #580]	@ (8008c1c <_printf_float+0x2d0>)
 80089d6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80089da:	bf94      	ite	ls
 80089dc:	4690      	movls	r8, r2
 80089de:	4698      	movhi	r8, r3
 80089e0:	2303      	movs	r3, #3
 80089e2:	6123      	str	r3, [r4, #16]
 80089e4:	f02b 0304 	bic.w	r3, fp, #4
 80089e8:	6023      	str	r3, [r4, #0]
 80089ea:	f04f 0900 	mov.w	r9, #0
 80089ee:	9700      	str	r7, [sp, #0]
 80089f0:	4633      	mov	r3, r6
 80089f2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80089f4:	4621      	mov	r1, r4
 80089f6:	4628      	mov	r0, r5
 80089f8:	f000 f9d2 	bl	8008da0 <_printf_common>
 80089fc:	3001      	adds	r0, #1
 80089fe:	f040 808d 	bne.w	8008b1c <_printf_float+0x1d0>
 8008a02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008a06:	b00d      	add	sp, #52	@ 0x34
 8008a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a0c:	4642      	mov	r2, r8
 8008a0e:	464b      	mov	r3, r9
 8008a10:	4640      	mov	r0, r8
 8008a12:	4649      	mov	r1, r9
 8008a14:	f7f8 f8a2 	bl	8000b5c <__aeabi_dcmpun>
 8008a18:	b140      	cbz	r0, 8008a2c <_printf_float+0xe0>
 8008a1a:	464b      	mov	r3, r9
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	bfbc      	itt	lt
 8008a20:	232d      	movlt	r3, #45	@ 0x2d
 8008a22:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008a26:	4a7e      	ldr	r2, [pc, #504]	@ (8008c20 <_printf_float+0x2d4>)
 8008a28:	4b7e      	ldr	r3, [pc, #504]	@ (8008c24 <_printf_float+0x2d8>)
 8008a2a:	e7d4      	b.n	80089d6 <_printf_float+0x8a>
 8008a2c:	6863      	ldr	r3, [r4, #4]
 8008a2e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008a32:	9206      	str	r2, [sp, #24]
 8008a34:	1c5a      	adds	r2, r3, #1
 8008a36:	d13b      	bne.n	8008ab0 <_printf_float+0x164>
 8008a38:	2306      	movs	r3, #6
 8008a3a:	6063      	str	r3, [r4, #4]
 8008a3c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008a40:	2300      	movs	r3, #0
 8008a42:	6022      	str	r2, [r4, #0]
 8008a44:	9303      	str	r3, [sp, #12]
 8008a46:	ab0a      	add	r3, sp, #40	@ 0x28
 8008a48:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008a4c:	ab09      	add	r3, sp, #36	@ 0x24
 8008a4e:	9300      	str	r3, [sp, #0]
 8008a50:	6861      	ldr	r1, [r4, #4]
 8008a52:	ec49 8b10 	vmov	d0, r8, r9
 8008a56:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008a5a:	4628      	mov	r0, r5
 8008a5c:	f7ff fed6 	bl	800880c <__cvt>
 8008a60:	9b06      	ldr	r3, [sp, #24]
 8008a62:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008a64:	2b47      	cmp	r3, #71	@ 0x47
 8008a66:	4680      	mov	r8, r0
 8008a68:	d129      	bne.n	8008abe <_printf_float+0x172>
 8008a6a:	1cc8      	adds	r0, r1, #3
 8008a6c:	db02      	blt.n	8008a74 <_printf_float+0x128>
 8008a6e:	6863      	ldr	r3, [r4, #4]
 8008a70:	4299      	cmp	r1, r3
 8008a72:	dd41      	ble.n	8008af8 <_printf_float+0x1ac>
 8008a74:	f1aa 0a02 	sub.w	sl, sl, #2
 8008a78:	fa5f fa8a 	uxtb.w	sl, sl
 8008a7c:	3901      	subs	r1, #1
 8008a7e:	4652      	mov	r2, sl
 8008a80:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008a84:	9109      	str	r1, [sp, #36]	@ 0x24
 8008a86:	f7ff ff26 	bl	80088d6 <__exponent>
 8008a8a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008a8c:	1813      	adds	r3, r2, r0
 8008a8e:	2a01      	cmp	r2, #1
 8008a90:	4681      	mov	r9, r0
 8008a92:	6123      	str	r3, [r4, #16]
 8008a94:	dc02      	bgt.n	8008a9c <_printf_float+0x150>
 8008a96:	6822      	ldr	r2, [r4, #0]
 8008a98:	07d2      	lsls	r2, r2, #31
 8008a9a:	d501      	bpl.n	8008aa0 <_printf_float+0x154>
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	6123      	str	r3, [r4, #16]
 8008aa0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d0a2      	beq.n	80089ee <_printf_float+0xa2>
 8008aa8:	232d      	movs	r3, #45	@ 0x2d
 8008aaa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008aae:	e79e      	b.n	80089ee <_printf_float+0xa2>
 8008ab0:	9a06      	ldr	r2, [sp, #24]
 8008ab2:	2a47      	cmp	r2, #71	@ 0x47
 8008ab4:	d1c2      	bne.n	8008a3c <_printf_float+0xf0>
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d1c0      	bne.n	8008a3c <_printf_float+0xf0>
 8008aba:	2301      	movs	r3, #1
 8008abc:	e7bd      	b.n	8008a3a <_printf_float+0xee>
 8008abe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008ac2:	d9db      	bls.n	8008a7c <_printf_float+0x130>
 8008ac4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008ac8:	d118      	bne.n	8008afc <_printf_float+0x1b0>
 8008aca:	2900      	cmp	r1, #0
 8008acc:	6863      	ldr	r3, [r4, #4]
 8008ace:	dd0b      	ble.n	8008ae8 <_printf_float+0x19c>
 8008ad0:	6121      	str	r1, [r4, #16]
 8008ad2:	b913      	cbnz	r3, 8008ada <_printf_float+0x18e>
 8008ad4:	6822      	ldr	r2, [r4, #0]
 8008ad6:	07d0      	lsls	r0, r2, #31
 8008ad8:	d502      	bpl.n	8008ae0 <_printf_float+0x194>
 8008ada:	3301      	adds	r3, #1
 8008adc:	440b      	add	r3, r1
 8008ade:	6123      	str	r3, [r4, #16]
 8008ae0:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008ae2:	f04f 0900 	mov.w	r9, #0
 8008ae6:	e7db      	b.n	8008aa0 <_printf_float+0x154>
 8008ae8:	b913      	cbnz	r3, 8008af0 <_printf_float+0x1a4>
 8008aea:	6822      	ldr	r2, [r4, #0]
 8008aec:	07d2      	lsls	r2, r2, #31
 8008aee:	d501      	bpl.n	8008af4 <_printf_float+0x1a8>
 8008af0:	3302      	adds	r3, #2
 8008af2:	e7f4      	b.n	8008ade <_printf_float+0x192>
 8008af4:	2301      	movs	r3, #1
 8008af6:	e7f2      	b.n	8008ade <_printf_float+0x192>
 8008af8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008afc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008afe:	4299      	cmp	r1, r3
 8008b00:	db05      	blt.n	8008b0e <_printf_float+0x1c2>
 8008b02:	6823      	ldr	r3, [r4, #0]
 8008b04:	6121      	str	r1, [r4, #16]
 8008b06:	07d8      	lsls	r0, r3, #31
 8008b08:	d5ea      	bpl.n	8008ae0 <_printf_float+0x194>
 8008b0a:	1c4b      	adds	r3, r1, #1
 8008b0c:	e7e7      	b.n	8008ade <_printf_float+0x192>
 8008b0e:	2900      	cmp	r1, #0
 8008b10:	bfd4      	ite	le
 8008b12:	f1c1 0202 	rsble	r2, r1, #2
 8008b16:	2201      	movgt	r2, #1
 8008b18:	4413      	add	r3, r2
 8008b1a:	e7e0      	b.n	8008ade <_printf_float+0x192>
 8008b1c:	6823      	ldr	r3, [r4, #0]
 8008b1e:	055a      	lsls	r2, r3, #21
 8008b20:	d407      	bmi.n	8008b32 <_printf_float+0x1e6>
 8008b22:	6923      	ldr	r3, [r4, #16]
 8008b24:	4642      	mov	r2, r8
 8008b26:	4631      	mov	r1, r6
 8008b28:	4628      	mov	r0, r5
 8008b2a:	47b8      	blx	r7
 8008b2c:	3001      	adds	r0, #1
 8008b2e:	d12b      	bne.n	8008b88 <_printf_float+0x23c>
 8008b30:	e767      	b.n	8008a02 <_printf_float+0xb6>
 8008b32:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008b36:	f240 80dd 	bls.w	8008cf4 <_printf_float+0x3a8>
 8008b3a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008b3e:	2200      	movs	r2, #0
 8008b40:	2300      	movs	r3, #0
 8008b42:	f7f7 ffd9 	bl	8000af8 <__aeabi_dcmpeq>
 8008b46:	2800      	cmp	r0, #0
 8008b48:	d033      	beq.n	8008bb2 <_printf_float+0x266>
 8008b4a:	4a37      	ldr	r2, [pc, #220]	@ (8008c28 <_printf_float+0x2dc>)
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	4631      	mov	r1, r6
 8008b50:	4628      	mov	r0, r5
 8008b52:	47b8      	blx	r7
 8008b54:	3001      	adds	r0, #1
 8008b56:	f43f af54 	beq.w	8008a02 <_printf_float+0xb6>
 8008b5a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008b5e:	4543      	cmp	r3, r8
 8008b60:	db02      	blt.n	8008b68 <_printf_float+0x21c>
 8008b62:	6823      	ldr	r3, [r4, #0]
 8008b64:	07d8      	lsls	r0, r3, #31
 8008b66:	d50f      	bpl.n	8008b88 <_printf_float+0x23c>
 8008b68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b6c:	4631      	mov	r1, r6
 8008b6e:	4628      	mov	r0, r5
 8008b70:	47b8      	blx	r7
 8008b72:	3001      	adds	r0, #1
 8008b74:	f43f af45 	beq.w	8008a02 <_printf_float+0xb6>
 8008b78:	f04f 0900 	mov.w	r9, #0
 8008b7c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8008b80:	f104 0a1a 	add.w	sl, r4, #26
 8008b84:	45c8      	cmp	r8, r9
 8008b86:	dc09      	bgt.n	8008b9c <_printf_float+0x250>
 8008b88:	6823      	ldr	r3, [r4, #0]
 8008b8a:	079b      	lsls	r3, r3, #30
 8008b8c:	f100 8103 	bmi.w	8008d96 <_printf_float+0x44a>
 8008b90:	68e0      	ldr	r0, [r4, #12]
 8008b92:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b94:	4298      	cmp	r0, r3
 8008b96:	bfb8      	it	lt
 8008b98:	4618      	movlt	r0, r3
 8008b9a:	e734      	b.n	8008a06 <_printf_float+0xba>
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	4652      	mov	r2, sl
 8008ba0:	4631      	mov	r1, r6
 8008ba2:	4628      	mov	r0, r5
 8008ba4:	47b8      	blx	r7
 8008ba6:	3001      	adds	r0, #1
 8008ba8:	f43f af2b 	beq.w	8008a02 <_printf_float+0xb6>
 8008bac:	f109 0901 	add.w	r9, r9, #1
 8008bb0:	e7e8      	b.n	8008b84 <_printf_float+0x238>
 8008bb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	dc39      	bgt.n	8008c2c <_printf_float+0x2e0>
 8008bb8:	4a1b      	ldr	r2, [pc, #108]	@ (8008c28 <_printf_float+0x2dc>)
 8008bba:	2301      	movs	r3, #1
 8008bbc:	4631      	mov	r1, r6
 8008bbe:	4628      	mov	r0, r5
 8008bc0:	47b8      	blx	r7
 8008bc2:	3001      	adds	r0, #1
 8008bc4:	f43f af1d 	beq.w	8008a02 <_printf_float+0xb6>
 8008bc8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008bcc:	ea59 0303 	orrs.w	r3, r9, r3
 8008bd0:	d102      	bne.n	8008bd8 <_printf_float+0x28c>
 8008bd2:	6823      	ldr	r3, [r4, #0]
 8008bd4:	07d9      	lsls	r1, r3, #31
 8008bd6:	d5d7      	bpl.n	8008b88 <_printf_float+0x23c>
 8008bd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008bdc:	4631      	mov	r1, r6
 8008bde:	4628      	mov	r0, r5
 8008be0:	47b8      	blx	r7
 8008be2:	3001      	adds	r0, #1
 8008be4:	f43f af0d 	beq.w	8008a02 <_printf_float+0xb6>
 8008be8:	f04f 0a00 	mov.w	sl, #0
 8008bec:	f104 0b1a 	add.w	fp, r4, #26
 8008bf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bf2:	425b      	negs	r3, r3
 8008bf4:	4553      	cmp	r3, sl
 8008bf6:	dc01      	bgt.n	8008bfc <_printf_float+0x2b0>
 8008bf8:	464b      	mov	r3, r9
 8008bfa:	e793      	b.n	8008b24 <_printf_float+0x1d8>
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	465a      	mov	r2, fp
 8008c00:	4631      	mov	r1, r6
 8008c02:	4628      	mov	r0, r5
 8008c04:	47b8      	blx	r7
 8008c06:	3001      	adds	r0, #1
 8008c08:	f43f aefb 	beq.w	8008a02 <_printf_float+0xb6>
 8008c0c:	f10a 0a01 	add.w	sl, sl, #1
 8008c10:	e7ee      	b.n	8008bf0 <_printf_float+0x2a4>
 8008c12:	bf00      	nop
 8008c14:	7fefffff 	.word	0x7fefffff
 8008c18:	0800dc7c 	.word	0x0800dc7c
 8008c1c:	0800dc80 	.word	0x0800dc80
 8008c20:	0800dc84 	.word	0x0800dc84
 8008c24:	0800dc88 	.word	0x0800dc88
 8008c28:	0800dc8c 	.word	0x0800dc8c
 8008c2c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008c2e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008c32:	4553      	cmp	r3, sl
 8008c34:	bfa8      	it	ge
 8008c36:	4653      	movge	r3, sl
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	4699      	mov	r9, r3
 8008c3c:	dc36      	bgt.n	8008cac <_printf_float+0x360>
 8008c3e:	f04f 0b00 	mov.w	fp, #0
 8008c42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c46:	f104 021a 	add.w	r2, r4, #26
 8008c4a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008c4c:	9306      	str	r3, [sp, #24]
 8008c4e:	eba3 0309 	sub.w	r3, r3, r9
 8008c52:	455b      	cmp	r3, fp
 8008c54:	dc31      	bgt.n	8008cba <_printf_float+0x36e>
 8008c56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c58:	459a      	cmp	sl, r3
 8008c5a:	dc3a      	bgt.n	8008cd2 <_printf_float+0x386>
 8008c5c:	6823      	ldr	r3, [r4, #0]
 8008c5e:	07da      	lsls	r2, r3, #31
 8008c60:	d437      	bmi.n	8008cd2 <_printf_float+0x386>
 8008c62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c64:	ebaa 0903 	sub.w	r9, sl, r3
 8008c68:	9b06      	ldr	r3, [sp, #24]
 8008c6a:	ebaa 0303 	sub.w	r3, sl, r3
 8008c6e:	4599      	cmp	r9, r3
 8008c70:	bfa8      	it	ge
 8008c72:	4699      	movge	r9, r3
 8008c74:	f1b9 0f00 	cmp.w	r9, #0
 8008c78:	dc33      	bgt.n	8008ce2 <_printf_float+0x396>
 8008c7a:	f04f 0800 	mov.w	r8, #0
 8008c7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c82:	f104 0b1a 	add.w	fp, r4, #26
 8008c86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c88:	ebaa 0303 	sub.w	r3, sl, r3
 8008c8c:	eba3 0309 	sub.w	r3, r3, r9
 8008c90:	4543      	cmp	r3, r8
 8008c92:	f77f af79 	ble.w	8008b88 <_printf_float+0x23c>
 8008c96:	2301      	movs	r3, #1
 8008c98:	465a      	mov	r2, fp
 8008c9a:	4631      	mov	r1, r6
 8008c9c:	4628      	mov	r0, r5
 8008c9e:	47b8      	blx	r7
 8008ca0:	3001      	adds	r0, #1
 8008ca2:	f43f aeae 	beq.w	8008a02 <_printf_float+0xb6>
 8008ca6:	f108 0801 	add.w	r8, r8, #1
 8008caa:	e7ec      	b.n	8008c86 <_printf_float+0x33a>
 8008cac:	4642      	mov	r2, r8
 8008cae:	4631      	mov	r1, r6
 8008cb0:	4628      	mov	r0, r5
 8008cb2:	47b8      	blx	r7
 8008cb4:	3001      	adds	r0, #1
 8008cb6:	d1c2      	bne.n	8008c3e <_printf_float+0x2f2>
 8008cb8:	e6a3      	b.n	8008a02 <_printf_float+0xb6>
 8008cba:	2301      	movs	r3, #1
 8008cbc:	4631      	mov	r1, r6
 8008cbe:	4628      	mov	r0, r5
 8008cc0:	9206      	str	r2, [sp, #24]
 8008cc2:	47b8      	blx	r7
 8008cc4:	3001      	adds	r0, #1
 8008cc6:	f43f ae9c 	beq.w	8008a02 <_printf_float+0xb6>
 8008cca:	9a06      	ldr	r2, [sp, #24]
 8008ccc:	f10b 0b01 	add.w	fp, fp, #1
 8008cd0:	e7bb      	b.n	8008c4a <_printf_float+0x2fe>
 8008cd2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cd6:	4631      	mov	r1, r6
 8008cd8:	4628      	mov	r0, r5
 8008cda:	47b8      	blx	r7
 8008cdc:	3001      	adds	r0, #1
 8008cde:	d1c0      	bne.n	8008c62 <_printf_float+0x316>
 8008ce0:	e68f      	b.n	8008a02 <_printf_float+0xb6>
 8008ce2:	9a06      	ldr	r2, [sp, #24]
 8008ce4:	464b      	mov	r3, r9
 8008ce6:	4442      	add	r2, r8
 8008ce8:	4631      	mov	r1, r6
 8008cea:	4628      	mov	r0, r5
 8008cec:	47b8      	blx	r7
 8008cee:	3001      	adds	r0, #1
 8008cf0:	d1c3      	bne.n	8008c7a <_printf_float+0x32e>
 8008cf2:	e686      	b.n	8008a02 <_printf_float+0xb6>
 8008cf4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008cf8:	f1ba 0f01 	cmp.w	sl, #1
 8008cfc:	dc01      	bgt.n	8008d02 <_printf_float+0x3b6>
 8008cfe:	07db      	lsls	r3, r3, #31
 8008d00:	d536      	bpl.n	8008d70 <_printf_float+0x424>
 8008d02:	2301      	movs	r3, #1
 8008d04:	4642      	mov	r2, r8
 8008d06:	4631      	mov	r1, r6
 8008d08:	4628      	mov	r0, r5
 8008d0a:	47b8      	blx	r7
 8008d0c:	3001      	adds	r0, #1
 8008d0e:	f43f ae78 	beq.w	8008a02 <_printf_float+0xb6>
 8008d12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d16:	4631      	mov	r1, r6
 8008d18:	4628      	mov	r0, r5
 8008d1a:	47b8      	blx	r7
 8008d1c:	3001      	adds	r0, #1
 8008d1e:	f43f ae70 	beq.w	8008a02 <_printf_float+0xb6>
 8008d22:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008d26:	2200      	movs	r2, #0
 8008d28:	2300      	movs	r3, #0
 8008d2a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008d2e:	f7f7 fee3 	bl	8000af8 <__aeabi_dcmpeq>
 8008d32:	b9c0      	cbnz	r0, 8008d66 <_printf_float+0x41a>
 8008d34:	4653      	mov	r3, sl
 8008d36:	f108 0201 	add.w	r2, r8, #1
 8008d3a:	4631      	mov	r1, r6
 8008d3c:	4628      	mov	r0, r5
 8008d3e:	47b8      	blx	r7
 8008d40:	3001      	adds	r0, #1
 8008d42:	d10c      	bne.n	8008d5e <_printf_float+0x412>
 8008d44:	e65d      	b.n	8008a02 <_printf_float+0xb6>
 8008d46:	2301      	movs	r3, #1
 8008d48:	465a      	mov	r2, fp
 8008d4a:	4631      	mov	r1, r6
 8008d4c:	4628      	mov	r0, r5
 8008d4e:	47b8      	blx	r7
 8008d50:	3001      	adds	r0, #1
 8008d52:	f43f ae56 	beq.w	8008a02 <_printf_float+0xb6>
 8008d56:	f108 0801 	add.w	r8, r8, #1
 8008d5a:	45d0      	cmp	r8, sl
 8008d5c:	dbf3      	blt.n	8008d46 <_printf_float+0x3fa>
 8008d5e:	464b      	mov	r3, r9
 8008d60:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008d64:	e6df      	b.n	8008b26 <_printf_float+0x1da>
 8008d66:	f04f 0800 	mov.w	r8, #0
 8008d6a:	f104 0b1a 	add.w	fp, r4, #26
 8008d6e:	e7f4      	b.n	8008d5a <_printf_float+0x40e>
 8008d70:	2301      	movs	r3, #1
 8008d72:	4642      	mov	r2, r8
 8008d74:	e7e1      	b.n	8008d3a <_printf_float+0x3ee>
 8008d76:	2301      	movs	r3, #1
 8008d78:	464a      	mov	r2, r9
 8008d7a:	4631      	mov	r1, r6
 8008d7c:	4628      	mov	r0, r5
 8008d7e:	47b8      	blx	r7
 8008d80:	3001      	adds	r0, #1
 8008d82:	f43f ae3e 	beq.w	8008a02 <_printf_float+0xb6>
 8008d86:	f108 0801 	add.w	r8, r8, #1
 8008d8a:	68e3      	ldr	r3, [r4, #12]
 8008d8c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008d8e:	1a5b      	subs	r3, r3, r1
 8008d90:	4543      	cmp	r3, r8
 8008d92:	dcf0      	bgt.n	8008d76 <_printf_float+0x42a>
 8008d94:	e6fc      	b.n	8008b90 <_printf_float+0x244>
 8008d96:	f04f 0800 	mov.w	r8, #0
 8008d9a:	f104 0919 	add.w	r9, r4, #25
 8008d9e:	e7f4      	b.n	8008d8a <_printf_float+0x43e>

08008da0 <_printf_common>:
 8008da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008da4:	4616      	mov	r6, r2
 8008da6:	4698      	mov	r8, r3
 8008da8:	688a      	ldr	r2, [r1, #8]
 8008daa:	690b      	ldr	r3, [r1, #16]
 8008dac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008db0:	4293      	cmp	r3, r2
 8008db2:	bfb8      	it	lt
 8008db4:	4613      	movlt	r3, r2
 8008db6:	6033      	str	r3, [r6, #0]
 8008db8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008dbc:	4607      	mov	r7, r0
 8008dbe:	460c      	mov	r4, r1
 8008dc0:	b10a      	cbz	r2, 8008dc6 <_printf_common+0x26>
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	6033      	str	r3, [r6, #0]
 8008dc6:	6823      	ldr	r3, [r4, #0]
 8008dc8:	0699      	lsls	r1, r3, #26
 8008dca:	bf42      	ittt	mi
 8008dcc:	6833      	ldrmi	r3, [r6, #0]
 8008dce:	3302      	addmi	r3, #2
 8008dd0:	6033      	strmi	r3, [r6, #0]
 8008dd2:	6825      	ldr	r5, [r4, #0]
 8008dd4:	f015 0506 	ands.w	r5, r5, #6
 8008dd8:	d106      	bne.n	8008de8 <_printf_common+0x48>
 8008dda:	f104 0a19 	add.w	sl, r4, #25
 8008dde:	68e3      	ldr	r3, [r4, #12]
 8008de0:	6832      	ldr	r2, [r6, #0]
 8008de2:	1a9b      	subs	r3, r3, r2
 8008de4:	42ab      	cmp	r3, r5
 8008de6:	dc26      	bgt.n	8008e36 <_printf_common+0x96>
 8008de8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008dec:	6822      	ldr	r2, [r4, #0]
 8008dee:	3b00      	subs	r3, #0
 8008df0:	bf18      	it	ne
 8008df2:	2301      	movne	r3, #1
 8008df4:	0692      	lsls	r2, r2, #26
 8008df6:	d42b      	bmi.n	8008e50 <_printf_common+0xb0>
 8008df8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008dfc:	4641      	mov	r1, r8
 8008dfe:	4638      	mov	r0, r7
 8008e00:	47c8      	blx	r9
 8008e02:	3001      	adds	r0, #1
 8008e04:	d01e      	beq.n	8008e44 <_printf_common+0xa4>
 8008e06:	6823      	ldr	r3, [r4, #0]
 8008e08:	6922      	ldr	r2, [r4, #16]
 8008e0a:	f003 0306 	and.w	r3, r3, #6
 8008e0e:	2b04      	cmp	r3, #4
 8008e10:	bf02      	ittt	eq
 8008e12:	68e5      	ldreq	r5, [r4, #12]
 8008e14:	6833      	ldreq	r3, [r6, #0]
 8008e16:	1aed      	subeq	r5, r5, r3
 8008e18:	68a3      	ldr	r3, [r4, #8]
 8008e1a:	bf0c      	ite	eq
 8008e1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e20:	2500      	movne	r5, #0
 8008e22:	4293      	cmp	r3, r2
 8008e24:	bfc4      	itt	gt
 8008e26:	1a9b      	subgt	r3, r3, r2
 8008e28:	18ed      	addgt	r5, r5, r3
 8008e2a:	2600      	movs	r6, #0
 8008e2c:	341a      	adds	r4, #26
 8008e2e:	42b5      	cmp	r5, r6
 8008e30:	d11a      	bne.n	8008e68 <_printf_common+0xc8>
 8008e32:	2000      	movs	r0, #0
 8008e34:	e008      	b.n	8008e48 <_printf_common+0xa8>
 8008e36:	2301      	movs	r3, #1
 8008e38:	4652      	mov	r2, sl
 8008e3a:	4641      	mov	r1, r8
 8008e3c:	4638      	mov	r0, r7
 8008e3e:	47c8      	blx	r9
 8008e40:	3001      	adds	r0, #1
 8008e42:	d103      	bne.n	8008e4c <_printf_common+0xac>
 8008e44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008e48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e4c:	3501      	adds	r5, #1
 8008e4e:	e7c6      	b.n	8008dde <_printf_common+0x3e>
 8008e50:	18e1      	adds	r1, r4, r3
 8008e52:	1c5a      	adds	r2, r3, #1
 8008e54:	2030      	movs	r0, #48	@ 0x30
 8008e56:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008e5a:	4422      	add	r2, r4
 8008e5c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008e60:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008e64:	3302      	adds	r3, #2
 8008e66:	e7c7      	b.n	8008df8 <_printf_common+0x58>
 8008e68:	2301      	movs	r3, #1
 8008e6a:	4622      	mov	r2, r4
 8008e6c:	4641      	mov	r1, r8
 8008e6e:	4638      	mov	r0, r7
 8008e70:	47c8      	blx	r9
 8008e72:	3001      	adds	r0, #1
 8008e74:	d0e6      	beq.n	8008e44 <_printf_common+0xa4>
 8008e76:	3601      	adds	r6, #1
 8008e78:	e7d9      	b.n	8008e2e <_printf_common+0x8e>
	...

08008e7c <_printf_i>:
 8008e7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e80:	7e0f      	ldrb	r7, [r1, #24]
 8008e82:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008e84:	2f78      	cmp	r7, #120	@ 0x78
 8008e86:	4691      	mov	r9, r2
 8008e88:	4680      	mov	r8, r0
 8008e8a:	460c      	mov	r4, r1
 8008e8c:	469a      	mov	sl, r3
 8008e8e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008e92:	d807      	bhi.n	8008ea4 <_printf_i+0x28>
 8008e94:	2f62      	cmp	r7, #98	@ 0x62
 8008e96:	d80a      	bhi.n	8008eae <_printf_i+0x32>
 8008e98:	2f00      	cmp	r7, #0
 8008e9a:	f000 80d2 	beq.w	8009042 <_printf_i+0x1c6>
 8008e9e:	2f58      	cmp	r7, #88	@ 0x58
 8008ea0:	f000 80b9 	beq.w	8009016 <_printf_i+0x19a>
 8008ea4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008ea8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008eac:	e03a      	b.n	8008f24 <_printf_i+0xa8>
 8008eae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008eb2:	2b15      	cmp	r3, #21
 8008eb4:	d8f6      	bhi.n	8008ea4 <_printf_i+0x28>
 8008eb6:	a101      	add	r1, pc, #4	@ (adr r1, 8008ebc <_printf_i+0x40>)
 8008eb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ebc:	08008f15 	.word	0x08008f15
 8008ec0:	08008f29 	.word	0x08008f29
 8008ec4:	08008ea5 	.word	0x08008ea5
 8008ec8:	08008ea5 	.word	0x08008ea5
 8008ecc:	08008ea5 	.word	0x08008ea5
 8008ed0:	08008ea5 	.word	0x08008ea5
 8008ed4:	08008f29 	.word	0x08008f29
 8008ed8:	08008ea5 	.word	0x08008ea5
 8008edc:	08008ea5 	.word	0x08008ea5
 8008ee0:	08008ea5 	.word	0x08008ea5
 8008ee4:	08008ea5 	.word	0x08008ea5
 8008ee8:	08009029 	.word	0x08009029
 8008eec:	08008f53 	.word	0x08008f53
 8008ef0:	08008fe3 	.word	0x08008fe3
 8008ef4:	08008ea5 	.word	0x08008ea5
 8008ef8:	08008ea5 	.word	0x08008ea5
 8008efc:	0800904b 	.word	0x0800904b
 8008f00:	08008ea5 	.word	0x08008ea5
 8008f04:	08008f53 	.word	0x08008f53
 8008f08:	08008ea5 	.word	0x08008ea5
 8008f0c:	08008ea5 	.word	0x08008ea5
 8008f10:	08008feb 	.word	0x08008feb
 8008f14:	6833      	ldr	r3, [r6, #0]
 8008f16:	1d1a      	adds	r2, r3, #4
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	6032      	str	r2, [r6, #0]
 8008f1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008f20:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008f24:	2301      	movs	r3, #1
 8008f26:	e09d      	b.n	8009064 <_printf_i+0x1e8>
 8008f28:	6833      	ldr	r3, [r6, #0]
 8008f2a:	6820      	ldr	r0, [r4, #0]
 8008f2c:	1d19      	adds	r1, r3, #4
 8008f2e:	6031      	str	r1, [r6, #0]
 8008f30:	0606      	lsls	r6, r0, #24
 8008f32:	d501      	bpl.n	8008f38 <_printf_i+0xbc>
 8008f34:	681d      	ldr	r5, [r3, #0]
 8008f36:	e003      	b.n	8008f40 <_printf_i+0xc4>
 8008f38:	0645      	lsls	r5, r0, #25
 8008f3a:	d5fb      	bpl.n	8008f34 <_printf_i+0xb8>
 8008f3c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008f40:	2d00      	cmp	r5, #0
 8008f42:	da03      	bge.n	8008f4c <_printf_i+0xd0>
 8008f44:	232d      	movs	r3, #45	@ 0x2d
 8008f46:	426d      	negs	r5, r5
 8008f48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f4c:	4859      	ldr	r0, [pc, #356]	@ (80090b4 <_printf_i+0x238>)
 8008f4e:	230a      	movs	r3, #10
 8008f50:	e011      	b.n	8008f76 <_printf_i+0xfa>
 8008f52:	6821      	ldr	r1, [r4, #0]
 8008f54:	6833      	ldr	r3, [r6, #0]
 8008f56:	0608      	lsls	r0, r1, #24
 8008f58:	f853 5b04 	ldr.w	r5, [r3], #4
 8008f5c:	d402      	bmi.n	8008f64 <_printf_i+0xe8>
 8008f5e:	0649      	lsls	r1, r1, #25
 8008f60:	bf48      	it	mi
 8008f62:	b2ad      	uxthmi	r5, r5
 8008f64:	2f6f      	cmp	r7, #111	@ 0x6f
 8008f66:	4853      	ldr	r0, [pc, #332]	@ (80090b4 <_printf_i+0x238>)
 8008f68:	6033      	str	r3, [r6, #0]
 8008f6a:	bf14      	ite	ne
 8008f6c:	230a      	movne	r3, #10
 8008f6e:	2308      	moveq	r3, #8
 8008f70:	2100      	movs	r1, #0
 8008f72:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008f76:	6866      	ldr	r6, [r4, #4]
 8008f78:	60a6      	str	r6, [r4, #8]
 8008f7a:	2e00      	cmp	r6, #0
 8008f7c:	bfa2      	ittt	ge
 8008f7e:	6821      	ldrge	r1, [r4, #0]
 8008f80:	f021 0104 	bicge.w	r1, r1, #4
 8008f84:	6021      	strge	r1, [r4, #0]
 8008f86:	b90d      	cbnz	r5, 8008f8c <_printf_i+0x110>
 8008f88:	2e00      	cmp	r6, #0
 8008f8a:	d04b      	beq.n	8009024 <_printf_i+0x1a8>
 8008f8c:	4616      	mov	r6, r2
 8008f8e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008f92:	fb03 5711 	mls	r7, r3, r1, r5
 8008f96:	5dc7      	ldrb	r7, [r0, r7]
 8008f98:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008f9c:	462f      	mov	r7, r5
 8008f9e:	42bb      	cmp	r3, r7
 8008fa0:	460d      	mov	r5, r1
 8008fa2:	d9f4      	bls.n	8008f8e <_printf_i+0x112>
 8008fa4:	2b08      	cmp	r3, #8
 8008fa6:	d10b      	bne.n	8008fc0 <_printf_i+0x144>
 8008fa8:	6823      	ldr	r3, [r4, #0]
 8008faa:	07df      	lsls	r7, r3, #31
 8008fac:	d508      	bpl.n	8008fc0 <_printf_i+0x144>
 8008fae:	6923      	ldr	r3, [r4, #16]
 8008fb0:	6861      	ldr	r1, [r4, #4]
 8008fb2:	4299      	cmp	r1, r3
 8008fb4:	bfde      	ittt	le
 8008fb6:	2330      	movle	r3, #48	@ 0x30
 8008fb8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008fbc:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008fc0:	1b92      	subs	r2, r2, r6
 8008fc2:	6122      	str	r2, [r4, #16]
 8008fc4:	f8cd a000 	str.w	sl, [sp]
 8008fc8:	464b      	mov	r3, r9
 8008fca:	aa03      	add	r2, sp, #12
 8008fcc:	4621      	mov	r1, r4
 8008fce:	4640      	mov	r0, r8
 8008fd0:	f7ff fee6 	bl	8008da0 <_printf_common>
 8008fd4:	3001      	adds	r0, #1
 8008fd6:	d14a      	bne.n	800906e <_printf_i+0x1f2>
 8008fd8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008fdc:	b004      	add	sp, #16
 8008fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fe2:	6823      	ldr	r3, [r4, #0]
 8008fe4:	f043 0320 	orr.w	r3, r3, #32
 8008fe8:	6023      	str	r3, [r4, #0]
 8008fea:	4833      	ldr	r0, [pc, #204]	@ (80090b8 <_printf_i+0x23c>)
 8008fec:	2778      	movs	r7, #120	@ 0x78
 8008fee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008ff2:	6823      	ldr	r3, [r4, #0]
 8008ff4:	6831      	ldr	r1, [r6, #0]
 8008ff6:	061f      	lsls	r7, r3, #24
 8008ff8:	f851 5b04 	ldr.w	r5, [r1], #4
 8008ffc:	d402      	bmi.n	8009004 <_printf_i+0x188>
 8008ffe:	065f      	lsls	r7, r3, #25
 8009000:	bf48      	it	mi
 8009002:	b2ad      	uxthmi	r5, r5
 8009004:	6031      	str	r1, [r6, #0]
 8009006:	07d9      	lsls	r1, r3, #31
 8009008:	bf44      	itt	mi
 800900a:	f043 0320 	orrmi.w	r3, r3, #32
 800900e:	6023      	strmi	r3, [r4, #0]
 8009010:	b11d      	cbz	r5, 800901a <_printf_i+0x19e>
 8009012:	2310      	movs	r3, #16
 8009014:	e7ac      	b.n	8008f70 <_printf_i+0xf4>
 8009016:	4827      	ldr	r0, [pc, #156]	@ (80090b4 <_printf_i+0x238>)
 8009018:	e7e9      	b.n	8008fee <_printf_i+0x172>
 800901a:	6823      	ldr	r3, [r4, #0]
 800901c:	f023 0320 	bic.w	r3, r3, #32
 8009020:	6023      	str	r3, [r4, #0]
 8009022:	e7f6      	b.n	8009012 <_printf_i+0x196>
 8009024:	4616      	mov	r6, r2
 8009026:	e7bd      	b.n	8008fa4 <_printf_i+0x128>
 8009028:	6833      	ldr	r3, [r6, #0]
 800902a:	6825      	ldr	r5, [r4, #0]
 800902c:	6961      	ldr	r1, [r4, #20]
 800902e:	1d18      	adds	r0, r3, #4
 8009030:	6030      	str	r0, [r6, #0]
 8009032:	062e      	lsls	r6, r5, #24
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	d501      	bpl.n	800903c <_printf_i+0x1c0>
 8009038:	6019      	str	r1, [r3, #0]
 800903a:	e002      	b.n	8009042 <_printf_i+0x1c6>
 800903c:	0668      	lsls	r0, r5, #25
 800903e:	d5fb      	bpl.n	8009038 <_printf_i+0x1bc>
 8009040:	8019      	strh	r1, [r3, #0]
 8009042:	2300      	movs	r3, #0
 8009044:	6123      	str	r3, [r4, #16]
 8009046:	4616      	mov	r6, r2
 8009048:	e7bc      	b.n	8008fc4 <_printf_i+0x148>
 800904a:	6833      	ldr	r3, [r6, #0]
 800904c:	1d1a      	adds	r2, r3, #4
 800904e:	6032      	str	r2, [r6, #0]
 8009050:	681e      	ldr	r6, [r3, #0]
 8009052:	6862      	ldr	r2, [r4, #4]
 8009054:	2100      	movs	r1, #0
 8009056:	4630      	mov	r0, r6
 8009058:	f7f7 f8d2 	bl	8000200 <memchr>
 800905c:	b108      	cbz	r0, 8009062 <_printf_i+0x1e6>
 800905e:	1b80      	subs	r0, r0, r6
 8009060:	6060      	str	r0, [r4, #4]
 8009062:	6863      	ldr	r3, [r4, #4]
 8009064:	6123      	str	r3, [r4, #16]
 8009066:	2300      	movs	r3, #0
 8009068:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800906c:	e7aa      	b.n	8008fc4 <_printf_i+0x148>
 800906e:	6923      	ldr	r3, [r4, #16]
 8009070:	4632      	mov	r2, r6
 8009072:	4649      	mov	r1, r9
 8009074:	4640      	mov	r0, r8
 8009076:	47d0      	blx	sl
 8009078:	3001      	adds	r0, #1
 800907a:	d0ad      	beq.n	8008fd8 <_printf_i+0x15c>
 800907c:	6823      	ldr	r3, [r4, #0]
 800907e:	079b      	lsls	r3, r3, #30
 8009080:	d413      	bmi.n	80090aa <_printf_i+0x22e>
 8009082:	68e0      	ldr	r0, [r4, #12]
 8009084:	9b03      	ldr	r3, [sp, #12]
 8009086:	4298      	cmp	r0, r3
 8009088:	bfb8      	it	lt
 800908a:	4618      	movlt	r0, r3
 800908c:	e7a6      	b.n	8008fdc <_printf_i+0x160>
 800908e:	2301      	movs	r3, #1
 8009090:	4632      	mov	r2, r6
 8009092:	4649      	mov	r1, r9
 8009094:	4640      	mov	r0, r8
 8009096:	47d0      	blx	sl
 8009098:	3001      	adds	r0, #1
 800909a:	d09d      	beq.n	8008fd8 <_printf_i+0x15c>
 800909c:	3501      	adds	r5, #1
 800909e:	68e3      	ldr	r3, [r4, #12]
 80090a0:	9903      	ldr	r1, [sp, #12]
 80090a2:	1a5b      	subs	r3, r3, r1
 80090a4:	42ab      	cmp	r3, r5
 80090a6:	dcf2      	bgt.n	800908e <_printf_i+0x212>
 80090a8:	e7eb      	b.n	8009082 <_printf_i+0x206>
 80090aa:	2500      	movs	r5, #0
 80090ac:	f104 0619 	add.w	r6, r4, #25
 80090b0:	e7f5      	b.n	800909e <_printf_i+0x222>
 80090b2:	bf00      	nop
 80090b4:	0800dc8e 	.word	0x0800dc8e
 80090b8:	0800dc9f 	.word	0x0800dc9f

080090bc <_scanf_float>:
 80090bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090c0:	b087      	sub	sp, #28
 80090c2:	4617      	mov	r7, r2
 80090c4:	9303      	str	r3, [sp, #12]
 80090c6:	688b      	ldr	r3, [r1, #8]
 80090c8:	1e5a      	subs	r2, r3, #1
 80090ca:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80090ce:	bf81      	itttt	hi
 80090d0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80090d4:	eb03 0b05 	addhi.w	fp, r3, r5
 80090d8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80090dc:	608b      	strhi	r3, [r1, #8]
 80090de:	680b      	ldr	r3, [r1, #0]
 80090e0:	460a      	mov	r2, r1
 80090e2:	f04f 0500 	mov.w	r5, #0
 80090e6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80090ea:	f842 3b1c 	str.w	r3, [r2], #28
 80090ee:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80090f2:	4680      	mov	r8, r0
 80090f4:	460c      	mov	r4, r1
 80090f6:	bf98      	it	ls
 80090f8:	f04f 0b00 	movls.w	fp, #0
 80090fc:	9201      	str	r2, [sp, #4]
 80090fe:	4616      	mov	r6, r2
 8009100:	46aa      	mov	sl, r5
 8009102:	46a9      	mov	r9, r5
 8009104:	9502      	str	r5, [sp, #8]
 8009106:	68a2      	ldr	r2, [r4, #8]
 8009108:	b152      	cbz	r2, 8009120 <_scanf_float+0x64>
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	781b      	ldrb	r3, [r3, #0]
 800910e:	2b4e      	cmp	r3, #78	@ 0x4e
 8009110:	d864      	bhi.n	80091dc <_scanf_float+0x120>
 8009112:	2b40      	cmp	r3, #64	@ 0x40
 8009114:	d83c      	bhi.n	8009190 <_scanf_float+0xd4>
 8009116:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800911a:	b2c8      	uxtb	r0, r1
 800911c:	280e      	cmp	r0, #14
 800911e:	d93a      	bls.n	8009196 <_scanf_float+0xda>
 8009120:	f1b9 0f00 	cmp.w	r9, #0
 8009124:	d003      	beq.n	800912e <_scanf_float+0x72>
 8009126:	6823      	ldr	r3, [r4, #0]
 8009128:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800912c:	6023      	str	r3, [r4, #0]
 800912e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8009132:	f1ba 0f01 	cmp.w	sl, #1
 8009136:	f200 8117 	bhi.w	8009368 <_scanf_float+0x2ac>
 800913a:	9b01      	ldr	r3, [sp, #4]
 800913c:	429e      	cmp	r6, r3
 800913e:	f200 8108 	bhi.w	8009352 <_scanf_float+0x296>
 8009142:	2001      	movs	r0, #1
 8009144:	b007      	add	sp, #28
 8009146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800914a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800914e:	2a0d      	cmp	r2, #13
 8009150:	d8e6      	bhi.n	8009120 <_scanf_float+0x64>
 8009152:	a101      	add	r1, pc, #4	@ (adr r1, 8009158 <_scanf_float+0x9c>)
 8009154:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009158:	0800929f 	.word	0x0800929f
 800915c:	08009121 	.word	0x08009121
 8009160:	08009121 	.word	0x08009121
 8009164:	08009121 	.word	0x08009121
 8009168:	080092ff 	.word	0x080092ff
 800916c:	080092d7 	.word	0x080092d7
 8009170:	08009121 	.word	0x08009121
 8009174:	08009121 	.word	0x08009121
 8009178:	080092ad 	.word	0x080092ad
 800917c:	08009121 	.word	0x08009121
 8009180:	08009121 	.word	0x08009121
 8009184:	08009121 	.word	0x08009121
 8009188:	08009121 	.word	0x08009121
 800918c:	08009265 	.word	0x08009265
 8009190:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009194:	e7db      	b.n	800914e <_scanf_float+0x92>
 8009196:	290e      	cmp	r1, #14
 8009198:	d8c2      	bhi.n	8009120 <_scanf_float+0x64>
 800919a:	a001      	add	r0, pc, #4	@ (adr r0, 80091a0 <_scanf_float+0xe4>)
 800919c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80091a0:	08009255 	.word	0x08009255
 80091a4:	08009121 	.word	0x08009121
 80091a8:	08009255 	.word	0x08009255
 80091ac:	080092eb 	.word	0x080092eb
 80091b0:	08009121 	.word	0x08009121
 80091b4:	080091fd 	.word	0x080091fd
 80091b8:	0800923b 	.word	0x0800923b
 80091bc:	0800923b 	.word	0x0800923b
 80091c0:	0800923b 	.word	0x0800923b
 80091c4:	0800923b 	.word	0x0800923b
 80091c8:	0800923b 	.word	0x0800923b
 80091cc:	0800923b 	.word	0x0800923b
 80091d0:	0800923b 	.word	0x0800923b
 80091d4:	0800923b 	.word	0x0800923b
 80091d8:	0800923b 	.word	0x0800923b
 80091dc:	2b6e      	cmp	r3, #110	@ 0x6e
 80091de:	d809      	bhi.n	80091f4 <_scanf_float+0x138>
 80091e0:	2b60      	cmp	r3, #96	@ 0x60
 80091e2:	d8b2      	bhi.n	800914a <_scanf_float+0x8e>
 80091e4:	2b54      	cmp	r3, #84	@ 0x54
 80091e6:	d07b      	beq.n	80092e0 <_scanf_float+0x224>
 80091e8:	2b59      	cmp	r3, #89	@ 0x59
 80091ea:	d199      	bne.n	8009120 <_scanf_float+0x64>
 80091ec:	2d07      	cmp	r5, #7
 80091ee:	d197      	bne.n	8009120 <_scanf_float+0x64>
 80091f0:	2508      	movs	r5, #8
 80091f2:	e02c      	b.n	800924e <_scanf_float+0x192>
 80091f4:	2b74      	cmp	r3, #116	@ 0x74
 80091f6:	d073      	beq.n	80092e0 <_scanf_float+0x224>
 80091f8:	2b79      	cmp	r3, #121	@ 0x79
 80091fa:	e7f6      	b.n	80091ea <_scanf_float+0x12e>
 80091fc:	6821      	ldr	r1, [r4, #0]
 80091fe:	05c8      	lsls	r0, r1, #23
 8009200:	d51b      	bpl.n	800923a <_scanf_float+0x17e>
 8009202:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8009206:	6021      	str	r1, [r4, #0]
 8009208:	f109 0901 	add.w	r9, r9, #1
 800920c:	f1bb 0f00 	cmp.w	fp, #0
 8009210:	d003      	beq.n	800921a <_scanf_float+0x15e>
 8009212:	3201      	adds	r2, #1
 8009214:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8009218:	60a2      	str	r2, [r4, #8]
 800921a:	68a3      	ldr	r3, [r4, #8]
 800921c:	3b01      	subs	r3, #1
 800921e:	60a3      	str	r3, [r4, #8]
 8009220:	6923      	ldr	r3, [r4, #16]
 8009222:	3301      	adds	r3, #1
 8009224:	6123      	str	r3, [r4, #16]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	3b01      	subs	r3, #1
 800922a:	2b00      	cmp	r3, #0
 800922c:	607b      	str	r3, [r7, #4]
 800922e:	f340 8087 	ble.w	8009340 <_scanf_float+0x284>
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	3301      	adds	r3, #1
 8009236:	603b      	str	r3, [r7, #0]
 8009238:	e765      	b.n	8009106 <_scanf_float+0x4a>
 800923a:	eb1a 0105 	adds.w	r1, sl, r5
 800923e:	f47f af6f 	bne.w	8009120 <_scanf_float+0x64>
 8009242:	6822      	ldr	r2, [r4, #0]
 8009244:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009248:	6022      	str	r2, [r4, #0]
 800924a:	460d      	mov	r5, r1
 800924c:	468a      	mov	sl, r1
 800924e:	f806 3b01 	strb.w	r3, [r6], #1
 8009252:	e7e2      	b.n	800921a <_scanf_float+0x15e>
 8009254:	6822      	ldr	r2, [r4, #0]
 8009256:	0610      	lsls	r0, r2, #24
 8009258:	f57f af62 	bpl.w	8009120 <_scanf_float+0x64>
 800925c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009260:	6022      	str	r2, [r4, #0]
 8009262:	e7f4      	b.n	800924e <_scanf_float+0x192>
 8009264:	f1ba 0f00 	cmp.w	sl, #0
 8009268:	d10e      	bne.n	8009288 <_scanf_float+0x1cc>
 800926a:	f1b9 0f00 	cmp.w	r9, #0
 800926e:	d10e      	bne.n	800928e <_scanf_float+0x1d2>
 8009270:	6822      	ldr	r2, [r4, #0]
 8009272:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009276:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800927a:	d108      	bne.n	800928e <_scanf_float+0x1d2>
 800927c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009280:	6022      	str	r2, [r4, #0]
 8009282:	f04f 0a01 	mov.w	sl, #1
 8009286:	e7e2      	b.n	800924e <_scanf_float+0x192>
 8009288:	f1ba 0f02 	cmp.w	sl, #2
 800928c:	d055      	beq.n	800933a <_scanf_float+0x27e>
 800928e:	2d01      	cmp	r5, #1
 8009290:	d002      	beq.n	8009298 <_scanf_float+0x1dc>
 8009292:	2d04      	cmp	r5, #4
 8009294:	f47f af44 	bne.w	8009120 <_scanf_float+0x64>
 8009298:	3501      	adds	r5, #1
 800929a:	b2ed      	uxtb	r5, r5
 800929c:	e7d7      	b.n	800924e <_scanf_float+0x192>
 800929e:	f1ba 0f01 	cmp.w	sl, #1
 80092a2:	f47f af3d 	bne.w	8009120 <_scanf_float+0x64>
 80092a6:	f04f 0a02 	mov.w	sl, #2
 80092aa:	e7d0      	b.n	800924e <_scanf_float+0x192>
 80092ac:	b97d      	cbnz	r5, 80092ce <_scanf_float+0x212>
 80092ae:	f1b9 0f00 	cmp.w	r9, #0
 80092b2:	f47f af38 	bne.w	8009126 <_scanf_float+0x6a>
 80092b6:	6822      	ldr	r2, [r4, #0]
 80092b8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80092bc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80092c0:	f040 8108 	bne.w	80094d4 <_scanf_float+0x418>
 80092c4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80092c8:	6022      	str	r2, [r4, #0]
 80092ca:	2501      	movs	r5, #1
 80092cc:	e7bf      	b.n	800924e <_scanf_float+0x192>
 80092ce:	2d03      	cmp	r5, #3
 80092d0:	d0e2      	beq.n	8009298 <_scanf_float+0x1dc>
 80092d2:	2d05      	cmp	r5, #5
 80092d4:	e7de      	b.n	8009294 <_scanf_float+0x1d8>
 80092d6:	2d02      	cmp	r5, #2
 80092d8:	f47f af22 	bne.w	8009120 <_scanf_float+0x64>
 80092dc:	2503      	movs	r5, #3
 80092de:	e7b6      	b.n	800924e <_scanf_float+0x192>
 80092e0:	2d06      	cmp	r5, #6
 80092e2:	f47f af1d 	bne.w	8009120 <_scanf_float+0x64>
 80092e6:	2507      	movs	r5, #7
 80092e8:	e7b1      	b.n	800924e <_scanf_float+0x192>
 80092ea:	6822      	ldr	r2, [r4, #0]
 80092ec:	0591      	lsls	r1, r2, #22
 80092ee:	f57f af17 	bpl.w	8009120 <_scanf_float+0x64>
 80092f2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80092f6:	6022      	str	r2, [r4, #0]
 80092f8:	f8cd 9008 	str.w	r9, [sp, #8]
 80092fc:	e7a7      	b.n	800924e <_scanf_float+0x192>
 80092fe:	6822      	ldr	r2, [r4, #0]
 8009300:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8009304:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009308:	d006      	beq.n	8009318 <_scanf_float+0x25c>
 800930a:	0550      	lsls	r0, r2, #21
 800930c:	f57f af08 	bpl.w	8009120 <_scanf_float+0x64>
 8009310:	f1b9 0f00 	cmp.w	r9, #0
 8009314:	f000 80de 	beq.w	80094d4 <_scanf_float+0x418>
 8009318:	0591      	lsls	r1, r2, #22
 800931a:	bf58      	it	pl
 800931c:	9902      	ldrpl	r1, [sp, #8]
 800931e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009322:	bf58      	it	pl
 8009324:	eba9 0101 	subpl.w	r1, r9, r1
 8009328:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800932c:	bf58      	it	pl
 800932e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009332:	6022      	str	r2, [r4, #0]
 8009334:	f04f 0900 	mov.w	r9, #0
 8009338:	e789      	b.n	800924e <_scanf_float+0x192>
 800933a:	f04f 0a03 	mov.w	sl, #3
 800933e:	e786      	b.n	800924e <_scanf_float+0x192>
 8009340:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009344:	4639      	mov	r1, r7
 8009346:	4640      	mov	r0, r8
 8009348:	4798      	blx	r3
 800934a:	2800      	cmp	r0, #0
 800934c:	f43f aedb 	beq.w	8009106 <_scanf_float+0x4a>
 8009350:	e6e6      	b.n	8009120 <_scanf_float+0x64>
 8009352:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009356:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800935a:	463a      	mov	r2, r7
 800935c:	4640      	mov	r0, r8
 800935e:	4798      	blx	r3
 8009360:	6923      	ldr	r3, [r4, #16]
 8009362:	3b01      	subs	r3, #1
 8009364:	6123      	str	r3, [r4, #16]
 8009366:	e6e8      	b.n	800913a <_scanf_float+0x7e>
 8009368:	1e6b      	subs	r3, r5, #1
 800936a:	2b06      	cmp	r3, #6
 800936c:	d824      	bhi.n	80093b8 <_scanf_float+0x2fc>
 800936e:	2d02      	cmp	r5, #2
 8009370:	d836      	bhi.n	80093e0 <_scanf_float+0x324>
 8009372:	9b01      	ldr	r3, [sp, #4]
 8009374:	429e      	cmp	r6, r3
 8009376:	f67f aee4 	bls.w	8009142 <_scanf_float+0x86>
 800937a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800937e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009382:	463a      	mov	r2, r7
 8009384:	4640      	mov	r0, r8
 8009386:	4798      	blx	r3
 8009388:	6923      	ldr	r3, [r4, #16]
 800938a:	3b01      	subs	r3, #1
 800938c:	6123      	str	r3, [r4, #16]
 800938e:	e7f0      	b.n	8009372 <_scanf_float+0x2b6>
 8009390:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009394:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009398:	463a      	mov	r2, r7
 800939a:	4640      	mov	r0, r8
 800939c:	4798      	blx	r3
 800939e:	6923      	ldr	r3, [r4, #16]
 80093a0:	3b01      	subs	r3, #1
 80093a2:	6123      	str	r3, [r4, #16]
 80093a4:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80093a8:	fa5f fa8a 	uxtb.w	sl, sl
 80093ac:	f1ba 0f02 	cmp.w	sl, #2
 80093b0:	d1ee      	bne.n	8009390 <_scanf_float+0x2d4>
 80093b2:	3d03      	subs	r5, #3
 80093b4:	b2ed      	uxtb	r5, r5
 80093b6:	1b76      	subs	r6, r6, r5
 80093b8:	6823      	ldr	r3, [r4, #0]
 80093ba:	05da      	lsls	r2, r3, #23
 80093bc:	d530      	bpl.n	8009420 <_scanf_float+0x364>
 80093be:	055b      	lsls	r3, r3, #21
 80093c0:	d511      	bpl.n	80093e6 <_scanf_float+0x32a>
 80093c2:	9b01      	ldr	r3, [sp, #4]
 80093c4:	429e      	cmp	r6, r3
 80093c6:	f67f aebc 	bls.w	8009142 <_scanf_float+0x86>
 80093ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80093ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80093d2:	463a      	mov	r2, r7
 80093d4:	4640      	mov	r0, r8
 80093d6:	4798      	blx	r3
 80093d8:	6923      	ldr	r3, [r4, #16]
 80093da:	3b01      	subs	r3, #1
 80093dc:	6123      	str	r3, [r4, #16]
 80093de:	e7f0      	b.n	80093c2 <_scanf_float+0x306>
 80093e0:	46aa      	mov	sl, r5
 80093e2:	46b3      	mov	fp, r6
 80093e4:	e7de      	b.n	80093a4 <_scanf_float+0x2e8>
 80093e6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80093ea:	6923      	ldr	r3, [r4, #16]
 80093ec:	2965      	cmp	r1, #101	@ 0x65
 80093ee:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80093f2:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 80093f6:	6123      	str	r3, [r4, #16]
 80093f8:	d00c      	beq.n	8009414 <_scanf_float+0x358>
 80093fa:	2945      	cmp	r1, #69	@ 0x45
 80093fc:	d00a      	beq.n	8009414 <_scanf_float+0x358>
 80093fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009402:	463a      	mov	r2, r7
 8009404:	4640      	mov	r0, r8
 8009406:	4798      	blx	r3
 8009408:	6923      	ldr	r3, [r4, #16]
 800940a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800940e:	3b01      	subs	r3, #1
 8009410:	1eb5      	subs	r5, r6, #2
 8009412:	6123      	str	r3, [r4, #16]
 8009414:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009418:	463a      	mov	r2, r7
 800941a:	4640      	mov	r0, r8
 800941c:	4798      	blx	r3
 800941e:	462e      	mov	r6, r5
 8009420:	6822      	ldr	r2, [r4, #0]
 8009422:	f012 0210 	ands.w	r2, r2, #16
 8009426:	d001      	beq.n	800942c <_scanf_float+0x370>
 8009428:	2000      	movs	r0, #0
 800942a:	e68b      	b.n	8009144 <_scanf_float+0x88>
 800942c:	7032      	strb	r2, [r6, #0]
 800942e:	6823      	ldr	r3, [r4, #0]
 8009430:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009434:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009438:	d11c      	bne.n	8009474 <_scanf_float+0x3b8>
 800943a:	9b02      	ldr	r3, [sp, #8]
 800943c:	454b      	cmp	r3, r9
 800943e:	eba3 0209 	sub.w	r2, r3, r9
 8009442:	d123      	bne.n	800948c <_scanf_float+0x3d0>
 8009444:	9901      	ldr	r1, [sp, #4]
 8009446:	2200      	movs	r2, #0
 8009448:	4640      	mov	r0, r8
 800944a:	f000 ff11 	bl	800a270 <_strtod_r>
 800944e:	9b03      	ldr	r3, [sp, #12]
 8009450:	6821      	ldr	r1, [r4, #0]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f011 0f02 	tst.w	r1, #2
 8009458:	ec57 6b10 	vmov	r6, r7, d0
 800945c:	f103 0204 	add.w	r2, r3, #4
 8009460:	d01f      	beq.n	80094a2 <_scanf_float+0x3e6>
 8009462:	9903      	ldr	r1, [sp, #12]
 8009464:	600a      	str	r2, [r1, #0]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	e9c3 6700 	strd	r6, r7, [r3]
 800946c:	68e3      	ldr	r3, [r4, #12]
 800946e:	3301      	adds	r3, #1
 8009470:	60e3      	str	r3, [r4, #12]
 8009472:	e7d9      	b.n	8009428 <_scanf_float+0x36c>
 8009474:	9b04      	ldr	r3, [sp, #16]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d0e4      	beq.n	8009444 <_scanf_float+0x388>
 800947a:	9905      	ldr	r1, [sp, #20]
 800947c:	230a      	movs	r3, #10
 800947e:	3101      	adds	r1, #1
 8009480:	4640      	mov	r0, r8
 8009482:	f000 ff75 	bl	800a370 <_strtol_r>
 8009486:	9b04      	ldr	r3, [sp, #16]
 8009488:	9e05      	ldr	r6, [sp, #20]
 800948a:	1ac2      	subs	r2, r0, r3
 800948c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009490:	429e      	cmp	r6, r3
 8009492:	bf28      	it	cs
 8009494:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009498:	4910      	ldr	r1, [pc, #64]	@ (80094dc <_scanf_float+0x420>)
 800949a:	4630      	mov	r0, r6
 800949c:	f000 f822 	bl	80094e4 <siprintf>
 80094a0:	e7d0      	b.n	8009444 <_scanf_float+0x388>
 80094a2:	f011 0f04 	tst.w	r1, #4
 80094a6:	9903      	ldr	r1, [sp, #12]
 80094a8:	600a      	str	r2, [r1, #0]
 80094aa:	d1dc      	bne.n	8009466 <_scanf_float+0x3aa>
 80094ac:	681d      	ldr	r5, [r3, #0]
 80094ae:	4632      	mov	r2, r6
 80094b0:	463b      	mov	r3, r7
 80094b2:	4630      	mov	r0, r6
 80094b4:	4639      	mov	r1, r7
 80094b6:	f7f7 fb51 	bl	8000b5c <__aeabi_dcmpun>
 80094ba:	b128      	cbz	r0, 80094c8 <_scanf_float+0x40c>
 80094bc:	4808      	ldr	r0, [pc, #32]	@ (80094e0 <_scanf_float+0x424>)
 80094be:	f001 f85f 	bl	800a580 <nanf>
 80094c2:	ed85 0a00 	vstr	s0, [r5]
 80094c6:	e7d1      	b.n	800946c <_scanf_float+0x3b0>
 80094c8:	4630      	mov	r0, r6
 80094ca:	4639      	mov	r1, r7
 80094cc:	f7f7 fba4 	bl	8000c18 <__aeabi_d2f>
 80094d0:	6028      	str	r0, [r5, #0]
 80094d2:	e7cb      	b.n	800946c <_scanf_float+0x3b0>
 80094d4:	f04f 0900 	mov.w	r9, #0
 80094d8:	e629      	b.n	800912e <_scanf_float+0x72>
 80094da:	bf00      	nop
 80094dc:	0800dcb0 	.word	0x0800dcb0
 80094e0:	0800e0a3 	.word	0x0800e0a3

080094e4 <siprintf>:
 80094e4:	b40e      	push	{r1, r2, r3}
 80094e6:	b500      	push	{lr}
 80094e8:	b09c      	sub	sp, #112	@ 0x70
 80094ea:	ab1d      	add	r3, sp, #116	@ 0x74
 80094ec:	9002      	str	r0, [sp, #8]
 80094ee:	9006      	str	r0, [sp, #24]
 80094f0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80094f4:	4809      	ldr	r0, [pc, #36]	@ (800951c <siprintf+0x38>)
 80094f6:	9107      	str	r1, [sp, #28]
 80094f8:	9104      	str	r1, [sp, #16]
 80094fa:	4909      	ldr	r1, [pc, #36]	@ (8009520 <siprintf+0x3c>)
 80094fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009500:	9105      	str	r1, [sp, #20]
 8009502:	6800      	ldr	r0, [r0, #0]
 8009504:	9301      	str	r3, [sp, #4]
 8009506:	a902      	add	r1, sp, #8
 8009508:	f002 fa22 	bl	800b950 <_svfiprintf_r>
 800950c:	9b02      	ldr	r3, [sp, #8]
 800950e:	2200      	movs	r2, #0
 8009510:	701a      	strb	r2, [r3, #0]
 8009512:	b01c      	add	sp, #112	@ 0x70
 8009514:	f85d eb04 	ldr.w	lr, [sp], #4
 8009518:	b003      	add	sp, #12
 800951a:	4770      	bx	lr
 800951c:	200001c4 	.word	0x200001c4
 8009520:	ffff0208 	.word	0xffff0208

08009524 <std>:
 8009524:	2300      	movs	r3, #0
 8009526:	b510      	push	{r4, lr}
 8009528:	4604      	mov	r4, r0
 800952a:	e9c0 3300 	strd	r3, r3, [r0]
 800952e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009532:	6083      	str	r3, [r0, #8]
 8009534:	8181      	strh	r1, [r0, #12]
 8009536:	6643      	str	r3, [r0, #100]	@ 0x64
 8009538:	81c2      	strh	r2, [r0, #14]
 800953a:	6183      	str	r3, [r0, #24]
 800953c:	4619      	mov	r1, r3
 800953e:	2208      	movs	r2, #8
 8009540:	305c      	adds	r0, #92	@ 0x5c
 8009542:	f000 ffcd 	bl	800a4e0 <memset>
 8009546:	4b0d      	ldr	r3, [pc, #52]	@ (800957c <std+0x58>)
 8009548:	6263      	str	r3, [r4, #36]	@ 0x24
 800954a:	4b0d      	ldr	r3, [pc, #52]	@ (8009580 <std+0x5c>)
 800954c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800954e:	4b0d      	ldr	r3, [pc, #52]	@ (8009584 <std+0x60>)
 8009550:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009552:	4b0d      	ldr	r3, [pc, #52]	@ (8009588 <std+0x64>)
 8009554:	6323      	str	r3, [r4, #48]	@ 0x30
 8009556:	4b0d      	ldr	r3, [pc, #52]	@ (800958c <std+0x68>)
 8009558:	6224      	str	r4, [r4, #32]
 800955a:	429c      	cmp	r4, r3
 800955c:	d006      	beq.n	800956c <std+0x48>
 800955e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009562:	4294      	cmp	r4, r2
 8009564:	d002      	beq.n	800956c <std+0x48>
 8009566:	33d0      	adds	r3, #208	@ 0xd0
 8009568:	429c      	cmp	r4, r3
 800956a:	d105      	bne.n	8009578 <std+0x54>
 800956c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009574:	f000 bfea 	b.w	800a54c <__retarget_lock_init_recursive>
 8009578:	bd10      	pop	{r4, pc}
 800957a:	bf00      	nop
 800957c:	0800ca19 	.word	0x0800ca19
 8009580:	0800ca3b 	.word	0x0800ca3b
 8009584:	0800ca73 	.word	0x0800ca73
 8009588:	0800ca97 	.word	0x0800ca97
 800958c:	20000790 	.word	0x20000790

08009590 <stdio_exit_handler>:
 8009590:	4a02      	ldr	r2, [pc, #8]	@ (800959c <stdio_exit_handler+0xc>)
 8009592:	4903      	ldr	r1, [pc, #12]	@ (80095a0 <stdio_exit_handler+0x10>)
 8009594:	4803      	ldr	r0, [pc, #12]	@ (80095a4 <stdio_exit_handler+0x14>)
 8009596:	f000 beed 	b.w	800a374 <_fwalk_sglue>
 800959a:	bf00      	nop
 800959c:	2000004c 	.word	0x2000004c
 80095a0:	0800c04d 	.word	0x0800c04d
 80095a4:	200001c8 	.word	0x200001c8

080095a8 <cleanup_stdio>:
 80095a8:	6841      	ldr	r1, [r0, #4]
 80095aa:	4b0c      	ldr	r3, [pc, #48]	@ (80095dc <cleanup_stdio+0x34>)
 80095ac:	4299      	cmp	r1, r3
 80095ae:	b510      	push	{r4, lr}
 80095b0:	4604      	mov	r4, r0
 80095b2:	d001      	beq.n	80095b8 <cleanup_stdio+0x10>
 80095b4:	f002 fd4a 	bl	800c04c <_fflush_r>
 80095b8:	68a1      	ldr	r1, [r4, #8]
 80095ba:	4b09      	ldr	r3, [pc, #36]	@ (80095e0 <cleanup_stdio+0x38>)
 80095bc:	4299      	cmp	r1, r3
 80095be:	d002      	beq.n	80095c6 <cleanup_stdio+0x1e>
 80095c0:	4620      	mov	r0, r4
 80095c2:	f002 fd43 	bl	800c04c <_fflush_r>
 80095c6:	68e1      	ldr	r1, [r4, #12]
 80095c8:	4b06      	ldr	r3, [pc, #24]	@ (80095e4 <cleanup_stdio+0x3c>)
 80095ca:	4299      	cmp	r1, r3
 80095cc:	d004      	beq.n	80095d8 <cleanup_stdio+0x30>
 80095ce:	4620      	mov	r0, r4
 80095d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095d4:	f002 bd3a 	b.w	800c04c <_fflush_r>
 80095d8:	bd10      	pop	{r4, pc}
 80095da:	bf00      	nop
 80095dc:	20000790 	.word	0x20000790
 80095e0:	200007f8 	.word	0x200007f8
 80095e4:	20000860 	.word	0x20000860

080095e8 <global_stdio_init.part.0>:
 80095e8:	b510      	push	{r4, lr}
 80095ea:	4b0b      	ldr	r3, [pc, #44]	@ (8009618 <global_stdio_init.part.0+0x30>)
 80095ec:	4c0b      	ldr	r4, [pc, #44]	@ (800961c <global_stdio_init.part.0+0x34>)
 80095ee:	4a0c      	ldr	r2, [pc, #48]	@ (8009620 <global_stdio_init.part.0+0x38>)
 80095f0:	601a      	str	r2, [r3, #0]
 80095f2:	4620      	mov	r0, r4
 80095f4:	2200      	movs	r2, #0
 80095f6:	2104      	movs	r1, #4
 80095f8:	f7ff ff94 	bl	8009524 <std>
 80095fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009600:	2201      	movs	r2, #1
 8009602:	2109      	movs	r1, #9
 8009604:	f7ff ff8e 	bl	8009524 <std>
 8009608:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800960c:	2202      	movs	r2, #2
 800960e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009612:	2112      	movs	r1, #18
 8009614:	f7ff bf86 	b.w	8009524 <std>
 8009618:	200008c8 	.word	0x200008c8
 800961c:	20000790 	.word	0x20000790
 8009620:	08009591 	.word	0x08009591

08009624 <__sfp_lock_acquire>:
 8009624:	4801      	ldr	r0, [pc, #4]	@ (800962c <__sfp_lock_acquire+0x8>)
 8009626:	f000 bf92 	b.w	800a54e <__retarget_lock_acquire_recursive>
 800962a:	bf00      	nop
 800962c:	200008cd 	.word	0x200008cd

08009630 <__sfp_lock_release>:
 8009630:	4801      	ldr	r0, [pc, #4]	@ (8009638 <__sfp_lock_release+0x8>)
 8009632:	f000 bf8d 	b.w	800a550 <__retarget_lock_release_recursive>
 8009636:	bf00      	nop
 8009638:	200008cd 	.word	0x200008cd

0800963c <__sinit>:
 800963c:	b510      	push	{r4, lr}
 800963e:	4604      	mov	r4, r0
 8009640:	f7ff fff0 	bl	8009624 <__sfp_lock_acquire>
 8009644:	6a23      	ldr	r3, [r4, #32]
 8009646:	b11b      	cbz	r3, 8009650 <__sinit+0x14>
 8009648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800964c:	f7ff bff0 	b.w	8009630 <__sfp_lock_release>
 8009650:	4b04      	ldr	r3, [pc, #16]	@ (8009664 <__sinit+0x28>)
 8009652:	6223      	str	r3, [r4, #32]
 8009654:	4b04      	ldr	r3, [pc, #16]	@ (8009668 <__sinit+0x2c>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d1f5      	bne.n	8009648 <__sinit+0xc>
 800965c:	f7ff ffc4 	bl	80095e8 <global_stdio_init.part.0>
 8009660:	e7f2      	b.n	8009648 <__sinit+0xc>
 8009662:	bf00      	nop
 8009664:	080095a9 	.word	0x080095a9
 8009668:	200008c8 	.word	0x200008c8

0800966c <sulp>:
 800966c:	b570      	push	{r4, r5, r6, lr}
 800966e:	4604      	mov	r4, r0
 8009670:	460d      	mov	r5, r1
 8009672:	ec45 4b10 	vmov	d0, r4, r5
 8009676:	4616      	mov	r6, r2
 8009678:	f003 f890 	bl	800c79c <__ulp>
 800967c:	ec51 0b10 	vmov	r0, r1, d0
 8009680:	b17e      	cbz	r6, 80096a2 <sulp+0x36>
 8009682:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009686:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800968a:	2b00      	cmp	r3, #0
 800968c:	dd09      	ble.n	80096a2 <sulp+0x36>
 800968e:	051b      	lsls	r3, r3, #20
 8009690:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009694:	2400      	movs	r4, #0
 8009696:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800969a:	4622      	mov	r2, r4
 800969c:	462b      	mov	r3, r5
 800969e:	f7f6 ffc3 	bl	8000628 <__aeabi_dmul>
 80096a2:	ec41 0b10 	vmov	d0, r0, r1
 80096a6:	bd70      	pop	{r4, r5, r6, pc}

080096a8 <_strtod_l>:
 80096a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096ac:	b09f      	sub	sp, #124	@ 0x7c
 80096ae:	460c      	mov	r4, r1
 80096b0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80096b2:	2200      	movs	r2, #0
 80096b4:	921a      	str	r2, [sp, #104]	@ 0x68
 80096b6:	9005      	str	r0, [sp, #20]
 80096b8:	f04f 0a00 	mov.w	sl, #0
 80096bc:	f04f 0b00 	mov.w	fp, #0
 80096c0:	460a      	mov	r2, r1
 80096c2:	9219      	str	r2, [sp, #100]	@ 0x64
 80096c4:	7811      	ldrb	r1, [r2, #0]
 80096c6:	292b      	cmp	r1, #43	@ 0x2b
 80096c8:	d04a      	beq.n	8009760 <_strtod_l+0xb8>
 80096ca:	d838      	bhi.n	800973e <_strtod_l+0x96>
 80096cc:	290d      	cmp	r1, #13
 80096ce:	d832      	bhi.n	8009736 <_strtod_l+0x8e>
 80096d0:	2908      	cmp	r1, #8
 80096d2:	d832      	bhi.n	800973a <_strtod_l+0x92>
 80096d4:	2900      	cmp	r1, #0
 80096d6:	d03b      	beq.n	8009750 <_strtod_l+0xa8>
 80096d8:	2200      	movs	r2, #0
 80096da:	920b      	str	r2, [sp, #44]	@ 0x2c
 80096dc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80096de:	782a      	ldrb	r2, [r5, #0]
 80096e0:	2a30      	cmp	r2, #48	@ 0x30
 80096e2:	f040 80b3 	bne.w	800984c <_strtod_l+0x1a4>
 80096e6:	786a      	ldrb	r2, [r5, #1]
 80096e8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80096ec:	2a58      	cmp	r2, #88	@ 0x58
 80096ee:	d16e      	bne.n	80097ce <_strtod_l+0x126>
 80096f0:	9302      	str	r3, [sp, #8]
 80096f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80096f4:	9301      	str	r3, [sp, #4]
 80096f6:	ab1a      	add	r3, sp, #104	@ 0x68
 80096f8:	9300      	str	r3, [sp, #0]
 80096fa:	4a8e      	ldr	r2, [pc, #568]	@ (8009934 <_strtod_l+0x28c>)
 80096fc:	9805      	ldr	r0, [sp, #20]
 80096fe:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009700:	a919      	add	r1, sp, #100	@ 0x64
 8009702:	f001 fdf9 	bl	800b2f8 <__gethex>
 8009706:	f010 060f 	ands.w	r6, r0, #15
 800970a:	4604      	mov	r4, r0
 800970c:	d005      	beq.n	800971a <_strtod_l+0x72>
 800970e:	2e06      	cmp	r6, #6
 8009710:	d128      	bne.n	8009764 <_strtod_l+0xbc>
 8009712:	3501      	adds	r5, #1
 8009714:	2300      	movs	r3, #0
 8009716:	9519      	str	r5, [sp, #100]	@ 0x64
 8009718:	930b      	str	r3, [sp, #44]	@ 0x2c
 800971a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800971c:	2b00      	cmp	r3, #0
 800971e:	f040 858e 	bne.w	800a23e <_strtod_l+0xb96>
 8009722:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009724:	b1cb      	cbz	r3, 800975a <_strtod_l+0xb2>
 8009726:	4652      	mov	r2, sl
 8009728:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800972c:	ec43 2b10 	vmov	d0, r2, r3
 8009730:	b01f      	add	sp, #124	@ 0x7c
 8009732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009736:	2920      	cmp	r1, #32
 8009738:	d1ce      	bne.n	80096d8 <_strtod_l+0x30>
 800973a:	3201      	adds	r2, #1
 800973c:	e7c1      	b.n	80096c2 <_strtod_l+0x1a>
 800973e:	292d      	cmp	r1, #45	@ 0x2d
 8009740:	d1ca      	bne.n	80096d8 <_strtod_l+0x30>
 8009742:	2101      	movs	r1, #1
 8009744:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009746:	1c51      	adds	r1, r2, #1
 8009748:	9119      	str	r1, [sp, #100]	@ 0x64
 800974a:	7852      	ldrb	r2, [r2, #1]
 800974c:	2a00      	cmp	r2, #0
 800974e:	d1c5      	bne.n	80096dc <_strtod_l+0x34>
 8009750:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009752:	9419      	str	r4, [sp, #100]	@ 0x64
 8009754:	2b00      	cmp	r3, #0
 8009756:	f040 8570 	bne.w	800a23a <_strtod_l+0xb92>
 800975a:	4652      	mov	r2, sl
 800975c:	465b      	mov	r3, fp
 800975e:	e7e5      	b.n	800972c <_strtod_l+0x84>
 8009760:	2100      	movs	r1, #0
 8009762:	e7ef      	b.n	8009744 <_strtod_l+0x9c>
 8009764:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009766:	b13a      	cbz	r2, 8009778 <_strtod_l+0xd0>
 8009768:	2135      	movs	r1, #53	@ 0x35
 800976a:	a81c      	add	r0, sp, #112	@ 0x70
 800976c:	f003 f910 	bl	800c990 <__copybits>
 8009770:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009772:	9805      	ldr	r0, [sp, #20]
 8009774:	f002 fcde 	bl	800c134 <_Bfree>
 8009778:	3e01      	subs	r6, #1
 800977a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800977c:	2e04      	cmp	r6, #4
 800977e:	d806      	bhi.n	800978e <_strtod_l+0xe6>
 8009780:	e8df f006 	tbb	[pc, r6]
 8009784:	201d0314 	.word	0x201d0314
 8009788:	14          	.byte	0x14
 8009789:	00          	.byte	0x00
 800978a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800978e:	05e1      	lsls	r1, r4, #23
 8009790:	bf48      	it	mi
 8009792:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009796:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800979a:	0d1b      	lsrs	r3, r3, #20
 800979c:	051b      	lsls	r3, r3, #20
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d1bb      	bne.n	800971a <_strtod_l+0x72>
 80097a2:	f000 fea9 	bl	800a4f8 <__errno>
 80097a6:	2322      	movs	r3, #34	@ 0x22
 80097a8:	6003      	str	r3, [r0, #0]
 80097aa:	e7b6      	b.n	800971a <_strtod_l+0x72>
 80097ac:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80097b0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80097b4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80097b8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80097bc:	e7e7      	b.n	800978e <_strtod_l+0xe6>
 80097be:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800993c <_strtod_l+0x294>
 80097c2:	e7e4      	b.n	800978e <_strtod_l+0xe6>
 80097c4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80097c8:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80097cc:	e7df      	b.n	800978e <_strtod_l+0xe6>
 80097ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80097d0:	1c5a      	adds	r2, r3, #1
 80097d2:	9219      	str	r2, [sp, #100]	@ 0x64
 80097d4:	785b      	ldrb	r3, [r3, #1]
 80097d6:	2b30      	cmp	r3, #48	@ 0x30
 80097d8:	d0f9      	beq.n	80097ce <_strtod_l+0x126>
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d09d      	beq.n	800971a <_strtod_l+0x72>
 80097de:	2301      	movs	r3, #1
 80097e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80097e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80097e4:	930c      	str	r3, [sp, #48]	@ 0x30
 80097e6:	2300      	movs	r3, #0
 80097e8:	9308      	str	r3, [sp, #32]
 80097ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80097ec:	461f      	mov	r7, r3
 80097ee:	220a      	movs	r2, #10
 80097f0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80097f2:	7805      	ldrb	r5, [r0, #0]
 80097f4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80097f8:	b2d9      	uxtb	r1, r3
 80097fa:	2909      	cmp	r1, #9
 80097fc:	d928      	bls.n	8009850 <_strtod_l+0x1a8>
 80097fe:	494e      	ldr	r1, [pc, #312]	@ (8009938 <_strtod_l+0x290>)
 8009800:	2201      	movs	r2, #1
 8009802:	f000 fe45 	bl	800a490 <strncmp>
 8009806:	2800      	cmp	r0, #0
 8009808:	d032      	beq.n	8009870 <_strtod_l+0x1c8>
 800980a:	2000      	movs	r0, #0
 800980c:	462a      	mov	r2, r5
 800980e:	4681      	mov	r9, r0
 8009810:	463d      	mov	r5, r7
 8009812:	4603      	mov	r3, r0
 8009814:	2a65      	cmp	r2, #101	@ 0x65
 8009816:	d001      	beq.n	800981c <_strtod_l+0x174>
 8009818:	2a45      	cmp	r2, #69	@ 0x45
 800981a:	d114      	bne.n	8009846 <_strtod_l+0x19e>
 800981c:	b91d      	cbnz	r5, 8009826 <_strtod_l+0x17e>
 800981e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009820:	4302      	orrs	r2, r0
 8009822:	d095      	beq.n	8009750 <_strtod_l+0xa8>
 8009824:	2500      	movs	r5, #0
 8009826:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009828:	1c62      	adds	r2, r4, #1
 800982a:	9219      	str	r2, [sp, #100]	@ 0x64
 800982c:	7862      	ldrb	r2, [r4, #1]
 800982e:	2a2b      	cmp	r2, #43	@ 0x2b
 8009830:	d077      	beq.n	8009922 <_strtod_l+0x27a>
 8009832:	2a2d      	cmp	r2, #45	@ 0x2d
 8009834:	d07b      	beq.n	800992e <_strtod_l+0x286>
 8009836:	f04f 0c00 	mov.w	ip, #0
 800983a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800983e:	2909      	cmp	r1, #9
 8009840:	f240 8082 	bls.w	8009948 <_strtod_l+0x2a0>
 8009844:	9419      	str	r4, [sp, #100]	@ 0x64
 8009846:	f04f 0800 	mov.w	r8, #0
 800984a:	e0a2      	b.n	8009992 <_strtod_l+0x2ea>
 800984c:	2300      	movs	r3, #0
 800984e:	e7c7      	b.n	80097e0 <_strtod_l+0x138>
 8009850:	2f08      	cmp	r7, #8
 8009852:	bfd5      	itete	le
 8009854:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009856:	9908      	ldrgt	r1, [sp, #32]
 8009858:	fb02 3301 	mlale	r3, r2, r1, r3
 800985c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009860:	f100 0001 	add.w	r0, r0, #1
 8009864:	bfd4      	ite	le
 8009866:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009868:	9308      	strgt	r3, [sp, #32]
 800986a:	3701      	adds	r7, #1
 800986c:	9019      	str	r0, [sp, #100]	@ 0x64
 800986e:	e7bf      	b.n	80097f0 <_strtod_l+0x148>
 8009870:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009872:	1c5a      	adds	r2, r3, #1
 8009874:	9219      	str	r2, [sp, #100]	@ 0x64
 8009876:	785a      	ldrb	r2, [r3, #1]
 8009878:	b37f      	cbz	r7, 80098da <_strtod_l+0x232>
 800987a:	4681      	mov	r9, r0
 800987c:	463d      	mov	r5, r7
 800987e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009882:	2b09      	cmp	r3, #9
 8009884:	d912      	bls.n	80098ac <_strtod_l+0x204>
 8009886:	2301      	movs	r3, #1
 8009888:	e7c4      	b.n	8009814 <_strtod_l+0x16c>
 800988a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800988c:	1c5a      	adds	r2, r3, #1
 800988e:	9219      	str	r2, [sp, #100]	@ 0x64
 8009890:	785a      	ldrb	r2, [r3, #1]
 8009892:	3001      	adds	r0, #1
 8009894:	2a30      	cmp	r2, #48	@ 0x30
 8009896:	d0f8      	beq.n	800988a <_strtod_l+0x1e2>
 8009898:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800989c:	2b08      	cmp	r3, #8
 800989e:	f200 84d3 	bhi.w	800a248 <_strtod_l+0xba0>
 80098a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80098a4:	930c      	str	r3, [sp, #48]	@ 0x30
 80098a6:	4681      	mov	r9, r0
 80098a8:	2000      	movs	r0, #0
 80098aa:	4605      	mov	r5, r0
 80098ac:	3a30      	subs	r2, #48	@ 0x30
 80098ae:	f100 0301 	add.w	r3, r0, #1
 80098b2:	d02a      	beq.n	800990a <_strtod_l+0x262>
 80098b4:	4499      	add	r9, r3
 80098b6:	eb00 0c05 	add.w	ip, r0, r5
 80098ba:	462b      	mov	r3, r5
 80098bc:	210a      	movs	r1, #10
 80098be:	4563      	cmp	r3, ip
 80098c0:	d10d      	bne.n	80098de <_strtod_l+0x236>
 80098c2:	1c69      	adds	r1, r5, #1
 80098c4:	4401      	add	r1, r0
 80098c6:	4428      	add	r0, r5
 80098c8:	2808      	cmp	r0, #8
 80098ca:	dc16      	bgt.n	80098fa <_strtod_l+0x252>
 80098cc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80098ce:	230a      	movs	r3, #10
 80098d0:	fb03 2300 	mla	r3, r3, r0, r2
 80098d4:	930a      	str	r3, [sp, #40]	@ 0x28
 80098d6:	2300      	movs	r3, #0
 80098d8:	e018      	b.n	800990c <_strtod_l+0x264>
 80098da:	4638      	mov	r0, r7
 80098dc:	e7da      	b.n	8009894 <_strtod_l+0x1ec>
 80098de:	2b08      	cmp	r3, #8
 80098e0:	f103 0301 	add.w	r3, r3, #1
 80098e4:	dc03      	bgt.n	80098ee <_strtod_l+0x246>
 80098e6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80098e8:	434e      	muls	r6, r1
 80098ea:	960a      	str	r6, [sp, #40]	@ 0x28
 80098ec:	e7e7      	b.n	80098be <_strtod_l+0x216>
 80098ee:	2b10      	cmp	r3, #16
 80098f0:	bfde      	ittt	le
 80098f2:	9e08      	ldrle	r6, [sp, #32]
 80098f4:	434e      	mulle	r6, r1
 80098f6:	9608      	strle	r6, [sp, #32]
 80098f8:	e7e1      	b.n	80098be <_strtod_l+0x216>
 80098fa:	280f      	cmp	r0, #15
 80098fc:	dceb      	bgt.n	80098d6 <_strtod_l+0x22e>
 80098fe:	9808      	ldr	r0, [sp, #32]
 8009900:	230a      	movs	r3, #10
 8009902:	fb03 2300 	mla	r3, r3, r0, r2
 8009906:	9308      	str	r3, [sp, #32]
 8009908:	e7e5      	b.n	80098d6 <_strtod_l+0x22e>
 800990a:	4629      	mov	r1, r5
 800990c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800990e:	1c50      	adds	r0, r2, #1
 8009910:	9019      	str	r0, [sp, #100]	@ 0x64
 8009912:	7852      	ldrb	r2, [r2, #1]
 8009914:	4618      	mov	r0, r3
 8009916:	460d      	mov	r5, r1
 8009918:	e7b1      	b.n	800987e <_strtod_l+0x1d6>
 800991a:	f04f 0900 	mov.w	r9, #0
 800991e:	2301      	movs	r3, #1
 8009920:	e77d      	b.n	800981e <_strtod_l+0x176>
 8009922:	f04f 0c00 	mov.w	ip, #0
 8009926:	1ca2      	adds	r2, r4, #2
 8009928:	9219      	str	r2, [sp, #100]	@ 0x64
 800992a:	78a2      	ldrb	r2, [r4, #2]
 800992c:	e785      	b.n	800983a <_strtod_l+0x192>
 800992e:	f04f 0c01 	mov.w	ip, #1
 8009932:	e7f8      	b.n	8009926 <_strtod_l+0x27e>
 8009934:	0800dccc 	.word	0x0800dccc
 8009938:	0800dcb5 	.word	0x0800dcb5
 800993c:	7ff00000 	.word	0x7ff00000
 8009940:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009942:	1c51      	adds	r1, r2, #1
 8009944:	9119      	str	r1, [sp, #100]	@ 0x64
 8009946:	7852      	ldrb	r2, [r2, #1]
 8009948:	2a30      	cmp	r2, #48	@ 0x30
 800994a:	d0f9      	beq.n	8009940 <_strtod_l+0x298>
 800994c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009950:	2908      	cmp	r1, #8
 8009952:	f63f af78 	bhi.w	8009846 <_strtod_l+0x19e>
 8009956:	3a30      	subs	r2, #48	@ 0x30
 8009958:	920e      	str	r2, [sp, #56]	@ 0x38
 800995a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800995c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800995e:	f04f 080a 	mov.w	r8, #10
 8009962:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009964:	1c56      	adds	r6, r2, #1
 8009966:	9619      	str	r6, [sp, #100]	@ 0x64
 8009968:	7852      	ldrb	r2, [r2, #1]
 800996a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800996e:	f1be 0f09 	cmp.w	lr, #9
 8009972:	d939      	bls.n	80099e8 <_strtod_l+0x340>
 8009974:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009976:	1a76      	subs	r6, r6, r1
 8009978:	2e08      	cmp	r6, #8
 800997a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800997e:	dc03      	bgt.n	8009988 <_strtod_l+0x2e0>
 8009980:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009982:	4588      	cmp	r8, r1
 8009984:	bfa8      	it	ge
 8009986:	4688      	movge	r8, r1
 8009988:	f1bc 0f00 	cmp.w	ip, #0
 800998c:	d001      	beq.n	8009992 <_strtod_l+0x2ea>
 800998e:	f1c8 0800 	rsb	r8, r8, #0
 8009992:	2d00      	cmp	r5, #0
 8009994:	d14e      	bne.n	8009a34 <_strtod_l+0x38c>
 8009996:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009998:	4308      	orrs	r0, r1
 800999a:	f47f aebe 	bne.w	800971a <_strtod_l+0x72>
 800999e:	2b00      	cmp	r3, #0
 80099a0:	f47f aed6 	bne.w	8009750 <_strtod_l+0xa8>
 80099a4:	2a69      	cmp	r2, #105	@ 0x69
 80099a6:	d028      	beq.n	80099fa <_strtod_l+0x352>
 80099a8:	dc25      	bgt.n	80099f6 <_strtod_l+0x34e>
 80099aa:	2a49      	cmp	r2, #73	@ 0x49
 80099ac:	d025      	beq.n	80099fa <_strtod_l+0x352>
 80099ae:	2a4e      	cmp	r2, #78	@ 0x4e
 80099b0:	f47f aece 	bne.w	8009750 <_strtod_l+0xa8>
 80099b4:	499b      	ldr	r1, [pc, #620]	@ (8009c24 <_strtod_l+0x57c>)
 80099b6:	a819      	add	r0, sp, #100	@ 0x64
 80099b8:	f001 fec0 	bl	800b73c <__match>
 80099bc:	2800      	cmp	r0, #0
 80099be:	f43f aec7 	beq.w	8009750 <_strtod_l+0xa8>
 80099c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80099c4:	781b      	ldrb	r3, [r3, #0]
 80099c6:	2b28      	cmp	r3, #40	@ 0x28
 80099c8:	d12e      	bne.n	8009a28 <_strtod_l+0x380>
 80099ca:	4997      	ldr	r1, [pc, #604]	@ (8009c28 <_strtod_l+0x580>)
 80099cc:	aa1c      	add	r2, sp, #112	@ 0x70
 80099ce:	a819      	add	r0, sp, #100	@ 0x64
 80099d0:	f001 fec8 	bl	800b764 <__hexnan>
 80099d4:	2805      	cmp	r0, #5
 80099d6:	d127      	bne.n	8009a28 <_strtod_l+0x380>
 80099d8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80099da:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80099de:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80099e2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80099e6:	e698      	b.n	800971a <_strtod_l+0x72>
 80099e8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80099ea:	fb08 2101 	mla	r1, r8, r1, r2
 80099ee:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80099f2:	920e      	str	r2, [sp, #56]	@ 0x38
 80099f4:	e7b5      	b.n	8009962 <_strtod_l+0x2ba>
 80099f6:	2a6e      	cmp	r2, #110	@ 0x6e
 80099f8:	e7da      	b.n	80099b0 <_strtod_l+0x308>
 80099fa:	498c      	ldr	r1, [pc, #560]	@ (8009c2c <_strtod_l+0x584>)
 80099fc:	a819      	add	r0, sp, #100	@ 0x64
 80099fe:	f001 fe9d 	bl	800b73c <__match>
 8009a02:	2800      	cmp	r0, #0
 8009a04:	f43f aea4 	beq.w	8009750 <_strtod_l+0xa8>
 8009a08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009a0a:	4989      	ldr	r1, [pc, #548]	@ (8009c30 <_strtod_l+0x588>)
 8009a0c:	3b01      	subs	r3, #1
 8009a0e:	a819      	add	r0, sp, #100	@ 0x64
 8009a10:	9319      	str	r3, [sp, #100]	@ 0x64
 8009a12:	f001 fe93 	bl	800b73c <__match>
 8009a16:	b910      	cbnz	r0, 8009a1e <_strtod_l+0x376>
 8009a18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009a1a:	3301      	adds	r3, #1
 8009a1c:	9319      	str	r3, [sp, #100]	@ 0x64
 8009a1e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009c40 <_strtod_l+0x598>
 8009a22:	f04f 0a00 	mov.w	sl, #0
 8009a26:	e678      	b.n	800971a <_strtod_l+0x72>
 8009a28:	4882      	ldr	r0, [pc, #520]	@ (8009c34 <_strtod_l+0x58c>)
 8009a2a:	f000 fda1 	bl	800a570 <nan>
 8009a2e:	ec5b ab10 	vmov	sl, fp, d0
 8009a32:	e672      	b.n	800971a <_strtod_l+0x72>
 8009a34:	eba8 0309 	sub.w	r3, r8, r9
 8009a38:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009a3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a3c:	2f00      	cmp	r7, #0
 8009a3e:	bf08      	it	eq
 8009a40:	462f      	moveq	r7, r5
 8009a42:	2d10      	cmp	r5, #16
 8009a44:	462c      	mov	r4, r5
 8009a46:	bfa8      	it	ge
 8009a48:	2410      	movge	r4, #16
 8009a4a:	f7f6 fd73 	bl	8000534 <__aeabi_ui2d>
 8009a4e:	2d09      	cmp	r5, #9
 8009a50:	4682      	mov	sl, r0
 8009a52:	468b      	mov	fp, r1
 8009a54:	dc13      	bgt.n	8009a7e <_strtod_l+0x3d6>
 8009a56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	f43f ae5e 	beq.w	800971a <_strtod_l+0x72>
 8009a5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a60:	dd78      	ble.n	8009b54 <_strtod_l+0x4ac>
 8009a62:	2b16      	cmp	r3, #22
 8009a64:	dc5f      	bgt.n	8009b26 <_strtod_l+0x47e>
 8009a66:	4974      	ldr	r1, [pc, #464]	@ (8009c38 <_strtod_l+0x590>)
 8009a68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009a6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a70:	4652      	mov	r2, sl
 8009a72:	465b      	mov	r3, fp
 8009a74:	f7f6 fdd8 	bl	8000628 <__aeabi_dmul>
 8009a78:	4682      	mov	sl, r0
 8009a7a:	468b      	mov	fp, r1
 8009a7c:	e64d      	b.n	800971a <_strtod_l+0x72>
 8009a7e:	4b6e      	ldr	r3, [pc, #440]	@ (8009c38 <_strtod_l+0x590>)
 8009a80:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009a84:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009a88:	f7f6 fdce 	bl	8000628 <__aeabi_dmul>
 8009a8c:	4682      	mov	sl, r0
 8009a8e:	9808      	ldr	r0, [sp, #32]
 8009a90:	468b      	mov	fp, r1
 8009a92:	f7f6 fd4f 	bl	8000534 <__aeabi_ui2d>
 8009a96:	4602      	mov	r2, r0
 8009a98:	460b      	mov	r3, r1
 8009a9a:	4650      	mov	r0, sl
 8009a9c:	4659      	mov	r1, fp
 8009a9e:	f7f6 fc0d 	bl	80002bc <__adddf3>
 8009aa2:	2d0f      	cmp	r5, #15
 8009aa4:	4682      	mov	sl, r0
 8009aa6:	468b      	mov	fp, r1
 8009aa8:	ddd5      	ble.n	8009a56 <_strtod_l+0x3ae>
 8009aaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009aac:	1b2c      	subs	r4, r5, r4
 8009aae:	441c      	add	r4, r3
 8009ab0:	2c00      	cmp	r4, #0
 8009ab2:	f340 8096 	ble.w	8009be2 <_strtod_l+0x53a>
 8009ab6:	f014 030f 	ands.w	r3, r4, #15
 8009aba:	d00a      	beq.n	8009ad2 <_strtod_l+0x42a>
 8009abc:	495e      	ldr	r1, [pc, #376]	@ (8009c38 <_strtod_l+0x590>)
 8009abe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009ac2:	4652      	mov	r2, sl
 8009ac4:	465b      	mov	r3, fp
 8009ac6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009aca:	f7f6 fdad 	bl	8000628 <__aeabi_dmul>
 8009ace:	4682      	mov	sl, r0
 8009ad0:	468b      	mov	fp, r1
 8009ad2:	f034 040f 	bics.w	r4, r4, #15
 8009ad6:	d073      	beq.n	8009bc0 <_strtod_l+0x518>
 8009ad8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009adc:	dd48      	ble.n	8009b70 <_strtod_l+0x4c8>
 8009ade:	2400      	movs	r4, #0
 8009ae0:	46a0      	mov	r8, r4
 8009ae2:	940a      	str	r4, [sp, #40]	@ 0x28
 8009ae4:	46a1      	mov	r9, r4
 8009ae6:	9a05      	ldr	r2, [sp, #20]
 8009ae8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009c40 <_strtod_l+0x598>
 8009aec:	2322      	movs	r3, #34	@ 0x22
 8009aee:	6013      	str	r3, [r2, #0]
 8009af0:	f04f 0a00 	mov.w	sl, #0
 8009af4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	f43f ae0f 	beq.w	800971a <_strtod_l+0x72>
 8009afc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009afe:	9805      	ldr	r0, [sp, #20]
 8009b00:	f002 fb18 	bl	800c134 <_Bfree>
 8009b04:	9805      	ldr	r0, [sp, #20]
 8009b06:	4649      	mov	r1, r9
 8009b08:	f002 fb14 	bl	800c134 <_Bfree>
 8009b0c:	9805      	ldr	r0, [sp, #20]
 8009b0e:	4641      	mov	r1, r8
 8009b10:	f002 fb10 	bl	800c134 <_Bfree>
 8009b14:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009b16:	9805      	ldr	r0, [sp, #20]
 8009b18:	f002 fb0c 	bl	800c134 <_Bfree>
 8009b1c:	9805      	ldr	r0, [sp, #20]
 8009b1e:	4621      	mov	r1, r4
 8009b20:	f002 fb08 	bl	800c134 <_Bfree>
 8009b24:	e5f9      	b.n	800971a <_strtod_l+0x72>
 8009b26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b28:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	dbbc      	blt.n	8009aaa <_strtod_l+0x402>
 8009b30:	4c41      	ldr	r4, [pc, #260]	@ (8009c38 <_strtod_l+0x590>)
 8009b32:	f1c5 050f 	rsb	r5, r5, #15
 8009b36:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009b3a:	4652      	mov	r2, sl
 8009b3c:	465b      	mov	r3, fp
 8009b3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b42:	f7f6 fd71 	bl	8000628 <__aeabi_dmul>
 8009b46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b48:	1b5d      	subs	r5, r3, r5
 8009b4a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009b4e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009b52:	e78f      	b.n	8009a74 <_strtod_l+0x3cc>
 8009b54:	3316      	adds	r3, #22
 8009b56:	dba8      	blt.n	8009aaa <_strtod_l+0x402>
 8009b58:	4b37      	ldr	r3, [pc, #220]	@ (8009c38 <_strtod_l+0x590>)
 8009b5a:	eba9 0808 	sub.w	r8, r9, r8
 8009b5e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009b62:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009b66:	4650      	mov	r0, sl
 8009b68:	4659      	mov	r1, fp
 8009b6a:	f7f6 fe87 	bl	800087c <__aeabi_ddiv>
 8009b6e:	e783      	b.n	8009a78 <_strtod_l+0x3d0>
 8009b70:	4b32      	ldr	r3, [pc, #200]	@ (8009c3c <_strtod_l+0x594>)
 8009b72:	9308      	str	r3, [sp, #32]
 8009b74:	2300      	movs	r3, #0
 8009b76:	1124      	asrs	r4, r4, #4
 8009b78:	4650      	mov	r0, sl
 8009b7a:	4659      	mov	r1, fp
 8009b7c:	461e      	mov	r6, r3
 8009b7e:	2c01      	cmp	r4, #1
 8009b80:	dc21      	bgt.n	8009bc6 <_strtod_l+0x51e>
 8009b82:	b10b      	cbz	r3, 8009b88 <_strtod_l+0x4e0>
 8009b84:	4682      	mov	sl, r0
 8009b86:	468b      	mov	fp, r1
 8009b88:	492c      	ldr	r1, [pc, #176]	@ (8009c3c <_strtod_l+0x594>)
 8009b8a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009b8e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009b92:	4652      	mov	r2, sl
 8009b94:	465b      	mov	r3, fp
 8009b96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b9a:	f7f6 fd45 	bl	8000628 <__aeabi_dmul>
 8009b9e:	4b28      	ldr	r3, [pc, #160]	@ (8009c40 <_strtod_l+0x598>)
 8009ba0:	460a      	mov	r2, r1
 8009ba2:	400b      	ands	r3, r1
 8009ba4:	4927      	ldr	r1, [pc, #156]	@ (8009c44 <_strtod_l+0x59c>)
 8009ba6:	428b      	cmp	r3, r1
 8009ba8:	4682      	mov	sl, r0
 8009baa:	d898      	bhi.n	8009ade <_strtod_l+0x436>
 8009bac:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009bb0:	428b      	cmp	r3, r1
 8009bb2:	bf86      	itte	hi
 8009bb4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009c48 <_strtod_l+0x5a0>
 8009bb8:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8009bbc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	9308      	str	r3, [sp, #32]
 8009bc4:	e07a      	b.n	8009cbc <_strtod_l+0x614>
 8009bc6:	07e2      	lsls	r2, r4, #31
 8009bc8:	d505      	bpl.n	8009bd6 <_strtod_l+0x52e>
 8009bca:	9b08      	ldr	r3, [sp, #32]
 8009bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd0:	f7f6 fd2a 	bl	8000628 <__aeabi_dmul>
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	9a08      	ldr	r2, [sp, #32]
 8009bd8:	3208      	adds	r2, #8
 8009bda:	3601      	adds	r6, #1
 8009bdc:	1064      	asrs	r4, r4, #1
 8009bde:	9208      	str	r2, [sp, #32]
 8009be0:	e7cd      	b.n	8009b7e <_strtod_l+0x4d6>
 8009be2:	d0ed      	beq.n	8009bc0 <_strtod_l+0x518>
 8009be4:	4264      	negs	r4, r4
 8009be6:	f014 020f 	ands.w	r2, r4, #15
 8009bea:	d00a      	beq.n	8009c02 <_strtod_l+0x55a>
 8009bec:	4b12      	ldr	r3, [pc, #72]	@ (8009c38 <_strtod_l+0x590>)
 8009bee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009bf2:	4650      	mov	r0, sl
 8009bf4:	4659      	mov	r1, fp
 8009bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bfa:	f7f6 fe3f 	bl	800087c <__aeabi_ddiv>
 8009bfe:	4682      	mov	sl, r0
 8009c00:	468b      	mov	fp, r1
 8009c02:	1124      	asrs	r4, r4, #4
 8009c04:	d0dc      	beq.n	8009bc0 <_strtod_l+0x518>
 8009c06:	2c1f      	cmp	r4, #31
 8009c08:	dd20      	ble.n	8009c4c <_strtod_l+0x5a4>
 8009c0a:	2400      	movs	r4, #0
 8009c0c:	46a0      	mov	r8, r4
 8009c0e:	940a      	str	r4, [sp, #40]	@ 0x28
 8009c10:	46a1      	mov	r9, r4
 8009c12:	9a05      	ldr	r2, [sp, #20]
 8009c14:	2322      	movs	r3, #34	@ 0x22
 8009c16:	f04f 0a00 	mov.w	sl, #0
 8009c1a:	f04f 0b00 	mov.w	fp, #0
 8009c1e:	6013      	str	r3, [r2, #0]
 8009c20:	e768      	b.n	8009af4 <_strtod_l+0x44c>
 8009c22:	bf00      	nop
 8009c24:	0800dc89 	.word	0x0800dc89
 8009c28:	0800dcb8 	.word	0x0800dcb8
 8009c2c:	0800dc81 	.word	0x0800dc81
 8009c30:	0800de14 	.word	0x0800de14
 8009c34:	0800e0a3 	.word	0x0800e0a3
 8009c38:	0800dfa0 	.word	0x0800dfa0
 8009c3c:	0800df78 	.word	0x0800df78
 8009c40:	7ff00000 	.word	0x7ff00000
 8009c44:	7ca00000 	.word	0x7ca00000
 8009c48:	7fefffff 	.word	0x7fefffff
 8009c4c:	f014 0310 	ands.w	r3, r4, #16
 8009c50:	bf18      	it	ne
 8009c52:	236a      	movne	r3, #106	@ 0x6a
 8009c54:	4ea9      	ldr	r6, [pc, #676]	@ (8009efc <_strtod_l+0x854>)
 8009c56:	9308      	str	r3, [sp, #32]
 8009c58:	4650      	mov	r0, sl
 8009c5a:	4659      	mov	r1, fp
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	07e2      	lsls	r2, r4, #31
 8009c60:	d504      	bpl.n	8009c6c <_strtod_l+0x5c4>
 8009c62:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009c66:	f7f6 fcdf 	bl	8000628 <__aeabi_dmul>
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	1064      	asrs	r4, r4, #1
 8009c6e:	f106 0608 	add.w	r6, r6, #8
 8009c72:	d1f4      	bne.n	8009c5e <_strtod_l+0x5b6>
 8009c74:	b10b      	cbz	r3, 8009c7a <_strtod_l+0x5d2>
 8009c76:	4682      	mov	sl, r0
 8009c78:	468b      	mov	fp, r1
 8009c7a:	9b08      	ldr	r3, [sp, #32]
 8009c7c:	b1b3      	cbz	r3, 8009cac <_strtod_l+0x604>
 8009c7e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009c82:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	4659      	mov	r1, fp
 8009c8a:	dd0f      	ble.n	8009cac <_strtod_l+0x604>
 8009c8c:	2b1f      	cmp	r3, #31
 8009c8e:	dd55      	ble.n	8009d3c <_strtod_l+0x694>
 8009c90:	2b34      	cmp	r3, #52	@ 0x34
 8009c92:	bfde      	ittt	le
 8009c94:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8009c98:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009c9c:	4093      	lslle	r3, r2
 8009c9e:	f04f 0a00 	mov.w	sl, #0
 8009ca2:	bfcc      	ite	gt
 8009ca4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009ca8:	ea03 0b01 	andle.w	fp, r3, r1
 8009cac:	2200      	movs	r2, #0
 8009cae:	2300      	movs	r3, #0
 8009cb0:	4650      	mov	r0, sl
 8009cb2:	4659      	mov	r1, fp
 8009cb4:	f7f6 ff20 	bl	8000af8 <__aeabi_dcmpeq>
 8009cb8:	2800      	cmp	r0, #0
 8009cba:	d1a6      	bne.n	8009c0a <_strtod_l+0x562>
 8009cbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009cbe:	9300      	str	r3, [sp, #0]
 8009cc0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009cc2:	9805      	ldr	r0, [sp, #20]
 8009cc4:	462b      	mov	r3, r5
 8009cc6:	463a      	mov	r2, r7
 8009cc8:	f002 fa9c 	bl	800c204 <__s2b>
 8009ccc:	900a      	str	r0, [sp, #40]	@ 0x28
 8009cce:	2800      	cmp	r0, #0
 8009cd0:	f43f af05 	beq.w	8009ade <_strtod_l+0x436>
 8009cd4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009cd6:	2a00      	cmp	r2, #0
 8009cd8:	eba9 0308 	sub.w	r3, r9, r8
 8009cdc:	bfa8      	it	ge
 8009cde:	2300      	movge	r3, #0
 8009ce0:	9312      	str	r3, [sp, #72]	@ 0x48
 8009ce2:	2400      	movs	r4, #0
 8009ce4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009ce8:	9316      	str	r3, [sp, #88]	@ 0x58
 8009cea:	46a0      	mov	r8, r4
 8009cec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009cee:	9805      	ldr	r0, [sp, #20]
 8009cf0:	6859      	ldr	r1, [r3, #4]
 8009cf2:	f002 f9df 	bl	800c0b4 <_Balloc>
 8009cf6:	4681      	mov	r9, r0
 8009cf8:	2800      	cmp	r0, #0
 8009cfa:	f43f aef4 	beq.w	8009ae6 <_strtod_l+0x43e>
 8009cfe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d00:	691a      	ldr	r2, [r3, #16]
 8009d02:	3202      	adds	r2, #2
 8009d04:	f103 010c 	add.w	r1, r3, #12
 8009d08:	0092      	lsls	r2, r2, #2
 8009d0a:	300c      	adds	r0, #12
 8009d0c:	f000 fc21 	bl	800a552 <memcpy>
 8009d10:	ec4b ab10 	vmov	d0, sl, fp
 8009d14:	9805      	ldr	r0, [sp, #20]
 8009d16:	aa1c      	add	r2, sp, #112	@ 0x70
 8009d18:	a91b      	add	r1, sp, #108	@ 0x6c
 8009d1a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009d1e:	f002 fdad 	bl	800c87c <__d2b>
 8009d22:	901a      	str	r0, [sp, #104]	@ 0x68
 8009d24:	2800      	cmp	r0, #0
 8009d26:	f43f aede 	beq.w	8009ae6 <_strtod_l+0x43e>
 8009d2a:	9805      	ldr	r0, [sp, #20]
 8009d2c:	2101      	movs	r1, #1
 8009d2e:	f002 faff 	bl	800c330 <__i2b>
 8009d32:	4680      	mov	r8, r0
 8009d34:	b948      	cbnz	r0, 8009d4a <_strtod_l+0x6a2>
 8009d36:	f04f 0800 	mov.w	r8, #0
 8009d3a:	e6d4      	b.n	8009ae6 <_strtod_l+0x43e>
 8009d3c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009d40:	fa02 f303 	lsl.w	r3, r2, r3
 8009d44:	ea03 0a0a 	and.w	sl, r3, sl
 8009d48:	e7b0      	b.n	8009cac <_strtod_l+0x604>
 8009d4a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009d4c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009d4e:	2d00      	cmp	r5, #0
 8009d50:	bfab      	itete	ge
 8009d52:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009d54:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009d56:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009d58:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009d5a:	bfac      	ite	ge
 8009d5c:	18ef      	addge	r7, r5, r3
 8009d5e:	1b5e      	sublt	r6, r3, r5
 8009d60:	9b08      	ldr	r3, [sp, #32]
 8009d62:	1aed      	subs	r5, r5, r3
 8009d64:	4415      	add	r5, r2
 8009d66:	4b66      	ldr	r3, [pc, #408]	@ (8009f00 <_strtod_l+0x858>)
 8009d68:	3d01      	subs	r5, #1
 8009d6a:	429d      	cmp	r5, r3
 8009d6c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009d70:	da50      	bge.n	8009e14 <_strtod_l+0x76c>
 8009d72:	1b5b      	subs	r3, r3, r5
 8009d74:	2b1f      	cmp	r3, #31
 8009d76:	eba2 0203 	sub.w	r2, r2, r3
 8009d7a:	f04f 0101 	mov.w	r1, #1
 8009d7e:	dc3d      	bgt.n	8009dfc <_strtod_l+0x754>
 8009d80:	fa01 f303 	lsl.w	r3, r1, r3
 8009d84:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009d86:	2300      	movs	r3, #0
 8009d88:	9310      	str	r3, [sp, #64]	@ 0x40
 8009d8a:	18bd      	adds	r5, r7, r2
 8009d8c:	9b08      	ldr	r3, [sp, #32]
 8009d8e:	42af      	cmp	r7, r5
 8009d90:	4416      	add	r6, r2
 8009d92:	441e      	add	r6, r3
 8009d94:	463b      	mov	r3, r7
 8009d96:	bfa8      	it	ge
 8009d98:	462b      	movge	r3, r5
 8009d9a:	42b3      	cmp	r3, r6
 8009d9c:	bfa8      	it	ge
 8009d9e:	4633      	movge	r3, r6
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	bfc2      	ittt	gt
 8009da4:	1aed      	subgt	r5, r5, r3
 8009da6:	1af6      	subgt	r6, r6, r3
 8009da8:	1aff      	subgt	r7, r7, r3
 8009daa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	dd16      	ble.n	8009dde <_strtod_l+0x736>
 8009db0:	4641      	mov	r1, r8
 8009db2:	9805      	ldr	r0, [sp, #20]
 8009db4:	461a      	mov	r2, r3
 8009db6:	f002 fb7b 	bl	800c4b0 <__pow5mult>
 8009dba:	4680      	mov	r8, r0
 8009dbc:	2800      	cmp	r0, #0
 8009dbe:	d0ba      	beq.n	8009d36 <_strtod_l+0x68e>
 8009dc0:	4601      	mov	r1, r0
 8009dc2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009dc4:	9805      	ldr	r0, [sp, #20]
 8009dc6:	f002 fac9 	bl	800c35c <__multiply>
 8009dca:	900e      	str	r0, [sp, #56]	@ 0x38
 8009dcc:	2800      	cmp	r0, #0
 8009dce:	f43f ae8a 	beq.w	8009ae6 <_strtod_l+0x43e>
 8009dd2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009dd4:	9805      	ldr	r0, [sp, #20]
 8009dd6:	f002 f9ad 	bl	800c134 <_Bfree>
 8009dda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ddc:	931a      	str	r3, [sp, #104]	@ 0x68
 8009dde:	2d00      	cmp	r5, #0
 8009de0:	dc1d      	bgt.n	8009e1e <_strtod_l+0x776>
 8009de2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	dd23      	ble.n	8009e30 <_strtod_l+0x788>
 8009de8:	4649      	mov	r1, r9
 8009dea:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009dec:	9805      	ldr	r0, [sp, #20]
 8009dee:	f002 fb5f 	bl	800c4b0 <__pow5mult>
 8009df2:	4681      	mov	r9, r0
 8009df4:	b9e0      	cbnz	r0, 8009e30 <_strtod_l+0x788>
 8009df6:	f04f 0900 	mov.w	r9, #0
 8009dfa:	e674      	b.n	8009ae6 <_strtod_l+0x43e>
 8009dfc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009e00:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009e04:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009e08:	35e2      	adds	r5, #226	@ 0xe2
 8009e0a:	fa01 f305 	lsl.w	r3, r1, r5
 8009e0e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009e10:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009e12:	e7ba      	b.n	8009d8a <_strtod_l+0x6e2>
 8009e14:	2300      	movs	r3, #0
 8009e16:	9310      	str	r3, [sp, #64]	@ 0x40
 8009e18:	2301      	movs	r3, #1
 8009e1a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009e1c:	e7b5      	b.n	8009d8a <_strtod_l+0x6e2>
 8009e1e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009e20:	9805      	ldr	r0, [sp, #20]
 8009e22:	462a      	mov	r2, r5
 8009e24:	f002 fb9e 	bl	800c564 <__lshift>
 8009e28:	901a      	str	r0, [sp, #104]	@ 0x68
 8009e2a:	2800      	cmp	r0, #0
 8009e2c:	d1d9      	bne.n	8009de2 <_strtod_l+0x73a>
 8009e2e:	e65a      	b.n	8009ae6 <_strtod_l+0x43e>
 8009e30:	2e00      	cmp	r6, #0
 8009e32:	dd07      	ble.n	8009e44 <_strtod_l+0x79c>
 8009e34:	4649      	mov	r1, r9
 8009e36:	9805      	ldr	r0, [sp, #20]
 8009e38:	4632      	mov	r2, r6
 8009e3a:	f002 fb93 	bl	800c564 <__lshift>
 8009e3e:	4681      	mov	r9, r0
 8009e40:	2800      	cmp	r0, #0
 8009e42:	d0d8      	beq.n	8009df6 <_strtod_l+0x74e>
 8009e44:	2f00      	cmp	r7, #0
 8009e46:	dd08      	ble.n	8009e5a <_strtod_l+0x7b2>
 8009e48:	4641      	mov	r1, r8
 8009e4a:	9805      	ldr	r0, [sp, #20]
 8009e4c:	463a      	mov	r2, r7
 8009e4e:	f002 fb89 	bl	800c564 <__lshift>
 8009e52:	4680      	mov	r8, r0
 8009e54:	2800      	cmp	r0, #0
 8009e56:	f43f ae46 	beq.w	8009ae6 <_strtod_l+0x43e>
 8009e5a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009e5c:	9805      	ldr	r0, [sp, #20]
 8009e5e:	464a      	mov	r2, r9
 8009e60:	f002 fc08 	bl	800c674 <__mdiff>
 8009e64:	4604      	mov	r4, r0
 8009e66:	2800      	cmp	r0, #0
 8009e68:	f43f ae3d 	beq.w	8009ae6 <_strtod_l+0x43e>
 8009e6c:	68c3      	ldr	r3, [r0, #12]
 8009e6e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009e70:	2300      	movs	r3, #0
 8009e72:	60c3      	str	r3, [r0, #12]
 8009e74:	4641      	mov	r1, r8
 8009e76:	f002 fbe1 	bl	800c63c <__mcmp>
 8009e7a:	2800      	cmp	r0, #0
 8009e7c:	da46      	bge.n	8009f0c <_strtod_l+0x864>
 8009e7e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e80:	ea53 030a 	orrs.w	r3, r3, sl
 8009e84:	d16c      	bne.n	8009f60 <_strtod_l+0x8b8>
 8009e86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d168      	bne.n	8009f60 <_strtod_l+0x8b8>
 8009e8e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009e92:	0d1b      	lsrs	r3, r3, #20
 8009e94:	051b      	lsls	r3, r3, #20
 8009e96:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009e9a:	d961      	bls.n	8009f60 <_strtod_l+0x8b8>
 8009e9c:	6963      	ldr	r3, [r4, #20]
 8009e9e:	b913      	cbnz	r3, 8009ea6 <_strtod_l+0x7fe>
 8009ea0:	6923      	ldr	r3, [r4, #16]
 8009ea2:	2b01      	cmp	r3, #1
 8009ea4:	dd5c      	ble.n	8009f60 <_strtod_l+0x8b8>
 8009ea6:	4621      	mov	r1, r4
 8009ea8:	2201      	movs	r2, #1
 8009eaa:	9805      	ldr	r0, [sp, #20]
 8009eac:	f002 fb5a 	bl	800c564 <__lshift>
 8009eb0:	4641      	mov	r1, r8
 8009eb2:	4604      	mov	r4, r0
 8009eb4:	f002 fbc2 	bl	800c63c <__mcmp>
 8009eb8:	2800      	cmp	r0, #0
 8009eba:	dd51      	ble.n	8009f60 <_strtod_l+0x8b8>
 8009ebc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009ec0:	9a08      	ldr	r2, [sp, #32]
 8009ec2:	0d1b      	lsrs	r3, r3, #20
 8009ec4:	051b      	lsls	r3, r3, #20
 8009ec6:	2a00      	cmp	r2, #0
 8009ec8:	d06b      	beq.n	8009fa2 <_strtod_l+0x8fa>
 8009eca:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009ece:	d868      	bhi.n	8009fa2 <_strtod_l+0x8fa>
 8009ed0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009ed4:	f67f ae9d 	bls.w	8009c12 <_strtod_l+0x56a>
 8009ed8:	4b0a      	ldr	r3, [pc, #40]	@ (8009f04 <_strtod_l+0x85c>)
 8009eda:	4650      	mov	r0, sl
 8009edc:	4659      	mov	r1, fp
 8009ede:	2200      	movs	r2, #0
 8009ee0:	f7f6 fba2 	bl	8000628 <__aeabi_dmul>
 8009ee4:	4b08      	ldr	r3, [pc, #32]	@ (8009f08 <_strtod_l+0x860>)
 8009ee6:	400b      	ands	r3, r1
 8009ee8:	4682      	mov	sl, r0
 8009eea:	468b      	mov	fp, r1
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	f47f ae05 	bne.w	8009afc <_strtod_l+0x454>
 8009ef2:	9a05      	ldr	r2, [sp, #20]
 8009ef4:	2322      	movs	r3, #34	@ 0x22
 8009ef6:	6013      	str	r3, [r2, #0]
 8009ef8:	e600      	b.n	8009afc <_strtod_l+0x454>
 8009efa:	bf00      	nop
 8009efc:	0800dce0 	.word	0x0800dce0
 8009f00:	fffffc02 	.word	0xfffffc02
 8009f04:	39500000 	.word	0x39500000
 8009f08:	7ff00000 	.word	0x7ff00000
 8009f0c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009f10:	d165      	bne.n	8009fde <_strtod_l+0x936>
 8009f12:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009f14:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009f18:	b35a      	cbz	r2, 8009f72 <_strtod_l+0x8ca>
 8009f1a:	4a9f      	ldr	r2, [pc, #636]	@ (800a198 <_strtod_l+0xaf0>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d12b      	bne.n	8009f78 <_strtod_l+0x8d0>
 8009f20:	9b08      	ldr	r3, [sp, #32]
 8009f22:	4651      	mov	r1, sl
 8009f24:	b303      	cbz	r3, 8009f68 <_strtod_l+0x8c0>
 8009f26:	4b9d      	ldr	r3, [pc, #628]	@ (800a19c <_strtod_l+0xaf4>)
 8009f28:	465a      	mov	r2, fp
 8009f2a:	4013      	ands	r3, r2
 8009f2c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009f30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009f34:	d81b      	bhi.n	8009f6e <_strtod_l+0x8c6>
 8009f36:	0d1b      	lsrs	r3, r3, #20
 8009f38:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8009f40:	4299      	cmp	r1, r3
 8009f42:	d119      	bne.n	8009f78 <_strtod_l+0x8d0>
 8009f44:	4b96      	ldr	r3, [pc, #600]	@ (800a1a0 <_strtod_l+0xaf8>)
 8009f46:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	d102      	bne.n	8009f52 <_strtod_l+0x8aa>
 8009f4c:	3101      	adds	r1, #1
 8009f4e:	f43f adca 	beq.w	8009ae6 <_strtod_l+0x43e>
 8009f52:	4b92      	ldr	r3, [pc, #584]	@ (800a19c <_strtod_l+0xaf4>)
 8009f54:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f56:	401a      	ands	r2, r3
 8009f58:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009f5c:	f04f 0a00 	mov.w	sl, #0
 8009f60:	9b08      	ldr	r3, [sp, #32]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d1b8      	bne.n	8009ed8 <_strtod_l+0x830>
 8009f66:	e5c9      	b.n	8009afc <_strtod_l+0x454>
 8009f68:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009f6c:	e7e8      	b.n	8009f40 <_strtod_l+0x898>
 8009f6e:	4613      	mov	r3, r2
 8009f70:	e7e6      	b.n	8009f40 <_strtod_l+0x898>
 8009f72:	ea53 030a 	orrs.w	r3, r3, sl
 8009f76:	d0a1      	beq.n	8009ebc <_strtod_l+0x814>
 8009f78:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009f7a:	b1db      	cbz	r3, 8009fb4 <_strtod_l+0x90c>
 8009f7c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f7e:	4213      	tst	r3, r2
 8009f80:	d0ee      	beq.n	8009f60 <_strtod_l+0x8b8>
 8009f82:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f84:	9a08      	ldr	r2, [sp, #32]
 8009f86:	4650      	mov	r0, sl
 8009f88:	4659      	mov	r1, fp
 8009f8a:	b1bb      	cbz	r3, 8009fbc <_strtod_l+0x914>
 8009f8c:	f7ff fb6e 	bl	800966c <sulp>
 8009f90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009f94:	ec53 2b10 	vmov	r2, r3, d0
 8009f98:	f7f6 f990 	bl	80002bc <__adddf3>
 8009f9c:	4682      	mov	sl, r0
 8009f9e:	468b      	mov	fp, r1
 8009fa0:	e7de      	b.n	8009f60 <_strtod_l+0x8b8>
 8009fa2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009fa6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009faa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009fae:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009fb2:	e7d5      	b.n	8009f60 <_strtod_l+0x8b8>
 8009fb4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009fb6:	ea13 0f0a 	tst.w	r3, sl
 8009fba:	e7e1      	b.n	8009f80 <_strtod_l+0x8d8>
 8009fbc:	f7ff fb56 	bl	800966c <sulp>
 8009fc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009fc4:	ec53 2b10 	vmov	r2, r3, d0
 8009fc8:	f7f6 f976 	bl	80002b8 <__aeabi_dsub>
 8009fcc:	2200      	movs	r2, #0
 8009fce:	2300      	movs	r3, #0
 8009fd0:	4682      	mov	sl, r0
 8009fd2:	468b      	mov	fp, r1
 8009fd4:	f7f6 fd90 	bl	8000af8 <__aeabi_dcmpeq>
 8009fd8:	2800      	cmp	r0, #0
 8009fda:	d0c1      	beq.n	8009f60 <_strtod_l+0x8b8>
 8009fdc:	e619      	b.n	8009c12 <_strtod_l+0x56a>
 8009fde:	4641      	mov	r1, r8
 8009fe0:	4620      	mov	r0, r4
 8009fe2:	f002 fca3 	bl	800c92c <__ratio>
 8009fe6:	ec57 6b10 	vmov	r6, r7, d0
 8009fea:	2200      	movs	r2, #0
 8009fec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009ff0:	4630      	mov	r0, r6
 8009ff2:	4639      	mov	r1, r7
 8009ff4:	f7f6 fd94 	bl	8000b20 <__aeabi_dcmple>
 8009ff8:	2800      	cmp	r0, #0
 8009ffa:	d06f      	beq.n	800a0dc <_strtod_l+0xa34>
 8009ffc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d17a      	bne.n	800a0f8 <_strtod_l+0xa50>
 800a002:	f1ba 0f00 	cmp.w	sl, #0
 800a006:	d158      	bne.n	800a0ba <_strtod_l+0xa12>
 800a008:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a00a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d15a      	bne.n	800a0c8 <_strtod_l+0xa20>
 800a012:	4b64      	ldr	r3, [pc, #400]	@ (800a1a4 <_strtod_l+0xafc>)
 800a014:	2200      	movs	r2, #0
 800a016:	4630      	mov	r0, r6
 800a018:	4639      	mov	r1, r7
 800a01a:	f7f6 fd77 	bl	8000b0c <__aeabi_dcmplt>
 800a01e:	2800      	cmp	r0, #0
 800a020:	d159      	bne.n	800a0d6 <_strtod_l+0xa2e>
 800a022:	4630      	mov	r0, r6
 800a024:	4639      	mov	r1, r7
 800a026:	4b60      	ldr	r3, [pc, #384]	@ (800a1a8 <_strtod_l+0xb00>)
 800a028:	2200      	movs	r2, #0
 800a02a:	f7f6 fafd 	bl	8000628 <__aeabi_dmul>
 800a02e:	4606      	mov	r6, r0
 800a030:	460f      	mov	r7, r1
 800a032:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a036:	9606      	str	r6, [sp, #24]
 800a038:	9307      	str	r3, [sp, #28]
 800a03a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a03e:	4d57      	ldr	r5, [pc, #348]	@ (800a19c <_strtod_l+0xaf4>)
 800a040:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a044:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a046:	401d      	ands	r5, r3
 800a048:	4b58      	ldr	r3, [pc, #352]	@ (800a1ac <_strtod_l+0xb04>)
 800a04a:	429d      	cmp	r5, r3
 800a04c:	f040 80b2 	bne.w	800a1b4 <_strtod_l+0xb0c>
 800a050:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a052:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a056:	ec4b ab10 	vmov	d0, sl, fp
 800a05a:	f002 fb9f 	bl	800c79c <__ulp>
 800a05e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a062:	ec51 0b10 	vmov	r0, r1, d0
 800a066:	f7f6 fadf 	bl	8000628 <__aeabi_dmul>
 800a06a:	4652      	mov	r2, sl
 800a06c:	465b      	mov	r3, fp
 800a06e:	f7f6 f925 	bl	80002bc <__adddf3>
 800a072:	460b      	mov	r3, r1
 800a074:	4949      	ldr	r1, [pc, #292]	@ (800a19c <_strtod_l+0xaf4>)
 800a076:	4a4e      	ldr	r2, [pc, #312]	@ (800a1b0 <_strtod_l+0xb08>)
 800a078:	4019      	ands	r1, r3
 800a07a:	4291      	cmp	r1, r2
 800a07c:	4682      	mov	sl, r0
 800a07e:	d942      	bls.n	800a106 <_strtod_l+0xa5e>
 800a080:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a082:	4b47      	ldr	r3, [pc, #284]	@ (800a1a0 <_strtod_l+0xaf8>)
 800a084:	429a      	cmp	r2, r3
 800a086:	d103      	bne.n	800a090 <_strtod_l+0x9e8>
 800a088:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a08a:	3301      	adds	r3, #1
 800a08c:	f43f ad2b 	beq.w	8009ae6 <_strtod_l+0x43e>
 800a090:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a1a0 <_strtod_l+0xaf8>
 800a094:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800a098:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a09a:	9805      	ldr	r0, [sp, #20]
 800a09c:	f002 f84a 	bl	800c134 <_Bfree>
 800a0a0:	9805      	ldr	r0, [sp, #20]
 800a0a2:	4649      	mov	r1, r9
 800a0a4:	f002 f846 	bl	800c134 <_Bfree>
 800a0a8:	9805      	ldr	r0, [sp, #20]
 800a0aa:	4641      	mov	r1, r8
 800a0ac:	f002 f842 	bl	800c134 <_Bfree>
 800a0b0:	9805      	ldr	r0, [sp, #20]
 800a0b2:	4621      	mov	r1, r4
 800a0b4:	f002 f83e 	bl	800c134 <_Bfree>
 800a0b8:	e618      	b.n	8009cec <_strtod_l+0x644>
 800a0ba:	f1ba 0f01 	cmp.w	sl, #1
 800a0be:	d103      	bne.n	800a0c8 <_strtod_l+0xa20>
 800a0c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	f43f ada5 	beq.w	8009c12 <_strtod_l+0x56a>
 800a0c8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a178 <_strtod_l+0xad0>
 800a0cc:	4f35      	ldr	r7, [pc, #212]	@ (800a1a4 <_strtod_l+0xafc>)
 800a0ce:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a0d2:	2600      	movs	r6, #0
 800a0d4:	e7b1      	b.n	800a03a <_strtod_l+0x992>
 800a0d6:	4f34      	ldr	r7, [pc, #208]	@ (800a1a8 <_strtod_l+0xb00>)
 800a0d8:	2600      	movs	r6, #0
 800a0da:	e7aa      	b.n	800a032 <_strtod_l+0x98a>
 800a0dc:	4b32      	ldr	r3, [pc, #200]	@ (800a1a8 <_strtod_l+0xb00>)
 800a0de:	4630      	mov	r0, r6
 800a0e0:	4639      	mov	r1, r7
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	f7f6 faa0 	bl	8000628 <__aeabi_dmul>
 800a0e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0ea:	4606      	mov	r6, r0
 800a0ec:	460f      	mov	r7, r1
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d09f      	beq.n	800a032 <_strtod_l+0x98a>
 800a0f2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a0f6:	e7a0      	b.n	800a03a <_strtod_l+0x992>
 800a0f8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a180 <_strtod_l+0xad8>
 800a0fc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a100:	ec57 6b17 	vmov	r6, r7, d7
 800a104:	e799      	b.n	800a03a <_strtod_l+0x992>
 800a106:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a10a:	9b08      	ldr	r3, [sp, #32]
 800a10c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a110:	2b00      	cmp	r3, #0
 800a112:	d1c1      	bne.n	800a098 <_strtod_l+0x9f0>
 800a114:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a118:	0d1b      	lsrs	r3, r3, #20
 800a11a:	051b      	lsls	r3, r3, #20
 800a11c:	429d      	cmp	r5, r3
 800a11e:	d1bb      	bne.n	800a098 <_strtod_l+0x9f0>
 800a120:	4630      	mov	r0, r6
 800a122:	4639      	mov	r1, r7
 800a124:	f7f6 fde0 	bl	8000ce8 <__aeabi_d2lz>
 800a128:	f7f6 fa50 	bl	80005cc <__aeabi_l2d>
 800a12c:	4602      	mov	r2, r0
 800a12e:	460b      	mov	r3, r1
 800a130:	4630      	mov	r0, r6
 800a132:	4639      	mov	r1, r7
 800a134:	f7f6 f8c0 	bl	80002b8 <__aeabi_dsub>
 800a138:	460b      	mov	r3, r1
 800a13a:	4602      	mov	r2, r0
 800a13c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a140:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a144:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a146:	ea46 060a 	orr.w	r6, r6, sl
 800a14a:	431e      	orrs	r6, r3
 800a14c:	d06f      	beq.n	800a22e <_strtod_l+0xb86>
 800a14e:	a30e      	add	r3, pc, #56	@ (adr r3, 800a188 <_strtod_l+0xae0>)
 800a150:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a154:	f7f6 fcda 	bl	8000b0c <__aeabi_dcmplt>
 800a158:	2800      	cmp	r0, #0
 800a15a:	f47f accf 	bne.w	8009afc <_strtod_l+0x454>
 800a15e:	a30c      	add	r3, pc, #48	@ (adr r3, 800a190 <_strtod_l+0xae8>)
 800a160:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a164:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a168:	f7f6 fcee 	bl	8000b48 <__aeabi_dcmpgt>
 800a16c:	2800      	cmp	r0, #0
 800a16e:	d093      	beq.n	800a098 <_strtod_l+0x9f0>
 800a170:	e4c4      	b.n	8009afc <_strtod_l+0x454>
 800a172:	bf00      	nop
 800a174:	f3af 8000 	nop.w
 800a178:	00000000 	.word	0x00000000
 800a17c:	bff00000 	.word	0xbff00000
 800a180:	00000000 	.word	0x00000000
 800a184:	3ff00000 	.word	0x3ff00000
 800a188:	94a03595 	.word	0x94a03595
 800a18c:	3fdfffff 	.word	0x3fdfffff
 800a190:	35afe535 	.word	0x35afe535
 800a194:	3fe00000 	.word	0x3fe00000
 800a198:	000fffff 	.word	0x000fffff
 800a19c:	7ff00000 	.word	0x7ff00000
 800a1a0:	7fefffff 	.word	0x7fefffff
 800a1a4:	3ff00000 	.word	0x3ff00000
 800a1a8:	3fe00000 	.word	0x3fe00000
 800a1ac:	7fe00000 	.word	0x7fe00000
 800a1b0:	7c9fffff 	.word	0x7c9fffff
 800a1b4:	9b08      	ldr	r3, [sp, #32]
 800a1b6:	b323      	cbz	r3, 800a202 <_strtod_l+0xb5a>
 800a1b8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a1bc:	d821      	bhi.n	800a202 <_strtod_l+0xb5a>
 800a1be:	a328      	add	r3, pc, #160	@ (adr r3, 800a260 <_strtod_l+0xbb8>)
 800a1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c4:	4630      	mov	r0, r6
 800a1c6:	4639      	mov	r1, r7
 800a1c8:	f7f6 fcaa 	bl	8000b20 <__aeabi_dcmple>
 800a1cc:	b1a0      	cbz	r0, 800a1f8 <_strtod_l+0xb50>
 800a1ce:	4639      	mov	r1, r7
 800a1d0:	4630      	mov	r0, r6
 800a1d2:	f7f6 fd01 	bl	8000bd8 <__aeabi_d2uiz>
 800a1d6:	2801      	cmp	r0, #1
 800a1d8:	bf38      	it	cc
 800a1da:	2001      	movcc	r0, #1
 800a1dc:	f7f6 f9aa 	bl	8000534 <__aeabi_ui2d>
 800a1e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a1e2:	4606      	mov	r6, r0
 800a1e4:	460f      	mov	r7, r1
 800a1e6:	b9fb      	cbnz	r3, 800a228 <_strtod_l+0xb80>
 800a1e8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a1ec:	9014      	str	r0, [sp, #80]	@ 0x50
 800a1ee:	9315      	str	r3, [sp, #84]	@ 0x54
 800a1f0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a1f4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a1f8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a1fa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a1fe:	1b5b      	subs	r3, r3, r5
 800a200:	9311      	str	r3, [sp, #68]	@ 0x44
 800a202:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a206:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a20a:	f002 fac7 	bl	800c79c <__ulp>
 800a20e:	4650      	mov	r0, sl
 800a210:	ec53 2b10 	vmov	r2, r3, d0
 800a214:	4659      	mov	r1, fp
 800a216:	f7f6 fa07 	bl	8000628 <__aeabi_dmul>
 800a21a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a21e:	f7f6 f84d 	bl	80002bc <__adddf3>
 800a222:	4682      	mov	sl, r0
 800a224:	468b      	mov	fp, r1
 800a226:	e770      	b.n	800a10a <_strtod_l+0xa62>
 800a228:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a22c:	e7e0      	b.n	800a1f0 <_strtod_l+0xb48>
 800a22e:	a30e      	add	r3, pc, #56	@ (adr r3, 800a268 <_strtod_l+0xbc0>)
 800a230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a234:	f7f6 fc6a 	bl	8000b0c <__aeabi_dcmplt>
 800a238:	e798      	b.n	800a16c <_strtod_l+0xac4>
 800a23a:	2300      	movs	r3, #0
 800a23c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a23e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a240:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a242:	6013      	str	r3, [r2, #0]
 800a244:	f7ff ba6d 	b.w	8009722 <_strtod_l+0x7a>
 800a248:	2a65      	cmp	r2, #101	@ 0x65
 800a24a:	f43f ab66 	beq.w	800991a <_strtod_l+0x272>
 800a24e:	2a45      	cmp	r2, #69	@ 0x45
 800a250:	f43f ab63 	beq.w	800991a <_strtod_l+0x272>
 800a254:	2301      	movs	r3, #1
 800a256:	f7ff bb9e 	b.w	8009996 <_strtod_l+0x2ee>
 800a25a:	bf00      	nop
 800a25c:	f3af 8000 	nop.w
 800a260:	ffc00000 	.word	0xffc00000
 800a264:	41dfffff 	.word	0x41dfffff
 800a268:	94a03595 	.word	0x94a03595
 800a26c:	3fcfffff 	.word	0x3fcfffff

0800a270 <_strtod_r>:
 800a270:	4b01      	ldr	r3, [pc, #4]	@ (800a278 <_strtod_r+0x8>)
 800a272:	f7ff ba19 	b.w	80096a8 <_strtod_l>
 800a276:	bf00      	nop
 800a278:	20000058 	.word	0x20000058

0800a27c <_strtol_l.constprop.0>:
 800a27c:	2b24      	cmp	r3, #36	@ 0x24
 800a27e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a282:	4686      	mov	lr, r0
 800a284:	4690      	mov	r8, r2
 800a286:	d801      	bhi.n	800a28c <_strtol_l.constprop.0+0x10>
 800a288:	2b01      	cmp	r3, #1
 800a28a:	d106      	bne.n	800a29a <_strtol_l.constprop.0+0x1e>
 800a28c:	f000 f934 	bl	800a4f8 <__errno>
 800a290:	2316      	movs	r3, #22
 800a292:	6003      	str	r3, [r0, #0]
 800a294:	2000      	movs	r0, #0
 800a296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a29a:	4834      	ldr	r0, [pc, #208]	@ (800a36c <_strtol_l.constprop.0+0xf0>)
 800a29c:	460d      	mov	r5, r1
 800a29e:	462a      	mov	r2, r5
 800a2a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a2a4:	5d06      	ldrb	r6, [r0, r4]
 800a2a6:	f016 0608 	ands.w	r6, r6, #8
 800a2aa:	d1f8      	bne.n	800a29e <_strtol_l.constprop.0+0x22>
 800a2ac:	2c2d      	cmp	r4, #45	@ 0x2d
 800a2ae:	d12d      	bne.n	800a30c <_strtol_l.constprop.0+0x90>
 800a2b0:	782c      	ldrb	r4, [r5, #0]
 800a2b2:	2601      	movs	r6, #1
 800a2b4:	1c95      	adds	r5, r2, #2
 800a2b6:	f033 0210 	bics.w	r2, r3, #16
 800a2ba:	d109      	bne.n	800a2d0 <_strtol_l.constprop.0+0x54>
 800a2bc:	2c30      	cmp	r4, #48	@ 0x30
 800a2be:	d12a      	bne.n	800a316 <_strtol_l.constprop.0+0x9a>
 800a2c0:	782a      	ldrb	r2, [r5, #0]
 800a2c2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a2c6:	2a58      	cmp	r2, #88	@ 0x58
 800a2c8:	d125      	bne.n	800a316 <_strtol_l.constprop.0+0x9a>
 800a2ca:	786c      	ldrb	r4, [r5, #1]
 800a2cc:	2310      	movs	r3, #16
 800a2ce:	3502      	adds	r5, #2
 800a2d0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a2d4:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800a2d8:	2200      	movs	r2, #0
 800a2da:	fbbc f9f3 	udiv	r9, ip, r3
 800a2de:	4610      	mov	r0, r2
 800a2e0:	fb03 ca19 	mls	sl, r3, r9, ip
 800a2e4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a2e8:	2f09      	cmp	r7, #9
 800a2ea:	d81b      	bhi.n	800a324 <_strtol_l.constprop.0+0xa8>
 800a2ec:	463c      	mov	r4, r7
 800a2ee:	42a3      	cmp	r3, r4
 800a2f0:	dd27      	ble.n	800a342 <_strtol_l.constprop.0+0xc6>
 800a2f2:	1c57      	adds	r7, r2, #1
 800a2f4:	d007      	beq.n	800a306 <_strtol_l.constprop.0+0x8a>
 800a2f6:	4581      	cmp	r9, r0
 800a2f8:	d320      	bcc.n	800a33c <_strtol_l.constprop.0+0xc0>
 800a2fa:	d101      	bne.n	800a300 <_strtol_l.constprop.0+0x84>
 800a2fc:	45a2      	cmp	sl, r4
 800a2fe:	db1d      	blt.n	800a33c <_strtol_l.constprop.0+0xc0>
 800a300:	fb00 4003 	mla	r0, r0, r3, r4
 800a304:	2201      	movs	r2, #1
 800a306:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a30a:	e7eb      	b.n	800a2e4 <_strtol_l.constprop.0+0x68>
 800a30c:	2c2b      	cmp	r4, #43	@ 0x2b
 800a30e:	bf04      	itt	eq
 800a310:	782c      	ldrbeq	r4, [r5, #0]
 800a312:	1c95      	addeq	r5, r2, #2
 800a314:	e7cf      	b.n	800a2b6 <_strtol_l.constprop.0+0x3a>
 800a316:	2b00      	cmp	r3, #0
 800a318:	d1da      	bne.n	800a2d0 <_strtol_l.constprop.0+0x54>
 800a31a:	2c30      	cmp	r4, #48	@ 0x30
 800a31c:	bf0c      	ite	eq
 800a31e:	2308      	moveq	r3, #8
 800a320:	230a      	movne	r3, #10
 800a322:	e7d5      	b.n	800a2d0 <_strtol_l.constprop.0+0x54>
 800a324:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a328:	2f19      	cmp	r7, #25
 800a32a:	d801      	bhi.n	800a330 <_strtol_l.constprop.0+0xb4>
 800a32c:	3c37      	subs	r4, #55	@ 0x37
 800a32e:	e7de      	b.n	800a2ee <_strtol_l.constprop.0+0x72>
 800a330:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a334:	2f19      	cmp	r7, #25
 800a336:	d804      	bhi.n	800a342 <_strtol_l.constprop.0+0xc6>
 800a338:	3c57      	subs	r4, #87	@ 0x57
 800a33a:	e7d8      	b.n	800a2ee <_strtol_l.constprop.0+0x72>
 800a33c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a340:	e7e1      	b.n	800a306 <_strtol_l.constprop.0+0x8a>
 800a342:	1c53      	adds	r3, r2, #1
 800a344:	d108      	bne.n	800a358 <_strtol_l.constprop.0+0xdc>
 800a346:	2322      	movs	r3, #34	@ 0x22
 800a348:	f8ce 3000 	str.w	r3, [lr]
 800a34c:	4660      	mov	r0, ip
 800a34e:	f1b8 0f00 	cmp.w	r8, #0
 800a352:	d0a0      	beq.n	800a296 <_strtol_l.constprop.0+0x1a>
 800a354:	1e69      	subs	r1, r5, #1
 800a356:	e006      	b.n	800a366 <_strtol_l.constprop.0+0xea>
 800a358:	b106      	cbz	r6, 800a35c <_strtol_l.constprop.0+0xe0>
 800a35a:	4240      	negs	r0, r0
 800a35c:	f1b8 0f00 	cmp.w	r8, #0
 800a360:	d099      	beq.n	800a296 <_strtol_l.constprop.0+0x1a>
 800a362:	2a00      	cmp	r2, #0
 800a364:	d1f6      	bne.n	800a354 <_strtol_l.constprop.0+0xd8>
 800a366:	f8c8 1000 	str.w	r1, [r8]
 800a36a:	e794      	b.n	800a296 <_strtol_l.constprop.0+0x1a>
 800a36c:	0800dd11 	.word	0x0800dd11

0800a370 <_strtol_r>:
 800a370:	f7ff bf84 	b.w	800a27c <_strtol_l.constprop.0>

0800a374 <_fwalk_sglue>:
 800a374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a378:	4607      	mov	r7, r0
 800a37a:	4688      	mov	r8, r1
 800a37c:	4614      	mov	r4, r2
 800a37e:	2600      	movs	r6, #0
 800a380:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a384:	f1b9 0901 	subs.w	r9, r9, #1
 800a388:	d505      	bpl.n	800a396 <_fwalk_sglue+0x22>
 800a38a:	6824      	ldr	r4, [r4, #0]
 800a38c:	2c00      	cmp	r4, #0
 800a38e:	d1f7      	bne.n	800a380 <_fwalk_sglue+0xc>
 800a390:	4630      	mov	r0, r6
 800a392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a396:	89ab      	ldrh	r3, [r5, #12]
 800a398:	2b01      	cmp	r3, #1
 800a39a:	d907      	bls.n	800a3ac <_fwalk_sglue+0x38>
 800a39c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a3a0:	3301      	adds	r3, #1
 800a3a2:	d003      	beq.n	800a3ac <_fwalk_sglue+0x38>
 800a3a4:	4629      	mov	r1, r5
 800a3a6:	4638      	mov	r0, r7
 800a3a8:	47c0      	blx	r8
 800a3aa:	4306      	orrs	r6, r0
 800a3ac:	3568      	adds	r5, #104	@ 0x68
 800a3ae:	e7e9      	b.n	800a384 <_fwalk_sglue+0x10>

0800a3b0 <iprintf>:
 800a3b0:	b40f      	push	{r0, r1, r2, r3}
 800a3b2:	b507      	push	{r0, r1, r2, lr}
 800a3b4:	4906      	ldr	r1, [pc, #24]	@ (800a3d0 <iprintf+0x20>)
 800a3b6:	ab04      	add	r3, sp, #16
 800a3b8:	6808      	ldr	r0, [r1, #0]
 800a3ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3be:	6881      	ldr	r1, [r0, #8]
 800a3c0:	9301      	str	r3, [sp, #4]
 800a3c2:	f001 fbeb 	bl	800bb9c <_vfiprintf_r>
 800a3c6:	b003      	add	sp, #12
 800a3c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3cc:	b004      	add	sp, #16
 800a3ce:	4770      	bx	lr
 800a3d0:	200001c4 	.word	0x200001c4

0800a3d4 <_puts_r>:
 800a3d4:	6a03      	ldr	r3, [r0, #32]
 800a3d6:	b570      	push	{r4, r5, r6, lr}
 800a3d8:	6884      	ldr	r4, [r0, #8]
 800a3da:	4605      	mov	r5, r0
 800a3dc:	460e      	mov	r6, r1
 800a3de:	b90b      	cbnz	r3, 800a3e4 <_puts_r+0x10>
 800a3e0:	f7ff f92c 	bl	800963c <__sinit>
 800a3e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a3e6:	07db      	lsls	r3, r3, #31
 800a3e8:	d405      	bmi.n	800a3f6 <_puts_r+0x22>
 800a3ea:	89a3      	ldrh	r3, [r4, #12]
 800a3ec:	0598      	lsls	r0, r3, #22
 800a3ee:	d402      	bmi.n	800a3f6 <_puts_r+0x22>
 800a3f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a3f2:	f000 f8ac 	bl	800a54e <__retarget_lock_acquire_recursive>
 800a3f6:	89a3      	ldrh	r3, [r4, #12]
 800a3f8:	0719      	lsls	r1, r3, #28
 800a3fa:	d502      	bpl.n	800a402 <_puts_r+0x2e>
 800a3fc:	6923      	ldr	r3, [r4, #16]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d135      	bne.n	800a46e <_puts_r+0x9a>
 800a402:	4621      	mov	r1, r4
 800a404:	4628      	mov	r0, r5
 800a406:	f002 fbb7 	bl	800cb78 <__swsetup_r>
 800a40a:	b380      	cbz	r0, 800a46e <_puts_r+0x9a>
 800a40c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800a410:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a412:	07da      	lsls	r2, r3, #31
 800a414:	d405      	bmi.n	800a422 <_puts_r+0x4e>
 800a416:	89a3      	ldrh	r3, [r4, #12]
 800a418:	059b      	lsls	r3, r3, #22
 800a41a:	d402      	bmi.n	800a422 <_puts_r+0x4e>
 800a41c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a41e:	f000 f897 	bl	800a550 <__retarget_lock_release_recursive>
 800a422:	4628      	mov	r0, r5
 800a424:	bd70      	pop	{r4, r5, r6, pc}
 800a426:	2b00      	cmp	r3, #0
 800a428:	da04      	bge.n	800a434 <_puts_r+0x60>
 800a42a:	69a2      	ldr	r2, [r4, #24]
 800a42c:	429a      	cmp	r2, r3
 800a42e:	dc17      	bgt.n	800a460 <_puts_r+0x8c>
 800a430:	290a      	cmp	r1, #10
 800a432:	d015      	beq.n	800a460 <_puts_r+0x8c>
 800a434:	6823      	ldr	r3, [r4, #0]
 800a436:	1c5a      	adds	r2, r3, #1
 800a438:	6022      	str	r2, [r4, #0]
 800a43a:	7019      	strb	r1, [r3, #0]
 800a43c:	68a3      	ldr	r3, [r4, #8]
 800a43e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a442:	3b01      	subs	r3, #1
 800a444:	60a3      	str	r3, [r4, #8]
 800a446:	2900      	cmp	r1, #0
 800a448:	d1ed      	bne.n	800a426 <_puts_r+0x52>
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	da11      	bge.n	800a472 <_puts_r+0x9e>
 800a44e:	4622      	mov	r2, r4
 800a450:	210a      	movs	r1, #10
 800a452:	4628      	mov	r0, r5
 800a454:	f002 fb51 	bl	800cafa <__swbuf_r>
 800a458:	3001      	adds	r0, #1
 800a45a:	d0d7      	beq.n	800a40c <_puts_r+0x38>
 800a45c:	250a      	movs	r5, #10
 800a45e:	e7d7      	b.n	800a410 <_puts_r+0x3c>
 800a460:	4622      	mov	r2, r4
 800a462:	4628      	mov	r0, r5
 800a464:	f002 fb49 	bl	800cafa <__swbuf_r>
 800a468:	3001      	adds	r0, #1
 800a46a:	d1e7      	bne.n	800a43c <_puts_r+0x68>
 800a46c:	e7ce      	b.n	800a40c <_puts_r+0x38>
 800a46e:	3e01      	subs	r6, #1
 800a470:	e7e4      	b.n	800a43c <_puts_r+0x68>
 800a472:	6823      	ldr	r3, [r4, #0]
 800a474:	1c5a      	adds	r2, r3, #1
 800a476:	6022      	str	r2, [r4, #0]
 800a478:	220a      	movs	r2, #10
 800a47a:	701a      	strb	r2, [r3, #0]
 800a47c:	e7ee      	b.n	800a45c <_puts_r+0x88>
	...

0800a480 <puts>:
 800a480:	4b02      	ldr	r3, [pc, #8]	@ (800a48c <puts+0xc>)
 800a482:	4601      	mov	r1, r0
 800a484:	6818      	ldr	r0, [r3, #0]
 800a486:	f7ff bfa5 	b.w	800a3d4 <_puts_r>
 800a48a:	bf00      	nop
 800a48c:	200001c4 	.word	0x200001c4

0800a490 <strncmp>:
 800a490:	b510      	push	{r4, lr}
 800a492:	b16a      	cbz	r2, 800a4b0 <strncmp+0x20>
 800a494:	3901      	subs	r1, #1
 800a496:	1884      	adds	r4, r0, r2
 800a498:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a49c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a4a0:	429a      	cmp	r2, r3
 800a4a2:	d103      	bne.n	800a4ac <strncmp+0x1c>
 800a4a4:	42a0      	cmp	r0, r4
 800a4a6:	d001      	beq.n	800a4ac <strncmp+0x1c>
 800a4a8:	2a00      	cmp	r2, #0
 800a4aa:	d1f5      	bne.n	800a498 <strncmp+0x8>
 800a4ac:	1ad0      	subs	r0, r2, r3
 800a4ae:	bd10      	pop	{r4, pc}
 800a4b0:	4610      	mov	r0, r2
 800a4b2:	e7fc      	b.n	800a4ae <strncmp+0x1e>

0800a4b4 <strstr>:
 800a4b4:	780a      	ldrb	r2, [r1, #0]
 800a4b6:	b570      	push	{r4, r5, r6, lr}
 800a4b8:	b96a      	cbnz	r2, 800a4d6 <strstr+0x22>
 800a4ba:	bd70      	pop	{r4, r5, r6, pc}
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	d109      	bne.n	800a4d4 <strstr+0x20>
 800a4c0:	460c      	mov	r4, r1
 800a4c2:	4605      	mov	r5, r0
 800a4c4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d0f6      	beq.n	800a4ba <strstr+0x6>
 800a4cc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800a4d0:	429e      	cmp	r6, r3
 800a4d2:	d0f7      	beq.n	800a4c4 <strstr+0x10>
 800a4d4:	3001      	adds	r0, #1
 800a4d6:	7803      	ldrb	r3, [r0, #0]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d1ef      	bne.n	800a4bc <strstr+0x8>
 800a4dc:	4618      	mov	r0, r3
 800a4de:	e7ec      	b.n	800a4ba <strstr+0x6>

0800a4e0 <memset>:
 800a4e0:	4402      	add	r2, r0
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	d100      	bne.n	800a4ea <memset+0xa>
 800a4e8:	4770      	bx	lr
 800a4ea:	f803 1b01 	strb.w	r1, [r3], #1
 800a4ee:	e7f9      	b.n	800a4e4 <memset+0x4>

0800a4f0 <_localeconv_r>:
 800a4f0:	4800      	ldr	r0, [pc, #0]	@ (800a4f4 <_localeconv_r+0x4>)
 800a4f2:	4770      	bx	lr
 800a4f4:	20000148 	.word	0x20000148

0800a4f8 <__errno>:
 800a4f8:	4b01      	ldr	r3, [pc, #4]	@ (800a500 <__errno+0x8>)
 800a4fa:	6818      	ldr	r0, [r3, #0]
 800a4fc:	4770      	bx	lr
 800a4fe:	bf00      	nop
 800a500:	200001c4 	.word	0x200001c4

0800a504 <__libc_init_array>:
 800a504:	b570      	push	{r4, r5, r6, lr}
 800a506:	4d0d      	ldr	r5, [pc, #52]	@ (800a53c <__libc_init_array+0x38>)
 800a508:	4c0d      	ldr	r4, [pc, #52]	@ (800a540 <__libc_init_array+0x3c>)
 800a50a:	1b64      	subs	r4, r4, r5
 800a50c:	10a4      	asrs	r4, r4, #2
 800a50e:	2600      	movs	r6, #0
 800a510:	42a6      	cmp	r6, r4
 800a512:	d109      	bne.n	800a528 <__libc_init_array+0x24>
 800a514:	4d0b      	ldr	r5, [pc, #44]	@ (800a544 <__libc_init_array+0x40>)
 800a516:	4c0c      	ldr	r4, [pc, #48]	@ (800a548 <__libc_init_array+0x44>)
 800a518:	f002 ff08 	bl	800d32c <_init>
 800a51c:	1b64      	subs	r4, r4, r5
 800a51e:	10a4      	asrs	r4, r4, #2
 800a520:	2600      	movs	r6, #0
 800a522:	42a6      	cmp	r6, r4
 800a524:	d105      	bne.n	800a532 <__libc_init_array+0x2e>
 800a526:	bd70      	pop	{r4, r5, r6, pc}
 800a528:	f855 3b04 	ldr.w	r3, [r5], #4
 800a52c:	4798      	blx	r3
 800a52e:	3601      	adds	r6, #1
 800a530:	e7ee      	b.n	800a510 <__libc_init_array+0xc>
 800a532:	f855 3b04 	ldr.w	r3, [r5], #4
 800a536:	4798      	blx	r3
 800a538:	3601      	adds	r6, #1
 800a53a:	e7f2      	b.n	800a522 <__libc_init_array+0x1e>
 800a53c:	0800e0e4 	.word	0x0800e0e4
 800a540:	0800e0e4 	.word	0x0800e0e4
 800a544:	0800e0e4 	.word	0x0800e0e4
 800a548:	0800e0e8 	.word	0x0800e0e8

0800a54c <__retarget_lock_init_recursive>:
 800a54c:	4770      	bx	lr

0800a54e <__retarget_lock_acquire_recursive>:
 800a54e:	4770      	bx	lr

0800a550 <__retarget_lock_release_recursive>:
 800a550:	4770      	bx	lr

0800a552 <memcpy>:
 800a552:	440a      	add	r2, r1
 800a554:	4291      	cmp	r1, r2
 800a556:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800a55a:	d100      	bne.n	800a55e <memcpy+0xc>
 800a55c:	4770      	bx	lr
 800a55e:	b510      	push	{r4, lr}
 800a560:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a564:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a568:	4291      	cmp	r1, r2
 800a56a:	d1f9      	bne.n	800a560 <memcpy+0xe>
 800a56c:	bd10      	pop	{r4, pc}
	...

0800a570 <nan>:
 800a570:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a578 <nan+0x8>
 800a574:	4770      	bx	lr
 800a576:	bf00      	nop
 800a578:	00000000 	.word	0x00000000
 800a57c:	7ff80000 	.word	0x7ff80000

0800a580 <nanf>:
 800a580:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a588 <nanf+0x8>
 800a584:	4770      	bx	lr
 800a586:	bf00      	nop
 800a588:	7fc00000 	.word	0x7fc00000

0800a58c <quorem>:
 800a58c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a590:	6903      	ldr	r3, [r0, #16]
 800a592:	690c      	ldr	r4, [r1, #16]
 800a594:	42a3      	cmp	r3, r4
 800a596:	4607      	mov	r7, r0
 800a598:	db7e      	blt.n	800a698 <quorem+0x10c>
 800a59a:	3c01      	subs	r4, #1
 800a59c:	f101 0814 	add.w	r8, r1, #20
 800a5a0:	00a3      	lsls	r3, r4, #2
 800a5a2:	f100 0514 	add.w	r5, r0, #20
 800a5a6:	9300      	str	r3, [sp, #0]
 800a5a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a5ac:	9301      	str	r3, [sp, #4]
 800a5ae:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a5b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a5b6:	3301      	adds	r3, #1
 800a5b8:	429a      	cmp	r2, r3
 800a5ba:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a5be:	fbb2 f6f3 	udiv	r6, r2, r3
 800a5c2:	d32e      	bcc.n	800a622 <quorem+0x96>
 800a5c4:	f04f 0a00 	mov.w	sl, #0
 800a5c8:	46c4      	mov	ip, r8
 800a5ca:	46ae      	mov	lr, r5
 800a5cc:	46d3      	mov	fp, sl
 800a5ce:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a5d2:	b298      	uxth	r0, r3
 800a5d4:	fb06 a000 	mla	r0, r6, r0, sl
 800a5d8:	0c02      	lsrs	r2, r0, #16
 800a5da:	0c1b      	lsrs	r3, r3, #16
 800a5dc:	fb06 2303 	mla	r3, r6, r3, r2
 800a5e0:	f8de 2000 	ldr.w	r2, [lr]
 800a5e4:	b280      	uxth	r0, r0
 800a5e6:	b292      	uxth	r2, r2
 800a5e8:	1a12      	subs	r2, r2, r0
 800a5ea:	445a      	add	r2, fp
 800a5ec:	f8de 0000 	ldr.w	r0, [lr]
 800a5f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a5f4:	b29b      	uxth	r3, r3
 800a5f6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a5fa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a5fe:	b292      	uxth	r2, r2
 800a600:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a604:	45e1      	cmp	r9, ip
 800a606:	f84e 2b04 	str.w	r2, [lr], #4
 800a60a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a60e:	d2de      	bcs.n	800a5ce <quorem+0x42>
 800a610:	9b00      	ldr	r3, [sp, #0]
 800a612:	58eb      	ldr	r3, [r5, r3]
 800a614:	b92b      	cbnz	r3, 800a622 <quorem+0x96>
 800a616:	9b01      	ldr	r3, [sp, #4]
 800a618:	3b04      	subs	r3, #4
 800a61a:	429d      	cmp	r5, r3
 800a61c:	461a      	mov	r2, r3
 800a61e:	d32f      	bcc.n	800a680 <quorem+0xf4>
 800a620:	613c      	str	r4, [r7, #16]
 800a622:	4638      	mov	r0, r7
 800a624:	f002 f80a 	bl	800c63c <__mcmp>
 800a628:	2800      	cmp	r0, #0
 800a62a:	db25      	blt.n	800a678 <quorem+0xec>
 800a62c:	4629      	mov	r1, r5
 800a62e:	2000      	movs	r0, #0
 800a630:	f858 2b04 	ldr.w	r2, [r8], #4
 800a634:	f8d1 c000 	ldr.w	ip, [r1]
 800a638:	fa1f fe82 	uxth.w	lr, r2
 800a63c:	fa1f f38c 	uxth.w	r3, ip
 800a640:	eba3 030e 	sub.w	r3, r3, lr
 800a644:	4403      	add	r3, r0
 800a646:	0c12      	lsrs	r2, r2, #16
 800a648:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a64c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a650:	b29b      	uxth	r3, r3
 800a652:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a656:	45c1      	cmp	r9, r8
 800a658:	f841 3b04 	str.w	r3, [r1], #4
 800a65c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a660:	d2e6      	bcs.n	800a630 <quorem+0xa4>
 800a662:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a666:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a66a:	b922      	cbnz	r2, 800a676 <quorem+0xea>
 800a66c:	3b04      	subs	r3, #4
 800a66e:	429d      	cmp	r5, r3
 800a670:	461a      	mov	r2, r3
 800a672:	d30b      	bcc.n	800a68c <quorem+0x100>
 800a674:	613c      	str	r4, [r7, #16]
 800a676:	3601      	adds	r6, #1
 800a678:	4630      	mov	r0, r6
 800a67a:	b003      	add	sp, #12
 800a67c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a680:	6812      	ldr	r2, [r2, #0]
 800a682:	3b04      	subs	r3, #4
 800a684:	2a00      	cmp	r2, #0
 800a686:	d1cb      	bne.n	800a620 <quorem+0x94>
 800a688:	3c01      	subs	r4, #1
 800a68a:	e7c6      	b.n	800a61a <quorem+0x8e>
 800a68c:	6812      	ldr	r2, [r2, #0]
 800a68e:	3b04      	subs	r3, #4
 800a690:	2a00      	cmp	r2, #0
 800a692:	d1ef      	bne.n	800a674 <quorem+0xe8>
 800a694:	3c01      	subs	r4, #1
 800a696:	e7ea      	b.n	800a66e <quorem+0xe2>
 800a698:	2000      	movs	r0, #0
 800a69a:	e7ee      	b.n	800a67a <quorem+0xee>
 800a69c:	0000      	movs	r0, r0
	...

0800a6a0 <_dtoa_r>:
 800a6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6a4:	69c7      	ldr	r7, [r0, #28]
 800a6a6:	b099      	sub	sp, #100	@ 0x64
 800a6a8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a6ac:	ec55 4b10 	vmov	r4, r5, d0
 800a6b0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a6b2:	9109      	str	r1, [sp, #36]	@ 0x24
 800a6b4:	4683      	mov	fp, r0
 800a6b6:	920e      	str	r2, [sp, #56]	@ 0x38
 800a6b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a6ba:	b97f      	cbnz	r7, 800a6dc <_dtoa_r+0x3c>
 800a6bc:	2010      	movs	r0, #16
 800a6be:	f001 fb85 	bl	800bdcc <malloc>
 800a6c2:	4602      	mov	r2, r0
 800a6c4:	f8cb 001c 	str.w	r0, [fp, #28]
 800a6c8:	b920      	cbnz	r0, 800a6d4 <_dtoa_r+0x34>
 800a6ca:	4ba7      	ldr	r3, [pc, #668]	@ (800a968 <_dtoa_r+0x2c8>)
 800a6cc:	21ef      	movs	r1, #239	@ 0xef
 800a6ce:	48a7      	ldr	r0, [pc, #668]	@ (800a96c <_dtoa_r+0x2cc>)
 800a6d0:	f002 fbaa 	bl	800ce28 <__assert_func>
 800a6d4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a6d8:	6007      	str	r7, [r0, #0]
 800a6da:	60c7      	str	r7, [r0, #12]
 800a6dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a6e0:	6819      	ldr	r1, [r3, #0]
 800a6e2:	b159      	cbz	r1, 800a6fc <_dtoa_r+0x5c>
 800a6e4:	685a      	ldr	r2, [r3, #4]
 800a6e6:	604a      	str	r2, [r1, #4]
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	4093      	lsls	r3, r2
 800a6ec:	608b      	str	r3, [r1, #8]
 800a6ee:	4658      	mov	r0, fp
 800a6f0:	f001 fd20 	bl	800c134 <_Bfree>
 800a6f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	601a      	str	r2, [r3, #0]
 800a6fc:	1e2b      	subs	r3, r5, #0
 800a6fe:	bfb9      	ittee	lt
 800a700:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a704:	9303      	strlt	r3, [sp, #12]
 800a706:	2300      	movge	r3, #0
 800a708:	6033      	strge	r3, [r6, #0]
 800a70a:	9f03      	ldr	r7, [sp, #12]
 800a70c:	4b98      	ldr	r3, [pc, #608]	@ (800a970 <_dtoa_r+0x2d0>)
 800a70e:	bfbc      	itt	lt
 800a710:	2201      	movlt	r2, #1
 800a712:	6032      	strlt	r2, [r6, #0]
 800a714:	43bb      	bics	r3, r7
 800a716:	d112      	bne.n	800a73e <_dtoa_r+0x9e>
 800a718:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a71a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a71e:	6013      	str	r3, [r2, #0]
 800a720:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a724:	4323      	orrs	r3, r4
 800a726:	f000 854d 	beq.w	800b1c4 <_dtoa_r+0xb24>
 800a72a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a72c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a984 <_dtoa_r+0x2e4>
 800a730:	2b00      	cmp	r3, #0
 800a732:	f000 854f 	beq.w	800b1d4 <_dtoa_r+0xb34>
 800a736:	f10a 0303 	add.w	r3, sl, #3
 800a73a:	f000 bd49 	b.w	800b1d0 <_dtoa_r+0xb30>
 800a73e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a742:	2200      	movs	r2, #0
 800a744:	ec51 0b17 	vmov	r0, r1, d7
 800a748:	2300      	movs	r3, #0
 800a74a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a74e:	f7f6 f9d3 	bl	8000af8 <__aeabi_dcmpeq>
 800a752:	4680      	mov	r8, r0
 800a754:	b158      	cbz	r0, 800a76e <_dtoa_r+0xce>
 800a756:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a758:	2301      	movs	r3, #1
 800a75a:	6013      	str	r3, [r2, #0]
 800a75c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a75e:	b113      	cbz	r3, 800a766 <_dtoa_r+0xc6>
 800a760:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a762:	4b84      	ldr	r3, [pc, #528]	@ (800a974 <_dtoa_r+0x2d4>)
 800a764:	6013      	str	r3, [r2, #0]
 800a766:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a988 <_dtoa_r+0x2e8>
 800a76a:	f000 bd33 	b.w	800b1d4 <_dtoa_r+0xb34>
 800a76e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a772:	aa16      	add	r2, sp, #88	@ 0x58
 800a774:	a917      	add	r1, sp, #92	@ 0x5c
 800a776:	4658      	mov	r0, fp
 800a778:	f002 f880 	bl	800c87c <__d2b>
 800a77c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a780:	4681      	mov	r9, r0
 800a782:	2e00      	cmp	r6, #0
 800a784:	d077      	beq.n	800a876 <_dtoa_r+0x1d6>
 800a786:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a788:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a78c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a790:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a794:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a798:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a79c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a7a0:	4619      	mov	r1, r3
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	4b74      	ldr	r3, [pc, #464]	@ (800a978 <_dtoa_r+0x2d8>)
 800a7a6:	f7f5 fd87 	bl	80002b8 <__aeabi_dsub>
 800a7aa:	a369      	add	r3, pc, #420	@ (adr r3, 800a950 <_dtoa_r+0x2b0>)
 800a7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b0:	f7f5 ff3a 	bl	8000628 <__aeabi_dmul>
 800a7b4:	a368      	add	r3, pc, #416	@ (adr r3, 800a958 <_dtoa_r+0x2b8>)
 800a7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ba:	f7f5 fd7f 	bl	80002bc <__adddf3>
 800a7be:	4604      	mov	r4, r0
 800a7c0:	4630      	mov	r0, r6
 800a7c2:	460d      	mov	r5, r1
 800a7c4:	f7f5 fec6 	bl	8000554 <__aeabi_i2d>
 800a7c8:	a365      	add	r3, pc, #404	@ (adr r3, 800a960 <_dtoa_r+0x2c0>)
 800a7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ce:	f7f5 ff2b 	bl	8000628 <__aeabi_dmul>
 800a7d2:	4602      	mov	r2, r0
 800a7d4:	460b      	mov	r3, r1
 800a7d6:	4620      	mov	r0, r4
 800a7d8:	4629      	mov	r1, r5
 800a7da:	f7f5 fd6f 	bl	80002bc <__adddf3>
 800a7de:	4604      	mov	r4, r0
 800a7e0:	460d      	mov	r5, r1
 800a7e2:	f7f6 f9d1 	bl	8000b88 <__aeabi_d2iz>
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	4607      	mov	r7, r0
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	4620      	mov	r0, r4
 800a7ee:	4629      	mov	r1, r5
 800a7f0:	f7f6 f98c 	bl	8000b0c <__aeabi_dcmplt>
 800a7f4:	b140      	cbz	r0, 800a808 <_dtoa_r+0x168>
 800a7f6:	4638      	mov	r0, r7
 800a7f8:	f7f5 feac 	bl	8000554 <__aeabi_i2d>
 800a7fc:	4622      	mov	r2, r4
 800a7fe:	462b      	mov	r3, r5
 800a800:	f7f6 f97a 	bl	8000af8 <__aeabi_dcmpeq>
 800a804:	b900      	cbnz	r0, 800a808 <_dtoa_r+0x168>
 800a806:	3f01      	subs	r7, #1
 800a808:	2f16      	cmp	r7, #22
 800a80a:	d851      	bhi.n	800a8b0 <_dtoa_r+0x210>
 800a80c:	4b5b      	ldr	r3, [pc, #364]	@ (800a97c <_dtoa_r+0x2dc>)
 800a80e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a816:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a81a:	f7f6 f977 	bl	8000b0c <__aeabi_dcmplt>
 800a81e:	2800      	cmp	r0, #0
 800a820:	d048      	beq.n	800a8b4 <_dtoa_r+0x214>
 800a822:	3f01      	subs	r7, #1
 800a824:	2300      	movs	r3, #0
 800a826:	9312      	str	r3, [sp, #72]	@ 0x48
 800a828:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a82a:	1b9b      	subs	r3, r3, r6
 800a82c:	1e5a      	subs	r2, r3, #1
 800a82e:	bf44      	itt	mi
 800a830:	f1c3 0801 	rsbmi	r8, r3, #1
 800a834:	2300      	movmi	r3, #0
 800a836:	9208      	str	r2, [sp, #32]
 800a838:	bf54      	ite	pl
 800a83a:	f04f 0800 	movpl.w	r8, #0
 800a83e:	9308      	strmi	r3, [sp, #32]
 800a840:	2f00      	cmp	r7, #0
 800a842:	db39      	blt.n	800a8b8 <_dtoa_r+0x218>
 800a844:	9b08      	ldr	r3, [sp, #32]
 800a846:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a848:	443b      	add	r3, r7
 800a84a:	9308      	str	r3, [sp, #32]
 800a84c:	2300      	movs	r3, #0
 800a84e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a850:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a852:	2b09      	cmp	r3, #9
 800a854:	d864      	bhi.n	800a920 <_dtoa_r+0x280>
 800a856:	2b05      	cmp	r3, #5
 800a858:	bfc4      	itt	gt
 800a85a:	3b04      	subgt	r3, #4
 800a85c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a85e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a860:	f1a3 0302 	sub.w	r3, r3, #2
 800a864:	bfcc      	ite	gt
 800a866:	2400      	movgt	r4, #0
 800a868:	2401      	movle	r4, #1
 800a86a:	2b03      	cmp	r3, #3
 800a86c:	d863      	bhi.n	800a936 <_dtoa_r+0x296>
 800a86e:	e8df f003 	tbb	[pc, r3]
 800a872:	372a      	.short	0x372a
 800a874:	5535      	.short	0x5535
 800a876:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a87a:	441e      	add	r6, r3
 800a87c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a880:	2b20      	cmp	r3, #32
 800a882:	bfc1      	itttt	gt
 800a884:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a888:	409f      	lslgt	r7, r3
 800a88a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a88e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a892:	bfd6      	itet	le
 800a894:	f1c3 0320 	rsble	r3, r3, #32
 800a898:	ea47 0003 	orrgt.w	r0, r7, r3
 800a89c:	fa04 f003 	lslle.w	r0, r4, r3
 800a8a0:	f7f5 fe48 	bl	8000534 <__aeabi_ui2d>
 800a8a4:	2201      	movs	r2, #1
 800a8a6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a8aa:	3e01      	subs	r6, #1
 800a8ac:	9214      	str	r2, [sp, #80]	@ 0x50
 800a8ae:	e777      	b.n	800a7a0 <_dtoa_r+0x100>
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	e7b8      	b.n	800a826 <_dtoa_r+0x186>
 800a8b4:	9012      	str	r0, [sp, #72]	@ 0x48
 800a8b6:	e7b7      	b.n	800a828 <_dtoa_r+0x188>
 800a8b8:	427b      	negs	r3, r7
 800a8ba:	930a      	str	r3, [sp, #40]	@ 0x28
 800a8bc:	2300      	movs	r3, #0
 800a8be:	eba8 0807 	sub.w	r8, r8, r7
 800a8c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a8c4:	e7c4      	b.n	800a850 <_dtoa_r+0x1b0>
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a8ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	dc35      	bgt.n	800a93c <_dtoa_r+0x29c>
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	9300      	str	r3, [sp, #0]
 800a8d4:	9307      	str	r3, [sp, #28]
 800a8d6:	461a      	mov	r2, r3
 800a8d8:	920e      	str	r2, [sp, #56]	@ 0x38
 800a8da:	e00b      	b.n	800a8f4 <_dtoa_r+0x254>
 800a8dc:	2301      	movs	r3, #1
 800a8de:	e7f3      	b.n	800a8c8 <_dtoa_r+0x228>
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a8e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a8e6:	18fb      	adds	r3, r7, r3
 800a8e8:	9300      	str	r3, [sp, #0]
 800a8ea:	3301      	adds	r3, #1
 800a8ec:	2b01      	cmp	r3, #1
 800a8ee:	9307      	str	r3, [sp, #28]
 800a8f0:	bfb8      	it	lt
 800a8f2:	2301      	movlt	r3, #1
 800a8f4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a8f8:	2100      	movs	r1, #0
 800a8fa:	2204      	movs	r2, #4
 800a8fc:	f102 0514 	add.w	r5, r2, #20
 800a900:	429d      	cmp	r5, r3
 800a902:	d91f      	bls.n	800a944 <_dtoa_r+0x2a4>
 800a904:	6041      	str	r1, [r0, #4]
 800a906:	4658      	mov	r0, fp
 800a908:	f001 fbd4 	bl	800c0b4 <_Balloc>
 800a90c:	4682      	mov	sl, r0
 800a90e:	2800      	cmp	r0, #0
 800a910:	d13c      	bne.n	800a98c <_dtoa_r+0x2ec>
 800a912:	4b1b      	ldr	r3, [pc, #108]	@ (800a980 <_dtoa_r+0x2e0>)
 800a914:	4602      	mov	r2, r0
 800a916:	f240 11af 	movw	r1, #431	@ 0x1af
 800a91a:	e6d8      	b.n	800a6ce <_dtoa_r+0x2e>
 800a91c:	2301      	movs	r3, #1
 800a91e:	e7e0      	b.n	800a8e2 <_dtoa_r+0x242>
 800a920:	2401      	movs	r4, #1
 800a922:	2300      	movs	r3, #0
 800a924:	9309      	str	r3, [sp, #36]	@ 0x24
 800a926:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a928:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a92c:	9300      	str	r3, [sp, #0]
 800a92e:	9307      	str	r3, [sp, #28]
 800a930:	2200      	movs	r2, #0
 800a932:	2312      	movs	r3, #18
 800a934:	e7d0      	b.n	800a8d8 <_dtoa_r+0x238>
 800a936:	2301      	movs	r3, #1
 800a938:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a93a:	e7f5      	b.n	800a928 <_dtoa_r+0x288>
 800a93c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a93e:	9300      	str	r3, [sp, #0]
 800a940:	9307      	str	r3, [sp, #28]
 800a942:	e7d7      	b.n	800a8f4 <_dtoa_r+0x254>
 800a944:	3101      	adds	r1, #1
 800a946:	0052      	lsls	r2, r2, #1
 800a948:	e7d8      	b.n	800a8fc <_dtoa_r+0x25c>
 800a94a:	bf00      	nop
 800a94c:	f3af 8000 	nop.w
 800a950:	636f4361 	.word	0x636f4361
 800a954:	3fd287a7 	.word	0x3fd287a7
 800a958:	8b60c8b3 	.word	0x8b60c8b3
 800a95c:	3fc68a28 	.word	0x3fc68a28
 800a960:	509f79fb 	.word	0x509f79fb
 800a964:	3fd34413 	.word	0x3fd34413
 800a968:	0800de1e 	.word	0x0800de1e
 800a96c:	0800de35 	.word	0x0800de35
 800a970:	7ff00000 	.word	0x7ff00000
 800a974:	0800dc8d 	.word	0x0800dc8d
 800a978:	3ff80000 	.word	0x3ff80000
 800a97c:	0800dfa0 	.word	0x0800dfa0
 800a980:	0800de8d 	.word	0x0800de8d
 800a984:	0800de1a 	.word	0x0800de1a
 800a988:	0800dc8c 	.word	0x0800dc8c
 800a98c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a990:	6018      	str	r0, [r3, #0]
 800a992:	9b07      	ldr	r3, [sp, #28]
 800a994:	2b0e      	cmp	r3, #14
 800a996:	f200 80a4 	bhi.w	800aae2 <_dtoa_r+0x442>
 800a99a:	2c00      	cmp	r4, #0
 800a99c:	f000 80a1 	beq.w	800aae2 <_dtoa_r+0x442>
 800a9a0:	2f00      	cmp	r7, #0
 800a9a2:	dd33      	ble.n	800aa0c <_dtoa_r+0x36c>
 800a9a4:	4bad      	ldr	r3, [pc, #692]	@ (800ac5c <_dtoa_r+0x5bc>)
 800a9a6:	f007 020f 	and.w	r2, r7, #15
 800a9aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a9ae:	ed93 7b00 	vldr	d7, [r3]
 800a9b2:	05f8      	lsls	r0, r7, #23
 800a9b4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a9b8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a9bc:	d516      	bpl.n	800a9ec <_dtoa_r+0x34c>
 800a9be:	4ba8      	ldr	r3, [pc, #672]	@ (800ac60 <_dtoa_r+0x5c0>)
 800a9c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a9c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a9c8:	f7f5 ff58 	bl	800087c <__aeabi_ddiv>
 800a9cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9d0:	f004 040f 	and.w	r4, r4, #15
 800a9d4:	2603      	movs	r6, #3
 800a9d6:	4da2      	ldr	r5, [pc, #648]	@ (800ac60 <_dtoa_r+0x5c0>)
 800a9d8:	b954      	cbnz	r4, 800a9f0 <_dtoa_r+0x350>
 800a9da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a9de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9e2:	f7f5 ff4b 	bl	800087c <__aeabi_ddiv>
 800a9e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9ea:	e028      	b.n	800aa3e <_dtoa_r+0x39e>
 800a9ec:	2602      	movs	r6, #2
 800a9ee:	e7f2      	b.n	800a9d6 <_dtoa_r+0x336>
 800a9f0:	07e1      	lsls	r1, r4, #31
 800a9f2:	d508      	bpl.n	800aa06 <_dtoa_r+0x366>
 800a9f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a9f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a9fc:	f7f5 fe14 	bl	8000628 <__aeabi_dmul>
 800aa00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa04:	3601      	adds	r6, #1
 800aa06:	1064      	asrs	r4, r4, #1
 800aa08:	3508      	adds	r5, #8
 800aa0a:	e7e5      	b.n	800a9d8 <_dtoa_r+0x338>
 800aa0c:	f000 80d2 	beq.w	800abb4 <_dtoa_r+0x514>
 800aa10:	427c      	negs	r4, r7
 800aa12:	4b92      	ldr	r3, [pc, #584]	@ (800ac5c <_dtoa_r+0x5bc>)
 800aa14:	4d92      	ldr	r5, [pc, #584]	@ (800ac60 <_dtoa_r+0x5c0>)
 800aa16:	f004 020f 	and.w	r2, r4, #15
 800aa1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa22:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa26:	f7f5 fdff 	bl	8000628 <__aeabi_dmul>
 800aa2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa2e:	1124      	asrs	r4, r4, #4
 800aa30:	2300      	movs	r3, #0
 800aa32:	2602      	movs	r6, #2
 800aa34:	2c00      	cmp	r4, #0
 800aa36:	f040 80b2 	bne.w	800ab9e <_dtoa_r+0x4fe>
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d1d3      	bne.n	800a9e6 <_dtoa_r+0x346>
 800aa3e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800aa40:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	f000 80b7 	beq.w	800abb8 <_dtoa_r+0x518>
 800aa4a:	4b86      	ldr	r3, [pc, #536]	@ (800ac64 <_dtoa_r+0x5c4>)
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	4620      	mov	r0, r4
 800aa50:	4629      	mov	r1, r5
 800aa52:	f7f6 f85b 	bl	8000b0c <__aeabi_dcmplt>
 800aa56:	2800      	cmp	r0, #0
 800aa58:	f000 80ae 	beq.w	800abb8 <_dtoa_r+0x518>
 800aa5c:	9b07      	ldr	r3, [sp, #28]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	f000 80aa 	beq.w	800abb8 <_dtoa_r+0x518>
 800aa64:	9b00      	ldr	r3, [sp, #0]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	dd37      	ble.n	800aada <_dtoa_r+0x43a>
 800aa6a:	1e7b      	subs	r3, r7, #1
 800aa6c:	9304      	str	r3, [sp, #16]
 800aa6e:	4620      	mov	r0, r4
 800aa70:	4b7d      	ldr	r3, [pc, #500]	@ (800ac68 <_dtoa_r+0x5c8>)
 800aa72:	2200      	movs	r2, #0
 800aa74:	4629      	mov	r1, r5
 800aa76:	f7f5 fdd7 	bl	8000628 <__aeabi_dmul>
 800aa7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa7e:	9c00      	ldr	r4, [sp, #0]
 800aa80:	3601      	adds	r6, #1
 800aa82:	4630      	mov	r0, r6
 800aa84:	f7f5 fd66 	bl	8000554 <__aeabi_i2d>
 800aa88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aa8c:	f7f5 fdcc 	bl	8000628 <__aeabi_dmul>
 800aa90:	4b76      	ldr	r3, [pc, #472]	@ (800ac6c <_dtoa_r+0x5cc>)
 800aa92:	2200      	movs	r2, #0
 800aa94:	f7f5 fc12 	bl	80002bc <__adddf3>
 800aa98:	4605      	mov	r5, r0
 800aa9a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800aa9e:	2c00      	cmp	r4, #0
 800aaa0:	f040 808d 	bne.w	800abbe <_dtoa_r+0x51e>
 800aaa4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aaa8:	4b71      	ldr	r3, [pc, #452]	@ (800ac70 <_dtoa_r+0x5d0>)
 800aaaa:	2200      	movs	r2, #0
 800aaac:	f7f5 fc04 	bl	80002b8 <__aeabi_dsub>
 800aab0:	4602      	mov	r2, r0
 800aab2:	460b      	mov	r3, r1
 800aab4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aab8:	462a      	mov	r2, r5
 800aaba:	4633      	mov	r3, r6
 800aabc:	f7f6 f844 	bl	8000b48 <__aeabi_dcmpgt>
 800aac0:	2800      	cmp	r0, #0
 800aac2:	f040 828b 	bne.w	800afdc <_dtoa_r+0x93c>
 800aac6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aaca:	462a      	mov	r2, r5
 800aacc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800aad0:	f7f6 f81c 	bl	8000b0c <__aeabi_dcmplt>
 800aad4:	2800      	cmp	r0, #0
 800aad6:	f040 8128 	bne.w	800ad2a <_dtoa_r+0x68a>
 800aada:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800aade:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800aae2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	f2c0 815a 	blt.w	800ad9e <_dtoa_r+0x6fe>
 800aaea:	2f0e      	cmp	r7, #14
 800aaec:	f300 8157 	bgt.w	800ad9e <_dtoa_r+0x6fe>
 800aaf0:	4b5a      	ldr	r3, [pc, #360]	@ (800ac5c <_dtoa_r+0x5bc>)
 800aaf2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800aaf6:	ed93 7b00 	vldr	d7, [r3]
 800aafa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	ed8d 7b00 	vstr	d7, [sp]
 800ab02:	da03      	bge.n	800ab0c <_dtoa_r+0x46c>
 800ab04:	9b07      	ldr	r3, [sp, #28]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	f340 8101 	ble.w	800ad0e <_dtoa_r+0x66e>
 800ab0c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ab10:	4656      	mov	r6, sl
 800ab12:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab16:	4620      	mov	r0, r4
 800ab18:	4629      	mov	r1, r5
 800ab1a:	f7f5 feaf 	bl	800087c <__aeabi_ddiv>
 800ab1e:	f7f6 f833 	bl	8000b88 <__aeabi_d2iz>
 800ab22:	4680      	mov	r8, r0
 800ab24:	f7f5 fd16 	bl	8000554 <__aeabi_i2d>
 800ab28:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab2c:	f7f5 fd7c 	bl	8000628 <__aeabi_dmul>
 800ab30:	4602      	mov	r2, r0
 800ab32:	460b      	mov	r3, r1
 800ab34:	4620      	mov	r0, r4
 800ab36:	4629      	mov	r1, r5
 800ab38:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ab3c:	f7f5 fbbc 	bl	80002b8 <__aeabi_dsub>
 800ab40:	f806 4b01 	strb.w	r4, [r6], #1
 800ab44:	9d07      	ldr	r5, [sp, #28]
 800ab46:	eba6 040a 	sub.w	r4, r6, sl
 800ab4a:	42a5      	cmp	r5, r4
 800ab4c:	4602      	mov	r2, r0
 800ab4e:	460b      	mov	r3, r1
 800ab50:	f040 8117 	bne.w	800ad82 <_dtoa_r+0x6e2>
 800ab54:	f7f5 fbb2 	bl	80002bc <__adddf3>
 800ab58:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab5c:	4604      	mov	r4, r0
 800ab5e:	460d      	mov	r5, r1
 800ab60:	f7f5 fff2 	bl	8000b48 <__aeabi_dcmpgt>
 800ab64:	2800      	cmp	r0, #0
 800ab66:	f040 80f9 	bne.w	800ad5c <_dtoa_r+0x6bc>
 800ab6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab6e:	4620      	mov	r0, r4
 800ab70:	4629      	mov	r1, r5
 800ab72:	f7f5 ffc1 	bl	8000af8 <__aeabi_dcmpeq>
 800ab76:	b118      	cbz	r0, 800ab80 <_dtoa_r+0x4e0>
 800ab78:	f018 0f01 	tst.w	r8, #1
 800ab7c:	f040 80ee 	bne.w	800ad5c <_dtoa_r+0x6bc>
 800ab80:	4649      	mov	r1, r9
 800ab82:	4658      	mov	r0, fp
 800ab84:	f001 fad6 	bl	800c134 <_Bfree>
 800ab88:	2300      	movs	r3, #0
 800ab8a:	7033      	strb	r3, [r6, #0]
 800ab8c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ab8e:	3701      	adds	r7, #1
 800ab90:	601f      	str	r7, [r3, #0]
 800ab92:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	f000 831d 	beq.w	800b1d4 <_dtoa_r+0xb34>
 800ab9a:	601e      	str	r6, [r3, #0]
 800ab9c:	e31a      	b.n	800b1d4 <_dtoa_r+0xb34>
 800ab9e:	07e2      	lsls	r2, r4, #31
 800aba0:	d505      	bpl.n	800abae <_dtoa_r+0x50e>
 800aba2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aba6:	f7f5 fd3f 	bl	8000628 <__aeabi_dmul>
 800abaa:	3601      	adds	r6, #1
 800abac:	2301      	movs	r3, #1
 800abae:	1064      	asrs	r4, r4, #1
 800abb0:	3508      	adds	r5, #8
 800abb2:	e73f      	b.n	800aa34 <_dtoa_r+0x394>
 800abb4:	2602      	movs	r6, #2
 800abb6:	e742      	b.n	800aa3e <_dtoa_r+0x39e>
 800abb8:	9c07      	ldr	r4, [sp, #28]
 800abba:	9704      	str	r7, [sp, #16]
 800abbc:	e761      	b.n	800aa82 <_dtoa_r+0x3e2>
 800abbe:	4b27      	ldr	r3, [pc, #156]	@ (800ac5c <_dtoa_r+0x5bc>)
 800abc0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800abc2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800abc6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800abca:	4454      	add	r4, sl
 800abcc:	2900      	cmp	r1, #0
 800abce:	d053      	beq.n	800ac78 <_dtoa_r+0x5d8>
 800abd0:	4928      	ldr	r1, [pc, #160]	@ (800ac74 <_dtoa_r+0x5d4>)
 800abd2:	2000      	movs	r0, #0
 800abd4:	f7f5 fe52 	bl	800087c <__aeabi_ddiv>
 800abd8:	4633      	mov	r3, r6
 800abda:	462a      	mov	r2, r5
 800abdc:	f7f5 fb6c 	bl	80002b8 <__aeabi_dsub>
 800abe0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800abe4:	4656      	mov	r6, sl
 800abe6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abea:	f7f5 ffcd 	bl	8000b88 <__aeabi_d2iz>
 800abee:	4605      	mov	r5, r0
 800abf0:	f7f5 fcb0 	bl	8000554 <__aeabi_i2d>
 800abf4:	4602      	mov	r2, r0
 800abf6:	460b      	mov	r3, r1
 800abf8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abfc:	f7f5 fb5c 	bl	80002b8 <__aeabi_dsub>
 800ac00:	3530      	adds	r5, #48	@ 0x30
 800ac02:	4602      	mov	r2, r0
 800ac04:	460b      	mov	r3, r1
 800ac06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ac0a:	f806 5b01 	strb.w	r5, [r6], #1
 800ac0e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ac12:	f7f5 ff7b 	bl	8000b0c <__aeabi_dcmplt>
 800ac16:	2800      	cmp	r0, #0
 800ac18:	d171      	bne.n	800acfe <_dtoa_r+0x65e>
 800ac1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac1e:	4911      	ldr	r1, [pc, #68]	@ (800ac64 <_dtoa_r+0x5c4>)
 800ac20:	2000      	movs	r0, #0
 800ac22:	f7f5 fb49 	bl	80002b8 <__aeabi_dsub>
 800ac26:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ac2a:	f7f5 ff6f 	bl	8000b0c <__aeabi_dcmplt>
 800ac2e:	2800      	cmp	r0, #0
 800ac30:	f040 8095 	bne.w	800ad5e <_dtoa_r+0x6be>
 800ac34:	42a6      	cmp	r6, r4
 800ac36:	f43f af50 	beq.w	800aada <_dtoa_r+0x43a>
 800ac3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ac3e:	4b0a      	ldr	r3, [pc, #40]	@ (800ac68 <_dtoa_r+0x5c8>)
 800ac40:	2200      	movs	r2, #0
 800ac42:	f7f5 fcf1 	bl	8000628 <__aeabi_dmul>
 800ac46:	4b08      	ldr	r3, [pc, #32]	@ (800ac68 <_dtoa_r+0x5c8>)
 800ac48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac52:	f7f5 fce9 	bl	8000628 <__aeabi_dmul>
 800ac56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac5a:	e7c4      	b.n	800abe6 <_dtoa_r+0x546>
 800ac5c:	0800dfa0 	.word	0x0800dfa0
 800ac60:	0800df78 	.word	0x0800df78
 800ac64:	3ff00000 	.word	0x3ff00000
 800ac68:	40240000 	.word	0x40240000
 800ac6c:	401c0000 	.word	0x401c0000
 800ac70:	40140000 	.word	0x40140000
 800ac74:	3fe00000 	.word	0x3fe00000
 800ac78:	4631      	mov	r1, r6
 800ac7a:	4628      	mov	r0, r5
 800ac7c:	f7f5 fcd4 	bl	8000628 <__aeabi_dmul>
 800ac80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ac84:	9415      	str	r4, [sp, #84]	@ 0x54
 800ac86:	4656      	mov	r6, sl
 800ac88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac8c:	f7f5 ff7c 	bl	8000b88 <__aeabi_d2iz>
 800ac90:	4605      	mov	r5, r0
 800ac92:	f7f5 fc5f 	bl	8000554 <__aeabi_i2d>
 800ac96:	4602      	mov	r2, r0
 800ac98:	460b      	mov	r3, r1
 800ac9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac9e:	f7f5 fb0b 	bl	80002b8 <__aeabi_dsub>
 800aca2:	3530      	adds	r5, #48	@ 0x30
 800aca4:	f806 5b01 	strb.w	r5, [r6], #1
 800aca8:	4602      	mov	r2, r0
 800acaa:	460b      	mov	r3, r1
 800acac:	42a6      	cmp	r6, r4
 800acae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800acb2:	f04f 0200 	mov.w	r2, #0
 800acb6:	d124      	bne.n	800ad02 <_dtoa_r+0x662>
 800acb8:	4bac      	ldr	r3, [pc, #688]	@ (800af6c <_dtoa_r+0x8cc>)
 800acba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800acbe:	f7f5 fafd 	bl	80002bc <__adddf3>
 800acc2:	4602      	mov	r2, r0
 800acc4:	460b      	mov	r3, r1
 800acc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acca:	f7f5 ff3d 	bl	8000b48 <__aeabi_dcmpgt>
 800acce:	2800      	cmp	r0, #0
 800acd0:	d145      	bne.n	800ad5e <_dtoa_r+0x6be>
 800acd2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800acd6:	49a5      	ldr	r1, [pc, #660]	@ (800af6c <_dtoa_r+0x8cc>)
 800acd8:	2000      	movs	r0, #0
 800acda:	f7f5 faed 	bl	80002b8 <__aeabi_dsub>
 800acde:	4602      	mov	r2, r0
 800ace0:	460b      	mov	r3, r1
 800ace2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ace6:	f7f5 ff11 	bl	8000b0c <__aeabi_dcmplt>
 800acea:	2800      	cmp	r0, #0
 800acec:	f43f aef5 	beq.w	800aada <_dtoa_r+0x43a>
 800acf0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800acf2:	1e73      	subs	r3, r6, #1
 800acf4:	9315      	str	r3, [sp, #84]	@ 0x54
 800acf6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800acfa:	2b30      	cmp	r3, #48	@ 0x30
 800acfc:	d0f8      	beq.n	800acf0 <_dtoa_r+0x650>
 800acfe:	9f04      	ldr	r7, [sp, #16]
 800ad00:	e73e      	b.n	800ab80 <_dtoa_r+0x4e0>
 800ad02:	4b9b      	ldr	r3, [pc, #620]	@ (800af70 <_dtoa_r+0x8d0>)
 800ad04:	f7f5 fc90 	bl	8000628 <__aeabi_dmul>
 800ad08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad0c:	e7bc      	b.n	800ac88 <_dtoa_r+0x5e8>
 800ad0e:	d10c      	bne.n	800ad2a <_dtoa_r+0x68a>
 800ad10:	4b98      	ldr	r3, [pc, #608]	@ (800af74 <_dtoa_r+0x8d4>)
 800ad12:	2200      	movs	r2, #0
 800ad14:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ad18:	f7f5 fc86 	bl	8000628 <__aeabi_dmul>
 800ad1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad20:	f7f5 ff08 	bl	8000b34 <__aeabi_dcmpge>
 800ad24:	2800      	cmp	r0, #0
 800ad26:	f000 8157 	beq.w	800afd8 <_dtoa_r+0x938>
 800ad2a:	2400      	movs	r4, #0
 800ad2c:	4625      	mov	r5, r4
 800ad2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad30:	43db      	mvns	r3, r3
 800ad32:	9304      	str	r3, [sp, #16]
 800ad34:	4656      	mov	r6, sl
 800ad36:	2700      	movs	r7, #0
 800ad38:	4621      	mov	r1, r4
 800ad3a:	4658      	mov	r0, fp
 800ad3c:	f001 f9fa 	bl	800c134 <_Bfree>
 800ad40:	2d00      	cmp	r5, #0
 800ad42:	d0dc      	beq.n	800acfe <_dtoa_r+0x65e>
 800ad44:	b12f      	cbz	r7, 800ad52 <_dtoa_r+0x6b2>
 800ad46:	42af      	cmp	r7, r5
 800ad48:	d003      	beq.n	800ad52 <_dtoa_r+0x6b2>
 800ad4a:	4639      	mov	r1, r7
 800ad4c:	4658      	mov	r0, fp
 800ad4e:	f001 f9f1 	bl	800c134 <_Bfree>
 800ad52:	4629      	mov	r1, r5
 800ad54:	4658      	mov	r0, fp
 800ad56:	f001 f9ed 	bl	800c134 <_Bfree>
 800ad5a:	e7d0      	b.n	800acfe <_dtoa_r+0x65e>
 800ad5c:	9704      	str	r7, [sp, #16]
 800ad5e:	4633      	mov	r3, r6
 800ad60:	461e      	mov	r6, r3
 800ad62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad66:	2a39      	cmp	r2, #57	@ 0x39
 800ad68:	d107      	bne.n	800ad7a <_dtoa_r+0x6da>
 800ad6a:	459a      	cmp	sl, r3
 800ad6c:	d1f8      	bne.n	800ad60 <_dtoa_r+0x6c0>
 800ad6e:	9a04      	ldr	r2, [sp, #16]
 800ad70:	3201      	adds	r2, #1
 800ad72:	9204      	str	r2, [sp, #16]
 800ad74:	2230      	movs	r2, #48	@ 0x30
 800ad76:	f88a 2000 	strb.w	r2, [sl]
 800ad7a:	781a      	ldrb	r2, [r3, #0]
 800ad7c:	3201      	adds	r2, #1
 800ad7e:	701a      	strb	r2, [r3, #0]
 800ad80:	e7bd      	b.n	800acfe <_dtoa_r+0x65e>
 800ad82:	4b7b      	ldr	r3, [pc, #492]	@ (800af70 <_dtoa_r+0x8d0>)
 800ad84:	2200      	movs	r2, #0
 800ad86:	f7f5 fc4f 	bl	8000628 <__aeabi_dmul>
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	4604      	mov	r4, r0
 800ad90:	460d      	mov	r5, r1
 800ad92:	f7f5 feb1 	bl	8000af8 <__aeabi_dcmpeq>
 800ad96:	2800      	cmp	r0, #0
 800ad98:	f43f aebb 	beq.w	800ab12 <_dtoa_r+0x472>
 800ad9c:	e6f0      	b.n	800ab80 <_dtoa_r+0x4e0>
 800ad9e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ada0:	2a00      	cmp	r2, #0
 800ada2:	f000 80db 	beq.w	800af5c <_dtoa_r+0x8bc>
 800ada6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ada8:	2a01      	cmp	r2, #1
 800adaa:	f300 80bf 	bgt.w	800af2c <_dtoa_r+0x88c>
 800adae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800adb0:	2a00      	cmp	r2, #0
 800adb2:	f000 80b7 	beq.w	800af24 <_dtoa_r+0x884>
 800adb6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800adba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800adbc:	4646      	mov	r6, r8
 800adbe:	9a08      	ldr	r2, [sp, #32]
 800adc0:	2101      	movs	r1, #1
 800adc2:	441a      	add	r2, r3
 800adc4:	4658      	mov	r0, fp
 800adc6:	4498      	add	r8, r3
 800adc8:	9208      	str	r2, [sp, #32]
 800adca:	f001 fab1 	bl	800c330 <__i2b>
 800adce:	4605      	mov	r5, r0
 800add0:	b15e      	cbz	r6, 800adea <_dtoa_r+0x74a>
 800add2:	9b08      	ldr	r3, [sp, #32]
 800add4:	2b00      	cmp	r3, #0
 800add6:	dd08      	ble.n	800adea <_dtoa_r+0x74a>
 800add8:	42b3      	cmp	r3, r6
 800adda:	9a08      	ldr	r2, [sp, #32]
 800addc:	bfa8      	it	ge
 800adde:	4633      	movge	r3, r6
 800ade0:	eba8 0803 	sub.w	r8, r8, r3
 800ade4:	1af6      	subs	r6, r6, r3
 800ade6:	1ad3      	subs	r3, r2, r3
 800ade8:	9308      	str	r3, [sp, #32]
 800adea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800adec:	b1f3      	cbz	r3, 800ae2c <_dtoa_r+0x78c>
 800adee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	f000 80b7 	beq.w	800af64 <_dtoa_r+0x8c4>
 800adf6:	b18c      	cbz	r4, 800ae1c <_dtoa_r+0x77c>
 800adf8:	4629      	mov	r1, r5
 800adfa:	4622      	mov	r2, r4
 800adfc:	4658      	mov	r0, fp
 800adfe:	f001 fb57 	bl	800c4b0 <__pow5mult>
 800ae02:	464a      	mov	r2, r9
 800ae04:	4601      	mov	r1, r0
 800ae06:	4605      	mov	r5, r0
 800ae08:	4658      	mov	r0, fp
 800ae0a:	f001 faa7 	bl	800c35c <__multiply>
 800ae0e:	4649      	mov	r1, r9
 800ae10:	9004      	str	r0, [sp, #16]
 800ae12:	4658      	mov	r0, fp
 800ae14:	f001 f98e 	bl	800c134 <_Bfree>
 800ae18:	9b04      	ldr	r3, [sp, #16]
 800ae1a:	4699      	mov	r9, r3
 800ae1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae1e:	1b1a      	subs	r2, r3, r4
 800ae20:	d004      	beq.n	800ae2c <_dtoa_r+0x78c>
 800ae22:	4649      	mov	r1, r9
 800ae24:	4658      	mov	r0, fp
 800ae26:	f001 fb43 	bl	800c4b0 <__pow5mult>
 800ae2a:	4681      	mov	r9, r0
 800ae2c:	2101      	movs	r1, #1
 800ae2e:	4658      	mov	r0, fp
 800ae30:	f001 fa7e 	bl	800c330 <__i2b>
 800ae34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae36:	4604      	mov	r4, r0
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	f000 81cf 	beq.w	800b1dc <_dtoa_r+0xb3c>
 800ae3e:	461a      	mov	r2, r3
 800ae40:	4601      	mov	r1, r0
 800ae42:	4658      	mov	r0, fp
 800ae44:	f001 fb34 	bl	800c4b0 <__pow5mult>
 800ae48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae4a:	2b01      	cmp	r3, #1
 800ae4c:	4604      	mov	r4, r0
 800ae4e:	f300 8095 	bgt.w	800af7c <_dtoa_r+0x8dc>
 800ae52:	9b02      	ldr	r3, [sp, #8]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	f040 8087 	bne.w	800af68 <_dtoa_r+0x8c8>
 800ae5a:	9b03      	ldr	r3, [sp, #12]
 800ae5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	f040 8089 	bne.w	800af78 <_dtoa_r+0x8d8>
 800ae66:	9b03      	ldr	r3, [sp, #12]
 800ae68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ae6c:	0d1b      	lsrs	r3, r3, #20
 800ae6e:	051b      	lsls	r3, r3, #20
 800ae70:	b12b      	cbz	r3, 800ae7e <_dtoa_r+0x7de>
 800ae72:	9b08      	ldr	r3, [sp, #32]
 800ae74:	3301      	adds	r3, #1
 800ae76:	9308      	str	r3, [sp, #32]
 800ae78:	f108 0801 	add.w	r8, r8, #1
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	f000 81b0 	beq.w	800b1e8 <_dtoa_r+0xb48>
 800ae88:	6923      	ldr	r3, [r4, #16]
 800ae8a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ae8e:	6918      	ldr	r0, [r3, #16]
 800ae90:	f001 fa02 	bl	800c298 <__hi0bits>
 800ae94:	f1c0 0020 	rsb	r0, r0, #32
 800ae98:	9b08      	ldr	r3, [sp, #32]
 800ae9a:	4418      	add	r0, r3
 800ae9c:	f010 001f 	ands.w	r0, r0, #31
 800aea0:	d077      	beq.n	800af92 <_dtoa_r+0x8f2>
 800aea2:	f1c0 0320 	rsb	r3, r0, #32
 800aea6:	2b04      	cmp	r3, #4
 800aea8:	dd6b      	ble.n	800af82 <_dtoa_r+0x8e2>
 800aeaa:	9b08      	ldr	r3, [sp, #32]
 800aeac:	f1c0 001c 	rsb	r0, r0, #28
 800aeb0:	4403      	add	r3, r0
 800aeb2:	4480      	add	r8, r0
 800aeb4:	4406      	add	r6, r0
 800aeb6:	9308      	str	r3, [sp, #32]
 800aeb8:	f1b8 0f00 	cmp.w	r8, #0
 800aebc:	dd05      	ble.n	800aeca <_dtoa_r+0x82a>
 800aebe:	4649      	mov	r1, r9
 800aec0:	4642      	mov	r2, r8
 800aec2:	4658      	mov	r0, fp
 800aec4:	f001 fb4e 	bl	800c564 <__lshift>
 800aec8:	4681      	mov	r9, r0
 800aeca:	9b08      	ldr	r3, [sp, #32]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	dd05      	ble.n	800aedc <_dtoa_r+0x83c>
 800aed0:	4621      	mov	r1, r4
 800aed2:	461a      	mov	r2, r3
 800aed4:	4658      	mov	r0, fp
 800aed6:	f001 fb45 	bl	800c564 <__lshift>
 800aeda:	4604      	mov	r4, r0
 800aedc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d059      	beq.n	800af96 <_dtoa_r+0x8f6>
 800aee2:	4621      	mov	r1, r4
 800aee4:	4648      	mov	r0, r9
 800aee6:	f001 fba9 	bl	800c63c <__mcmp>
 800aeea:	2800      	cmp	r0, #0
 800aeec:	da53      	bge.n	800af96 <_dtoa_r+0x8f6>
 800aeee:	1e7b      	subs	r3, r7, #1
 800aef0:	9304      	str	r3, [sp, #16]
 800aef2:	4649      	mov	r1, r9
 800aef4:	2300      	movs	r3, #0
 800aef6:	220a      	movs	r2, #10
 800aef8:	4658      	mov	r0, fp
 800aefa:	f001 f93d 	bl	800c178 <__multadd>
 800aefe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af00:	4681      	mov	r9, r0
 800af02:	2b00      	cmp	r3, #0
 800af04:	f000 8172 	beq.w	800b1ec <_dtoa_r+0xb4c>
 800af08:	2300      	movs	r3, #0
 800af0a:	4629      	mov	r1, r5
 800af0c:	220a      	movs	r2, #10
 800af0e:	4658      	mov	r0, fp
 800af10:	f001 f932 	bl	800c178 <__multadd>
 800af14:	9b00      	ldr	r3, [sp, #0]
 800af16:	2b00      	cmp	r3, #0
 800af18:	4605      	mov	r5, r0
 800af1a:	dc67      	bgt.n	800afec <_dtoa_r+0x94c>
 800af1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af1e:	2b02      	cmp	r3, #2
 800af20:	dc41      	bgt.n	800afa6 <_dtoa_r+0x906>
 800af22:	e063      	b.n	800afec <_dtoa_r+0x94c>
 800af24:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800af26:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800af2a:	e746      	b.n	800adba <_dtoa_r+0x71a>
 800af2c:	9b07      	ldr	r3, [sp, #28]
 800af2e:	1e5c      	subs	r4, r3, #1
 800af30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af32:	42a3      	cmp	r3, r4
 800af34:	bfbf      	itttt	lt
 800af36:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800af38:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800af3a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800af3c:	1ae3      	sublt	r3, r4, r3
 800af3e:	bfb4      	ite	lt
 800af40:	18d2      	addlt	r2, r2, r3
 800af42:	1b1c      	subge	r4, r3, r4
 800af44:	9b07      	ldr	r3, [sp, #28]
 800af46:	bfbc      	itt	lt
 800af48:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800af4a:	2400      	movlt	r4, #0
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	bfb5      	itete	lt
 800af50:	eba8 0603 	sublt.w	r6, r8, r3
 800af54:	9b07      	ldrge	r3, [sp, #28]
 800af56:	2300      	movlt	r3, #0
 800af58:	4646      	movge	r6, r8
 800af5a:	e730      	b.n	800adbe <_dtoa_r+0x71e>
 800af5c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800af5e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800af60:	4646      	mov	r6, r8
 800af62:	e735      	b.n	800add0 <_dtoa_r+0x730>
 800af64:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800af66:	e75c      	b.n	800ae22 <_dtoa_r+0x782>
 800af68:	2300      	movs	r3, #0
 800af6a:	e788      	b.n	800ae7e <_dtoa_r+0x7de>
 800af6c:	3fe00000 	.word	0x3fe00000
 800af70:	40240000 	.word	0x40240000
 800af74:	40140000 	.word	0x40140000
 800af78:	9b02      	ldr	r3, [sp, #8]
 800af7a:	e780      	b.n	800ae7e <_dtoa_r+0x7de>
 800af7c:	2300      	movs	r3, #0
 800af7e:	930a      	str	r3, [sp, #40]	@ 0x28
 800af80:	e782      	b.n	800ae88 <_dtoa_r+0x7e8>
 800af82:	d099      	beq.n	800aeb8 <_dtoa_r+0x818>
 800af84:	9a08      	ldr	r2, [sp, #32]
 800af86:	331c      	adds	r3, #28
 800af88:	441a      	add	r2, r3
 800af8a:	4498      	add	r8, r3
 800af8c:	441e      	add	r6, r3
 800af8e:	9208      	str	r2, [sp, #32]
 800af90:	e792      	b.n	800aeb8 <_dtoa_r+0x818>
 800af92:	4603      	mov	r3, r0
 800af94:	e7f6      	b.n	800af84 <_dtoa_r+0x8e4>
 800af96:	9b07      	ldr	r3, [sp, #28]
 800af98:	9704      	str	r7, [sp, #16]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	dc20      	bgt.n	800afe0 <_dtoa_r+0x940>
 800af9e:	9300      	str	r3, [sp, #0]
 800afa0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afa2:	2b02      	cmp	r3, #2
 800afa4:	dd1e      	ble.n	800afe4 <_dtoa_r+0x944>
 800afa6:	9b00      	ldr	r3, [sp, #0]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	f47f aec0 	bne.w	800ad2e <_dtoa_r+0x68e>
 800afae:	4621      	mov	r1, r4
 800afb0:	2205      	movs	r2, #5
 800afb2:	4658      	mov	r0, fp
 800afb4:	f001 f8e0 	bl	800c178 <__multadd>
 800afb8:	4601      	mov	r1, r0
 800afba:	4604      	mov	r4, r0
 800afbc:	4648      	mov	r0, r9
 800afbe:	f001 fb3d 	bl	800c63c <__mcmp>
 800afc2:	2800      	cmp	r0, #0
 800afc4:	f77f aeb3 	ble.w	800ad2e <_dtoa_r+0x68e>
 800afc8:	4656      	mov	r6, sl
 800afca:	2331      	movs	r3, #49	@ 0x31
 800afcc:	f806 3b01 	strb.w	r3, [r6], #1
 800afd0:	9b04      	ldr	r3, [sp, #16]
 800afd2:	3301      	adds	r3, #1
 800afd4:	9304      	str	r3, [sp, #16]
 800afd6:	e6ae      	b.n	800ad36 <_dtoa_r+0x696>
 800afd8:	9c07      	ldr	r4, [sp, #28]
 800afda:	9704      	str	r7, [sp, #16]
 800afdc:	4625      	mov	r5, r4
 800afde:	e7f3      	b.n	800afc8 <_dtoa_r+0x928>
 800afe0:	9b07      	ldr	r3, [sp, #28]
 800afe2:	9300      	str	r3, [sp, #0]
 800afe4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	f000 8104 	beq.w	800b1f4 <_dtoa_r+0xb54>
 800afec:	2e00      	cmp	r6, #0
 800afee:	dd05      	ble.n	800affc <_dtoa_r+0x95c>
 800aff0:	4629      	mov	r1, r5
 800aff2:	4632      	mov	r2, r6
 800aff4:	4658      	mov	r0, fp
 800aff6:	f001 fab5 	bl	800c564 <__lshift>
 800affa:	4605      	mov	r5, r0
 800affc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800affe:	2b00      	cmp	r3, #0
 800b000:	d05a      	beq.n	800b0b8 <_dtoa_r+0xa18>
 800b002:	6869      	ldr	r1, [r5, #4]
 800b004:	4658      	mov	r0, fp
 800b006:	f001 f855 	bl	800c0b4 <_Balloc>
 800b00a:	4606      	mov	r6, r0
 800b00c:	b928      	cbnz	r0, 800b01a <_dtoa_r+0x97a>
 800b00e:	4b84      	ldr	r3, [pc, #528]	@ (800b220 <_dtoa_r+0xb80>)
 800b010:	4602      	mov	r2, r0
 800b012:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b016:	f7ff bb5a 	b.w	800a6ce <_dtoa_r+0x2e>
 800b01a:	692a      	ldr	r2, [r5, #16]
 800b01c:	3202      	adds	r2, #2
 800b01e:	0092      	lsls	r2, r2, #2
 800b020:	f105 010c 	add.w	r1, r5, #12
 800b024:	300c      	adds	r0, #12
 800b026:	f7ff fa94 	bl	800a552 <memcpy>
 800b02a:	2201      	movs	r2, #1
 800b02c:	4631      	mov	r1, r6
 800b02e:	4658      	mov	r0, fp
 800b030:	f001 fa98 	bl	800c564 <__lshift>
 800b034:	f10a 0301 	add.w	r3, sl, #1
 800b038:	9307      	str	r3, [sp, #28]
 800b03a:	9b00      	ldr	r3, [sp, #0]
 800b03c:	4453      	add	r3, sl
 800b03e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b040:	9b02      	ldr	r3, [sp, #8]
 800b042:	f003 0301 	and.w	r3, r3, #1
 800b046:	462f      	mov	r7, r5
 800b048:	930a      	str	r3, [sp, #40]	@ 0x28
 800b04a:	4605      	mov	r5, r0
 800b04c:	9b07      	ldr	r3, [sp, #28]
 800b04e:	4621      	mov	r1, r4
 800b050:	3b01      	subs	r3, #1
 800b052:	4648      	mov	r0, r9
 800b054:	9300      	str	r3, [sp, #0]
 800b056:	f7ff fa99 	bl	800a58c <quorem>
 800b05a:	4639      	mov	r1, r7
 800b05c:	9002      	str	r0, [sp, #8]
 800b05e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b062:	4648      	mov	r0, r9
 800b064:	f001 faea 	bl	800c63c <__mcmp>
 800b068:	462a      	mov	r2, r5
 800b06a:	9008      	str	r0, [sp, #32]
 800b06c:	4621      	mov	r1, r4
 800b06e:	4658      	mov	r0, fp
 800b070:	f001 fb00 	bl	800c674 <__mdiff>
 800b074:	68c2      	ldr	r2, [r0, #12]
 800b076:	4606      	mov	r6, r0
 800b078:	bb02      	cbnz	r2, 800b0bc <_dtoa_r+0xa1c>
 800b07a:	4601      	mov	r1, r0
 800b07c:	4648      	mov	r0, r9
 800b07e:	f001 fadd 	bl	800c63c <__mcmp>
 800b082:	4602      	mov	r2, r0
 800b084:	4631      	mov	r1, r6
 800b086:	4658      	mov	r0, fp
 800b088:	920e      	str	r2, [sp, #56]	@ 0x38
 800b08a:	f001 f853 	bl	800c134 <_Bfree>
 800b08e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b090:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b092:	9e07      	ldr	r6, [sp, #28]
 800b094:	ea43 0102 	orr.w	r1, r3, r2
 800b098:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b09a:	4319      	orrs	r1, r3
 800b09c:	d110      	bne.n	800b0c0 <_dtoa_r+0xa20>
 800b09e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b0a2:	d029      	beq.n	800b0f8 <_dtoa_r+0xa58>
 800b0a4:	9b08      	ldr	r3, [sp, #32]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	dd02      	ble.n	800b0b0 <_dtoa_r+0xa10>
 800b0aa:	9b02      	ldr	r3, [sp, #8]
 800b0ac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b0b0:	9b00      	ldr	r3, [sp, #0]
 800b0b2:	f883 8000 	strb.w	r8, [r3]
 800b0b6:	e63f      	b.n	800ad38 <_dtoa_r+0x698>
 800b0b8:	4628      	mov	r0, r5
 800b0ba:	e7bb      	b.n	800b034 <_dtoa_r+0x994>
 800b0bc:	2201      	movs	r2, #1
 800b0be:	e7e1      	b.n	800b084 <_dtoa_r+0x9e4>
 800b0c0:	9b08      	ldr	r3, [sp, #32]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	db04      	blt.n	800b0d0 <_dtoa_r+0xa30>
 800b0c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b0c8:	430b      	orrs	r3, r1
 800b0ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b0cc:	430b      	orrs	r3, r1
 800b0ce:	d120      	bne.n	800b112 <_dtoa_r+0xa72>
 800b0d0:	2a00      	cmp	r2, #0
 800b0d2:	dded      	ble.n	800b0b0 <_dtoa_r+0xa10>
 800b0d4:	4649      	mov	r1, r9
 800b0d6:	2201      	movs	r2, #1
 800b0d8:	4658      	mov	r0, fp
 800b0da:	f001 fa43 	bl	800c564 <__lshift>
 800b0de:	4621      	mov	r1, r4
 800b0e0:	4681      	mov	r9, r0
 800b0e2:	f001 faab 	bl	800c63c <__mcmp>
 800b0e6:	2800      	cmp	r0, #0
 800b0e8:	dc03      	bgt.n	800b0f2 <_dtoa_r+0xa52>
 800b0ea:	d1e1      	bne.n	800b0b0 <_dtoa_r+0xa10>
 800b0ec:	f018 0f01 	tst.w	r8, #1
 800b0f0:	d0de      	beq.n	800b0b0 <_dtoa_r+0xa10>
 800b0f2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b0f6:	d1d8      	bne.n	800b0aa <_dtoa_r+0xa0a>
 800b0f8:	9a00      	ldr	r2, [sp, #0]
 800b0fa:	2339      	movs	r3, #57	@ 0x39
 800b0fc:	7013      	strb	r3, [r2, #0]
 800b0fe:	4633      	mov	r3, r6
 800b100:	461e      	mov	r6, r3
 800b102:	3b01      	subs	r3, #1
 800b104:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b108:	2a39      	cmp	r2, #57	@ 0x39
 800b10a:	d052      	beq.n	800b1b2 <_dtoa_r+0xb12>
 800b10c:	3201      	adds	r2, #1
 800b10e:	701a      	strb	r2, [r3, #0]
 800b110:	e612      	b.n	800ad38 <_dtoa_r+0x698>
 800b112:	2a00      	cmp	r2, #0
 800b114:	dd07      	ble.n	800b126 <_dtoa_r+0xa86>
 800b116:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b11a:	d0ed      	beq.n	800b0f8 <_dtoa_r+0xa58>
 800b11c:	9a00      	ldr	r2, [sp, #0]
 800b11e:	f108 0301 	add.w	r3, r8, #1
 800b122:	7013      	strb	r3, [r2, #0]
 800b124:	e608      	b.n	800ad38 <_dtoa_r+0x698>
 800b126:	9b07      	ldr	r3, [sp, #28]
 800b128:	9a07      	ldr	r2, [sp, #28]
 800b12a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b12e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b130:	4293      	cmp	r3, r2
 800b132:	d028      	beq.n	800b186 <_dtoa_r+0xae6>
 800b134:	4649      	mov	r1, r9
 800b136:	2300      	movs	r3, #0
 800b138:	220a      	movs	r2, #10
 800b13a:	4658      	mov	r0, fp
 800b13c:	f001 f81c 	bl	800c178 <__multadd>
 800b140:	42af      	cmp	r7, r5
 800b142:	4681      	mov	r9, r0
 800b144:	f04f 0300 	mov.w	r3, #0
 800b148:	f04f 020a 	mov.w	r2, #10
 800b14c:	4639      	mov	r1, r7
 800b14e:	4658      	mov	r0, fp
 800b150:	d107      	bne.n	800b162 <_dtoa_r+0xac2>
 800b152:	f001 f811 	bl	800c178 <__multadd>
 800b156:	4607      	mov	r7, r0
 800b158:	4605      	mov	r5, r0
 800b15a:	9b07      	ldr	r3, [sp, #28]
 800b15c:	3301      	adds	r3, #1
 800b15e:	9307      	str	r3, [sp, #28]
 800b160:	e774      	b.n	800b04c <_dtoa_r+0x9ac>
 800b162:	f001 f809 	bl	800c178 <__multadd>
 800b166:	4629      	mov	r1, r5
 800b168:	4607      	mov	r7, r0
 800b16a:	2300      	movs	r3, #0
 800b16c:	220a      	movs	r2, #10
 800b16e:	4658      	mov	r0, fp
 800b170:	f001 f802 	bl	800c178 <__multadd>
 800b174:	4605      	mov	r5, r0
 800b176:	e7f0      	b.n	800b15a <_dtoa_r+0xaba>
 800b178:	9b00      	ldr	r3, [sp, #0]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	bfcc      	ite	gt
 800b17e:	461e      	movgt	r6, r3
 800b180:	2601      	movle	r6, #1
 800b182:	4456      	add	r6, sl
 800b184:	2700      	movs	r7, #0
 800b186:	4649      	mov	r1, r9
 800b188:	2201      	movs	r2, #1
 800b18a:	4658      	mov	r0, fp
 800b18c:	f001 f9ea 	bl	800c564 <__lshift>
 800b190:	4621      	mov	r1, r4
 800b192:	4681      	mov	r9, r0
 800b194:	f001 fa52 	bl	800c63c <__mcmp>
 800b198:	2800      	cmp	r0, #0
 800b19a:	dcb0      	bgt.n	800b0fe <_dtoa_r+0xa5e>
 800b19c:	d102      	bne.n	800b1a4 <_dtoa_r+0xb04>
 800b19e:	f018 0f01 	tst.w	r8, #1
 800b1a2:	d1ac      	bne.n	800b0fe <_dtoa_r+0xa5e>
 800b1a4:	4633      	mov	r3, r6
 800b1a6:	461e      	mov	r6, r3
 800b1a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b1ac:	2a30      	cmp	r2, #48	@ 0x30
 800b1ae:	d0fa      	beq.n	800b1a6 <_dtoa_r+0xb06>
 800b1b0:	e5c2      	b.n	800ad38 <_dtoa_r+0x698>
 800b1b2:	459a      	cmp	sl, r3
 800b1b4:	d1a4      	bne.n	800b100 <_dtoa_r+0xa60>
 800b1b6:	9b04      	ldr	r3, [sp, #16]
 800b1b8:	3301      	adds	r3, #1
 800b1ba:	9304      	str	r3, [sp, #16]
 800b1bc:	2331      	movs	r3, #49	@ 0x31
 800b1be:	f88a 3000 	strb.w	r3, [sl]
 800b1c2:	e5b9      	b.n	800ad38 <_dtoa_r+0x698>
 800b1c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b1c6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b224 <_dtoa_r+0xb84>
 800b1ca:	b11b      	cbz	r3, 800b1d4 <_dtoa_r+0xb34>
 800b1cc:	f10a 0308 	add.w	r3, sl, #8
 800b1d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b1d2:	6013      	str	r3, [r2, #0]
 800b1d4:	4650      	mov	r0, sl
 800b1d6:	b019      	add	sp, #100	@ 0x64
 800b1d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1de:	2b01      	cmp	r3, #1
 800b1e0:	f77f ae37 	ble.w	800ae52 <_dtoa_r+0x7b2>
 800b1e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b1e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b1e8:	2001      	movs	r0, #1
 800b1ea:	e655      	b.n	800ae98 <_dtoa_r+0x7f8>
 800b1ec:	9b00      	ldr	r3, [sp, #0]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	f77f aed6 	ble.w	800afa0 <_dtoa_r+0x900>
 800b1f4:	4656      	mov	r6, sl
 800b1f6:	4621      	mov	r1, r4
 800b1f8:	4648      	mov	r0, r9
 800b1fa:	f7ff f9c7 	bl	800a58c <quorem>
 800b1fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b202:	f806 8b01 	strb.w	r8, [r6], #1
 800b206:	9b00      	ldr	r3, [sp, #0]
 800b208:	eba6 020a 	sub.w	r2, r6, sl
 800b20c:	4293      	cmp	r3, r2
 800b20e:	ddb3      	ble.n	800b178 <_dtoa_r+0xad8>
 800b210:	4649      	mov	r1, r9
 800b212:	2300      	movs	r3, #0
 800b214:	220a      	movs	r2, #10
 800b216:	4658      	mov	r0, fp
 800b218:	f000 ffae 	bl	800c178 <__multadd>
 800b21c:	4681      	mov	r9, r0
 800b21e:	e7ea      	b.n	800b1f6 <_dtoa_r+0xb56>
 800b220:	0800de8d 	.word	0x0800de8d
 800b224:	0800de11 	.word	0x0800de11

0800b228 <rshift>:
 800b228:	6903      	ldr	r3, [r0, #16]
 800b22a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b22e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b232:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b236:	f100 0414 	add.w	r4, r0, #20
 800b23a:	dd45      	ble.n	800b2c8 <rshift+0xa0>
 800b23c:	f011 011f 	ands.w	r1, r1, #31
 800b240:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b244:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b248:	d10c      	bne.n	800b264 <rshift+0x3c>
 800b24a:	f100 0710 	add.w	r7, r0, #16
 800b24e:	4629      	mov	r1, r5
 800b250:	42b1      	cmp	r1, r6
 800b252:	d334      	bcc.n	800b2be <rshift+0x96>
 800b254:	1a9b      	subs	r3, r3, r2
 800b256:	009b      	lsls	r3, r3, #2
 800b258:	1eea      	subs	r2, r5, #3
 800b25a:	4296      	cmp	r6, r2
 800b25c:	bf38      	it	cc
 800b25e:	2300      	movcc	r3, #0
 800b260:	4423      	add	r3, r4
 800b262:	e015      	b.n	800b290 <rshift+0x68>
 800b264:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b268:	f1c1 0820 	rsb	r8, r1, #32
 800b26c:	40cf      	lsrs	r7, r1
 800b26e:	f105 0e04 	add.w	lr, r5, #4
 800b272:	46a1      	mov	r9, r4
 800b274:	4576      	cmp	r6, lr
 800b276:	46f4      	mov	ip, lr
 800b278:	d815      	bhi.n	800b2a6 <rshift+0x7e>
 800b27a:	1a9a      	subs	r2, r3, r2
 800b27c:	0092      	lsls	r2, r2, #2
 800b27e:	3a04      	subs	r2, #4
 800b280:	3501      	adds	r5, #1
 800b282:	42ae      	cmp	r6, r5
 800b284:	bf38      	it	cc
 800b286:	2200      	movcc	r2, #0
 800b288:	18a3      	adds	r3, r4, r2
 800b28a:	50a7      	str	r7, [r4, r2]
 800b28c:	b107      	cbz	r7, 800b290 <rshift+0x68>
 800b28e:	3304      	adds	r3, #4
 800b290:	1b1a      	subs	r2, r3, r4
 800b292:	42a3      	cmp	r3, r4
 800b294:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b298:	bf08      	it	eq
 800b29a:	2300      	moveq	r3, #0
 800b29c:	6102      	str	r2, [r0, #16]
 800b29e:	bf08      	it	eq
 800b2a0:	6143      	streq	r3, [r0, #20]
 800b2a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b2a6:	f8dc c000 	ldr.w	ip, [ip]
 800b2aa:	fa0c fc08 	lsl.w	ip, ip, r8
 800b2ae:	ea4c 0707 	orr.w	r7, ip, r7
 800b2b2:	f849 7b04 	str.w	r7, [r9], #4
 800b2b6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b2ba:	40cf      	lsrs	r7, r1
 800b2bc:	e7da      	b.n	800b274 <rshift+0x4c>
 800b2be:	f851 cb04 	ldr.w	ip, [r1], #4
 800b2c2:	f847 cf04 	str.w	ip, [r7, #4]!
 800b2c6:	e7c3      	b.n	800b250 <rshift+0x28>
 800b2c8:	4623      	mov	r3, r4
 800b2ca:	e7e1      	b.n	800b290 <rshift+0x68>

0800b2cc <__hexdig_fun>:
 800b2cc:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b2d0:	2b09      	cmp	r3, #9
 800b2d2:	d802      	bhi.n	800b2da <__hexdig_fun+0xe>
 800b2d4:	3820      	subs	r0, #32
 800b2d6:	b2c0      	uxtb	r0, r0
 800b2d8:	4770      	bx	lr
 800b2da:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b2de:	2b05      	cmp	r3, #5
 800b2e0:	d801      	bhi.n	800b2e6 <__hexdig_fun+0x1a>
 800b2e2:	3847      	subs	r0, #71	@ 0x47
 800b2e4:	e7f7      	b.n	800b2d6 <__hexdig_fun+0xa>
 800b2e6:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b2ea:	2b05      	cmp	r3, #5
 800b2ec:	d801      	bhi.n	800b2f2 <__hexdig_fun+0x26>
 800b2ee:	3827      	subs	r0, #39	@ 0x27
 800b2f0:	e7f1      	b.n	800b2d6 <__hexdig_fun+0xa>
 800b2f2:	2000      	movs	r0, #0
 800b2f4:	4770      	bx	lr
	...

0800b2f8 <__gethex>:
 800b2f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2fc:	b085      	sub	sp, #20
 800b2fe:	468a      	mov	sl, r1
 800b300:	9302      	str	r3, [sp, #8]
 800b302:	680b      	ldr	r3, [r1, #0]
 800b304:	9001      	str	r0, [sp, #4]
 800b306:	4690      	mov	r8, r2
 800b308:	1c9c      	adds	r4, r3, #2
 800b30a:	46a1      	mov	r9, r4
 800b30c:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b310:	2830      	cmp	r0, #48	@ 0x30
 800b312:	d0fa      	beq.n	800b30a <__gethex+0x12>
 800b314:	eba9 0303 	sub.w	r3, r9, r3
 800b318:	f1a3 0b02 	sub.w	fp, r3, #2
 800b31c:	f7ff ffd6 	bl	800b2cc <__hexdig_fun>
 800b320:	4605      	mov	r5, r0
 800b322:	2800      	cmp	r0, #0
 800b324:	d168      	bne.n	800b3f8 <__gethex+0x100>
 800b326:	49a0      	ldr	r1, [pc, #640]	@ (800b5a8 <__gethex+0x2b0>)
 800b328:	2201      	movs	r2, #1
 800b32a:	4648      	mov	r0, r9
 800b32c:	f7ff f8b0 	bl	800a490 <strncmp>
 800b330:	4607      	mov	r7, r0
 800b332:	2800      	cmp	r0, #0
 800b334:	d167      	bne.n	800b406 <__gethex+0x10e>
 800b336:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b33a:	4626      	mov	r6, r4
 800b33c:	f7ff ffc6 	bl	800b2cc <__hexdig_fun>
 800b340:	2800      	cmp	r0, #0
 800b342:	d062      	beq.n	800b40a <__gethex+0x112>
 800b344:	4623      	mov	r3, r4
 800b346:	7818      	ldrb	r0, [r3, #0]
 800b348:	2830      	cmp	r0, #48	@ 0x30
 800b34a:	4699      	mov	r9, r3
 800b34c:	f103 0301 	add.w	r3, r3, #1
 800b350:	d0f9      	beq.n	800b346 <__gethex+0x4e>
 800b352:	f7ff ffbb 	bl	800b2cc <__hexdig_fun>
 800b356:	fab0 f580 	clz	r5, r0
 800b35a:	096d      	lsrs	r5, r5, #5
 800b35c:	f04f 0b01 	mov.w	fp, #1
 800b360:	464a      	mov	r2, r9
 800b362:	4616      	mov	r6, r2
 800b364:	3201      	adds	r2, #1
 800b366:	7830      	ldrb	r0, [r6, #0]
 800b368:	f7ff ffb0 	bl	800b2cc <__hexdig_fun>
 800b36c:	2800      	cmp	r0, #0
 800b36e:	d1f8      	bne.n	800b362 <__gethex+0x6a>
 800b370:	498d      	ldr	r1, [pc, #564]	@ (800b5a8 <__gethex+0x2b0>)
 800b372:	2201      	movs	r2, #1
 800b374:	4630      	mov	r0, r6
 800b376:	f7ff f88b 	bl	800a490 <strncmp>
 800b37a:	2800      	cmp	r0, #0
 800b37c:	d13f      	bne.n	800b3fe <__gethex+0x106>
 800b37e:	b944      	cbnz	r4, 800b392 <__gethex+0x9a>
 800b380:	1c74      	adds	r4, r6, #1
 800b382:	4622      	mov	r2, r4
 800b384:	4616      	mov	r6, r2
 800b386:	3201      	adds	r2, #1
 800b388:	7830      	ldrb	r0, [r6, #0]
 800b38a:	f7ff ff9f 	bl	800b2cc <__hexdig_fun>
 800b38e:	2800      	cmp	r0, #0
 800b390:	d1f8      	bne.n	800b384 <__gethex+0x8c>
 800b392:	1ba4      	subs	r4, r4, r6
 800b394:	00a7      	lsls	r7, r4, #2
 800b396:	7833      	ldrb	r3, [r6, #0]
 800b398:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b39c:	2b50      	cmp	r3, #80	@ 0x50
 800b39e:	d13e      	bne.n	800b41e <__gethex+0x126>
 800b3a0:	7873      	ldrb	r3, [r6, #1]
 800b3a2:	2b2b      	cmp	r3, #43	@ 0x2b
 800b3a4:	d033      	beq.n	800b40e <__gethex+0x116>
 800b3a6:	2b2d      	cmp	r3, #45	@ 0x2d
 800b3a8:	d034      	beq.n	800b414 <__gethex+0x11c>
 800b3aa:	1c71      	adds	r1, r6, #1
 800b3ac:	2400      	movs	r4, #0
 800b3ae:	7808      	ldrb	r0, [r1, #0]
 800b3b0:	f7ff ff8c 	bl	800b2cc <__hexdig_fun>
 800b3b4:	1e43      	subs	r3, r0, #1
 800b3b6:	b2db      	uxtb	r3, r3
 800b3b8:	2b18      	cmp	r3, #24
 800b3ba:	d830      	bhi.n	800b41e <__gethex+0x126>
 800b3bc:	f1a0 0210 	sub.w	r2, r0, #16
 800b3c0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b3c4:	f7ff ff82 	bl	800b2cc <__hexdig_fun>
 800b3c8:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800b3cc:	fa5f fc8c 	uxtb.w	ip, ip
 800b3d0:	f1bc 0f18 	cmp.w	ip, #24
 800b3d4:	f04f 030a 	mov.w	r3, #10
 800b3d8:	d91e      	bls.n	800b418 <__gethex+0x120>
 800b3da:	b104      	cbz	r4, 800b3de <__gethex+0xe6>
 800b3dc:	4252      	negs	r2, r2
 800b3de:	4417      	add	r7, r2
 800b3e0:	f8ca 1000 	str.w	r1, [sl]
 800b3e4:	b1ed      	cbz	r5, 800b422 <__gethex+0x12a>
 800b3e6:	f1bb 0f00 	cmp.w	fp, #0
 800b3ea:	bf0c      	ite	eq
 800b3ec:	2506      	moveq	r5, #6
 800b3ee:	2500      	movne	r5, #0
 800b3f0:	4628      	mov	r0, r5
 800b3f2:	b005      	add	sp, #20
 800b3f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3f8:	2500      	movs	r5, #0
 800b3fa:	462c      	mov	r4, r5
 800b3fc:	e7b0      	b.n	800b360 <__gethex+0x68>
 800b3fe:	2c00      	cmp	r4, #0
 800b400:	d1c7      	bne.n	800b392 <__gethex+0x9a>
 800b402:	4627      	mov	r7, r4
 800b404:	e7c7      	b.n	800b396 <__gethex+0x9e>
 800b406:	464e      	mov	r6, r9
 800b408:	462f      	mov	r7, r5
 800b40a:	2501      	movs	r5, #1
 800b40c:	e7c3      	b.n	800b396 <__gethex+0x9e>
 800b40e:	2400      	movs	r4, #0
 800b410:	1cb1      	adds	r1, r6, #2
 800b412:	e7cc      	b.n	800b3ae <__gethex+0xb6>
 800b414:	2401      	movs	r4, #1
 800b416:	e7fb      	b.n	800b410 <__gethex+0x118>
 800b418:	fb03 0002 	mla	r0, r3, r2, r0
 800b41c:	e7ce      	b.n	800b3bc <__gethex+0xc4>
 800b41e:	4631      	mov	r1, r6
 800b420:	e7de      	b.n	800b3e0 <__gethex+0xe8>
 800b422:	eba6 0309 	sub.w	r3, r6, r9
 800b426:	3b01      	subs	r3, #1
 800b428:	4629      	mov	r1, r5
 800b42a:	2b07      	cmp	r3, #7
 800b42c:	dc0a      	bgt.n	800b444 <__gethex+0x14c>
 800b42e:	9801      	ldr	r0, [sp, #4]
 800b430:	f000 fe40 	bl	800c0b4 <_Balloc>
 800b434:	4604      	mov	r4, r0
 800b436:	b940      	cbnz	r0, 800b44a <__gethex+0x152>
 800b438:	4b5c      	ldr	r3, [pc, #368]	@ (800b5ac <__gethex+0x2b4>)
 800b43a:	4602      	mov	r2, r0
 800b43c:	21e4      	movs	r1, #228	@ 0xe4
 800b43e:	485c      	ldr	r0, [pc, #368]	@ (800b5b0 <__gethex+0x2b8>)
 800b440:	f001 fcf2 	bl	800ce28 <__assert_func>
 800b444:	3101      	adds	r1, #1
 800b446:	105b      	asrs	r3, r3, #1
 800b448:	e7ef      	b.n	800b42a <__gethex+0x132>
 800b44a:	f100 0a14 	add.w	sl, r0, #20
 800b44e:	2300      	movs	r3, #0
 800b450:	4655      	mov	r5, sl
 800b452:	469b      	mov	fp, r3
 800b454:	45b1      	cmp	r9, r6
 800b456:	d337      	bcc.n	800b4c8 <__gethex+0x1d0>
 800b458:	f845 bb04 	str.w	fp, [r5], #4
 800b45c:	eba5 050a 	sub.w	r5, r5, sl
 800b460:	10ad      	asrs	r5, r5, #2
 800b462:	6125      	str	r5, [r4, #16]
 800b464:	4658      	mov	r0, fp
 800b466:	f000 ff17 	bl	800c298 <__hi0bits>
 800b46a:	016d      	lsls	r5, r5, #5
 800b46c:	f8d8 6000 	ldr.w	r6, [r8]
 800b470:	1a2d      	subs	r5, r5, r0
 800b472:	42b5      	cmp	r5, r6
 800b474:	dd54      	ble.n	800b520 <__gethex+0x228>
 800b476:	1bad      	subs	r5, r5, r6
 800b478:	4629      	mov	r1, r5
 800b47a:	4620      	mov	r0, r4
 800b47c:	f001 faab 	bl	800c9d6 <__any_on>
 800b480:	4681      	mov	r9, r0
 800b482:	b178      	cbz	r0, 800b4a4 <__gethex+0x1ac>
 800b484:	1e6b      	subs	r3, r5, #1
 800b486:	1159      	asrs	r1, r3, #5
 800b488:	f003 021f 	and.w	r2, r3, #31
 800b48c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b490:	f04f 0901 	mov.w	r9, #1
 800b494:	fa09 f202 	lsl.w	r2, r9, r2
 800b498:	420a      	tst	r2, r1
 800b49a:	d003      	beq.n	800b4a4 <__gethex+0x1ac>
 800b49c:	454b      	cmp	r3, r9
 800b49e:	dc36      	bgt.n	800b50e <__gethex+0x216>
 800b4a0:	f04f 0902 	mov.w	r9, #2
 800b4a4:	4629      	mov	r1, r5
 800b4a6:	4620      	mov	r0, r4
 800b4a8:	f7ff febe 	bl	800b228 <rshift>
 800b4ac:	442f      	add	r7, r5
 800b4ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b4b2:	42bb      	cmp	r3, r7
 800b4b4:	da42      	bge.n	800b53c <__gethex+0x244>
 800b4b6:	9801      	ldr	r0, [sp, #4]
 800b4b8:	4621      	mov	r1, r4
 800b4ba:	f000 fe3b 	bl	800c134 <_Bfree>
 800b4be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	6013      	str	r3, [r2, #0]
 800b4c4:	25a3      	movs	r5, #163	@ 0xa3
 800b4c6:	e793      	b.n	800b3f0 <__gethex+0xf8>
 800b4c8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b4cc:	2a2e      	cmp	r2, #46	@ 0x2e
 800b4ce:	d012      	beq.n	800b4f6 <__gethex+0x1fe>
 800b4d0:	2b20      	cmp	r3, #32
 800b4d2:	d104      	bne.n	800b4de <__gethex+0x1e6>
 800b4d4:	f845 bb04 	str.w	fp, [r5], #4
 800b4d8:	f04f 0b00 	mov.w	fp, #0
 800b4dc:	465b      	mov	r3, fp
 800b4de:	7830      	ldrb	r0, [r6, #0]
 800b4e0:	9303      	str	r3, [sp, #12]
 800b4e2:	f7ff fef3 	bl	800b2cc <__hexdig_fun>
 800b4e6:	9b03      	ldr	r3, [sp, #12]
 800b4e8:	f000 000f 	and.w	r0, r0, #15
 800b4ec:	4098      	lsls	r0, r3
 800b4ee:	ea4b 0b00 	orr.w	fp, fp, r0
 800b4f2:	3304      	adds	r3, #4
 800b4f4:	e7ae      	b.n	800b454 <__gethex+0x15c>
 800b4f6:	45b1      	cmp	r9, r6
 800b4f8:	d8ea      	bhi.n	800b4d0 <__gethex+0x1d8>
 800b4fa:	492b      	ldr	r1, [pc, #172]	@ (800b5a8 <__gethex+0x2b0>)
 800b4fc:	9303      	str	r3, [sp, #12]
 800b4fe:	2201      	movs	r2, #1
 800b500:	4630      	mov	r0, r6
 800b502:	f7fe ffc5 	bl	800a490 <strncmp>
 800b506:	9b03      	ldr	r3, [sp, #12]
 800b508:	2800      	cmp	r0, #0
 800b50a:	d1e1      	bne.n	800b4d0 <__gethex+0x1d8>
 800b50c:	e7a2      	b.n	800b454 <__gethex+0x15c>
 800b50e:	1ea9      	subs	r1, r5, #2
 800b510:	4620      	mov	r0, r4
 800b512:	f001 fa60 	bl	800c9d6 <__any_on>
 800b516:	2800      	cmp	r0, #0
 800b518:	d0c2      	beq.n	800b4a0 <__gethex+0x1a8>
 800b51a:	f04f 0903 	mov.w	r9, #3
 800b51e:	e7c1      	b.n	800b4a4 <__gethex+0x1ac>
 800b520:	da09      	bge.n	800b536 <__gethex+0x23e>
 800b522:	1b75      	subs	r5, r6, r5
 800b524:	4621      	mov	r1, r4
 800b526:	9801      	ldr	r0, [sp, #4]
 800b528:	462a      	mov	r2, r5
 800b52a:	f001 f81b 	bl	800c564 <__lshift>
 800b52e:	1b7f      	subs	r7, r7, r5
 800b530:	4604      	mov	r4, r0
 800b532:	f100 0a14 	add.w	sl, r0, #20
 800b536:	f04f 0900 	mov.w	r9, #0
 800b53a:	e7b8      	b.n	800b4ae <__gethex+0x1b6>
 800b53c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b540:	42bd      	cmp	r5, r7
 800b542:	dd6f      	ble.n	800b624 <__gethex+0x32c>
 800b544:	1bed      	subs	r5, r5, r7
 800b546:	42ae      	cmp	r6, r5
 800b548:	dc34      	bgt.n	800b5b4 <__gethex+0x2bc>
 800b54a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b54e:	2b02      	cmp	r3, #2
 800b550:	d022      	beq.n	800b598 <__gethex+0x2a0>
 800b552:	2b03      	cmp	r3, #3
 800b554:	d024      	beq.n	800b5a0 <__gethex+0x2a8>
 800b556:	2b01      	cmp	r3, #1
 800b558:	d115      	bne.n	800b586 <__gethex+0x28e>
 800b55a:	42ae      	cmp	r6, r5
 800b55c:	d113      	bne.n	800b586 <__gethex+0x28e>
 800b55e:	2e01      	cmp	r6, #1
 800b560:	d10b      	bne.n	800b57a <__gethex+0x282>
 800b562:	9a02      	ldr	r2, [sp, #8]
 800b564:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b568:	6013      	str	r3, [r2, #0]
 800b56a:	2301      	movs	r3, #1
 800b56c:	6123      	str	r3, [r4, #16]
 800b56e:	f8ca 3000 	str.w	r3, [sl]
 800b572:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b574:	2562      	movs	r5, #98	@ 0x62
 800b576:	601c      	str	r4, [r3, #0]
 800b578:	e73a      	b.n	800b3f0 <__gethex+0xf8>
 800b57a:	1e71      	subs	r1, r6, #1
 800b57c:	4620      	mov	r0, r4
 800b57e:	f001 fa2a 	bl	800c9d6 <__any_on>
 800b582:	2800      	cmp	r0, #0
 800b584:	d1ed      	bne.n	800b562 <__gethex+0x26a>
 800b586:	9801      	ldr	r0, [sp, #4]
 800b588:	4621      	mov	r1, r4
 800b58a:	f000 fdd3 	bl	800c134 <_Bfree>
 800b58e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b590:	2300      	movs	r3, #0
 800b592:	6013      	str	r3, [r2, #0]
 800b594:	2550      	movs	r5, #80	@ 0x50
 800b596:	e72b      	b.n	800b3f0 <__gethex+0xf8>
 800b598:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d1f3      	bne.n	800b586 <__gethex+0x28e>
 800b59e:	e7e0      	b.n	800b562 <__gethex+0x26a>
 800b5a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d1dd      	bne.n	800b562 <__gethex+0x26a>
 800b5a6:	e7ee      	b.n	800b586 <__gethex+0x28e>
 800b5a8:	0800dcb5 	.word	0x0800dcb5
 800b5ac:	0800de8d 	.word	0x0800de8d
 800b5b0:	0800de9e 	.word	0x0800de9e
 800b5b4:	1e6f      	subs	r7, r5, #1
 800b5b6:	f1b9 0f00 	cmp.w	r9, #0
 800b5ba:	d130      	bne.n	800b61e <__gethex+0x326>
 800b5bc:	b127      	cbz	r7, 800b5c8 <__gethex+0x2d0>
 800b5be:	4639      	mov	r1, r7
 800b5c0:	4620      	mov	r0, r4
 800b5c2:	f001 fa08 	bl	800c9d6 <__any_on>
 800b5c6:	4681      	mov	r9, r0
 800b5c8:	117a      	asrs	r2, r7, #5
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b5d0:	f007 071f 	and.w	r7, r7, #31
 800b5d4:	40bb      	lsls	r3, r7
 800b5d6:	4213      	tst	r3, r2
 800b5d8:	4629      	mov	r1, r5
 800b5da:	4620      	mov	r0, r4
 800b5dc:	bf18      	it	ne
 800b5de:	f049 0902 	orrne.w	r9, r9, #2
 800b5e2:	f7ff fe21 	bl	800b228 <rshift>
 800b5e6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b5ea:	1b76      	subs	r6, r6, r5
 800b5ec:	2502      	movs	r5, #2
 800b5ee:	f1b9 0f00 	cmp.w	r9, #0
 800b5f2:	d047      	beq.n	800b684 <__gethex+0x38c>
 800b5f4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b5f8:	2b02      	cmp	r3, #2
 800b5fa:	d015      	beq.n	800b628 <__gethex+0x330>
 800b5fc:	2b03      	cmp	r3, #3
 800b5fe:	d017      	beq.n	800b630 <__gethex+0x338>
 800b600:	2b01      	cmp	r3, #1
 800b602:	d109      	bne.n	800b618 <__gethex+0x320>
 800b604:	f019 0f02 	tst.w	r9, #2
 800b608:	d006      	beq.n	800b618 <__gethex+0x320>
 800b60a:	f8da 3000 	ldr.w	r3, [sl]
 800b60e:	ea49 0903 	orr.w	r9, r9, r3
 800b612:	f019 0f01 	tst.w	r9, #1
 800b616:	d10e      	bne.n	800b636 <__gethex+0x33e>
 800b618:	f045 0510 	orr.w	r5, r5, #16
 800b61c:	e032      	b.n	800b684 <__gethex+0x38c>
 800b61e:	f04f 0901 	mov.w	r9, #1
 800b622:	e7d1      	b.n	800b5c8 <__gethex+0x2d0>
 800b624:	2501      	movs	r5, #1
 800b626:	e7e2      	b.n	800b5ee <__gethex+0x2f6>
 800b628:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b62a:	f1c3 0301 	rsb	r3, r3, #1
 800b62e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b630:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b632:	2b00      	cmp	r3, #0
 800b634:	d0f0      	beq.n	800b618 <__gethex+0x320>
 800b636:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b63a:	f104 0314 	add.w	r3, r4, #20
 800b63e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b642:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b646:	f04f 0c00 	mov.w	ip, #0
 800b64a:	4618      	mov	r0, r3
 800b64c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b650:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800b654:	d01b      	beq.n	800b68e <__gethex+0x396>
 800b656:	3201      	adds	r2, #1
 800b658:	6002      	str	r2, [r0, #0]
 800b65a:	2d02      	cmp	r5, #2
 800b65c:	f104 0314 	add.w	r3, r4, #20
 800b660:	d13c      	bne.n	800b6dc <__gethex+0x3e4>
 800b662:	f8d8 2000 	ldr.w	r2, [r8]
 800b666:	3a01      	subs	r2, #1
 800b668:	42b2      	cmp	r2, r6
 800b66a:	d109      	bne.n	800b680 <__gethex+0x388>
 800b66c:	1171      	asrs	r1, r6, #5
 800b66e:	2201      	movs	r2, #1
 800b670:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b674:	f006 061f 	and.w	r6, r6, #31
 800b678:	fa02 f606 	lsl.w	r6, r2, r6
 800b67c:	421e      	tst	r6, r3
 800b67e:	d13a      	bne.n	800b6f6 <__gethex+0x3fe>
 800b680:	f045 0520 	orr.w	r5, r5, #32
 800b684:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b686:	601c      	str	r4, [r3, #0]
 800b688:	9b02      	ldr	r3, [sp, #8]
 800b68a:	601f      	str	r7, [r3, #0]
 800b68c:	e6b0      	b.n	800b3f0 <__gethex+0xf8>
 800b68e:	4299      	cmp	r1, r3
 800b690:	f843 cc04 	str.w	ip, [r3, #-4]
 800b694:	d8d9      	bhi.n	800b64a <__gethex+0x352>
 800b696:	68a3      	ldr	r3, [r4, #8]
 800b698:	459b      	cmp	fp, r3
 800b69a:	db17      	blt.n	800b6cc <__gethex+0x3d4>
 800b69c:	6861      	ldr	r1, [r4, #4]
 800b69e:	9801      	ldr	r0, [sp, #4]
 800b6a0:	3101      	adds	r1, #1
 800b6a2:	f000 fd07 	bl	800c0b4 <_Balloc>
 800b6a6:	4681      	mov	r9, r0
 800b6a8:	b918      	cbnz	r0, 800b6b2 <__gethex+0x3ba>
 800b6aa:	4b1a      	ldr	r3, [pc, #104]	@ (800b714 <__gethex+0x41c>)
 800b6ac:	4602      	mov	r2, r0
 800b6ae:	2184      	movs	r1, #132	@ 0x84
 800b6b0:	e6c5      	b.n	800b43e <__gethex+0x146>
 800b6b2:	6922      	ldr	r2, [r4, #16]
 800b6b4:	3202      	adds	r2, #2
 800b6b6:	f104 010c 	add.w	r1, r4, #12
 800b6ba:	0092      	lsls	r2, r2, #2
 800b6bc:	300c      	adds	r0, #12
 800b6be:	f7fe ff48 	bl	800a552 <memcpy>
 800b6c2:	4621      	mov	r1, r4
 800b6c4:	9801      	ldr	r0, [sp, #4]
 800b6c6:	f000 fd35 	bl	800c134 <_Bfree>
 800b6ca:	464c      	mov	r4, r9
 800b6cc:	6923      	ldr	r3, [r4, #16]
 800b6ce:	1c5a      	adds	r2, r3, #1
 800b6d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b6d4:	6122      	str	r2, [r4, #16]
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	615a      	str	r2, [r3, #20]
 800b6da:	e7be      	b.n	800b65a <__gethex+0x362>
 800b6dc:	6922      	ldr	r2, [r4, #16]
 800b6de:	455a      	cmp	r2, fp
 800b6e0:	dd0b      	ble.n	800b6fa <__gethex+0x402>
 800b6e2:	2101      	movs	r1, #1
 800b6e4:	4620      	mov	r0, r4
 800b6e6:	f7ff fd9f 	bl	800b228 <rshift>
 800b6ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b6ee:	3701      	adds	r7, #1
 800b6f0:	42bb      	cmp	r3, r7
 800b6f2:	f6ff aee0 	blt.w	800b4b6 <__gethex+0x1be>
 800b6f6:	2501      	movs	r5, #1
 800b6f8:	e7c2      	b.n	800b680 <__gethex+0x388>
 800b6fa:	f016 061f 	ands.w	r6, r6, #31
 800b6fe:	d0fa      	beq.n	800b6f6 <__gethex+0x3fe>
 800b700:	4453      	add	r3, sl
 800b702:	f1c6 0620 	rsb	r6, r6, #32
 800b706:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b70a:	f000 fdc5 	bl	800c298 <__hi0bits>
 800b70e:	42b0      	cmp	r0, r6
 800b710:	dbe7      	blt.n	800b6e2 <__gethex+0x3ea>
 800b712:	e7f0      	b.n	800b6f6 <__gethex+0x3fe>
 800b714:	0800de8d 	.word	0x0800de8d

0800b718 <L_shift>:
 800b718:	f1c2 0208 	rsb	r2, r2, #8
 800b71c:	0092      	lsls	r2, r2, #2
 800b71e:	b570      	push	{r4, r5, r6, lr}
 800b720:	f1c2 0620 	rsb	r6, r2, #32
 800b724:	6843      	ldr	r3, [r0, #4]
 800b726:	6804      	ldr	r4, [r0, #0]
 800b728:	fa03 f506 	lsl.w	r5, r3, r6
 800b72c:	432c      	orrs	r4, r5
 800b72e:	40d3      	lsrs	r3, r2
 800b730:	6004      	str	r4, [r0, #0]
 800b732:	f840 3f04 	str.w	r3, [r0, #4]!
 800b736:	4288      	cmp	r0, r1
 800b738:	d3f4      	bcc.n	800b724 <L_shift+0xc>
 800b73a:	bd70      	pop	{r4, r5, r6, pc}

0800b73c <__match>:
 800b73c:	b530      	push	{r4, r5, lr}
 800b73e:	6803      	ldr	r3, [r0, #0]
 800b740:	3301      	adds	r3, #1
 800b742:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b746:	b914      	cbnz	r4, 800b74e <__match+0x12>
 800b748:	6003      	str	r3, [r0, #0]
 800b74a:	2001      	movs	r0, #1
 800b74c:	bd30      	pop	{r4, r5, pc}
 800b74e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b752:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b756:	2d19      	cmp	r5, #25
 800b758:	bf98      	it	ls
 800b75a:	3220      	addls	r2, #32
 800b75c:	42a2      	cmp	r2, r4
 800b75e:	d0f0      	beq.n	800b742 <__match+0x6>
 800b760:	2000      	movs	r0, #0
 800b762:	e7f3      	b.n	800b74c <__match+0x10>

0800b764 <__hexnan>:
 800b764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b768:	680b      	ldr	r3, [r1, #0]
 800b76a:	6801      	ldr	r1, [r0, #0]
 800b76c:	115e      	asrs	r6, r3, #5
 800b76e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b772:	f013 031f 	ands.w	r3, r3, #31
 800b776:	b087      	sub	sp, #28
 800b778:	bf18      	it	ne
 800b77a:	3604      	addne	r6, #4
 800b77c:	2500      	movs	r5, #0
 800b77e:	1f37      	subs	r7, r6, #4
 800b780:	4682      	mov	sl, r0
 800b782:	4690      	mov	r8, r2
 800b784:	9301      	str	r3, [sp, #4]
 800b786:	f846 5c04 	str.w	r5, [r6, #-4]
 800b78a:	46b9      	mov	r9, r7
 800b78c:	463c      	mov	r4, r7
 800b78e:	9502      	str	r5, [sp, #8]
 800b790:	46ab      	mov	fp, r5
 800b792:	784a      	ldrb	r2, [r1, #1]
 800b794:	1c4b      	adds	r3, r1, #1
 800b796:	9303      	str	r3, [sp, #12]
 800b798:	b342      	cbz	r2, 800b7ec <__hexnan+0x88>
 800b79a:	4610      	mov	r0, r2
 800b79c:	9105      	str	r1, [sp, #20]
 800b79e:	9204      	str	r2, [sp, #16]
 800b7a0:	f7ff fd94 	bl	800b2cc <__hexdig_fun>
 800b7a4:	2800      	cmp	r0, #0
 800b7a6:	d151      	bne.n	800b84c <__hexnan+0xe8>
 800b7a8:	9a04      	ldr	r2, [sp, #16]
 800b7aa:	9905      	ldr	r1, [sp, #20]
 800b7ac:	2a20      	cmp	r2, #32
 800b7ae:	d818      	bhi.n	800b7e2 <__hexnan+0x7e>
 800b7b0:	9b02      	ldr	r3, [sp, #8]
 800b7b2:	459b      	cmp	fp, r3
 800b7b4:	dd13      	ble.n	800b7de <__hexnan+0x7a>
 800b7b6:	454c      	cmp	r4, r9
 800b7b8:	d206      	bcs.n	800b7c8 <__hexnan+0x64>
 800b7ba:	2d07      	cmp	r5, #7
 800b7bc:	dc04      	bgt.n	800b7c8 <__hexnan+0x64>
 800b7be:	462a      	mov	r2, r5
 800b7c0:	4649      	mov	r1, r9
 800b7c2:	4620      	mov	r0, r4
 800b7c4:	f7ff ffa8 	bl	800b718 <L_shift>
 800b7c8:	4544      	cmp	r4, r8
 800b7ca:	d952      	bls.n	800b872 <__hexnan+0x10e>
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	f1a4 0904 	sub.w	r9, r4, #4
 800b7d2:	f844 3c04 	str.w	r3, [r4, #-4]
 800b7d6:	f8cd b008 	str.w	fp, [sp, #8]
 800b7da:	464c      	mov	r4, r9
 800b7dc:	461d      	mov	r5, r3
 800b7de:	9903      	ldr	r1, [sp, #12]
 800b7e0:	e7d7      	b.n	800b792 <__hexnan+0x2e>
 800b7e2:	2a29      	cmp	r2, #41	@ 0x29
 800b7e4:	d157      	bne.n	800b896 <__hexnan+0x132>
 800b7e6:	3102      	adds	r1, #2
 800b7e8:	f8ca 1000 	str.w	r1, [sl]
 800b7ec:	f1bb 0f00 	cmp.w	fp, #0
 800b7f0:	d051      	beq.n	800b896 <__hexnan+0x132>
 800b7f2:	454c      	cmp	r4, r9
 800b7f4:	d206      	bcs.n	800b804 <__hexnan+0xa0>
 800b7f6:	2d07      	cmp	r5, #7
 800b7f8:	dc04      	bgt.n	800b804 <__hexnan+0xa0>
 800b7fa:	462a      	mov	r2, r5
 800b7fc:	4649      	mov	r1, r9
 800b7fe:	4620      	mov	r0, r4
 800b800:	f7ff ff8a 	bl	800b718 <L_shift>
 800b804:	4544      	cmp	r4, r8
 800b806:	d936      	bls.n	800b876 <__hexnan+0x112>
 800b808:	f1a8 0204 	sub.w	r2, r8, #4
 800b80c:	4623      	mov	r3, r4
 800b80e:	f853 1b04 	ldr.w	r1, [r3], #4
 800b812:	f842 1f04 	str.w	r1, [r2, #4]!
 800b816:	429f      	cmp	r7, r3
 800b818:	d2f9      	bcs.n	800b80e <__hexnan+0xaa>
 800b81a:	1b3b      	subs	r3, r7, r4
 800b81c:	f023 0303 	bic.w	r3, r3, #3
 800b820:	3304      	adds	r3, #4
 800b822:	3401      	adds	r4, #1
 800b824:	3e03      	subs	r6, #3
 800b826:	42b4      	cmp	r4, r6
 800b828:	bf88      	it	hi
 800b82a:	2304      	movhi	r3, #4
 800b82c:	4443      	add	r3, r8
 800b82e:	2200      	movs	r2, #0
 800b830:	f843 2b04 	str.w	r2, [r3], #4
 800b834:	429f      	cmp	r7, r3
 800b836:	d2fb      	bcs.n	800b830 <__hexnan+0xcc>
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	b91b      	cbnz	r3, 800b844 <__hexnan+0xe0>
 800b83c:	4547      	cmp	r7, r8
 800b83e:	d128      	bne.n	800b892 <__hexnan+0x12e>
 800b840:	2301      	movs	r3, #1
 800b842:	603b      	str	r3, [r7, #0]
 800b844:	2005      	movs	r0, #5
 800b846:	b007      	add	sp, #28
 800b848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b84c:	3501      	adds	r5, #1
 800b84e:	2d08      	cmp	r5, #8
 800b850:	f10b 0b01 	add.w	fp, fp, #1
 800b854:	dd06      	ble.n	800b864 <__hexnan+0x100>
 800b856:	4544      	cmp	r4, r8
 800b858:	d9c1      	bls.n	800b7de <__hexnan+0x7a>
 800b85a:	2300      	movs	r3, #0
 800b85c:	f844 3c04 	str.w	r3, [r4, #-4]
 800b860:	2501      	movs	r5, #1
 800b862:	3c04      	subs	r4, #4
 800b864:	6822      	ldr	r2, [r4, #0]
 800b866:	f000 000f 	and.w	r0, r0, #15
 800b86a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b86e:	6020      	str	r0, [r4, #0]
 800b870:	e7b5      	b.n	800b7de <__hexnan+0x7a>
 800b872:	2508      	movs	r5, #8
 800b874:	e7b3      	b.n	800b7de <__hexnan+0x7a>
 800b876:	9b01      	ldr	r3, [sp, #4]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d0dd      	beq.n	800b838 <__hexnan+0xd4>
 800b87c:	f1c3 0320 	rsb	r3, r3, #32
 800b880:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b884:	40da      	lsrs	r2, r3
 800b886:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b88a:	4013      	ands	r3, r2
 800b88c:	f846 3c04 	str.w	r3, [r6, #-4]
 800b890:	e7d2      	b.n	800b838 <__hexnan+0xd4>
 800b892:	3f04      	subs	r7, #4
 800b894:	e7d0      	b.n	800b838 <__hexnan+0xd4>
 800b896:	2004      	movs	r0, #4
 800b898:	e7d5      	b.n	800b846 <__hexnan+0xe2>

0800b89a <__ssputs_r>:
 800b89a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b89e:	688e      	ldr	r6, [r1, #8]
 800b8a0:	461f      	mov	r7, r3
 800b8a2:	42be      	cmp	r6, r7
 800b8a4:	680b      	ldr	r3, [r1, #0]
 800b8a6:	4682      	mov	sl, r0
 800b8a8:	460c      	mov	r4, r1
 800b8aa:	4690      	mov	r8, r2
 800b8ac:	d82d      	bhi.n	800b90a <__ssputs_r+0x70>
 800b8ae:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b8b2:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b8b6:	d026      	beq.n	800b906 <__ssputs_r+0x6c>
 800b8b8:	6965      	ldr	r5, [r4, #20]
 800b8ba:	6909      	ldr	r1, [r1, #16]
 800b8bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b8c0:	eba3 0901 	sub.w	r9, r3, r1
 800b8c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b8c8:	1c7b      	adds	r3, r7, #1
 800b8ca:	444b      	add	r3, r9
 800b8cc:	106d      	asrs	r5, r5, #1
 800b8ce:	429d      	cmp	r5, r3
 800b8d0:	bf38      	it	cc
 800b8d2:	461d      	movcc	r5, r3
 800b8d4:	0553      	lsls	r3, r2, #21
 800b8d6:	d527      	bpl.n	800b928 <__ssputs_r+0x8e>
 800b8d8:	4629      	mov	r1, r5
 800b8da:	f000 faa1 	bl	800be20 <_malloc_r>
 800b8de:	4606      	mov	r6, r0
 800b8e0:	b360      	cbz	r0, 800b93c <__ssputs_r+0xa2>
 800b8e2:	6921      	ldr	r1, [r4, #16]
 800b8e4:	464a      	mov	r2, r9
 800b8e6:	f7fe fe34 	bl	800a552 <memcpy>
 800b8ea:	89a3      	ldrh	r3, [r4, #12]
 800b8ec:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b8f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b8f4:	81a3      	strh	r3, [r4, #12]
 800b8f6:	6126      	str	r6, [r4, #16]
 800b8f8:	6165      	str	r5, [r4, #20]
 800b8fa:	444e      	add	r6, r9
 800b8fc:	eba5 0509 	sub.w	r5, r5, r9
 800b900:	6026      	str	r6, [r4, #0]
 800b902:	60a5      	str	r5, [r4, #8]
 800b904:	463e      	mov	r6, r7
 800b906:	42be      	cmp	r6, r7
 800b908:	d900      	bls.n	800b90c <__ssputs_r+0x72>
 800b90a:	463e      	mov	r6, r7
 800b90c:	6820      	ldr	r0, [r4, #0]
 800b90e:	4632      	mov	r2, r6
 800b910:	4641      	mov	r1, r8
 800b912:	f001 f9f6 	bl	800cd02 <memmove>
 800b916:	68a3      	ldr	r3, [r4, #8]
 800b918:	1b9b      	subs	r3, r3, r6
 800b91a:	60a3      	str	r3, [r4, #8]
 800b91c:	6823      	ldr	r3, [r4, #0]
 800b91e:	4433      	add	r3, r6
 800b920:	6023      	str	r3, [r4, #0]
 800b922:	2000      	movs	r0, #0
 800b924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b928:	462a      	mov	r2, r5
 800b92a:	f001 f8b8 	bl	800ca9e <_realloc_r>
 800b92e:	4606      	mov	r6, r0
 800b930:	2800      	cmp	r0, #0
 800b932:	d1e0      	bne.n	800b8f6 <__ssputs_r+0x5c>
 800b934:	6921      	ldr	r1, [r4, #16]
 800b936:	4650      	mov	r0, sl
 800b938:	f001 faa8 	bl	800ce8c <_free_r>
 800b93c:	230c      	movs	r3, #12
 800b93e:	f8ca 3000 	str.w	r3, [sl]
 800b942:	89a3      	ldrh	r3, [r4, #12]
 800b944:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b948:	81a3      	strh	r3, [r4, #12]
 800b94a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b94e:	e7e9      	b.n	800b924 <__ssputs_r+0x8a>

0800b950 <_svfiprintf_r>:
 800b950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b954:	4698      	mov	r8, r3
 800b956:	898b      	ldrh	r3, [r1, #12]
 800b958:	061b      	lsls	r3, r3, #24
 800b95a:	b09d      	sub	sp, #116	@ 0x74
 800b95c:	4607      	mov	r7, r0
 800b95e:	460d      	mov	r5, r1
 800b960:	4614      	mov	r4, r2
 800b962:	d510      	bpl.n	800b986 <_svfiprintf_r+0x36>
 800b964:	690b      	ldr	r3, [r1, #16]
 800b966:	b973      	cbnz	r3, 800b986 <_svfiprintf_r+0x36>
 800b968:	2140      	movs	r1, #64	@ 0x40
 800b96a:	f000 fa59 	bl	800be20 <_malloc_r>
 800b96e:	6028      	str	r0, [r5, #0]
 800b970:	6128      	str	r0, [r5, #16]
 800b972:	b930      	cbnz	r0, 800b982 <_svfiprintf_r+0x32>
 800b974:	230c      	movs	r3, #12
 800b976:	603b      	str	r3, [r7, #0]
 800b978:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b97c:	b01d      	add	sp, #116	@ 0x74
 800b97e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b982:	2340      	movs	r3, #64	@ 0x40
 800b984:	616b      	str	r3, [r5, #20]
 800b986:	2300      	movs	r3, #0
 800b988:	9309      	str	r3, [sp, #36]	@ 0x24
 800b98a:	2320      	movs	r3, #32
 800b98c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b990:	f8cd 800c 	str.w	r8, [sp, #12]
 800b994:	2330      	movs	r3, #48	@ 0x30
 800b996:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bb34 <_svfiprintf_r+0x1e4>
 800b99a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b99e:	f04f 0901 	mov.w	r9, #1
 800b9a2:	4623      	mov	r3, r4
 800b9a4:	469a      	mov	sl, r3
 800b9a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9aa:	b10a      	cbz	r2, 800b9b0 <_svfiprintf_r+0x60>
 800b9ac:	2a25      	cmp	r2, #37	@ 0x25
 800b9ae:	d1f9      	bne.n	800b9a4 <_svfiprintf_r+0x54>
 800b9b0:	ebba 0b04 	subs.w	fp, sl, r4
 800b9b4:	d00b      	beq.n	800b9ce <_svfiprintf_r+0x7e>
 800b9b6:	465b      	mov	r3, fp
 800b9b8:	4622      	mov	r2, r4
 800b9ba:	4629      	mov	r1, r5
 800b9bc:	4638      	mov	r0, r7
 800b9be:	f7ff ff6c 	bl	800b89a <__ssputs_r>
 800b9c2:	3001      	adds	r0, #1
 800b9c4:	f000 80a7 	beq.w	800bb16 <_svfiprintf_r+0x1c6>
 800b9c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b9ca:	445a      	add	r2, fp
 800b9cc:	9209      	str	r2, [sp, #36]	@ 0x24
 800b9ce:	f89a 3000 	ldrb.w	r3, [sl]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	f000 809f 	beq.w	800bb16 <_svfiprintf_r+0x1c6>
 800b9d8:	2300      	movs	r3, #0
 800b9da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b9de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9e2:	f10a 0a01 	add.w	sl, sl, #1
 800b9e6:	9304      	str	r3, [sp, #16]
 800b9e8:	9307      	str	r3, [sp, #28]
 800b9ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b9ee:	931a      	str	r3, [sp, #104]	@ 0x68
 800b9f0:	4654      	mov	r4, sl
 800b9f2:	2205      	movs	r2, #5
 800b9f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9f8:	484e      	ldr	r0, [pc, #312]	@ (800bb34 <_svfiprintf_r+0x1e4>)
 800b9fa:	f7f4 fc01 	bl	8000200 <memchr>
 800b9fe:	9a04      	ldr	r2, [sp, #16]
 800ba00:	b9d8      	cbnz	r0, 800ba3a <_svfiprintf_r+0xea>
 800ba02:	06d0      	lsls	r0, r2, #27
 800ba04:	bf44      	itt	mi
 800ba06:	2320      	movmi	r3, #32
 800ba08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ba0c:	0711      	lsls	r1, r2, #28
 800ba0e:	bf44      	itt	mi
 800ba10:	232b      	movmi	r3, #43	@ 0x2b
 800ba12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ba16:	f89a 3000 	ldrb.w	r3, [sl]
 800ba1a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba1c:	d015      	beq.n	800ba4a <_svfiprintf_r+0xfa>
 800ba1e:	9a07      	ldr	r2, [sp, #28]
 800ba20:	4654      	mov	r4, sl
 800ba22:	2000      	movs	r0, #0
 800ba24:	f04f 0c0a 	mov.w	ip, #10
 800ba28:	4621      	mov	r1, r4
 800ba2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba2e:	3b30      	subs	r3, #48	@ 0x30
 800ba30:	2b09      	cmp	r3, #9
 800ba32:	d94b      	bls.n	800bacc <_svfiprintf_r+0x17c>
 800ba34:	b1b0      	cbz	r0, 800ba64 <_svfiprintf_r+0x114>
 800ba36:	9207      	str	r2, [sp, #28]
 800ba38:	e014      	b.n	800ba64 <_svfiprintf_r+0x114>
 800ba3a:	eba0 0308 	sub.w	r3, r0, r8
 800ba3e:	fa09 f303 	lsl.w	r3, r9, r3
 800ba42:	4313      	orrs	r3, r2
 800ba44:	9304      	str	r3, [sp, #16]
 800ba46:	46a2      	mov	sl, r4
 800ba48:	e7d2      	b.n	800b9f0 <_svfiprintf_r+0xa0>
 800ba4a:	9b03      	ldr	r3, [sp, #12]
 800ba4c:	1d19      	adds	r1, r3, #4
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	9103      	str	r1, [sp, #12]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	bfbb      	ittet	lt
 800ba56:	425b      	neglt	r3, r3
 800ba58:	f042 0202 	orrlt.w	r2, r2, #2
 800ba5c:	9307      	strge	r3, [sp, #28]
 800ba5e:	9307      	strlt	r3, [sp, #28]
 800ba60:	bfb8      	it	lt
 800ba62:	9204      	strlt	r2, [sp, #16]
 800ba64:	7823      	ldrb	r3, [r4, #0]
 800ba66:	2b2e      	cmp	r3, #46	@ 0x2e
 800ba68:	d10a      	bne.n	800ba80 <_svfiprintf_r+0x130>
 800ba6a:	7863      	ldrb	r3, [r4, #1]
 800ba6c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba6e:	d132      	bne.n	800bad6 <_svfiprintf_r+0x186>
 800ba70:	9b03      	ldr	r3, [sp, #12]
 800ba72:	1d1a      	adds	r2, r3, #4
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	9203      	str	r2, [sp, #12]
 800ba78:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ba7c:	3402      	adds	r4, #2
 800ba7e:	9305      	str	r3, [sp, #20]
 800ba80:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bb44 <_svfiprintf_r+0x1f4>
 800ba84:	7821      	ldrb	r1, [r4, #0]
 800ba86:	2203      	movs	r2, #3
 800ba88:	4650      	mov	r0, sl
 800ba8a:	f7f4 fbb9 	bl	8000200 <memchr>
 800ba8e:	b138      	cbz	r0, 800baa0 <_svfiprintf_r+0x150>
 800ba90:	9b04      	ldr	r3, [sp, #16]
 800ba92:	eba0 000a 	sub.w	r0, r0, sl
 800ba96:	2240      	movs	r2, #64	@ 0x40
 800ba98:	4082      	lsls	r2, r0
 800ba9a:	4313      	orrs	r3, r2
 800ba9c:	3401      	adds	r4, #1
 800ba9e:	9304      	str	r3, [sp, #16]
 800baa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800baa4:	4824      	ldr	r0, [pc, #144]	@ (800bb38 <_svfiprintf_r+0x1e8>)
 800baa6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800baaa:	2206      	movs	r2, #6
 800baac:	f7f4 fba8 	bl	8000200 <memchr>
 800bab0:	2800      	cmp	r0, #0
 800bab2:	d036      	beq.n	800bb22 <_svfiprintf_r+0x1d2>
 800bab4:	4b21      	ldr	r3, [pc, #132]	@ (800bb3c <_svfiprintf_r+0x1ec>)
 800bab6:	bb1b      	cbnz	r3, 800bb00 <_svfiprintf_r+0x1b0>
 800bab8:	9b03      	ldr	r3, [sp, #12]
 800baba:	3307      	adds	r3, #7
 800babc:	f023 0307 	bic.w	r3, r3, #7
 800bac0:	3308      	adds	r3, #8
 800bac2:	9303      	str	r3, [sp, #12]
 800bac4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bac6:	4433      	add	r3, r6
 800bac8:	9309      	str	r3, [sp, #36]	@ 0x24
 800baca:	e76a      	b.n	800b9a2 <_svfiprintf_r+0x52>
 800bacc:	fb0c 3202 	mla	r2, ip, r2, r3
 800bad0:	460c      	mov	r4, r1
 800bad2:	2001      	movs	r0, #1
 800bad4:	e7a8      	b.n	800ba28 <_svfiprintf_r+0xd8>
 800bad6:	2300      	movs	r3, #0
 800bad8:	3401      	adds	r4, #1
 800bada:	9305      	str	r3, [sp, #20]
 800badc:	4619      	mov	r1, r3
 800bade:	f04f 0c0a 	mov.w	ip, #10
 800bae2:	4620      	mov	r0, r4
 800bae4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bae8:	3a30      	subs	r2, #48	@ 0x30
 800baea:	2a09      	cmp	r2, #9
 800baec:	d903      	bls.n	800baf6 <_svfiprintf_r+0x1a6>
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d0c6      	beq.n	800ba80 <_svfiprintf_r+0x130>
 800baf2:	9105      	str	r1, [sp, #20]
 800baf4:	e7c4      	b.n	800ba80 <_svfiprintf_r+0x130>
 800baf6:	fb0c 2101 	mla	r1, ip, r1, r2
 800bafa:	4604      	mov	r4, r0
 800bafc:	2301      	movs	r3, #1
 800bafe:	e7f0      	b.n	800bae2 <_svfiprintf_r+0x192>
 800bb00:	ab03      	add	r3, sp, #12
 800bb02:	9300      	str	r3, [sp, #0]
 800bb04:	462a      	mov	r2, r5
 800bb06:	4b0e      	ldr	r3, [pc, #56]	@ (800bb40 <_svfiprintf_r+0x1f0>)
 800bb08:	a904      	add	r1, sp, #16
 800bb0a:	4638      	mov	r0, r7
 800bb0c:	f7fc ff1e 	bl	800894c <_printf_float>
 800bb10:	1c42      	adds	r2, r0, #1
 800bb12:	4606      	mov	r6, r0
 800bb14:	d1d6      	bne.n	800bac4 <_svfiprintf_r+0x174>
 800bb16:	89ab      	ldrh	r3, [r5, #12]
 800bb18:	065b      	lsls	r3, r3, #25
 800bb1a:	f53f af2d 	bmi.w	800b978 <_svfiprintf_r+0x28>
 800bb1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bb20:	e72c      	b.n	800b97c <_svfiprintf_r+0x2c>
 800bb22:	ab03      	add	r3, sp, #12
 800bb24:	9300      	str	r3, [sp, #0]
 800bb26:	462a      	mov	r2, r5
 800bb28:	4b05      	ldr	r3, [pc, #20]	@ (800bb40 <_svfiprintf_r+0x1f0>)
 800bb2a:	a904      	add	r1, sp, #16
 800bb2c:	4638      	mov	r0, r7
 800bb2e:	f7fd f9a5 	bl	8008e7c <_printf_i>
 800bb32:	e7ed      	b.n	800bb10 <_svfiprintf_r+0x1c0>
 800bb34:	0800defe 	.word	0x0800defe
 800bb38:	0800df08 	.word	0x0800df08
 800bb3c:	0800894d 	.word	0x0800894d
 800bb40:	0800b89b 	.word	0x0800b89b
 800bb44:	0800df04 	.word	0x0800df04

0800bb48 <__sfputc_r>:
 800bb48:	6893      	ldr	r3, [r2, #8]
 800bb4a:	3b01      	subs	r3, #1
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	b410      	push	{r4}
 800bb50:	6093      	str	r3, [r2, #8]
 800bb52:	da08      	bge.n	800bb66 <__sfputc_r+0x1e>
 800bb54:	6994      	ldr	r4, [r2, #24]
 800bb56:	42a3      	cmp	r3, r4
 800bb58:	db01      	blt.n	800bb5e <__sfputc_r+0x16>
 800bb5a:	290a      	cmp	r1, #10
 800bb5c:	d103      	bne.n	800bb66 <__sfputc_r+0x1e>
 800bb5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb62:	f000 bfca 	b.w	800cafa <__swbuf_r>
 800bb66:	6813      	ldr	r3, [r2, #0]
 800bb68:	1c58      	adds	r0, r3, #1
 800bb6a:	6010      	str	r0, [r2, #0]
 800bb6c:	7019      	strb	r1, [r3, #0]
 800bb6e:	4608      	mov	r0, r1
 800bb70:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb74:	4770      	bx	lr

0800bb76 <__sfputs_r>:
 800bb76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb78:	4606      	mov	r6, r0
 800bb7a:	460f      	mov	r7, r1
 800bb7c:	4614      	mov	r4, r2
 800bb7e:	18d5      	adds	r5, r2, r3
 800bb80:	42ac      	cmp	r4, r5
 800bb82:	d101      	bne.n	800bb88 <__sfputs_r+0x12>
 800bb84:	2000      	movs	r0, #0
 800bb86:	e007      	b.n	800bb98 <__sfputs_r+0x22>
 800bb88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb8c:	463a      	mov	r2, r7
 800bb8e:	4630      	mov	r0, r6
 800bb90:	f7ff ffda 	bl	800bb48 <__sfputc_r>
 800bb94:	1c43      	adds	r3, r0, #1
 800bb96:	d1f3      	bne.n	800bb80 <__sfputs_r+0xa>
 800bb98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bb9c <_vfiprintf_r>:
 800bb9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bba0:	460d      	mov	r5, r1
 800bba2:	b09d      	sub	sp, #116	@ 0x74
 800bba4:	4614      	mov	r4, r2
 800bba6:	4698      	mov	r8, r3
 800bba8:	4606      	mov	r6, r0
 800bbaa:	b118      	cbz	r0, 800bbb4 <_vfiprintf_r+0x18>
 800bbac:	6a03      	ldr	r3, [r0, #32]
 800bbae:	b90b      	cbnz	r3, 800bbb4 <_vfiprintf_r+0x18>
 800bbb0:	f7fd fd44 	bl	800963c <__sinit>
 800bbb4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bbb6:	07d9      	lsls	r1, r3, #31
 800bbb8:	d405      	bmi.n	800bbc6 <_vfiprintf_r+0x2a>
 800bbba:	89ab      	ldrh	r3, [r5, #12]
 800bbbc:	059a      	lsls	r2, r3, #22
 800bbbe:	d402      	bmi.n	800bbc6 <_vfiprintf_r+0x2a>
 800bbc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bbc2:	f7fe fcc4 	bl	800a54e <__retarget_lock_acquire_recursive>
 800bbc6:	89ab      	ldrh	r3, [r5, #12]
 800bbc8:	071b      	lsls	r3, r3, #28
 800bbca:	d501      	bpl.n	800bbd0 <_vfiprintf_r+0x34>
 800bbcc:	692b      	ldr	r3, [r5, #16]
 800bbce:	b99b      	cbnz	r3, 800bbf8 <_vfiprintf_r+0x5c>
 800bbd0:	4629      	mov	r1, r5
 800bbd2:	4630      	mov	r0, r6
 800bbd4:	f000 ffd0 	bl	800cb78 <__swsetup_r>
 800bbd8:	b170      	cbz	r0, 800bbf8 <_vfiprintf_r+0x5c>
 800bbda:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bbdc:	07dc      	lsls	r4, r3, #31
 800bbde:	d504      	bpl.n	800bbea <_vfiprintf_r+0x4e>
 800bbe0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bbe4:	b01d      	add	sp, #116	@ 0x74
 800bbe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbea:	89ab      	ldrh	r3, [r5, #12]
 800bbec:	0598      	lsls	r0, r3, #22
 800bbee:	d4f7      	bmi.n	800bbe0 <_vfiprintf_r+0x44>
 800bbf0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bbf2:	f7fe fcad 	bl	800a550 <__retarget_lock_release_recursive>
 800bbf6:	e7f3      	b.n	800bbe0 <_vfiprintf_r+0x44>
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbfc:	2320      	movs	r3, #32
 800bbfe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bc02:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc06:	2330      	movs	r3, #48	@ 0x30
 800bc08:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bdb8 <_vfiprintf_r+0x21c>
 800bc0c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bc10:	f04f 0901 	mov.w	r9, #1
 800bc14:	4623      	mov	r3, r4
 800bc16:	469a      	mov	sl, r3
 800bc18:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc1c:	b10a      	cbz	r2, 800bc22 <_vfiprintf_r+0x86>
 800bc1e:	2a25      	cmp	r2, #37	@ 0x25
 800bc20:	d1f9      	bne.n	800bc16 <_vfiprintf_r+0x7a>
 800bc22:	ebba 0b04 	subs.w	fp, sl, r4
 800bc26:	d00b      	beq.n	800bc40 <_vfiprintf_r+0xa4>
 800bc28:	465b      	mov	r3, fp
 800bc2a:	4622      	mov	r2, r4
 800bc2c:	4629      	mov	r1, r5
 800bc2e:	4630      	mov	r0, r6
 800bc30:	f7ff ffa1 	bl	800bb76 <__sfputs_r>
 800bc34:	3001      	adds	r0, #1
 800bc36:	f000 80a7 	beq.w	800bd88 <_vfiprintf_r+0x1ec>
 800bc3a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc3c:	445a      	add	r2, fp
 800bc3e:	9209      	str	r2, [sp, #36]	@ 0x24
 800bc40:	f89a 3000 	ldrb.w	r3, [sl]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	f000 809f 	beq.w	800bd88 <_vfiprintf_r+0x1ec>
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bc50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc54:	f10a 0a01 	add.w	sl, sl, #1
 800bc58:	9304      	str	r3, [sp, #16]
 800bc5a:	9307      	str	r3, [sp, #28]
 800bc5c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bc60:	931a      	str	r3, [sp, #104]	@ 0x68
 800bc62:	4654      	mov	r4, sl
 800bc64:	2205      	movs	r2, #5
 800bc66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc6a:	4853      	ldr	r0, [pc, #332]	@ (800bdb8 <_vfiprintf_r+0x21c>)
 800bc6c:	f7f4 fac8 	bl	8000200 <memchr>
 800bc70:	9a04      	ldr	r2, [sp, #16]
 800bc72:	b9d8      	cbnz	r0, 800bcac <_vfiprintf_r+0x110>
 800bc74:	06d1      	lsls	r1, r2, #27
 800bc76:	bf44      	itt	mi
 800bc78:	2320      	movmi	r3, #32
 800bc7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc7e:	0713      	lsls	r3, r2, #28
 800bc80:	bf44      	itt	mi
 800bc82:	232b      	movmi	r3, #43	@ 0x2b
 800bc84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc88:	f89a 3000 	ldrb.w	r3, [sl]
 800bc8c:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc8e:	d015      	beq.n	800bcbc <_vfiprintf_r+0x120>
 800bc90:	9a07      	ldr	r2, [sp, #28]
 800bc92:	4654      	mov	r4, sl
 800bc94:	2000      	movs	r0, #0
 800bc96:	f04f 0c0a 	mov.w	ip, #10
 800bc9a:	4621      	mov	r1, r4
 800bc9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bca0:	3b30      	subs	r3, #48	@ 0x30
 800bca2:	2b09      	cmp	r3, #9
 800bca4:	d94b      	bls.n	800bd3e <_vfiprintf_r+0x1a2>
 800bca6:	b1b0      	cbz	r0, 800bcd6 <_vfiprintf_r+0x13a>
 800bca8:	9207      	str	r2, [sp, #28]
 800bcaa:	e014      	b.n	800bcd6 <_vfiprintf_r+0x13a>
 800bcac:	eba0 0308 	sub.w	r3, r0, r8
 800bcb0:	fa09 f303 	lsl.w	r3, r9, r3
 800bcb4:	4313      	orrs	r3, r2
 800bcb6:	9304      	str	r3, [sp, #16]
 800bcb8:	46a2      	mov	sl, r4
 800bcba:	e7d2      	b.n	800bc62 <_vfiprintf_r+0xc6>
 800bcbc:	9b03      	ldr	r3, [sp, #12]
 800bcbe:	1d19      	adds	r1, r3, #4
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	9103      	str	r1, [sp, #12]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	bfbb      	ittet	lt
 800bcc8:	425b      	neglt	r3, r3
 800bcca:	f042 0202 	orrlt.w	r2, r2, #2
 800bcce:	9307      	strge	r3, [sp, #28]
 800bcd0:	9307      	strlt	r3, [sp, #28]
 800bcd2:	bfb8      	it	lt
 800bcd4:	9204      	strlt	r2, [sp, #16]
 800bcd6:	7823      	ldrb	r3, [r4, #0]
 800bcd8:	2b2e      	cmp	r3, #46	@ 0x2e
 800bcda:	d10a      	bne.n	800bcf2 <_vfiprintf_r+0x156>
 800bcdc:	7863      	ldrb	r3, [r4, #1]
 800bcde:	2b2a      	cmp	r3, #42	@ 0x2a
 800bce0:	d132      	bne.n	800bd48 <_vfiprintf_r+0x1ac>
 800bce2:	9b03      	ldr	r3, [sp, #12]
 800bce4:	1d1a      	adds	r2, r3, #4
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	9203      	str	r2, [sp, #12]
 800bcea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bcee:	3402      	adds	r4, #2
 800bcf0:	9305      	str	r3, [sp, #20]
 800bcf2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bdc8 <_vfiprintf_r+0x22c>
 800bcf6:	7821      	ldrb	r1, [r4, #0]
 800bcf8:	2203      	movs	r2, #3
 800bcfa:	4650      	mov	r0, sl
 800bcfc:	f7f4 fa80 	bl	8000200 <memchr>
 800bd00:	b138      	cbz	r0, 800bd12 <_vfiprintf_r+0x176>
 800bd02:	9b04      	ldr	r3, [sp, #16]
 800bd04:	eba0 000a 	sub.w	r0, r0, sl
 800bd08:	2240      	movs	r2, #64	@ 0x40
 800bd0a:	4082      	lsls	r2, r0
 800bd0c:	4313      	orrs	r3, r2
 800bd0e:	3401      	adds	r4, #1
 800bd10:	9304      	str	r3, [sp, #16]
 800bd12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd16:	4829      	ldr	r0, [pc, #164]	@ (800bdbc <_vfiprintf_r+0x220>)
 800bd18:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bd1c:	2206      	movs	r2, #6
 800bd1e:	f7f4 fa6f 	bl	8000200 <memchr>
 800bd22:	2800      	cmp	r0, #0
 800bd24:	d03f      	beq.n	800bda6 <_vfiprintf_r+0x20a>
 800bd26:	4b26      	ldr	r3, [pc, #152]	@ (800bdc0 <_vfiprintf_r+0x224>)
 800bd28:	bb1b      	cbnz	r3, 800bd72 <_vfiprintf_r+0x1d6>
 800bd2a:	9b03      	ldr	r3, [sp, #12]
 800bd2c:	3307      	adds	r3, #7
 800bd2e:	f023 0307 	bic.w	r3, r3, #7
 800bd32:	3308      	adds	r3, #8
 800bd34:	9303      	str	r3, [sp, #12]
 800bd36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd38:	443b      	add	r3, r7
 800bd3a:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd3c:	e76a      	b.n	800bc14 <_vfiprintf_r+0x78>
 800bd3e:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd42:	460c      	mov	r4, r1
 800bd44:	2001      	movs	r0, #1
 800bd46:	e7a8      	b.n	800bc9a <_vfiprintf_r+0xfe>
 800bd48:	2300      	movs	r3, #0
 800bd4a:	3401      	adds	r4, #1
 800bd4c:	9305      	str	r3, [sp, #20]
 800bd4e:	4619      	mov	r1, r3
 800bd50:	f04f 0c0a 	mov.w	ip, #10
 800bd54:	4620      	mov	r0, r4
 800bd56:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd5a:	3a30      	subs	r2, #48	@ 0x30
 800bd5c:	2a09      	cmp	r2, #9
 800bd5e:	d903      	bls.n	800bd68 <_vfiprintf_r+0x1cc>
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d0c6      	beq.n	800bcf2 <_vfiprintf_r+0x156>
 800bd64:	9105      	str	r1, [sp, #20]
 800bd66:	e7c4      	b.n	800bcf2 <_vfiprintf_r+0x156>
 800bd68:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd6c:	4604      	mov	r4, r0
 800bd6e:	2301      	movs	r3, #1
 800bd70:	e7f0      	b.n	800bd54 <_vfiprintf_r+0x1b8>
 800bd72:	ab03      	add	r3, sp, #12
 800bd74:	9300      	str	r3, [sp, #0]
 800bd76:	462a      	mov	r2, r5
 800bd78:	4b12      	ldr	r3, [pc, #72]	@ (800bdc4 <_vfiprintf_r+0x228>)
 800bd7a:	a904      	add	r1, sp, #16
 800bd7c:	4630      	mov	r0, r6
 800bd7e:	f7fc fde5 	bl	800894c <_printf_float>
 800bd82:	4607      	mov	r7, r0
 800bd84:	1c78      	adds	r0, r7, #1
 800bd86:	d1d6      	bne.n	800bd36 <_vfiprintf_r+0x19a>
 800bd88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd8a:	07d9      	lsls	r1, r3, #31
 800bd8c:	d405      	bmi.n	800bd9a <_vfiprintf_r+0x1fe>
 800bd8e:	89ab      	ldrh	r3, [r5, #12]
 800bd90:	059a      	lsls	r2, r3, #22
 800bd92:	d402      	bmi.n	800bd9a <_vfiprintf_r+0x1fe>
 800bd94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd96:	f7fe fbdb 	bl	800a550 <__retarget_lock_release_recursive>
 800bd9a:	89ab      	ldrh	r3, [r5, #12]
 800bd9c:	065b      	lsls	r3, r3, #25
 800bd9e:	f53f af1f 	bmi.w	800bbe0 <_vfiprintf_r+0x44>
 800bda2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bda4:	e71e      	b.n	800bbe4 <_vfiprintf_r+0x48>
 800bda6:	ab03      	add	r3, sp, #12
 800bda8:	9300      	str	r3, [sp, #0]
 800bdaa:	462a      	mov	r2, r5
 800bdac:	4b05      	ldr	r3, [pc, #20]	@ (800bdc4 <_vfiprintf_r+0x228>)
 800bdae:	a904      	add	r1, sp, #16
 800bdb0:	4630      	mov	r0, r6
 800bdb2:	f7fd f863 	bl	8008e7c <_printf_i>
 800bdb6:	e7e4      	b.n	800bd82 <_vfiprintf_r+0x1e6>
 800bdb8:	0800defe 	.word	0x0800defe
 800bdbc:	0800df08 	.word	0x0800df08
 800bdc0:	0800894d 	.word	0x0800894d
 800bdc4:	0800bb77 	.word	0x0800bb77
 800bdc8:	0800df04 	.word	0x0800df04

0800bdcc <malloc>:
 800bdcc:	4b02      	ldr	r3, [pc, #8]	@ (800bdd8 <malloc+0xc>)
 800bdce:	4601      	mov	r1, r0
 800bdd0:	6818      	ldr	r0, [r3, #0]
 800bdd2:	f000 b825 	b.w	800be20 <_malloc_r>
 800bdd6:	bf00      	nop
 800bdd8:	200001c4 	.word	0x200001c4

0800bddc <sbrk_aligned>:
 800bddc:	b570      	push	{r4, r5, r6, lr}
 800bdde:	4e0f      	ldr	r6, [pc, #60]	@ (800be1c <sbrk_aligned+0x40>)
 800bde0:	460c      	mov	r4, r1
 800bde2:	6831      	ldr	r1, [r6, #0]
 800bde4:	4605      	mov	r5, r0
 800bde6:	b911      	cbnz	r1, 800bdee <sbrk_aligned+0x12>
 800bde8:	f000 fffc 	bl	800cde4 <_sbrk_r>
 800bdec:	6030      	str	r0, [r6, #0]
 800bdee:	4621      	mov	r1, r4
 800bdf0:	4628      	mov	r0, r5
 800bdf2:	f000 fff7 	bl	800cde4 <_sbrk_r>
 800bdf6:	1c43      	adds	r3, r0, #1
 800bdf8:	d103      	bne.n	800be02 <sbrk_aligned+0x26>
 800bdfa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800bdfe:	4620      	mov	r0, r4
 800be00:	bd70      	pop	{r4, r5, r6, pc}
 800be02:	1cc4      	adds	r4, r0, #3
 800be04:	f024 0403 	bic.w	r4, r4, #3
 800be08:	42a0      	cmp	r0, r4
 800be0a:	d0f8      	beq.n	800bdfe <sbrk_aligned+0x22>
 800be0c:	1a21      	subs	r1, r4, r0
 800be0e:	4628      	mov	r0, r5
 800be10:	f000 ffe8 	bl	800cde4 <_sbrk_r>
 800be14:	3001      	adds	r0, #1
 800be16:	d1f2      	bne.n	800bdfe <sbrk_aligned+0x22>
 800be18:	e7ef      	b.n	800bdfa <sbrk_aligned+0x1e>
 800be1a:	bf00      	nop
 800be1c:	200008d0 	.word	0x200008d0

0800be20 <_malloc_r>:
 800be20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be24:	1ccd      	adds	r5, r1, #3
 800be26:	f025 0503 	bic.w	r5, r5, #3
 800be2a:	3508      	adds	r5, #8
 800be2c:	2d0c      	cmp	r5, #12
 800be2e:	bf38      	it	cc
 800be30:	250c      	movcc	r5, #12
 800be32:	2d00      	cmp	r5, #0
 800be34:	4606      	mov	r6, r0
 800be36:	db01      	blt.n	800be3c <_malloc_r+0x1c>
 800be38:	42a9      	cmp	r1, r5
 800be3a:	d904      	bls.n	800be46 <_malloc_r+0x26>
 800be3c:	230c      	movs	r3, #12
 800be3e:	6033      	str	r3, [r6, #0]
 800be40:	2000      	movs	r0, #0
 800be42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bf1c <_malloc_r+0xfc>
 800be4a:	f000 f927 	bl	800c09c <__malloc_lock>
 800be4e:	f8d8 3000 	ldr.w	r3, [r8]
 800be52:	461c      	mov	r4, r3
 800be54:	bb44      	cbnz	r4, 800bea8 <_malloc_r+0x88>
 800be56:	4629      	mov	r1, r5
 800be58:	4630      	mov	r0, r6
 800be5a:	f7ff ffbf 	bl	800bddc <sbrk_aligned>
 800be5e:	1c43      	adds	r3, r0, #1
 800be60:	4604      	mov	r4, r0
 800be62:	d158      	bne.n	800bf16 <_malloc_r+0xf6>
 800be64:	f8d8 4000 	ldr.w	r4, [r8]
 800be68:	4627      	mov	r7, r4
 800be6a:	2f00      	cmp	r7, #0
 800be6c:	d143      	bne.n	800bef6 <_malloc_r+0xd6>
 800be6e:	2c00      	cmp	r4, #0
 800be70:	d04b      	beq.n	800bf0a <_malloc_r+0xea>
 800be72:	6823      	ldr	r3, [r4, #0]
 800be74:	4639      	mov	r1, r7
 800be76:	4630      	mov	r0, r6
 800be78:	eb04 0903 	add.w	r9, r4, r3
 800be7c:	f000 ffb2 	bl	800cde4 <_sbrk_r>
 800be80:	4581      	cmp	r9, r0
 800be82:	d142      	bne.n	800bf0a <_malloc_r+0xea>
 800be84:	6821      	ldr	r1, [r4, #0]
 800be86:	1a6d      	subs	r5, r5, r1
 800be88:	4629      	mov	r1, r5
 800be8a:	4630      	mov	r0, r6
 800be8c:	f7ff ffa6 	bl	800bddc <sbrk_aligned>
 800be90:	3001      	adds	r0, #1
 800be92:	d03a      	beq.n	800bf0a <_malloc_r+0xea>
 800be94:	6823      	ldr	r3, [r4, #0]
 800be96:	442b      	add	r3, r5
 800be98:	6023      	str	r3, [r4, #0]
 800be9a:	f8d8 3000 	ldr.w	r3, [r8]
 800be9e:	685a      	ldr	r2, [r3, #4]
 800bea0:	bb62      	cbnz	r2, 800befc <_malloc_r+0xdc>
 800bea2:	f8c8 7000 	str.w	r7, [r8]
 800bea6:	e00f      	b.n	800bec8 <_malloc_r+0xa8>
 800bea8:	6822      	ldr	r2, [r4, #0]
 800beaa:	1b52      	subs	r2, r2, r5
 800beac:	d420      	bmi.n	800bef0 <_malloc_r+0xd0>
 800beae:	2a0b      	cmp	r2, #11
 800beb0:	d917      	bls.n	800bee2 <_malloc_r+0xc2>
 800beb2:	1961      	adds	r1, r4, r5
 800beb4:	42a3      	cmp	r3, r4
 800beb6:	6025      	str	r5, [r4, #0]
 800beb8:	bf18      	it	ne
 800beba:	6059      	strne	r1, [r3, #4]
 800bebc:	6863      	ldr	r3, [r4, #4]
 800bebe:	bf08      	it	eq
 800bec0:	f8c8 1000 	streq.w	r1, [r8]
 800bec4:	5162      	str	r2, [r4, r5]
 800bec6:	604b      	str	r3, [r1, #4]
 800bec8:	4630      	mov	r0, r6
 800beca:	f000 f8ed 	bl	800c0a8 <__malloc_unlock>
 800bece:	f104 000b 	add.w	r0, r4, #11
 800bed2:	1d23      	adds	r3, r4, #4
 800bed4:	f020 0007 	bic.w	r0, r0, #7
 800bed8:	1ac2      	subs	r2, r0, r3
 800beda:	bf1c      	itt	ne
 800bedc:	1a1b      	subne	r3, r3, r0
 800bede:	50a3      	strne	r3, [r4, r2]
 800bee0:	e7af      	b.n	800be42 <_malloc_r+0x22>
 800bee2:	6862      	ldr	r2, [r4, #4]
 800bee4:	42a3      	cmp	r3, r4
 800bee6:	bf0c      	ite	eq
 800bee8:	f8c8 2000 	streq.w	r2, [r8]
 800beec:	605a      	strne	r2, [r3, #4]
 800beee:	e7eb      	b.n	800bec8 <_malloc_r+0xa8>
 800bef0:	4623      	mov	r3, r4
 800bef2:	6864      	ldr	r4, [r4, #4]
 800bef4:	e7ae      	b.n	800be54 <_malloc_r+0x34>
 800bef6:	463c      	mov	r4, r7
 800bef8:	687f      	ldr	r7, [r7, #4]
 800befa:	e7b6      	b.n	800be6a <_malloc_r+0x4a>
 800befc:	461a      	mov	r2, r3
 800befe:	685b      	ldr	r3, [r3, #4]
 800bf00:	42a3      	cmp	r3, r4
 800bf02:	d1fb      	bne.n	800befc <_malloc_r+0xdc>
 800bf04:	2300      	movs	r3, #0
 800bf06:	6053      	str	r3, [r2, #4]
 800bf08:	e7de      	b.n	800bec8 <_malloc_r+0xa8>
 800bf0a:	230c      	movs	r3, #12
 800bf0c:	6033      	str	r3, [r6, #0]
 800bf0e:	4630      	mov	r0, r6
 800bf10:	f000 f8ca 	bl	800c0a8 <__malloc_unlock>
 800bf14:	e794      	b.n	800be40 <_malloc_r+0x20>
 800bf16:	6005      	str	r5, [r0, #0]
 800bf18:	e7d6      	b.n	800bec8 <_malloc_r+0xa8>
 800bf1a:	bf00      	nop
 800bf1c:	200008d4 	.word	0x200008d4

0800bf20 <__ascii_mbtowc>:
 800bf20:	b082      	sub	sp, #8
 800bf22:	b901      	cbnz	r1, 800bf26 <__ascii_mbtowc+0x6>
 800bf24:	a901      	add	r1, sp, #4
 800bf26:	b142      	cbz	r2, 800bf3a <__ascii_mbtowc+0x1a>
 800bf28:	b14b      	cbz	r3, 800bf3e <__ascii_mbtowc+0x1e>
 800bf2a:	7813      	ldrb	r3, [r2, #0]
 800bf2c:	600b      	str	r3, [r1, #0]
 800bf2e:	7812      	ldrb	r2, [r2, #0]
 800bf30:	1e10      	subs	r0, r2, #0
 800bf32:	bf18      	it	ne
 800bf34:	2001      	movne	r0, #1
 800bf36:	b002      	add	sp, #8
 800bf38:	4770      	bx	lr
 800bf3a:	4610      	mov	r0, r2
 800bf3c:	e7fb      	b.n	800bf36 <__ascii_mbtowc+0x16>
 800bf3e:	f06f 0001 	mvn.w	r0, #1
 800bf42:	e7f8      	b.n	800bf36 <__ascii_mbtowc+0x16>

0800bf44 <__sflush_r>:
 800bf44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bf48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf4c:	0716      	lsls	r6, r2, #28
 800bf4e:	4605      	mov	r5, r0
 800bf50:	460c      	mov	r4, r1
 800bf52:	d454      	bmi.n	800bffe <__sflush_r+0xba>
 800bf54:	684b      	ldr	r3, [r1, #4]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	dc02      	bgt.n	800bf60 <__sflush_r+0x1c>
 800bf5a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	dd48      	ble.n	800bff2 <__sflush_r+0xae>
 800bf60:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bf62:	2e00      	cmp	r6, #0
 800bf64:	d045      	beq.n	800bff2 <__sflush_r+0xae>
 800bf66:	2300      	movs	r3, #0
 800bf68:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bf6c:	682f      	ldr	r7, [r5, #0]
 800bf6e:	6a21      	ldr	r1, [r4, #32]
 800bf70:	602b      	str	r3, [r5, #0]
 800bf72:	d030      	beq.n	800bfd6 <__sflush_r+0x92>
 800bf74:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bf76:	89a3      	ldrh	r3, [r4, #12]
 800bf78:	0759      	lsls	r1, r3, #29
 800bf7a:	d505      	bpl.n	800bf88 <__sflush_r+0x44>
 800bf7c:	6863      	ldr	r3, [r4, #4]
 800bf7e:	1ad2      	subs	r2, r2, r3
 800bf80:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bf82:	b10b      	cbz	r3, 800bf88 <__sflush_r+0x44>
 800bf84:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bf86:	1ad2      	subs	r2, r2, r3
 800bf88:	2300      	movs	r3, #0
 800bf8a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bf8c:	6a21      	ldr	r1, [r4, #32]
 800bf8e:	4628      	mov	r0, r5
 800bf90:	47b0      	blx	r6
 800bf92:	1c43      	adds	r3, r0, #1
 800bf94:	89a3      	ldrh	r3, [r4, #12]
 800bf96:	d106      	bne.n	800bfa6 <__sflush_r+0x62>
 800bf98:	6829      	ldr	r1, [r5, #0]
 800bf9a:	291d      	cmp	r1, #29
 800bf9c:	d82b      	bhi.n	800bff6 <__sflush_r+0xb2>
 800bf9e:	4a2a      	ldr	r2, [pc, #168]	@ (800c048 <__sflush_r+0x104>)
 800bfa0:	410a      	asrs	r2, r1
 800bfa2:	07d6      	lsls	r6, r2, #31
 800bfa4:	d427      	bmi.n	800bff6 <__sflush_r+0xb2>
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	6062      	str	r2, [r4, #4]
 800bfaa:	04d9      	lsls	r1, r3, #19
 800bfac:	6922      	ldr	r2, [r4, #16]
 800bfae:	6022      	str	r2, [r4, #0]
 800bfb0:	d504      	bpl.n	800bfbc <__sflush_r+0x78>
 800bfb2:	1c42      	adds	r2, r0, #1
 800bfb4:	d101      	bne.n	800bfba <__sflush_r+0x76>
 800bfb6:	682b      	ldr	r3, [r5, #0]
 800bfb8:	b903      	cbnz	r3, 800bfbc <__sflush_r+0x78>
 800bfba:	6560      	str	r0, [r4, #84]	@ 0x54
 800bfbc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bfbe:	602f      	str	r7, [r5, #0]
 800bfc0:	b1b9      	cbz	r1, 800bff2 <__sflush_r+0xae>
 800bfc2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bfc6:	4299      	cmp	r1, r3
 800bfc8:	d002      	beq.n	800bfd0 <__sflush_r+0x8c>
 800bfca:	4628      	mov	r0, r5
 800bfcc:	f000 ff5e 	bl	800ce8c <_free_r>
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	6363      	str	r3, [r4, #52]	@ 0x34
 800bfd4:	e00d      	b.n	800bff2 <__sflush_r+0xae>
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	4628      	mov	r0, r5
 800bfda:	47b0      	blx	r6
 800bfdc:	4602      	mov	r2, r0
 800bfde:	1c50      	adds	r0, r2, #1
 800bfe0:	d1c9      	bne.n	800bf76 <__sflush_r+0x32>
 800bfe2:	682b      	ldr	r3, [r5, #0]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d0c6      	beq.n	800bf76 <__sflush_r+0x32>
 800bfe8:	2b1d      	cmp	r3, #29
 800bfea:	d001      	beq.n	800bff0 <__sflush_r+0xac>
 800bfec:	2b16      	cmp	r3, #22
 800bfee:	d11e      	bne.n	800c02e <__sflush_r+0xea>
 800bff0:	602f      	str	r7, [r5, #0]
 800bff2:	2000      	movs	r0, #0
 800bff4:	e022      	b.n	800c03c <__sflush_r+0xf8>
 800bff6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bffa:	b21b      	sxth	r3, r3
 800bffc:	e01b      	b.n	800c036 <__sflush_r+0xf2>
 800bffe:	690f      	ldr	r7, [r1, #16]
 800c000:	2f00      	cmp	r7, #0
 800c002:	d0f6      	beq.n	800bff2 <__sflush_r+0xae>
 800c004:	0793      	lsls	r3, r2, #30
 800c006:	680e      	ldr	r6, [r1, #0]
 800c008:	bf08      	it	eq
 800c00a:	694b      	ldreq	r3, [r1, #20]
 800c00c:	600f      	str	r7, [r1, #0]
 800c00e:	bf18      	it	ne
 800c010:	2300      	movne	r3, #0
 800c012:	eba6 0807 	sub.w	r8, r6, r7
 800c016:	608b      	str	r3, [r1, #8]
 800c018:	f1b8 0f00 	cmp.w	r8, #0
 800c01c:	dde9      	ble.n	800bff2 <__sflush_r+0xae>
 800c01e:	6a21      	ldr	r1, [r4, #32]
 800c020:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c022:	4643      	mov	r3, r8
 800c024:	463a      	mov	r2, r7
 800c026:	4628      	mov	r0, r5
 800c028:	47b0      	blx	r6
 800c02a:	2800      	cmp	r0, #0
 800c02c:	dc08      	bgt.n	800c040 <__sflush_r+0xfc>
 800c02e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c032:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c036:	81a3      	strh	r3, [r4, #12]
 800c038:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c03c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c040:	4407      	add	r7, r0
 800c042:	eba8 0800 	sub.w	r8, r8, r0
 800c046:	e7e7      	b.n	800c018 <__sflush_r+0xd4>
 800c048:	dfbffffe 	.word	0xdfbffffe

0800c04c <_fflush_r>:
 800c04c:	b538      	push	{r3, r4, r5, lr}
 800c04e:	690b      	ldr	r3, [r1, #16]
 800c050:	4605      	mov	r5, r0
 800c052:	460c      	mov	r4, r1
 800c054:	b913      	cbnz	r3, 800c05c <_fflush_r+0x10>
 800c056:	2500      	movs	r5, #0
 800c058:	4628      	mov	r0, r5
 800c05a:	bd38      	pop	{r3, r4, r5, pc}
 800c05c:	b118      	cbz	r0, 800c066 <_fflush_r+0x1a>
 800c05e:	6a03      	ldr	r3, [r0, #32]
 800c060:	b90b      	cbnz	r3, 800c066 <_fflush_r+0x1a>
 800c062:	f7fd faeb 	bl	800963c <__sinit>
 800c066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d0f3      	beq.n	800c056 <_fflush_r+0xa>
 800c06e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c070:	07d0      	lsls	r0, r2, #31
 800c072:	d404      	bmi.n	800c07e <_fflush_r+0x32>
 800c074:	0599      	lsls	r1, r3, #22
 800c076:	d402      	bmi.n	800c07e <_fflush_r+0x32>
 800c078:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c07a:	f7fe fa68 	bl	800a54e <__retarget_lock_acquire_recursive>
 800c07e:	4628      	mov	r0, r5
 800c080:	4621      	mov	r1, r4
 800c082:	f7ff ff5f 	bl	800bf44 <__sflush_r>
 800c086:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c088:	07da      	lsls	r2, r3, #31
 800c08a:	4605      	mov	r5, r0
 800c08c:	d4e4      	bmi.n	800c058 <_fflush_r+0xc>
 800c08e:	89a3      	ldrh	r3, [r4, #12]
 800c090:	059b      	lsls	r3, r3, #22
 800c092:	d4e1      	bmi.n	800c058 <_fflush_r+0xc>
 800c094:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c096:	f7fe fa5b 	bl	800a550 <__retarget_lock_release_recursive>
 800c09a:	e7dd      	b.n	800c058 <_fflush_r+0xc>

0800c09c <__malloc_lock>:
 800c09c:	4801      	ldr	r0, [pc, #4]	@ (800c0a4 <__malloc_lock+0x8>)
 800c09e:	f7fe ba56 	b.w	800a54e <__retarget_lock_acquire_recursive>
 800c0a2:	bf00      	nop
 800c0a4:	200008cc 	.word	0x200008cc

0800c0a8 <__malloc_unlock>:
 800c0a8:	4801      	ldr	r0, [pc, #4]	@ (800c0b0 <__malloc_unlock+0x8>)
 800c0aa:	f7fe ba51 	b.w	800a550 <__retarget_lock_release_recursive>
 800c0ae:	bf00      	nop
 800c0b0:	200008cc 	.word	0x200008cc

0800c0b4 <_Balloc>:
 800c0b4:	b570      	push	{r4, r5, r6, lr}
 800c0b6:	69c6      	ldr	r6, [r0, #28]
 800c0b8:	4604      	mov	r4, r0
 800c0ba:	460d      	mov	r5, r1
 800c0bc:	b976      	cbnz	r6, 800c0dc <_Balloc+0x28>
 800c0be:	2010      	movs	r0, #16
 800c0c0:	f7ff fe84 	bl	800bdcc <malloc>
 800c0c4:	4602      	mov	r2, r0
 800c0c6:	61e0      	str	r0, [r4, #28]
 800c0c8:	b920      	cbnz	r0, 800c0d4 <_Balloc+0x20>
 800c0ca:	4b18      	ldr	r3, [pc, #96]	@ (800c12c <_Balloc+0x78>)
 800c0cc:	4818      	ldr	r0, [pc, #96]	@ (800c130 <_Balloc+0x7c>)
 800c0ce:	216b      	movs	r1, #107	@ 0x6b
 800c0d0:	f000 feaa 	bl	800ce28 <__assert_func>
 800c0d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c0d8:	6006      	str	r6, [r0, #0]
 800c0da:	60c6      	str	r6, [r0, #12]
 800c0dc:	69e6      	ldr	r6, [r4, #28]
 800c0de:	68f3      	ldr	r3, [r6, #12]
 800c0e0:	b183      	cbz	r3, 800c104 <_Balloc+0x50>
 800c0e2:	69e3      	ldr	r3, [r4, #28]
 800c0e4:	68db      	ldr	r3, [r3, #12]
 800c0e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c0ea:	b9b8      	cbnz	r0, 800c11c <_Balloc+0x68>
 800c0ec:	2101      	movs	r1, #1
 800c0ee:	fa01 f605 	lsl.w	r6, r1, r5
 800c0f2:	1d72      	adds	r2, r6, #5
 800c0f4:	0092      	lsls	r2, r2, #2
 800c0f6:	4620      	mov	r0, r4
 800c0f8:	f000 feb4 	bl	800ce64 <_calloc_r>
 800c0fc:	b160      	cbz	r0, 800c118 <_Balloc+0x64>
 800c0fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c102:	e00e      	b.n	800c122 <_Balloc+0x6e>
 800c104:	2221      	movs	r2, #33	@ 0x21
 800c106:	2104      	movs	r1, #4
 800c108:	4620      	mov	r0, r4
 800c10a:	f000 feab 	bl	800ce64 <_calloc_r>
 800c10e:	69e3      	ldr	r3, [r4, #28]
 800c110:	60f0      	str	r0, [r6, #12]
 800c112:	68db      	ldr	r3, [r3, #12]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d1e4      	bne.n	800c0e2 <_Balloc+0x2e>
 800c118:	2000      	movs	r0, #0
 800c11a:	bd70      	pop	{r4, r5, r6, pc}
 800c11c:	6802      	ldr	r2, [r0, #0]
 800c11e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c122:	2300      	movs	r3, #0
 800c124:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c128:	e7f7      	b.n	800c11a <_Balloc+0x66>
 800c12a:	bf00      	nop
 800c12c:	0800de1e 	.word	0x0800de1e
 800c130:	0800df0f 	.word	0x0800df0f

0800c134 <_Bfree>:
 800c134:	b570      	push	{r4, r5, r6, lr}
 800c136:	69c6      	ldr	r6, [r0, #28]
 800c138:	4605      	mov	r5, r0
 800c13a:	460c      	mov	r4, r1
 800c13c:	b976      	cbnz	r6, 800c15c <_Bfree+0x28>
 800c13e:	2010      	movs	r0, #16
 800c140:	f7ff fe44 	bl	800bdcc <malloc>
 800c144:	4602      	mov	r2, r0
 800c146:	61e8      	str	r0, [r5, #28]
 800c148:	b920      	cbnz	r0, 800c154 <_Bfree+0x20>
 800c14a:	4b09      	ldr	r3, [pc, #36]	@ (800c170 <_Bfree+0x3c>)
 800c14c:	4809      	ldr	r0, [pc, #36]	@ (800c174 <_Bfree+0x40>)
 800c14e:	218f      	movs	r1, #143	@ 0x8f
 800c150:	f000 fe6a 	bl	800ce28 <__assert_func>
 800c154:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c158:	6006      	str	r6, [r0, #0]
 800c15a:	60c6      	str	r6, [r0, #12]
 800c15c:	b13c      	cbz	r4, 800c16e <_Bfree+0x3a>
 800c15e:	69eb      	ldr	r3, [r5, #28]
 800c160:	6862      	ldr	r2, [r4, #4]
 800c162:	68db      	ldr	r3, [r3, #12]
 800c164:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c168:	6021      	str	r1, [r4, #0]
 800c16a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c16e:	bd70      	pop	{r4, r5, r6, pc}
 800c170:	0800de1e 	.word	0x0800de1e
 800c174:	0800df0f 	.word	0x0800df0f

0800c178 <__multadd>:
 800c178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c17c:	690d      	ldr	r5, [r1, #16]
 800c17e:	4607      	mov	r7, r0
 800c180:	460c      	mov	r4, r1
 800c182:	461e      	mov	r6, r3
 800c184:	f101 0c14 	add.w	ip, r1, #20
 800c188:	2000      	movs	r0, #0
 800c18a:	f8dc 3000 	ldr.w	r3, [ip]
 800c18e:	b299      	uxth	r1, r3
 800c190:	fb02 6101 	mla	r1, r2, r1, r6
 800c194:	0c1e      	lsrs	r6, r3, #16
 800c196:	0c0b      	lsrs	r3, r1, #16
 800c198:	fb02 3306 	mla	r3, r2, r6, r3
 800c19c:	b289      	uxth	r1, r1
 800c19e:	3001      	adds	r0, #1
 800c1a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c1a4:	4285      	cmp	r5, r0
 800c1a6:	f84c 1b04 	str.w	r1, [ip], #4
 800c1aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c1ae:	dcec      	bgt.n	800c18a <__multadd+0x12>
 800c1b0:	b30e      	cbz	r6, 800c1f6 <__multadd+0x7e>
 800c1b2:	68a3      	ldr	r3, [r4, #8]
 800c1b4:	42ab      	cmp	r3, r5
 800c1b6:	dc19      	bgt.n	800c1ec <__multadd+0x74>
 800c1b8:	6861      	ldr	r1, [r4, #4]
 800c1ba:	4638      	mov	r0, r7
 800c1bc:	3101      	adds	r1, #1
 800c1be:	f7ff ff79 	bl	800c0b4 <_Balloc>
 800c1c2:	4680      	mov	r8, r0
 800c1c4:	b928      	cbnz	r0, 800c1d2 <__multadd+0x5a>
 800c1c6:	4602      	mov	r2, r0
 800c1c8:	4b0c      	ldr	r3, [pc, #48]	@ (800c1fc <__multadd+0x84>)
 800c1ca:	480d      	ldr	r0, [pc, #52]	@ (800c200 <__multadd+0x88>)
 800c1cc:	21ba      	movs	r1, #186	@ 0xba
 800c1ce:	f000 fe2b 	bl	800ce28 <__assert_func>
 800c1d2:	6922      	ldr	r2, [r4, #16]
 800c1d4:	3202      	adds	r2, #2
 800c1d6:	f104 010c 	add.w	r1, r4, #12
 800c1da:	0092      	lsls	r2, r2, #2
 800c1dc:	300c      	adds	r0, #12
 800c1de:	f7fe f9b8 	bl	800a552 <memcpy>
 800c1e2:	4621      	mov	r1, r4
 800c1e4:	4638      	mov	r0, r7
 800c1e6:	f7ff ffa5 	bl	800c134 <_Bfree>
 800c1ea:	4644      	mov	r4, r8
 800c1ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c1f0:	3501      	adds	r5, #1
 800c1f2:	615e      	str	r6, [r3, #20]
 800c1f4:	6125      	str	r5, [r4, #16]
 800c1f6:	4620      	mov	r0, r4
 800c1f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1fc:	0800de8d 	.word	0x0800de8d
 800c200:	0800df0f 	.word	0x0800df0f

0800c204 <__s2b>:
 800c204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c208:	460c      	mov	r4, r1
 800c20a:	4615      	mov	r5, r2
 800c20c:	461f      	mov	r7, r3
 800c20e:	2209      	movs	r2, #9
 800c210:	3308      	adds	r3, #8
 800c212:	4606      	mov	r6, r0
 800c214:	fb93 f3f2 	sdiv	r3, r3, r2
 800c218:	2100      	movs	r1, #0
 800c21a:	2201      	movs	r2, #1
 800c21c:	429a      	cmp	r2, r3
 800c21e:	db09      	blt.n	800c234 <__s2b+0x30>
 800c220:	4630      	mov	r0, r6
 800c222:	f7ff ff47 	bl	800c0b4 <_Balloc>
 800c226:	b940      	cbnz	r0, 800c23a <__s2b+0x36>
 800c228:	4602      	mov	r2, r0
 800c22a:	4b19      	ldr	r3, [pc, #100]	@ (800c290 <__s2b+0x8c>)
 800c22c:	4819      	ldr	r0, [pc, #100]	@ (800c294 <__s2b+0x90>)
 800c22e:	21d3      	movs	r1, #211	@ 0xd3
 800c230:	f000 fdfa 	bl	800ce28 <__assert_func>
 800c234:	0052      	lsls	r2, r2, #1
 800c236:	3101      	adds	r1, #1
 800c238:	e7f0      	b.n	800c21c <__s2b+0x18>
 800c23a:	9b08      	ldr	r3, [sp, #32]
 800c23c:	6143      	str	r3, [r0, #20]
 800c23e:	2d09      	cmp	r5, #9
 800c240:	f04f 0301 	mov.w	r3, #1
 800c244:	6103      	str	r3, [r0, #16]
 800c246:	dd16      	ble.n	800c276 <__s2b+0x72>
 800c248:	f104 0909 	add.w	r9, r4, #9
 800c24c:	46c8      	mov	r8, r9
 800c24e:	442c      	add	r4, r5
 800c250:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c254:	4601      	mov	r1, r0
 800c256:	3b30      	subs	r3, #48	@ 0x30
 800c258:	220a      	movs	r2, #10
 800c25a:	4630      	mov	r0, r6
 800c25c:	f7ff ff8c 	bl	800c178 <__multadd>
 800c260:	45a0      	cmp	r8, r4
 800c262:	d1f5      	bne.n	800c250 <__s2b+0x4c>
 800c264:	f1a5 0408 	sub.w	r4, r5, #8
 800c268:	444c      	add	r4, r9
 800c26a:	1b2d      	subs	r5, r5, r4
 800c26c:	1963      	adds	r3, r4, r5
 800c26e:	42bb      	cmp	r3, r7
 800c270:	db04      	blt.n	800c27c <__s2b+0x78>
 800c272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c276:	340a      	adds	r4, #10
 800c278:	2509      	movs	r5, #9
 800c27a:	e7f6      	b.n	800c26a <__s2b+0x66>
 800c27c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c280:	4601      	mov	r1, r0
 800c282:	3b30      	subs	r3, #48	@ 0x30
 800c284:	220a      	movs	r2, #10
 800c286:	4630      	mov	r0, r6
 800c288:	f7ff ff76 	bl	800c178 <__multadd>
 800c28c:	e7ee      	b.n	800c26c <__s2b+0x68>
 800c28e:	bf00      	nop
 800c290:	0800de8d 	.word	0x0800de8d
 800c294:	0800df0f 	.word	0x0800df0f

0800c298 <__hi0bits>:
 800c298:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c29c:	4603      	mov	r3, r0
 800c29e:	bf36      	itet	cc
 800c2a0:	0403      	lslcc	r3, r0, #16
 800c2a2:	2000      	movcs	r0, #0
 800c2a4:	2010      	movcc	r0, #16
 800c2a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c2aa:	bf3c      	itt	cc
 800c2ac:	021b      	lslcc	r3, r3, #8
 800c2ae:	3008      	addcc	r0, #8
 800c2b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c2b4:	bf3c      	itt	cc
 800c2b6:	011b      	lslcc	r3, r3, #4
 800c2b8:	3004      	addcc	r0, #4
 800c2ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c2be:	bf3c      	itt	cc
 800c2c0:	009b      	lslcc	r3, r3, #2
 800c2c2:	3002      	addcc	r0, #2
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	db05      	blt.n	800c2d4 <__hi0bits+0x3c>
 800c2c8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c2cc:	f100 0001 	add.w	r0, r0, #1
 800c2d0:	bf08      	it	eq
 800c2d2:	2020      	moveq	r0, #32
 800c2d4:	4770      	bx	lr

0800c2d6 <__lo0bits>:
 800c2d6:	6803      	ldr	r3, [r0, #0]
 800c2d8:	4602      	mov	r2, r0
 800c2da:	f013 0007 	ands.w	r0, r3, #7
 800c2de:	d00b      	beq.n	800c2f8 <__lo0bits+0x22>
 800c2e0:	07d9      	lsls	r1, r3, #31
 800c2e2:	d421      	bmi.n	800c328 <__lo0bits+0x52>
 800c2e4:	0798      	lsls	r0, r3, #30
 800c2e6:	bf49      	itett	mi
 800c2e8:	085b      	lsrmi	r3, r3, #1
 800c2ea:	089b      	lsrpl	r3, r3, #2
 800c2ec:	2001      	movmi	r0, #1
 800c2ee:	6013      	strmi	r3, [r2, #0]
 800c2f0:	bf5c      	itt	pl
 800c2f2:	6013      	strpl	r3, [r2, #0]
 800c2f4:	2002      	movpl	r0, #2
 800c2f6:	4770      	bx	lr
 800c2f8:	b299      	uxth	r1, r3
 800c2fa:	b909      	cbnz	r1, 800c300 <__lo0bits+0x2a>
 800c2fc:	0c1b      	lsrs	r3, r3, #16
 800c2fe:	2010      	movs	r0, #16
 800c300:	b2d9      	uxtb	r1, r3
 800c302:	b909      	cbnz	r1, 800c308 <__lo0bits+0x32>
 800c304:	3008      	adds	r0, #8
 800c306:	0a1b      	lsrs	r3, r3, #8
 800c308:	0719      	lsls	r1, r3, #28
 800c30a:	bf04      	itt	eq
 800c30c:	091b      	lsreq	r3, r3, #4
 800c30e:	3004      	addeq	r0, #4
 800c310:	0799      	lsls	r1, r3, #30
 800c312:	bf04      	itt	eq
 800c314:	089b      	lsreq	r3, r3, #2
 800c316:	3002      	addeq	r0, #2
 800c318:	07d9      	lsls	r1, r3, #31
 800c31a:	d403      	bmi.n	800c324 <__lo0bits+0x4e>
 800c31c:	085b      	lsrs	r3, r3, #1
 800c31e:	f100 0001 	add.w	r0, r0, #1
 800c322:	d003      	beq.n	800c32c <__lo0bits+0x56>
 800c324:	6013      	str	r3, [r2, #0]
 800c326:	4770      	bx	lr
 800c328:	2000      	movs	r0, #0
 800c32a:	4770      	bx	lr
 800c32c:	2020      	movs	r0, #32
 800c32e:	4770      	bx	lr

0800c330 <__i2b>:
 800c330:	b510      	push	{r4, lr}
 800c332:	460c      	mov	r4, r1
 800c334:	2101      	movs	r1, #1
 800c336:	f7ff febd 	bl	800c0b4 <_Balloc>
 800c33a:	4602      	mov	r2, r0
 800c33c:	b928      	cbnz	r0, 800c34a <__i2b+0x1a>
 800c33e:	4b05      	ldr	r3, [pc, #20]	@ (800c354 <__i2b+0x24>)
 800c340:	4805      	ldr	r0, [pc, #20]	@ (800c358 <__i2b+0x28>)
 800c342:	f240 1145 	movw	r1, #325	@ 0x145
 800c346:	f000 fd6f 	bl	800ce28 <__assert_func>
 800c34a:	2301      	movs	r3, #1
 800c34c:	6144      	str	r4, [r0, #20]
 800c34e:	6103      	str	r3, [r0, #16]
 800c350:	bd10      	pop	{r4, pc}
 800c352:	bf00      	nop
 800c354:	0800de8d 	.word	0x0800de8d
 800c358:	0800df0f 	.word	0x0800df0f

0800c35c <__multiply>:
 800c35c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c360:	4614      	mov	r4, r2
 800c362:	690a      	ldr	r2, [r1, #16]
 800c364:	6923      	ldr	r3, [r4, #16]
 800c366:	429a      	cmp	r2, r3
 800c368:	bfa8      	it	ge
 800c36a:	4623      	movge	r3, r4
 800c36c:	460f      	mov	r7, r1
 800c36e:	bfa4      	itt	ge
 800c370:	460c      	movge	r4, r1
 800c372:	461f      	movge	r7, r3
 800c374:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c378:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c37c:	68a3      	ldr	r3, [r4, #8]
 800c37e:	6861      	ldr	r1, [r4, #4]
 800c380:	eb0a 0609 	add.w	r6, sl, r9
 800c384:	42b3      	cmp	r3, r6
 800c386:	b085      	sub	sp, #20
 800c388:	bfb8      	it	lt
 800c38a:	3101      	addlt	r1, #1
 800c38c:	f7ff fe92 	bl	800c0b4 <_Balloc>
 800c390:	b930      	cbnz	r0, 800c3a0 <__multiply+0x44>
 800c392:	4602      	mov	r2, r0
 800c394:	4b44      	ldr	r3, [pc, #272]	@ (800c4a8 <__multiply+0x14c>)
 800c396:	4845      	ldr	r0, [pc, #276]	@ (800c4ac <__multiply+0x150>)
 800c398:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c39c:	f000 fd44 	bl	800ce28 <__assert_func>
 800c3a0:	f100 0514 	add.w	r5, r0, #20
 800c3a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c3a8:	462b      	mov	r3, r5
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	4543      	cmp	r3, r8
 800c3ae:	d321      	bcc.n	800c3f4 <__multiply+0x98>
 800c3b0:	f107 0114 	add.w	r1, r7, #20
 800c3b4:	f104 0214 	add.w	r2, r4, #20
 800c3b8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c3bc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c3c0:	9302      	str	r3, [sp, #8]
 800c3c2:	1b13      	subs	r3, r2, r4
 800c3c4:	3b15      	subs	r3, #21
 800c3c6:	f023 0303 	bic.w	r3, r3, #3
 800c3ca:	3304      	adds	r3, #4
 800c3cc:	f104 0715 	add.w	r7, r4, #21
 800c3d0:	42ba      	cmp	r2, r7
 800c3d2:	bf38      	it	cc
 800c3d4:	2304      	movcc	r3, #4
 800c3d6:	9301      	str	r3, [sp, #4]
 800c3d8:	9b02      	ldr	r3, [sp, #8]
 800c3da:	9103      	str	r1, [sp, #12]
 800c3dc:	428b      	cmp	r3, r1
 800c3de:	d80c      	bhi.n	800c3fa <__multiply+0x9e>
 800c3e0:	2e00      	cmp	r6, #0
 800c3e2:	dd03      	ble.n	800c3ec <__multiply+0x90>
 800c3e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d05b      	beq.n	800c4a4 <__multiply+0x148>
 800c3ec:	6106      	str	r6, [r0, #16]
 800c3ee:	b005      	add	sp, #20
 800c3f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3f4:	f843 2b04 	str.w	r2, [r3], #4
 800c3f8:	e7d8      	b.n	800c3ac <__multiply+0x50>
 800c3fa:	f8b1 a000 	ldrh.w	sl, [r1]
 800c3fe:	f1ba 0f00 	cmp.w	sl, #0
 800c402:	d024      	beq.n	800c44e <__multiply+0xf2>
 800c404:	f104 0e14 	add.w	lr, r4, #20
 800c408:	46a9      	mov	r9, r5
 800c40a:	f04f 0c00 	mov.w	ip, #0
 800c40e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c412:	f8d9 3000 	ldr.w	r3, [r9]
 800c416:	fa1f fb87 	uxth.w	fp, r7
 800c41a:	b29b      	uxth	r3, r3
 800c41c:	fb0a 330b 	mla	r3, sl, fp, r3
 800c420:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c424:	f8d9 7000 	ldr.w	r7, [r9]
 800c428:	4463      	add	r3, ip
 800c42a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c42e:	fb0a c70b 	mla	r7, sl, fp, ip
 800c432:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c436:	b29b      	uxth	r3, r3
 800c438:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c43c:	4572      	cmp	r2, lr
 800c43e:	f849 3b04 	str.w	r3, [r9], #4
 800c442:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c446:	d8e2      	bhi.n	800c40e <__multiply+0xb2>
 800c448:	9b01      	ldr	r3, [sp, #4]
 800c44a:	f845 c003 	str.w	ip, [r5, r3]
 800c44e:	9b03      	ldr	r3, [sp, #12]
 800c450:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c454:	3104      	adds	r1, #4
 800c456:	f1b9 0f00 	cmp.w	r9, #0
 800c45a:	d021      	beq.n	800c4a0 <__multiply+0x144>
 800c45c:	682b      	ldr	r3, [r5, #0]
 800c45e:	f104 0c14 	add.w	ip, r4, #20
 800c462:	46ae      	mov	lr, r5
 800c464:	f04f 0a00 	mov.w	sl, #0
 800c468:	f8bc b000 	ldrh.w	fp, [ip]
 800c46c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c470:	fb09 770b 	mla	r7, r9, fp, r7
 800c474:	4457      	add	r7, sl
 800c476:	b29b      	uxth	r3, r3
 800c478:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c47c:	f84e 3b04 	str.w	r3, [lr], #4
 800c480:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c484:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c488:	f8be 3000 	ldrh.w	r3, [lr]
 800c48c:	fb09 330a 	mla	r3, r9, sl, r3
 800c490:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c494:	4562      	cmp	r2, ip
 800c496:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c49a:	d8e5      	bhi.n	800c468 <__multiply+0x10c>
 800c49c:	9f01      	ldr	r7, [sp, #4]
 800c49e:	51eb      	str	r3, [r5, r7]
 800c4a0:	3504      	adds	r5, #4
 800c4a2:	e799      	b.n	800c3d8 <__multiply+0x7c>
 800c4a4:	3e01      	subs	r6, #1
 800c4a6:	e79b      	b.n	800c3e0 <__multiply+0x84>
 800c4a8:	0800de8d 	.word	0x0800de8d
 800c4ac:	0800df0f 	.word	0x0800df0f

0800c4b0 <__pow5mult>:
 800c4b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4b4:	4615      	mov	r5, r2
 800c4b6:	f012 0203 	ands.w	r2, r2, #3
 800c4ba:	4607      	mov	r7, r0
 800c4bc:	460e      	mov	r6, r1
 800c4be:	d007      	beq.n	800c4d0 <__pow5mult+0x20>
 800c4c0:	4c25      	ldr	r4, [pc, #148]	@ (800c558 <__pow5mult+0xa8>)
 800c4c2:	3a01      	subs	r2, #1
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c4ca:	f7ff fe55 	bl	800c178 <__multadd>
 800c4ce:	4606      	mov	r6, r0
 800c4d0:	10ad      	asrs	r5, r5, #2
 800c4d2:	d03d      	beq.n	800c550 <__pow5mult+0xa0>
 800c4d4:	69fc      	ldr	r4, [r7, #28]
 800c4d6:	b97c      	cbnz	r4, 800c4f8 <__pow5mult+0x48>
 800c4d8:	2010      	movs	r0, #16
 800c4da:	f7ff fc77 	bl	800bdcc <malloc>
 800c4de:	4602      	mov	r2, r0
 800c4e0:	61f8      	str	r0, [r7, #28]
 800c4e2:	b928      	cbnz	r0, 800c4f0 <__pow5mult+0x40>
 800c4e4:	4b1d      	ldr	r3, [pc, #116]	@ (800c55c <__pow5mult+0xac>)
 800c4e6:	481e      	ldr	r0, [pc, #120]	@ (800c560 <__pow5mult+0xb0>)
 800c4e8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c4ec:	f000 fc9c 	bl	800ce28 <__assert_func>
 800c4f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c4f4:	6004      	str	r4, [r0, #0]
 800c4f6:	60c4      	str	r4, [r0, #12]
 800c4f8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c4fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c500:	b94c      	cbnz	r4, 800c516 <__pow5mult+0x66>
 800c502:	f240 2171 	movw	r1, #625	@ 0x271
 800c506:	4638      	mov	r0, r7
 800c508:	f7ff ff12 	bl	800c330 <__i2b>
 800c50c:	2300      	movs	r3, #0
 800c50e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c512:	4604      	mov	r4, r0
 800c514:	6003      	str	r3, [r0, #0]
 800c516:	f04f 0900 	mov.w	r9, #0
 800c51a:	07eb      	lsls	r3, r5, #31
 800c51c:	d50a      	bpl.n	800c534 <__pow5mult+0x84>
 800c51e:	4631      	mov	r1, r6
 800c520:	4622      	mov	r2, r4
 800c522:	4638      	mov	r0, r7
 800c524:	f7ff ff1a 	bl	800c35c <__multiply>
 800c528:	4631      	mov	r1, r6
 800c52a:	4680      	mov	r8, r0
 800c52c:	4638      	mov	r0, r7
 800c52e:	f7ff fe01 	bl	800c134 <_Bfree>
 800c532:	4646      	mov	r6, r8
 800c534:	106d      	asrs	r5, r5, #1
 800c536:	d00b      	beq.n	800c550 <__pow5mult+0xa0>
 800c538:	6820      	ldr	r0, [r4, #0]
 800c53a:	b938      	cbnz	r0, 800c54c <__pow5mult+0x9c>
 800c53c:	4622      	mov	r2, r4
 800c53e:	4621      	mov	r1, r4
 800c540:	4638      	mov	r0, r7
 800c542:	f7ff ff0b 	bl	800c35c <__multiply>
 800c546:	6020      	str	r0, [r4, #0]
 800c548:	f8c0 9000 	str.w	r9, [r0]
 800c54c:	4604      	mov	r4, r0
 800c54e:	e7e4      	b.n	800c51a <__pow5mult+0x6a>
 800c550:	4630      	mov	r0, r6
 800c552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c556:	bf00      	nop
 800c558:	0800df68 	.word	0x0800df68
 800c55c:	0800de1e 	.word	0x0800de1e
 800c560:	0800df0f 	.word	0x0800df0f

0800c564 <__lshift>:
 800c564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c568:	460c      	mov	r4, r1
 800c56a:	6849      	ldr	r1, [r1, #4]
 800c56c:	6923      	ldr	r3, [r4, #16]
 800c56e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c572:	68a3      	ldr	r3, [r4, #8]
 800c574:	4607      	mov	r7, r0
 800c576:	4691      	mov	r9, r2
 800c578:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c57c:	f108 0601 	add.w	r6, r8, #1
 800c580:	42b3      	cmp	r3, r6
 800c582:	db0b      	blt.n	800c59c <__lshift+0x38>
 800c584:	4638      	mov	r0, r7
 800c586:	f7ff fd95 	bl	800c0b4 <_Balloc>
 800c58a:	4605      	mov	r5, r0
 800c58c:	b948      	cbnz	r0, 800c5a2 <__lshift+0x3e>
 800c58e:	4602      	mov	r2, r0
 800c590:	4b28      	ldr	r3, [pc, #160]	@ (800c634 <__lshift+0xd0>)
 800c592:	4829      	ldr	r0, [pc, #164]	@ (800c638 <__lshift+0xd4>)
 800c594:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c598:	f000 fc46 	bl	800ce28 <__assert_func>
 800c59c:	3101      	adds	r1, #1
 800c59e:	005b      	lsls	r3, r3, #1
 800c5a0:	e7ee      	b.n	800c580 <__lshift+0x1c>
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	f100 0114 	add.w	r1, r0, #20
 800c5a8:	f100 0210 	add.w	r2, r0, #16
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	4553      	cmp	r3, sl
 800c5b0:	db33      	blt.n	800c61a <__lshift+0xb6>
 800c5b2:	6920      	ldr	r0, [r4, #16]
 800c5b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c5b8:	f104 0314 	add.w	r3, r4, #20
 800c5bc:	f019 091f 	ands.w	r9, r9, #31
 800c5c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c5c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c5c8:	d02b      	beq.n	800c622 <__lshift+0xbe>
 800c5ca:	f1c9 0e20 	rsb	lr, r9, #32
 800c5ce:	468a      	mov	sl, r1
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	6818      	ldr	r0, [r3, #0]
 800c5d4:	fa00 f009 	lsl.w	r0, r0, r9
 800c5d8:	4310      	orrs	r0, r2
 800c5da:	f84a 0b04 	str.w	r0, [sl], #4
 800c5de:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5e2:	459c      	cmp	ip, r3
 800c5e4:	fa22 f20e 	lsr.w	r2, r2, lr
 800c5e8:	d8f3      	bhi.n	800c5d2 <__lshift+0x6e>
 800c5ea:	ebac 0304 	sub.w	r3, ip, r4
 800c5ee:	3b15      	subs	r3, #21
 800c5f0:	f023 0303 	bic.w	r3, r3, #3
 800c5f4:	3304      	adds	r3, #4
 800c5f6:	f104 0015 	add.w	r0, r4, #21
 800c5fa:	4584      	cmp	ip, r0
 800c5fc:	bf38      	it	cc
 800c5fe:	2304      	movcc	r3, #4
 800c600:	50ca      	str	r2, [r1, r3]
 800c602:	b10a      	cbz	r2, 800c608 <__lshift+0xa4>
 800c604:	f108 0602 	add.w	r6, r8, #2
 800c608:	3e01      	subs	r6, #1
 800c60a:	4638      	mov	r0, r7
 800c60c:	612e      	str	r6, [r5, #16]
 800c60e:	4621      	mov	r1, r4
 800c610:	f7ff fd90 	bl	800c134 <_Bfree>
 800c614:	4628      	mov	r0, r5
 800c616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c61a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c61e:	3301      	adds	r3, #1
 800c620:	e7c5      	b.n	800c5ae <__lshift+0x4a>
 800c622:	3904      	subs	r1, #4
 800c624:	f853 2b04 	ldr.w	r2, [r3], #4
 800c628:	f841 2f04 	str.w	r2, [r1, #4]!
 800c62c:	459c      	cmp	ip, r3
 800c62e:	d8f9      	bhi.n	800c624 <__lshift+0xc0>
 800c630:	e7ea      	b.n	800c608 <__lshift+0xa4>
 800c632:	bf00      	nop
 800c634:	0800de8d 	.word	0x0800de8d
 800c638:	0800df0f 	.word	0x0800df0f

0800c63c <__mcmp>:
 800c63c:	690a      	ldr	r2, [r1, #16]
 800c63e:	4603      	mov	r3, r0
 800c640:	6900      	ldr	r0, [r0, #16]
 800c642:	1a80      	subs	r0, r0, r2
 800c644:	b530      	push	{r4, r5, lr}
 800c646:	d10e      	bne.n	800c666 <__mcmp+0x2a>
 800c648:	3314      	adds	r3, #20
 800c64a:	3114      	adds	r1, #20
 800c64c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c650:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c654:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c658:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c65c:	4295      	cmp	r5, r2
 800c65e:	d003      	beq.n	800c668 <__mcmp+0x2c>
 800c660:	d205      	bcs.n	800c66e <__mcmp+0x32>
 800c662:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c666:	bd30      	pop	{r4, r5, pc}
 800c668:	42a3      	cmp	r3, r4
 800c66a:	d3f3      	bcc.n	800c654 <__mcmp+0x18>
 800c66c:	e7fb      	b.n	800c666 <__mcmp+0x2a>
 800c66e:	2001      	movs	r0, #1
 800c670:	e7f9      	b.n	800c666 <__mcmp+0x2a>
	...

0800c674 <__mdiff>:
 800c674:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c678:	4689      	mov	r9, r1
 800c67a:	4606      	mov	r6, r0
 800c67c:	4611      	mov	r1, r2
 800c67e:	4648      	mov	r0, r9
 800c680:	4614      	mov	r4, r2
 800c682:	f7ff ffdb 	bl	800c63c <__mcmp>
 800c686:	1e05      	subs	r5, r0, #0
 800c688:	d112      	bne.n	800c6b0 <__mdiff+0x3c>
 800c68a:	4629      	mov	r1, r5
 800c68c:	4630      	mov	r0, r6
 800c68e:	f7ff fd11 	bl	800c0b4 <_Balloc>
 800c692:	4602      	mov	r2, r0
 800c694:	b928      	cbnz	r0, 800c6a2 <__mdiff+0x2e>
 800c696:	4b3f      	ldr	r3, [pc, #252]	@ (800c794 <__mdiff+0x120>)
 800c698:	f240 2137 	movw	r1, #567	@ 0x237
 800c69c:	483e      	ldr	r0, [pc, #248]	@ (800c798 <__mdiff+0x124>)
 800c69e:	f000 fbc3 	bl	800ce28 <__assert_func>
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c6a8:	4610      	mov	r0, r2
 800c6aa:	b003      	add	sp, #12
 800c6ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6b0:	bfbc      	itt	lt
 800c6b2:	464b      	movlt	r3, r9
 800c6b4:	46a1      	movlt	r9, r4
 800c6b6:	4630      	mov	r0, r6
 800c6b8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c6bc:	bfba      	itte	lt
 800c6be:	461c      	movlt	r4, r3
 800c6c0:	2501      	movlt	r5, #1
 800c6c2:	2500      	movge	r5, #0
 800c6c4:	f7ff fcf6 	bl	800c0b4 <_Balloc>
 800c6c8:	4602      	mov	r2, r0
 800c6ca:	b918      	cbnz	r0, 800c6d4 <__mdiff+0x60>
 800c6cc:	4b31      	ldr	r3, [pc, #196]	@ (800c794 <__mdiff+0x120>)
 800c6ce:	f240 2145 	movw	r1, #581	@ 0x245
 800c6d2:	e7e3      	b.n	800c69c <__mdiff+0x28>
 800c6d4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c6d8:	6926      	ldr	r6, [r4, #16]
 800c6da:	60c5      	str	r5, [r0, #12]
 800c6dc:	f109 0310 	add.w	r3, r9, #16
 800c6e0:	f109 0514 	add.w	r5, r9, #20
 800c6e4:	f104 0e14 	add.w	lr, r4, #20
 800c6e8:	f100 0b14 	add.w	fp, r0, #20
 800c6ec:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c6f0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c6f4:	9301      	str	r3, [sp, #4]
 800c6f6:	46d9      	mov	r9, fp
 800c6f8:	f04f 0c00 	mov.w	ip, #0
 800c6fc:	9b01      	ldr	r3, [sp, #4]
 800c6fe:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c702:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c706:	9301      	str	r3, [sp, #4]
 800c708:	fa1f f38a 	uxth.w	r3, sl
 800c70c:	4619      	mov	r1, r3
 800c70e:	b283      	uxth	r3, r0
 800c710:	1acb      	subs	r3, r1, r3
 800c712:	0c00      	lsrs	r0, r0, #16
 800c714:	4463      	add	r3, ip
 800c716:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c71a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c71e:	b29b      	uxth	r3, r3
 800c720:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c724:	4576      	cmp	r6, lr
 800c726:	f849 3b04 	str.w	r3, [r9], #4
 800c72a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c72e:	d8e5      	bhi.n	800c6fc <__mdiff+0x88>
 800c730:	1b33      	subs	r3, r6, r4
 800c732:	3b15      	subs	r3, #21
 800c734:	f023 0303 	bic.w	r3, r3, #3
 800c738:	3415      	adds	r4, #21
 800c73a:	3304      	adds	r3, #4
 800c73c:	42a6      	cmp	r6, r4
 800c73e:	bf38      	it	cc
 800c740:	2304      	movcc	r3, #4
 800c742:	441d      	add	r5, r3
 800c744:	445b      	add	r3, fp
 800c746:	461e      	mov	r6, r3
 800c748:	462c      	mov	r4, r5
 800c74a:	4544      	cmp	r4, r8
 800c74c:	d30e      	bcc.n	800c76c <__mdiff+0xf8>
 800c74e:	f108 0103 	add.w	r1, r8, #3
 800c752:	1b49      	subs	r1, r1, r5
 800c754:	f021 0103 	bic.w	r1, r1, #3
 800c758:	3d03      	subs	r5, #3
 800c75a:	45a8      	cmp	r8, r5
 800c75c:	bf38      	it	cc
 800c75e:	2100      	movcc	r1, #0
 800c760:	440b      	add	r3, r1
 800c762:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c766:	b191      	cbz	r1, 800c78e <__mdiff+0x11a>
 800c768:	6117      	str	r7, [r2, #16]
 800c76a:	e79d      	b.n	800c6a8 <__mdiff+0x34>
 800c76c:	f854 1b04 	ldr.w	r1, [r4], #4
 800c770:	46e6      	mov	lr, ip
 800c772:	0c08      	lsrs	r0, r1, #16
 800c774:	fa1c fc81 	uxtah	ip, ip, r1
 800c778:	4471      	add	r1, lr
 800c77a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c77e:	b289      	uxth	r1, r1
 800c780:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c784:	f846 1b04 	str.w	r1, [r6], #4
 800c788:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c78c:	e7dd      	b.n	800c74a <__mdiff+0xd6>
 800c78e:	3f01      	subs	r7, #1
 800c790:	e7e7      	b.n	800c762 <__mdiff+0xee>
 800c792:	bf00      	nop
 800c794:	0800de8d 	.word	0x0800de8d
 800c798:	0800df0f 	.word	0x0800df0f

0800c79c <__ulp>:
 800c79c:	b082      	sub	sp, #8
 800c79e:	ed8d 0b00 	vstr	d0, [sp]
 800c7a2:	9a01      	ldr	r2, [sp, #4]
 800c7a4:	4b0f      	ldr	r3, [pc, #60]	@ (800c7e4 <__ulp+0x48>)
 800c7a6:	4013      	ands	r3, r2
 800c7a8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	dc08      	bgt.n	800c7c2 <__ulp+0x26>
 800c7b0:	425b      	negs	r3, r3
 800c7b2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c7b6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c7ba:	da04      	bge.n	800c7c6 <__ulp+0x2a>
 800c7bc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c7c0:	4113      	asrs	r3, r2
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	e008      	b.n	800c7d8 <__ulp+0x3c>
 800c7c6:	f1a2 0314 	sub.w	r3, r2, #20
 800c7ca:	2b1e      	cmp	r3, #30
 800c7cc:	bfda      	itte	le
 800c7ce:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c7d2:	40da      	lsrle	r2, r3
 800c7d4:	2201      	movgt	r2, #1
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	4619      	mov	r1, r3
 800c7da:	4610      	mov	r0, r2
 800c7dc:	ec41 0b10 	vmov	d0, r0, r1
 800c7e0:	b002      	add	sp, #8
 800c7e2:	4770      	bx	lr
 800c7e4:	7ff00000 	.word	0x7ff00000

0800c7e8 <__b2d>:
 800c7e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7ec:	6906      	ldr	r6, [r0, #16]
 800c7ee:	f100 0814 	add.w	r8, r0, #20
 800c7f2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c7f6:	1f37      	subs	r7, r6, #4
 800c7f8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c7fc:	4610      	mov	r0, r2
 800c7fe:	f7ff fd4b 	bl	800c298 <__hi0bits>
 800c802:	f1c0 0320 	rsb	r3, r0, #32
 800c806:	280a      	cmp	r0, #10
 800c808:	600b      	str	r3, [r1, #0]
 800c80a:	491b      	ldr	r1, [pc, #108]	@ (800c878 <__b2d+0x90>)
 800c80c:	dc15      	bgt.n	800c83a <__b2d+0x52>
 800c80e:	f1c0 0c0b 	rsb	ip, r0, #11
 800c812:	fa22 f30c 	lsr.w	r3, r2, ip
 800c816:	45b8      	cmp	r8, r7
 800c818:	ea43 0501 	orr.w	r5, r3, r1
 800c81c:	bf34      	ite	cc
 800c81e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c822:	2300      	movcs	r3, #0
 800c824:	3015      	adds	r0, #21
 800c826:	fa02 f000 	lsl.w	r0, r2, r0
 800c82a:	fa23 f30c 	lsr.w	r3, r3, ip
 800c82e:	4303      	orrs	r3, r0
 800c830:	461c      	mov	r4, r3
 800c832:	ec45 4b10 	vmov	d0, r4, r5
 800c836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c83a:	45b8      	cmp	r8, r7
 800c83c:	bf3a      	itte	cc
 800c83e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c842:	f1a6 0708 	subcc.w	r7, r6, #8
 800c846:	2300      	movcs	r3, #0
 800c848:	380b      	subs	r0, #11
 800c84a:	d012      	beq.n	800c872 <__b2d+0x8a>
 800c84c:	f1c0 0120 	rsb	r1, r0, #32
 800c850:	fa23 f401 	lsr.w	r4, r3, r1
 800c854:	4082      	lsls	r2, r0
 800c856:	4322      	orrs	r2, r4
 800c858:	4547      	cmp	r7, r8
 800c85a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c85e:	bf8c      	ite	hi
 800c860:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c864:	2200      	movls	r2, #0
 800c866:	4083      	lsls	r3, r0
 800c868:	40ca      	lsrs	r2, r1
 800c86a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c86e:	4313      	orrs	r3, r2
 800c870:	e7de      	b.n	800c830 <__b2d+0x48>
 800c872:	ea42 0501 	orr.w	r5, r2, r1
 800c876:	e7db      	b.n	800c830 <__b2d+0x48>
 800c878:	3ff00000 	.word	0x3ff00000

0800c87c <__d2b>:
 800c87c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c880:	460f      	mov	r7, r1
 800c882:	2101      	movs	r1, #1
 800c884:	ec59 8b10 	vmov	r8, r9, d0
 800c888:	4616      	mov	r6, r2
 800c88a:	f7ff fc13 	bl	800c0b4 <_Balloc>
 800c88e:	4604      	mov	r4, r0
 800c890:	b930      	cbnz	r0, 800c8a0 <__d2b+0x24>
 800c892:	4602      	mov	r2, r0
 800c894:	4b23      	ldr	r3, [pc, #140]	@ (800c924 <__d2b+0xa8>)
 800c896:	4824      	ldr	r0, [pc, #144]	@ (800c928 <__d2b+0xac>)
 800c898:	f240 310f 	movw	r1, #783	@ 0x30f
 800c89c:	f000 fac4 	bl	800ce28 <__assert_func>
 800c8a0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c8a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c8a8:	b10d      	cbz	r5, 800c8ae <__d2b+0x32>
 800c8aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c8ae:	9301      	str	r3, [sp, #4]
 800c8b0:	f1b8 0300 	subs.w	r3, r8, #0
 800c8b4:	d023      	beq.n	800c8fe <__d2b+0x82>
 800c8b6:	4668      	mov	r0, sp
 800c8b8:	9300      	str	r3, [sp, #0]
 800c8ba:	f7ff fd0c 	bl	800c2d6 <__lo0bits>
 800c8be:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c8c2:	b1d0      	cbz	r0, 800c8fa <__d2b+0x7e>
 800c8c4:	f1c0 0320 	rsb	r3, r0, #32
 800c8c8:	fa02 f303 	lsl.w	r3, r2, r3
 800c8cc:	430b      	orrs	r3, r1
 800c8ce:	40c2      	lsrs	r2, r0
 800c8d0:	6163      	str	r3, [r4, #20]
 800c8d2:	9201      	str	r2, [sp, #4]
 800c8d4:	9b01      	ldr	r3, [sp, #4]
 800c8d6:	61a3      	str	r3, [r4, #24]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	bf0c      	ite	eq
 800c8dc:	2201      	moveq	r2, #1
 800c8de:	2202      	movne	r2, #2
 800c8e0:	6122      	str	r2, [r4, #16]
 800c8e2:	b1a5      	cbz	r5, 800c90e <__d2b+0x92>
 800c8e4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c8e8:	4405      	add	r5, r0
 800c8ea:	603d      	str	r5, [r7, #0]
 800c8ec:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c8f0:	6030      	str	r0, [r6, #0]
 800c8f2:	4620      	mov	r0, r4
 800c8f4:	b003      	add	sp, #12
 800c8f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c8fa:	6161      	str	r1, [r4, #20]
 800c8fc:	e7ea      	b.n	800c8d4 <__d2b+0x58>
 800c8fe:	a801      	add	r0, sp, #4
 800c900:	f7ff fce9 	bl	800c2d6 <__lo0bits>
 800c904:	9b01      	ldr	r3, [sp, #4]
 800c906:	6163      	str	r3, [r4, #20]
 800c908:	3020      	adds	r0, #32
 800c90a:	2201      	movs	r2, #1
 800c90c:	e7e8      	b.n	800c8e0 <__d2b+0x64>
 800c90e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c912:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c916:	6038      	str	r0, [r7, #0]
 800c918:	6918      	ldr	r0, [r3, #16]
 800c91a:	f7ff fcbd 	bl	800c298 <__hi0bits>
 800c91e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c922:	e7e5      	b.n	800c8f0 <__d2b+0x74>
 800c924:	0800de8d 	.word	0x0800de8d
 800c928:	0800df0f 	.word	0x0800df0f

0800c92c <__ratio>:
 800c92c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c930:	b085      	sub	sp, #20
 800c932:	e9cd 1000 	strd	r1, r0, [sp]
 800c936:	a902      	add	r1, sp, #8
 800c938:	f7ff ff56 	bl	800c7e8 <__b2d>
 800c93c:	9800      	ldr	r0, [sp, #0]
 800c93e:	a903      	add	r1, sp, #12
 800c940:	ec55 4b10 	vmov	r4, r5, d0
 800c944:	f7ff ff50 	bl	800c7e8 <__b2d>
 800c948:	9b01      	ldr	r3, [sp, #4]
 800c94a:	6919      	ldr	r1, [r3, #16]
 800c94c:	9b00      	ldr	r3, [sp, #0]
 800c94e:	691b      	ldr	r3, [r3, #16]
 800c950:	1ac9      	subs	r1, r1, r3
 800c952:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c956:	1a9b      	subs	r3, r3, r2
 800c958:	ec5b ab10 	vmov	sl, fp, d0
 800c95c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c960:	2b00      	cmp	r3, #0
 800c962:	bfce      	itee	gt
 800c964:	462a      	movgt	r2, r5
 800c966:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c96a:	465a      	movle	r2, fp
 800c96c:	462f      	mov	r7, r5
 800c96e:	46d9      	mov	r9, fp
 800c970:	bfcc      	ite	gt
 800c972:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c976:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c97a:	464b      	mov	r3, r9
 800c97c:	4652      	mov	r2, sl
 800c97e:	4620      	mov	r0, r4
 800c980:	4639      	mov	r1, r7
 800c982:	f7f3 ff7b 	bl	800087c <__aeabi_ddiv>
 800c986:	ec41 0b10 	vmov	d0, r0, r1
 800c98a:	b005      	add	sp, #20
 800c98c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c990 <__copybits>:
 800c990:	3901      	subs	r1, #1
 800c992:	b570      	push	{r4, r5, r6, lr}
 800c994:	1149      	asrs	r1, r1, #5
 800c996:	6914      	ldr	r4, [r2, #16]
 800c998:	3101      	adds	r1, #1
 800c99a:	f102 0314 	add.w	r3, r2, #20
 800c99e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c9a2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c9a6:	1f05      	subs	r5, r0, #4
 800c9a8:	42a3      	cmp	r3, r4
 800c9aa:	d30c      	bcc.n	800c9c6 <__copybits+0x36>
 800c9ac:	1aa3      	subs	r3, r4, r2
 800c9ae:	3b11      	subs	r3, #17
 800c9b0:	f023 0303 	bic.w	r3, r3, #3
 800c9b4:	3211      	adds	r2, #17
 800c9b6:	42a2      	cmp	r2, r4
 800c9b8:	bf88      	it	hi
 800c9ba:	2300      	movhi	r3, #0
 800c9bc:	4418      	add	r0, r3
 800c9be:	2300      	movs	r3, #0
 800c9c0:	4288      	cmp	r0, r1
 800c9c2:	d305      	bcc.n	800c9d0 <__copybits+0x40>
 800c9c4:	bd70      	pop	{r4, r5, r6, pc}
 800c9c6:	f853 6b04 	ldr.w	r6, [r3], #4
 800c9ca:	f845 6f04 	str.w	r6, [r5, #4]!
 800c9ce:	e7eb      	b.n	800c9a8 <__copybits+0x18>
 800c9d0:	f840 3b04 	str.w	r3, [r0], #4
 800c9d4:	e7f4      	b.n	800c9c0 <__copybits+0x30>

0800c9d6 <__any_on>:
 800c9d6:	f100 0214 	add.w	r2, r0, #20
 800c9da:	6900      	ldr	r0, [r0, #16]
 800c9dc:	114b      	asrs	r3, r1, #5
 800c9de:	4298      	cmp	r0, r3
 800c9e0:	b510      	push	{r4, lr}
 800c9e2:	db11      	blt.n	800ca08 <__any_on+0x32>
 800c9e4:	dd0a      	ble.n	800c9fc <__any_on+0x26>
 800c9e6:	f011 011f 	ands.w	r1, r1, #31
 800c9ea:	d007      	beq.n	800c9fc <__any_on+0x26>
 800c9ec:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c9f0:	fa24 f001 	lsr.w	r0, r4, r1
 800c9f4:	fa00 f101 	lsl.w	r1, r0, r1
 800c9f8:	428c      	cmp	r4, r1
 800c9fa:	d10b      	bne.n	800ca14 <__any_on+0x3e>
 800c9fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ca00:	4293      	cmp	r3, r2
 800ca02:	d803      	bhi.n	800ca0c <__any_on+0x36>
 800ca04:	2000      	movs	r0, #0
 800ca06:	bd10      	pop	{r4, pc}
 800ca08:	4603      	mov	r3, r0
 800ca0a:	e7f7      	b.n	800c9fc <__any_on+0x26>
 800ca0c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ca10:	2900      	cmp	r1, #0
 800ca12:	d0f5      	beq.n	800ca00 <__any_on+0x2a>
 800ca14:	2001      	movs	r0, #1
 800ca16:	e7f6      	b.n	800ca06 <__any_on+0x30>

0800ca18 <__sread>:
 800ca18:	b510      	push	{r4, lr}
 800ca1a:	460c      	mov	r4, r1
 800ca1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca20:	f000 f9ce 	bl	800cdc0 <_read_r>
 800ca24:	2800      	cmp	r0, #0
 800ca26:	bfab      	itete	ge
 800ca28:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ca2a:	89a3      	ldrhlt	r3, [r4, #12]
 800ca2c:	181b      	addge	r3, r3, r0
 800ca2e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ca32:	bfac      	ite	ge
 800ca34:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ca36:	81a3      	strhlt	r3, [r4, #12]
 800ca38:	bd10      	pop	{r4, pc}

0800ca3a <__swrite>:
 800ca3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca3e:	461f      	mov	r7, r3
 800ca40:	898b      	ldrh	r3, [r1, #12]
 800ca42:	05db      	lsls	r3, r3, #23
 800ca44:	4605      	mov	r5, r0
 800ca46:	460c      	mov	r4, r1
 800ca48:	4616      	mov	r6, r2
 800ca4a:	d505      	bpl.n	800ca58 <__swrite+0x1e>
 800ca4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca50:	2302      	movs	r3, #2
 800ca52:	2200      	movs	r2, #0
 800ca54:	f000 f9a2 	bl	800cd9c <_lseek_r>
 800ca58:	89a3      	ldrh	r3, [r4, #12]
 800ca5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ca62:	81a3      	strh	r3, [r4, #12]
 800ca64:	4632      	mov	r2, r6
 800ca66:	463b      	mov	r3, r7
 800ca68:	4628      	mov	r0, r5
 800ca6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca6e:	f000 b9c9 	b.w	800ce04 <_write_r>

0800ca72 <__sseek>:
 800ca72:	b510      	push	{r4, lr}
 800ca74:	460c      	mov	r4, r1
 800ca76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca7a:	f000 f98f 	bl	800cd9c <_lseek_r>
 800ca7e:	1c43      	adds	r3, r0, #1
 800ca80:	89a3      	ldrh	r3, [r4, #12]
 800ca82:	bf15      	itete	ne
 800ca84:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ca86:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ca8a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ca8e:	81a3      	strheq	r3, [r4, #12]
 800ca90:	bf18      	it	ne
 800ca92:	81a3      	strhne	r3, [r4, #12]
 800ca94:	bd10      	pop	{r4, pc}

0800ca96 <__sclose>:
 800ca96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca9a:	f000 b94d 	b.w	800cd38 <_close_r>

0800ca9e <_realloc_r>:
 800ca9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800caa2:	4680      	mov	r8, r0
 800caa4:	4615      	mov	r5, r2
 800caa6:	460c      	mov	r4, r1
 800caa8:	b921      	cbnz	r1, 800cab4 <_realloc_r+0x16>
 800caaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800caae:	4611      	mov	r1, r2
 800cab0:	f7ff b9b6 	b.w	800be20 <_malloc_r>
 800cab4:	b92a      	cbnz	r2, 800cac2 <_realloc_r+0x24>
 800cab6:	f000 f9e9 	bl	800ce8c <_free_r>
 800caba:	2400      	movs	r4, #0
 800cabc:	4620      	mov	r0, r4
 800cabe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cac2:	f000 fa2d 	bl	800cf20 <_malloc_usable_size_r>
 800cac6:	4285      	cmp	r5, r0
 800cac8:	4606      	mov	r6, r0
 800caca:	d802      	bhi.n	800cad2 <_realloc_r+0x34>
 800cacc:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cad0:	d8f4      	bhi.n	800cabc <_realloc_r+0x1e>
 800cad2:	4629      	mov	r1, r5
 800cad4:	4640      	mov	r0, r8
 800cad6:	f7ff f9a3 	bl	800be20 <_malloc_r>
 800cada:	4607      	mov	r7, r0
 800cadc:	2800      	cmp	r0, #0
 800cade:	d0ec      	beq.n	800caba <_realloc_r+0x1c>
 800cae0:	42b5      	cmp	r5, r6
 800cae2:	462a      	mov	r2, r5
 800cae4:	4621      	mov	r1, r4
 800cae6:	bf28      	it	cs
 800cae8:	4632      	movcs	r2, r6
 800caea:	f7fd fd32 	bl	800a552 <memcpy>
 800caee:	4621      	mov	r1, r4
 800caf0:	4640      	mov	r0, r8
 800caf2:	f000 f9cb 	bl	800ce8c <_free_r>
 800caf6:	463c      	mov	r4, r7
 800caf8:	e7e0      	b.n	800cabc <_realloc_r+0x1e>

0800cafa <__swbuf_r>:
 800cafa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cafc:	460e      	mov	r6, r1
 800cafe:	4614      	mov	r4, r2
 800cb00:	4605      	mov	r5, r0
 800cb02:	b118      	cbz	r0, 800cb0c <__swbuf_r+0x12>
 800cb04:	6a03      	ldr	r3, [r0, #32]
 800cb06:	b90b      	cbnz	r3, 800cb0c <__swbuf_r+0x12>
 800cb08:	f7fc fd98 	bl	800963c <__sinit>
 800cb0c:	69a3      	ldr	r3, [r4, #24]
 800cb0e:	60a3      	str	r3, [r4, #8]
 800cb10:	89a3      	ldrh	r3, [r4, #12]
 800cb12:	071a      	lsls	r2, r3, #28
 800cb14:	d501      	bpl.n	800cb1a <__swbuf_r+0x20>
 800cb16:	6923      	ldr	r3, [r4, #16]
 800cb18:	b943      	cbnz	r3, 800cb2c <__swbuf_r+0x32>
 800cb1a:	4621      	mov	r1, r4
 800cb1c:	4628      	mov	r0, r5
 800cb1e:	f000 f82b 	bl	800cb78 <__swsetup_r>
 800cb22:	b118      	cbz	r0, 800cb2c <__swbuf_r+0x32>
 800cb24:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800cb28:	4638      	mov	r0, r7
 800cb2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb2c:	6823      	ldr	r3, [r4, #0]
 800cb2e:	6922      	ldr	r2, [r4, #16]
 800cb30:	1a98      	subs	r0, r3, r2
 800cb32:	6963      	ldr	r3, [r4, #20]
 800cb34:	b2f6      	uxtb	r6, r6
 800cb36:	4283      	cmp	r3, r0
 800cb38:	4637      	mov	r7, r6
 800cb3a:	dc05      	bgt.n	800cb48 <__swbuf_r+0x4e>
 800cb3c:	4621      	mov	r1, r4
 800cb3e:	4628      	mov	r0, r5
 800cb40:	f7ff fa84 	bl	800c04c <_fflush_r>
 800cb44:	2800      	cmp	r0, #0
 800cb46:	d1ed      	bne.n	800cb24 <__swbuf_r+0x2a>
 800cb48:	68a3      	ldr	r3, [r4, #8]
 800cb4a:	3b01      	subs	r3, #1
 800cb4c:	60a3      	str	r3, [r4, #8]
 800cb4e:	6823      	ldr	r3, [r4, #0]
 800cb50:	1c5a      	adds	r2, r3, #1
 800cb52:	6022      	str	r2, [r4, #0]
 800cb54:	701e      	strb	r6, [r3, #0]
 800cb56:	6962      	ldr	r2, [r4, #20]
 800cb58:	1c43      	adds	r3, r0, #1
 800cb5a:	429a      	cmp	r2, r3
 800cb5c:	d004      	beq.n	800cb68 <__swbuf_r+0x6e>
 800cb5e:	89a3      	ldrh	r3, [r4, #12]
 800cb60:	07db      	lsls	r3, r3, #31
 800cb62:	d5e1      	bpl.n	800cb28 <__swbuf_r+0x2e>
 800cb64:	2e0a      	cmp	r6, #10
 800cb66:	d1df      	bne.n	800cb28 <__swbuf_r+0x2e>
 800cb68:	4621      	mov	r1, r4
 800cb6a:	4628      	mov	r0, r5
 800cb6c:	f7ff fa6e 	bl	800c04c <_fflush_r>
 800cb70:	2800      	cmp	r0, #0
 800cb72:	d0d9      	beq.n	800cb28 <__swbuf_r+0x2e>
 800cb74:	e7d6      	b.n	800cb24 <__swbuf_r+0x2a>
	...

0800cb78 <__swsetup_r>:
 800cb78:	b538      	push	{r3, r4, r5, lr}
 800cb7a:	4b29      	ldr	r3, [pc, #164]	@ (800cc20 <__swsetup_r+0xa8>)
 800cb7c:	4605      	mov	r5, r0
 800cb7e:	6818      	ldr	r0, [r3, #0]
 800cb80:	460c      	mov	r4, r1
 800cb82:	b118      	cbz	r0, 800cb8c <__swsetup_r+0x14>
 800cb84:	6a03      	ldr	r3, [r0, #32]
 800cb86:	b90b      	cbnz	r3, 800cb8c <__swsetup_r+0x14>
 800cb88:	f7fc fd58 	bl	800963c <__sinit>
 800cb8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb90:	0719      	lsls	r1, r3, #28
 800cb92:	d422      	bmi.n	800cbda <__swsetup_r+0x62>
 800cb94:	06da      	lsls	r2, r3, #27
 800cb96:	d407      	bmi.n	800cba8 <__swsetup_r+0x30>
 800cb98:	2209      	movs	r2, #9
 800cb9a:	602a      	str	r2, [r5, #0]
 800cb9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cba0:	81a3      	strh	r3, [r4, #12]
 800cba2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cba6:	e033      	b.n	800cc10 <__swsetup_r+0x98>
 800cba8:	0758      	lsls	r0, r3, #29
 800cbaa:	d512      	bpl.n	800cbd2 <__swsetup_r+0x5a>
 800cbac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cbae:	b141      	cbz	r1, 800cbc2 <__swsetup_r+0x4a>
 800cbb0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cbb4:	4299      	cmp	r1, r3
 800cbb6:	d002      	beq.n	800cbbe <__swsetup_r+0x46>
 800cbb8:	4628      	mov	r0, r5
 800cbba:	f000 f967 	bl	800ce8c <_free_r>
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	6363      	str	r3, [r4, #52]	@ 0x34
 800cbc2:	89a3      	ldrh	r3, [r4, #12]
 800cbc4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cbc8:	81a3      	strh	r3, [r4, #12]
 800cbca:	2300      	movs	r3, #0
 800cbcc:	6063      	str	r3, [r4, #4]
 800cbce:	6923      	ldr	r3, [r4, #16]
 800cbd0:	6023      	str	r3, [r4, #0]
 800cbd2:	89a3      	ldrh	r3, [r4, #12]
 800cbd4:	f043 0308 	orr.w	r3, r3, #8
 800cbd8:	81a3      	strh	r3, [r4, #12]
 800cbda:	6923      	ldr	r3, [r4, #16]
 800cbdc:	b94b      	cbnz	r3, 800cbf2 <__swsetup_r+0x7a>
 800cbde:	89a3      	ldrh	r3, [r4, #12]
 800cbe0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cbe4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cbe8:	d003      	beq.n	800cbf2 <__swsetup_r+0x7a>
 800cbea:	4621      	mov	r1, r4
 800cbec:	4628      	mov	r0, r5
 800cbee:	f000 f84c 	bl	800cc8a <__smakebuf_r>
 800cbf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbf6:	f013 0201 	ands.w	r2, r3, #1
 800cbfa:	d00a      	beq.n	800cc12 <__swsetup_r+0x9a>
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	60a2      	str	r2, [r4, #8]
 800cc00:	6962      	ldr	r2, [r4, #20]
 800cc02:	4252      	negs	r2, r2
 800cc04:	61a2      	str	r2, [r4, #24]
 800cc06:	6922      	ldr	r2, [r4, #16]
 800cc08:	b942      	cbnz	r2, 800cc1c <__swsetup_r+0xa4>
 800cc0a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cc0e:	d1c5      	bne.n	800cb9c <__swsetup_r+0x24>
 800cc10:	bd38      	pop	{r3, r4, r5, pc}
 800cc12:	0799      	lsls	r1, r3, #30
 800cc14:	bf58      	it	pl
 800cc16:	6962      	ldrpl	r2, [r4, #20]
 800cc18:	60a2      	str	r2, [r4, #8]
 800cc1a:	e7f4      	b.n	800cc06 <__swsetup_r+0x8e>
 800cc1c:	2000      	movs	r0, #0
 800cc1e:	e7f7      	b.n	800cc10 <__swsetup_r+0x98>
 800cc20:	200001c4 	.word	0x200001c4

0800cc24 <__ascii_wctomb>:
 800cc24:	4603      	mov	r3, r0
 800cc26:	4608      	mov	r0, r1
 800cc28:	b141      	cbz	r1, 800cc3c <__ascii_wctomb+0x18>
 800cc2a:	2aff      	cmp	r2, #255	@ 0xff
 800cc2c:	d904      	bls.n	800cc38 <__ascii_wctomb+0x14>
 800cc2e:	228a      	movs	r2, #138	@ 0x8a
 800cc30:	601a      	str	r2, [r3, #0]
 800cc32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cc36:	4770      	bx	lr
 800cc38:	700a      	strb	r2, [r1, #0]
 800cc3a:	2001      	movs	r0, #1
 800cc3c:	4770      	bx	lr

0800cc3e <__swhatbuf_r>:
 800cc3e:	b570      	push	{r4, r5, r6, lr}
 800cc40:	460c      	mov	r4, r1
 800cc42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc46:	2900      	cmp	r1, #0
 800cc48:	b096      	sub	sp, #88	@ 0x58
 800cc4a:	4615      	mov	r5, r2
 800cc4c:	461e      	mov	r6, r3
 800cc4e:	da0d      	bge.n	800cc6c <__swhatbuf_r+0x2e>
 800cc50:	89a3      	ldrh	r3, [r4, #12]
 800cc52:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cc56:	f04f 0100 	mov.w	r1, #0
 800cc5a:	bf14      	ite	ne
 800cc5c:	2340      	movne	r3, #64	@ 0x40
 800cc5e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cc62:	2000      	movs	r0, #0
 800cc64:	6031      	str	r1, [r6, #0]
 800cc66:	602b      	str	r3, [r5, #0]
 800cc68:	b016      	add	sp, #88	@ 0x58
 800cc6a:	bd70      	pop	{r4, r5, r6, pc}
 800cc6c:	466a      	mov	r2, sp
 800cc6e:	f000 f873 	bl	800cd58 <_fstat_r>
 800cc72:	2800      	cmp	r0, #0
 800cc74:	dbec      	blt.n	800cc50 <__swhatbuf_r+0x12>
 800cc76:	9901      	ldr	r1, [sp, #4]
 800cc78:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cc7c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cc80:	4259      	negs	r1, r3
 800cc82:	4159      	adcs	r1, r3
 800cc84:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cc88:	e7eb      	b.n	800cc62 <__swhatbuf_r+0x24>

0800cc8a <__smakebuf_r>:
 800cc8a:	898b      	ldrh	r3, [r1, #12]
 800cc8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc8e:	079d      	lsls	r5, r3, #30
 800cc90:	4606      	mov	r6, r0
 800cc92:	460c      	mov	r4, r1
 800cc94:	d507      	bpl.n	800cca6 <__smakebuf_r+0x1c>
 800cc96:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cc9a:	6023      	str	r3, [r4, #0]
 800cc9c:	6123      	str	r3, [r4, #16]
 800cc9e:	2301      	movs	r3, #1
 800cca0:	6163      	str	r3, [r4, #20]
 800cca2:	b003      	add	sp, #12
 800cca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cca6:	ab01      	add	r3, sp, #4
 800cca8:	466a      	mov	r2, sp
 800ccaa:	f7ff ffc8 	bl	800cc3e <__swhatbuf_r>
 800ccae:	9f00      	ldr	r7, [sp, #0]
 800ccb0:	4605      	mov	r5, r0
 800ccb2:	4639      	mov	r1, r7
 800ccb4:	4630      	mov	r0, r6
 800ccb6:	f7ff f8b3 	bl	800be20 <_malloc_r>
 800ccba:	b948      	cbnz	r0, 800ccd0 <__smakebuf_r+0x46>
 800ccbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccc0:	059a      	lsls	r2, r3, #22
 800ccc2:	d4ee      	bmi.n	800cca2 <__smakebuf_r+0x18>
 800ccc4:	f023 0303 	bic.w	r3, r3, #3
 800ccc8:	f043 0302 	orr.w	r3, r3, #2
 800cccc:	81a3      	strh	r3, [r4, #12]
 800ccce:	e7e2      	b.n	800cc96 <__smakebuf_r+0xc>
 800ccd0:	89a3      	ldrh	r3, [r4, #12]
 800ccd2:	6020      	str	r0, [r4, #0]
 800ccd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ccd8:	81a3      	strh	r3, [r4, #12]
 800ccda:	9b01      	ldr	r3, [sp, #4]
 800ccdc:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cce0:	b15b      	cbz	r3, 800ccfa <__smakebuf_r+0x70>
 800cce2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cce6:	4630      	mov	r0, r6
 800cce8:	f000 f848 	bl	800cd7c <_isatty_r>
 800ccec:	b128      	cbz	r0, 800ccfa <__smakebuf_r+0x70>
 800ccee:	89a3      	ldrh	r3, [r4, #12]
 800ccf0:	f023 0303 	bic.w	r3, r3, #3
 800ccf4:	f043 0301 	orr.w	r3, r3, #1
 800ccf8:	81a3      	strh	r3, [r4, #12]
 800ccfa:	89a3      	ldrh	r3, [r4, #12]
 800ccfc:	431d      	orrs	r5, r3
 800ccfe:	81a5      	strh	r5, [r4, #12]
 800cd00:	e7cf      	b.n	800cca2 <__smakebuf_r+0x18>

0800cd02 <memmove>:
 800cd02:	4288      	cmp	r0, r1
 800cd04:	b510      	push	{r4, lr}
 800cd06:	eb01 0402 	add.w	r4, r1, r2
 800cd0a:	d902      	bls.n	800cd12 <memmove+0x10>
 800cd0c:	4284      	cmp	r4, r0
 800cd0e:	4623      	mov	r3, r4
 800cd10:	d807      	bhi.n	800cd22 <memmove+0x20>
 800cd12:	1e43      	subs	r3, r0, #1
 800cd14:	42a1      	cmp	r1, r4
 800cd16:	d008      	beq.n	800cd2a <memmove+0x28>
 800cd18:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd1c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cd20:	e7f8      	b.n	800cd14 <memmove+0x12>
 800cd22:	4402      	add	r2, r0
 800cd24:	4601      	mov	r1, r0
 800cd26:	428a      	cmp	r2, r1
 800cd28:	d100      	bne.n	800cd2c <memmove+0x2a>
 800cd2a:	bd10      	pop	{r4, pc}
 800cd2c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cd30:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cd34:	e7f7      	b.n	800cd26 <memmove+0x24>
	...

0800cd38 <_close_r>:
 800cd38:	b538      	push	{r3, r4, r5, lr}
 800cd3a:	4d06      	ldr	r5, [pc, #24]	@ (800cd54 <_close_r+0x1c>)
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	4604      	mov	r4, r0
 800cd40:	4608      	mov	r0, r1
 800cd42:	602b      	str	r3, [r5, #0]
 800cd44:	f7f5 fadc 	bl	8002300 <_close>
 800cd48:	1c43      	adds	r3, r0, #1
 800cd4a:	d102      	bne.n	800cd52 <_close_r+0x1a>
 800cd4c:	682b      	ldr	r3, [r5, #0]
 800cd4e:	b103      	cbz	r3, 800cd52 <_close_r+0x1a>
 800cd50:	6023      	str	r3, [r4, #0]
 800cd52:	bd38      	pop	{r3, r4, r5, pc}
 800cd54:	200008d8 	.word	0x200008d8

0800cd58 <_fstat_r>:
 800cd58:	b538      	push	{r3, r4, r5, lr}
 800cd5a:	4d07      	ldr	r5, [pc, #28]	@ (800cd78 <_fstat_r+0x20>)
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	4604      	mov	r4, r0
 800cd60:	4608      	mov	r0, r1
 800cd62:	4611      	mov	r1, r2
 800cd64:	602b      	str	r3, [r5, #0]
 800cd66:	f7f5 fad7 	bl	8002318 <_fstat>
 800cd6a:	1c43      	adds	r3, r0, #1
 800cd6c:	d102      	bne.n	800cd74 <_fstat_r+0x1c>
 800cd6e:	682b      	ldr	r3, [r5, #0]
 800cd70:	b103      	cbz	r3, 800cd74 <_fstat_r+0x1c>
 800cd72:	6023      	str	r3, [r4, #0]
 800cd74:	bd38      	pop	{r3, r4, r5, pc}
 800cd76:	bf00      	nop
 800cd78:	200008d8 	.word	0x200008d8

0800cd7c <_isatty_r>:
 800cd7c:	b538      	push	{r3, r4, r5, lr}
 800cd7e:	4d06      	ldr	r5, [pc, #24]	@ (800cd98 <_isatty_r+0x1c>)
 800cd80:	2300      	movs	r3, #0
 800cd82:	4604      	mov	r4, r0
 800cd84:	4608      	mov	r0, r1
 800cd86:	602b      	str	r3, [r5, #0]
 800cd88:	f7f5 fad6 	bl	8002338 <_isatty>
 800cd8c:	1c43      	adds	r3, r0, #1
 800cd8e:	d102      	bne.n	800cd96 <_isatty_r+0x1a>
 800cd90:	682b      	ldr	r3, [r5, #0]
 800cd92:	b103      	cbz	r3, 800cd96 <_isatty_r+0x1a>
 800cd94:	6023      	str	r3, [r4, #0]
 800cd96:	bd38      	pop	{r3, r4, r5, pc}
 800cd98:	200008d8 	.word	0x200008d8

0800cd9c <_lseek_r>:
 800cd9c:	b538      	push	{r3, r4, r5, lr}
 800cd9e:	4d07      	ldr	r5, [pc, #28]	@ (800cdbc <_lseek_r+0x20>)
 800cda0:	4604      	mov	r4, r0
 800cda2:	4608      	mov	r0, r1
 800cda4:	4611      	mov	r1, r2
 800cda6:	2200      	movs	r2, #0
 800cda8:	602a      	str	r2, [r5, #0]
 800cdaa:	461a      	mov	r2, r3
 800cdac:	f7f5 facf 	bl	800234e <_lseek>
 800cdb0:	1c43      	adds	r3, r0, #1
 800cdb2:	d102      	bne.n	800cdba <_lseek_r+0x1e>
 800cdb4:	682b      	ldr	r3, [r5, #0]
 800cdb6:	b103      	cbz	r3, 800cdba <_lseek_r+0x1e>
 800cdb8:	6023      	str	r3, [r4, #0]
 800cdba:	bd38      	pop	{r3, r4, r5, pc}
 800cdbc:	200008d8 	.word	0x200008d8

0800cdc0 <_read_r>:
 800cdc0:	b538      	push	{r3, r4, r5, lr}
 800cdc2:	4d07      	ldr	r5, [pc, #28]	@ (800cde0 <_read_r+0x20>)
 800cdc4:	4604      	mov	r4, r0
 800cdc6:	4608      	mov	r0, r1
 800cdc8:	4611      	mov	r1, r2
 800cdca:	2200      	movs	r2, #0
 800cdcc:	602a      	str	r2, [r5, #0]
 800cdce:	461a      	mov	r2, r3
 800cdd0:	f7f5 fa5d 	bl	800228e <_read>
 800cdd4:	1c43      	adds	r3, r0, #1
 800cdd6:	d102      	bne.n	800cdde <_read_r+0x1e>
 800cdd8:	682b      	ldr	r3, [r5, #0]
 800cdda:	b103      	cbz	r3, 800cdde <_read_r+0x1e>
 800cddc:	6023      	str	r3, [r4, #0]
 800cdde:	bd38      	pop	{r3, r4, r5, pc}
 800cde0:	200008d8 	.word	0x200008d8

0800cde4 <_sbrk_r>:
 800cde4:	b538      	push	{r3, r4, r5, lr}
 800cde6:	4d06      	ldr	r5, [pc, #24]	@ (800ce00 <_sbrk_r+0x1c>)
 800cde8:	2300      	movs	r3, #0
 800cdea:	4604      	mov	r4, r0
 800cdec:	4608      	mov	r0, r1
 800cdee:	602b      	str	r3, [r5, #0]
 800cdf0:	f7f5 faba 	bl	8002368 <_sbrk>
 800cdf4:	1c43      	adds	r3, r0, #1
 800cdf6:	d102      	bne.n	800cdfe <_sbrk_r+0x1a>
 800cdf8:	682b      	ldr	r3, [r5, #0]
 800cdfa:	b103      	cbz	r3, 800cdfe <_sbrk_r+0x1a>
 800cdfc:	6023      	str	r3, [r4, #0]
 800cdfe:	bd38      	pop	{r3, r4, r5, pc}
 800ce00:	200008d8 	.word	0x200008d8

0800ce04 <_write_r>:
 800ce04:	b538      	push	{r3, r4, r5, lr}
 800ce06:	4d07      	ldr	r5, [pc, #28]	@ (800ce24 <_write_r+0x20>)
 800ce08:	4604      	mov	r4, r0
 800ce0a:	4608      	mov	r0, r1
 800ce0c:	4611      	mov	r1, r2
 800ce0e:	2200      	movs	r2, #0
 800ce10:	602a      	str	r2, [r5, #0]
 800ce12:	461a      	mov	r2, r3
 800ce14:	f7f5 fa58 	bl	80022c8 <_write>
 800ce18:	1c43      	adds	r3, r0, #1
 800ce1a:	d102      	bne.n	800ce22 <_write_r+0x1e>
 800ce1c:	682b      	ldr	r3, [r5, #0]
 800ce1e:	b103      	cbz	r3, 800ce22 <_write_r+0x1e>
 800ce20:	6023      	str	r3, [r4, #0]
 800ce22:	bd38      	pop	{r3, r4, r5, pc}
 800ce24:	200008d8 	.word	0x200008d8

0800ce28 <__assert_func>:
 800ce28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ce2a:	4614      	mov	r4, r2
 800ce2c:	461a      	mov	r2, r3
 800ce2e:	4b09      	ldr	r3, [pc, #36]	@ (800ce54 <__assert_func+0x2c>)
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	4605      	mov	r5, r0
 800ce34:	68d8      	ldr	r0, [r3, #12]
 800ce36:	b954      	cbnz	r4, 800ce4e <__assert_func+0x26>
 800ce38:	4b07      	ldr	r3, [pc, #28]	@ (800ce58 <__assert_func+0x30>)
 800ce3a:	461c      	mov	r4, r3
 800ce3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ce40:	9100      	str	r1, [sp, #0]
 800ce42:	462b      	mov	r3, r5
 800ce44:	4905      	ldr	r1, [pc, #20]	@ (800ce5c <__assert_func+0x34>)
 800ce46:	f000 f873 	bl	800cf30 <fiprintf>
 800ce4a:	f000 f883 	bl	800cf54 <abort>
 800ce4e:	4b04      	ldr	r3, [pc, #16]	@ (800ce60 <__assert_func+0x38>)
 800ce50:	e7f4      	b.n	800ce3c <__assert_func+0x14>
 800ce52:	bf00      	nop
 800ce54:	200001c4 	.word	0x200001c4
 800ce58:	0800e0a3 	.word	0x0800e0a3
 800ce5c:	0800e075 	.word	0x0800e075
 800ce60:	0800e068 	.word	0x0800e068

0800ce64 <_calloc_r>:
 800ce64:	b570      	push	{r4, r5, r6, lr}
 800ce66:	fba1 5402 	umull	r5, r4, r1, r2
 800ce6a:	b93c      	cbnz	r4, 800ce7c <_calloc_r+0x18>
 800ce6c:	4629      	mov	r1, r5
 800ce6e:	f7fe ffd7 	bl	800be20 <_malloc_r>
 800ce72:	4606      	mov	r6, r0
 800ce74:	b928      	cbnz	r0, 800ce82 <_calloc_r+0x1e>
 800ce76:	2600      	movs	r6, #0
 800ce78:	4630      	mov	r0, r6
 800ce7a:	bd70      	pop	{r4, r5, r6, pc}
 800ce7c:	220c      	movs	r2, #12
 800ce7e:	6002      	str	r2, [r0, #0]
 800ce80:	e7f9      	b.n	800ce76 <_calloc_r+0x12>
 800ce82:	462a      	mov	r2, r5
 800ce84:	4621      	mov	r1, r4
 800ce86:	f7fd fb2b 	bl	800a4e0 <memset>
 800ce8a:	e7f5      	b.n	800ce78 <_calloc_r+0x14>

0800ce8c <_free_r>:
 800ce8c:	b538      	push	{r3, r4, r5, lr}
 800ce8e:	4605      	mov	r5, r0
 800ce90:	2900      	cmp	r1, #0
 800ce92:	d041      	beq.n	800cf18 <_free_r+0x8c>
 800ce94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce98:	1f0c      	subs	r4, r1, #4
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	bfb8      	it	lt
 800ce9e:	18e4      	addlt	r4, r4, r3
 800cea0:	f7ff f8fc 	bl	800c09c <__malloc_lock>
 800cea4:	4a1d      	ldr	r2, [pc, #116]	@ (800cf1c <_free_r+0x90>)
 800cea6:	6813      	ldr	r3, [r2, #0]
 800cea8:	b933      	cbnz	r3, 800ceb8 <_free_r+0x2c>
 800ceaa:	6063      	str	r3, [r4, #4]
 800ceac:	6014      	str	r4, [r2, #0]
 800ceae:	4628      	mov	r0, r5
 800ceb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ceb4:	f7ff b8f8 	b.w	800c0a8 <__malloc_unlock>
 800ceb8:	42a3      	cmp	r3, r4
 800ceba:	d908      	bls.n	800cece <_free_r+0x42>
 800cebc:	6820      	ldr	r0, [r4, #0]
 800cebe:	1821      	adds	r1, r4, r0
 800cec0:	428b      	cmp	r3, r1
 800cec2:	bf01      	itttt	eq
 800cec4:	6819      	ldreq	r1, [r3, #0]
 800cec6:	685b      	ldreq	r3, [r3, #4]
 800cec8:	1809      	addeq	r1, r1, r0
 800ceca:	6021      	streq	r1, [r4, #0]
 800cecc:	e7ed      	b.n	800ceaa <_free_r+0x1e>
 800cece:	461a      	mov	r2, r3
 800ced0:	685b      	ldr	r3, [r3, #4]
 800ced2:	b10b      	cbz	r3, 800ced8 <_free_r+0x4c>
 800ced4:	42a3      	cmp	r3, r4
 800ced6:	d9fa      	bls.n	800cece <_free_r+0x42>
 800ced8:	6811      	ldr	r1, [r2, #0]
 800ceda:	1850      	adds	r0, r2, r1
 800cedc:	42a0      	cmp	r0, r4
 800cede:	d10b      	bne.n	800cef8 <_free_r+0x6c>
 800cee0:	6820      	ldr	r0, [r4, #0]
 800cee2:	4401      	add	r1, r0
 800cee4:	1850      	adds	r0, r2, r1
 800cee6:	4283      	cmp	r3, r0
 800cee8:	6011      	str	r1, [r2, #0]
 800ceea:	d1e0      	bne.n	800ceae <_free_r+0x22>
 800ceec:	6818      	ldr	r0, [r3, #0]
 800ceee:	685b      	ldr	r3, [r3, #4]
 800cef0:	6053      	str	r3, [r2, #4]
 800cef2:	4408      	add	r0, r1
 800cef4:	6010      	str	r0, [r2, #0]
 800cef6:	e7da      	b.n	800ceae <_free_r+0x22>
 800cef8:	d902      	bls.n	800cf00 <_free_r+0x74>
 800cefa:	230c      	movs	r3, #12
 800cefc:	602b      	str	r3, [r5, #0]
 800cefe:	e7d6      	b.n	800ceae <_free_r+0x22>
 800cf00:	6820      	ldr	r0, [r4, #0]
 800cf02:	1821      	adds	r1, r4, r0
 800cf04:	428b      	cmp	r3, r1
 800cf06:	bf04      	itt	eq
 800cf08:	6819      	ldreq	r1, [r3, #0]
 800cf0a:	685b      	ldreq	r3, [r3, #4]
 800cf0c:	6063      	str	r3, [r4, #4]
 800cf0e:	bf04      	itt	eq
 800cf10:	1809      	addeq	r1, r1, r0
 800cf12:	6021      	streq	r1, [r4, #0]
 800cf14:	6054      	str	r4, [r2, #4]
 800cf16:	e7ca      	b.n	800ceae <_free_r+0x22>
 800cf18:	bd38      	pop	{r3, r4, r5, pc}
 800cf1a:	bf00      	nop
 800cf1c:	200008d4 	.word	0x200008d4

0800cf20 <_malloc_usable_size_r>:
 800cf20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf24:	1f18      	subs	r0, r3, #4
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	bfbc      	itt	lt
 800cf2a:	580b      	ldrlt	r3, [r1, r0]
 800cf2c:	18c0      	addlt	r0, r0, r3
 800cf2e:	4770      	bx	lr

0800cf30 <fiprintf>:
 800cf30:	b40e      	push	{r1, r2, r3}
 800cf32:	b503      	push	{r0, r1, lr}
 800cf34:	4601      	mov	r1, r0
 800cf36:	ab03      	add	r3, sp, #12
 800cf38:	4805      	ldr	r0, [pc, #20]	@ (800cf50 <fiprintf+0x20>)
 800cf3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf3e:	6800      	ldr	r0, [r0, #0]
 800cf40:	9301      	str	r3, [sp, #4]
 800cf42:	f7fe fe2b 	bl	800bb9c <_vfiprintf_r>
 800cf46:	b002      	add	sp, #8
 800cf48:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf4c:	b003      	add	sp, #12
 800cf4e:	4770      	bx	lr
 800cf50:	200001c4 	.word	0x200001c4

0800cf54 <abort>:
 800cf54:	b508      	push	{r3, lr}
 800cf56:	2006      	movs	r0, #6
 800cf58:	f000 f82c 	bl	800cfb4 <raise>
 800cf5c:	2001      	movs	r0, #1
 800cf5e:	f7f5 f98b 	bl	8002278 <_exit>

0800cf62 <_raise_r>:
 800cf62:	291f      	cmp	r1, #31
 800cf64:	b538      	push	{r3, r4, r5, lr}
 800cf66:	4605      	mov	r5, r0
 800cf68:	460c      	mov	r4, r1
 800cf6a:	d904      	bls.n	800cf76 <_raise_r+0x14>
 800cf6c:	2316      	movs	r3, #22
 800cf6e:	6003      	str	r3, [r0, #0]
 800cf70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cf74:	bd38      	pop	{r3, r4, r5, pc}
 800cf76:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cf78:	b112      	cbz	r2, 800cf80 <_raise_r+0x1e>
 800cf7a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cf7e:	b94b      	cbnz	r3, 800cf94 <_raise_r+0x32>
 800cf80:	4628      	mov	r0, r5
 800cf82:	f000 f831 	bl	800cfe8 <_getpid_r>
 800cf86:	4622      	mov	r2, r4
 800cf88:	4601      	mov	r1, r0
 800cf8a:	4628      	mov	r0, r5
 800cf8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf90:	f000 b818 	b.w	800cfc4 <_kill_r>
 800cf94:	2b01      	cmp	r3, #1
 800cf96:	d00a      	beq.n	800cfae <_raise_r+0x4c>
 800cf98:	1c59      	adds	r1, r3, #1
 800cf9a:	d103      	bne.n	800cfa4 <_raise_r+0x42>
 800cf9c:	2316      	movs	r3, #22
 800cf9e:	6003      	str	r3, [r0, #0]
 800cfa0:	2001      	movs	r0, #1
 800cfa2:	e7e7      	b.n	800cf74 <_raise_r+0x12>
 800cfa4:	2100      	movs	r1, #0
 800cfa6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cfaa:	4620      	mov	r0, r4
 800cfac:	4798      	blx	r3
 800cfae:	2000      	movs	r0, #0
 800cfb0:	e7e0      	b.n	800cf74 <_raise_r+0x12>
	...

0800cfb4 <raise>:
 800cfb4:	4b02      	ldr	r3, [pc, #8]	@ (800cfc0 <raise+0xc>)
 800cfb6:	4601      	mov	r1, r0
 800cfb8:	6818      	ldr	r0, [r3, #0]
 800cfba:	f7ff bfd2 	b.w	800cf62 <_raise_r>
 800cfbe:	bf00      	nop
 800cfc0:	200001c4 	.word	0x200001c4

0800cfc4 <_kill_r>:
 800cfc4:	b538      	push	{r3, r4, r5, lr}
 800cfc6:	4d07      	ldr	r5, [pc, #28]	@ (800cfe4 <_kill_r+0x20>)
 800cfc8:	2300      	movs	r3, #0
 800cfca:	4604      	mov	r4, r0
 800cfcc:	4608      	mov	r0, r1
 800cfce:	4611      	mov	r1, r2
 800cfd0:	602b      	str	r3, [r5, #0]
 800cfd2:	f7f5 f941 	bl	8002258 <_kill>
 800cfd6:	1c43      	adds	r3, r0, #1
 800cfd8:	d102      	bne.n	800cfe0 <_kill_r+0x1c>
 800cfda:	682b      	ldr	r3, [r5, #0]
 800cfdc:	b103      	cbz	r3, 800cfe0 <_kill_r+0x1c>
 800cfde:	6023      	str	r3, [r4, #0]
 800cfe0:	bd38      	pop	{r3, r4, r5, pc}
 800cfe2:	bf00      	nop
 800cfe4:	200008d8 	.word	0x200008d8

0800cfe8 <_getpid_r>:
 800cfe8:	f7f5 b92e 	b.w	8002248 <_getpid>

0800cfec <atan2f>:
 800cfec:	f000 b81e 	b.w	800d02c <__ieee754_atan2f>

0800cff0 <sqrtf>:
 800cff0:	b508      	push	{r3, lr}
 800cff2:	ed2d 8b02 	vpush	{d8}
 800cff6:	eeb0 8a40 	vmov.f32	s16, s0
 800cffa:	f000 f8b7 	bl	800d16c <__ieee754_sqrtf>
 800cffe:	eeb4 8a48 	vcmp.f32	s16, s16
 800d002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d006:	d60c      	bvs.n	800d022 <sqrtf+0x32>
 800d008:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800d028 <sqrtf+0x38>
 800d00c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d014:	d505      	bpl.n	800d022 <sqrtf+0x32>
 800d016:	f7fd fa6f 	bl	800a4f8 <__errno>
 800d01a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800d01e:	2321      	movs	r3, #33	@ 0x21
 800d020:	6003      	str	r3, [r0, #0]
 800d022:	ecbd 8b02 	vpop	{d8}
 800d026:	bd08      	pop	{r3, pc}
 800d028:	00000000 	.word	0x00000000

0800d02c <__ieee754_atan2f>:
 800d02c:	ee10 2a90 	vmov	r2, s1
 800d030:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800d034:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800d038:	b510      	push	{r4, lr}
 800d03a:	eef0 7a40 	vmov.f32	s15, s0
 800d03e:	d806      	bhi.n	800d04e <__ieee754_atan2f+0x22>
 800d040:	ee10 0a10 	vmov	r0, s0
 800d044:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800d048:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d04c:	d904      	bls.n	800d058 <__ieee754_atan2f+0x2c>
 800d04e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800d052:	eeb0 0a67 	vmov.f32	s0, s15
 800d056:	bd10      	pop	{r4, pc}
 800d058:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800d05c:	d103      	bne.n	800d066 <__ieee754_atan2f+0x3a>
 800d05e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d062:	f000 b887 	b.w	800d174 <atanf>
 800d066:	1794      	asrs	r4, r2, #30
 800d068:	f004 0402 	and.w	r4, r4, #2
 800d06c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800d070:	b943      	cbnz	r3, 800d084 <__ieee754_atan2f+0x58>
 800d072:	2c02      	cmp	r4, #2
 800d074:	d05e      	beq.n	800d134 <__ieee754_atan2f+0x108>
 800d076:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800d148 <__ieee754_atan2f+0x11c>
 800d07a:	2c03      	cmp	r4, #3
 800d07c:	bf08      	it	eq
 800d07e:	eef0 7a47 	vmoveq.f32	s15, s14
 800d082:	e7e6      	b.n	800d052 <__ieee754_atan2f+0x26>
 800d084:	b941      	cbnz	r1, 800d098 <__ieee754_atan2f+0x6c>
 800d086:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800d14c <__ieee754_atan2f+0x120>
 800d08a:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800d150 <__ieee754_atan2f+0x124>
 800d08e:	2800      	cmp	r0, #0
 800d090:	bfb8      	it	lt
 800d092:	eef0 7a47 	vmovlt.f32	s15, s14
 800d096:	e7dc      	b.n	800d052 <__ieee754_atan2f+0x26>
 800d098:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800d09c:	d110      	bne.n	800d0c0 <__ieee754_atan2f+0x94>
 800d09e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d0a2:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 800d0a6:	d107      	bne.n	800d0b8 <__ieee754_atan2f+0x8c>
 800d0a8:	2c02      	cmp	r4, #2
 800d0aa:	d846      	bhi.n	800d13a <__ieee754_atan2f+0x10e>
 800d0ac:	4b29      	ldr	r3, [pc, #164]	@ (800d154 <__ieee754_atan2f+0x128>)
 800d0ae:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d0b2:	edd3 7a00 	vldr	s15, [r3]
 800d0b6:	e7cc      	b.n	800d052 <__ieee754_atan2f+0x26>
 800d0b8:	2c02      	cmp	r4, #2
 800d0ba:	d841      	bhi.n	800d140 <__ieee754_atan2f+0x114>
 800d0bc:	4b26      	ldr	r3, [pc, #152]	@ (800d158 <__ieee754_atan2f+0x12c>)
 800d0be:	e7f6      	b.n	800d0ae <__ieee754_atan2f+0x82>
 800d0c0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d0c4:	d0df      	beq.n	800d086 <__ieee754_atan2f+0x5a>
 800d0c6:	1a5b      	subs	r3, r3, r1
 800d0c8:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800d0cc:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800d0d0:	da1a      	bge.n	800d108 <__ieee754_atan2f+0xdc>
 800d0d2:	2a00      	cmp	r2, #0
 800d0d4:	da01      	bge.n	800d0da <__ieee754_atan2f+0xae>
 800d0d6:	313c      	adds	r1, #60	@ 0x3c
 800d0d8:	db19      	blt.n	800d10e <__ieee754_atan2f+0xe2>
 800d0da:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800d0de:	f000 f91d 	bl	800d31c <fabsf>
 800d0e2:	f000 f847 	bl	800d174 <atanf>
 800d0e6:	eef0 7a40 	vmov.f32	s15, s0
 800d0ea:	2c01      	cmp	r4, #1
 800d0ec:	d012      	beq.n	800d114 <__ieee754_atan2f+0xe8>
 800d0ee:	2c02      	cmp	r4, #2
 800d0f0:	d017      	beq.n	800d122 <__ieee754_atan2f+0xf6>
 800d0f2:	2c00      	cmp	r4, #0
 800d0f4:	d0ad      	beq.n	800d052 <__ieee754_atan2f+0x26>
 800d0f6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800d15c <__ieee754_atan2f+0x130>
 800d0fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d0fe:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800d160 <__ieee754_atan2f+0x134>
 800d102:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d106:	e7a4      	b.n	800d052 <__ieee754_atan2f+0x26>
 800d108:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800d14c <__ieee754_atan2f+0x120>
 800d10c:	e7ed      	b.n	800d0ea <__ieee754_atan2f+0xbe>
 800d10e:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800d164 <__ieee754_atan2f+0x138>
 800d112:	e7ea      	b.n	800d0ea <__ieee754_atan2f+0xbe>
 800d114:	ee17 3a90 	vmov	r3, s15
 800d118:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800d11c:	ee07 3a90 	vmov	s15, r3
 800d120:	e797      	b.n	800d052 <__ieee754_atan2f+0x26>
 800d122:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800d15c <__ieee754_atan2f+0x130>
 800d126:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d12a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800d160 <__ieee754_atan2f+0x134>
 800d12e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d132:	e78e      	b.n	800d052 <__ieee754_atan2f+0x26>
 800d134:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800d160 <__ieee754_atan2f+0x134>
 800d138:	e78b      	b.n	800d052 <__ieee754_atan2f+0x26>
 800d13a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800d168 <__ieee754_atan2f+0x13c>
 800d13e:	e788      	b.n	800d052 <__ieee754_atan2f+0x26>
 800d140:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800d164 <__ieee754_atan2f+0x138>
 800d144:	e785      	b.n	800d052 <__ieee754_atan2f+0x26>
 800d146:	bf00      	nop
 800d148:	c0490fdb 	.word	0xc0490fdb
 800d14c:	3fc90fdb 	.word	0x3fc90fdb
 800d150:	bfc90fdb 	.word	0xbfc90fdb
 800d154:	0800e0b0 	.word	0x0800e0b0
 800d158:	0800e0a4 	.word	0x0800e0a4
 800d15c:	33bbbd2e 	.word	0x33bbbd2e
 800d160:	40490fdb 	.word	0x40490fdb
 800d164:	00000000 	.word	0x00000000
 800d168:	3f490fdb 	.word	0x3f490fdb

0800d16c <__ieee754_sqrtf>:
 800d16c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d170:	4770      	bx	lr
	...

0800d174 <atanf>:
 800d174:	b538      	push	{r3, r4, r5, lr}
 800d176:	ee10 5a10 	vmov	r5, s0
 800d17a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800d17e:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800d182:	eef0 7a40 	vmov.f32	s15, s0
 800d186:	d310      	bcc.n	800d1aa <atanf+0x36>
 800d188:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800d18c:	d904      	bls.n	800d198 <atanf+0x24>
 800d18e:	ee70 7a00 	vadd.f32	s15, s0, s0
 800d192:	eeb0 0a67 	vmov.f32	s0, s15
 800d196:	bd38      	pop	{r3, r4, r5, pc}
 800d198:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800d2d0 <atanf+0x15c>
 800d19c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800d2d4 <atanf+0x160>
 800d1a0:	2d00      	cmp	r5, #0
 800d1a2:	bfc8      	it	gt
 800d1a4:	eef0 7a47 	vmovgt.f32	s15, s14
 800d1a8:	e7f3      	b.n	800d192 <atanf+0x1e>
 800d1aa:	4b4b      	ldr	r3, [pc, #300]	@ (800d2d8 <atanf+0x164>)
 800d1ac:	429c      	cmp	r4, r3
 800d1ae:	d810      	bhi.n	800d1d2 <atanf+0x5e>
 800d1b0:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800d1b4:	d20a      	bcs.n	800d1cc <atanf+0x58>
 800d1b6:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800d2dc <atanf+0x168>
 800d1ba:	ee30 7a07 	vadd.f32	s14, s0, s14
 800d1be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d1c2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800d1c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1ca:	dce2      	bgt.n	800d192 <atanf+0x1e>
 800d1cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d1d0:	e013      	b.n	800d1fa <atanf+0x86>
 800d1d2:	f000 f8a3 	bl	800d31c <fabsf>
 800d1d6:	4b42      	ldr	r3, [pc, #264]	@ (800d2e0 <atanf+0x16c>)
 800d1d8:	429c      	cmp	r4, r3
 800d1da:	d84f      	bhi.n	800d27c <atanf+0x108>
 800d1dc:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800d1e0:	429c      	cmp	r4, r3
 800d1e2:	d841      	bhi.n	800d268 <atanf+0xf4>
 800d1e4:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800d1e8:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800d1ec:	eea0 7a27 	vfma.f32	s14, s0, s15
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d1f6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d1fa:	1c5a      	adds	r2, r3, #1
 800d1fc:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800d200:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800d2e4 <atanf+0x170>
 800d204:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800d2e8 <atanf+0x174>
 800d208:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800d2ec <atanf+0x178>
 800d20c:	ee66 6a06 	vmul.f32	s13, s12, s12
 800d210:	eee6 5a87 	vfma.f32	s11, s13, s14
 800d214:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800d2f0 <atanf+0x17c>
 800d218:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800d21c:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800d2f4 <atanf+0x180>
 800d220:	eee7 5a26 	vfma.f32	s11, s14, s13
 800d224:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800d2f8 <atanf+0x184>
 800d228:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800d22c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800d2fc <atanf+0x188>
 800d230:	eee7 5a26 	vfma.f32	s11, s14, s13
 800d234:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800d300 <atanf+0x18c>
 800d238:	eea6 5a87 	vfma.f32	s10, s13, s14
 800d23c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800d304 <atanf+0x190>
 800d240:	eea5 7a26 	vfma.f32	s14, s10, s13
 800d244:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800d308 <atanf+0x194>
 800d248:	eea7 5a26 	vfma.f32	s10, s14, s13
 800d24c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800d30c <atanf+0x198>
 800d250:	eea5 7a26 	vfma.f32	s14, s10, s13
 800d254:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d258:	eea5 7a86 	vfma.f32	s14, s11, s12
 800d25c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d260:	d121      	bne.n	800d2a6 <atanf+0x132>
 800d262:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d266:	e794      	b.n	800d192 <atanf+0x1e>
 800d268:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800d26c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800d270:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d274:	2301      	movs	r3, #1
 800d276:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d27a:	e7be      	b.n	800d1fa <atanf+0x86>
 800d27c:	4b24      	ldr	r3, [pc, #144]	@ (800d310 <atanf+0x19c>)
 800d27e:	429c      	cmp	r4, r3
 800d280:	d80b      	bhi.n	800d29a <atanf+0x126>
 800d282:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800d286:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d28a:	eea0 7a27 	vfma.f32	s14, s0, s15
 800d28e:	2302      	movs	r3, #2
 800d290:	ee70 6a67 	vsub.f32	s13, s0, s15
 800d294:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d298:	e7af      	b.n	800d1fa <atanf+0x86>
 800d29a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800d29e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d2a2:	2303      	movs	r3, #3
 800d2a4:	e7a9      	b.n	800d1fa <atanf+0x86>
 800d2a6:	4a1b      	ldr	r2, [pc, #108]	@ (800d314 <atanf+0x1a0>)
 800d2a8:	491b      	ldr	r1, [pc, #108]	@ (800d318 <atanf+0x1a4>)
 800d2aa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d2ae:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800d2b2:	edd3 6a00 	vldr	s13, [r3]
 800d2b6:	ee37 7a66 	vsub.f32	s14, s14, s13
 800d2ba:	2d00      	cmp	r5, #0
 800d2bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d2c0:	edd2 7a00 	vldr	s15, [r2]
 800d2c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d2c8:	bfb8      	it	lt
 800d2ca:	eef1 7a67 	vneglt.f32	s15, s15
 800d2ce:	e760      	b.n	800d192 <atanf+0x1e>
 800d2d0:	bfc90fdb 	.word	0xbfc90fdb
 800d2d4:	3fc90fdb 	.word	0x3fc90fdb
 800d2d8:	3edfffff 	.word	0x3edfffff
 800d2dc:	7149f2ca 	.word	0x7149f2ca
 800d2e0:	3f97ffff 	.word	0x3f97ffff
 800d2e4:	3c8569d7 	.word	0x3c8569d7
 800d2e8:	3d4bda59 	.word	0x3d4bda59
 800d2ec:	bd6ef16b 	.word	0xbd6ef16b
 800d2f0:	3d886b35 	.word	0x3d886b35
 800d2f4:	3dba2e6e 	.word	0x3dba2e6e
 800d2f8:	3e124925 	.word	0x3e124925
 800d2fc:	3eaaaaab 	.word	0x3eaaaaab
 800d300:	bd15a221 	.word	0xbd15a221
 800d304:	bd9d8795 	.word	0xbd9d8795
 800d308:	bde38e38 	.word	0xbde38e38
 800d30c:	be4ccccd 	.word	0xbe4ccccd
 800d310:	401bffff 	.word	0x401bffff
 800d314:	0800e0cc 	.word	0x0800e0cc
 800d318:	0800e0bc 	.word	0x0800e0bc

0800d31c <fabsf>:
 800d31c:	ee10 3a10 	vmov	r3, s0
 800d320:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d324:	ee00 3a10 	vmov	s0, r3
 800d328:	4770      	bx	lr
	...

0800d32c <_init>:
 800d32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d32e:	bf00      	nop
 800d330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d332:	bc08      	pop	{r3}
 800d334:	469e      	mov	lr, r3
 800d336:	4770      	bx	lr

0800d338 <_fini>:
 800d338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d33a:	bf00      	nop
 800d33c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d33e:	bc08      	pop	{r3}
 800d340:	469e      	mov	lr, r3
 800d342:	4770      	bx	lr
>>>>>>> Stashed changes
