
project_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d034  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d4c  0800d1f8  0800d1f8  0000e1f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df44  0800df44  0000f214  2**0
                  CONTENTS
  4 .ARM          00000008  0800df44  0800df44  0000ef44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800df4c  0800df4c  0000f214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df4c  0800df4c  0000ef4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800df50  0800df50  0000ef50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  0800df54  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c4  20000214  0800e168  0000f214  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008d8  0800e168  0000f8d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f214  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e0b0  00000000  00000000  0000f244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000396d  00000000  00000000  0002d2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001758  00000000  00000000  00030c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001206  00000000  00000000  000323c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dd22  00000000  00000000  000335c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c223  00000000  00000000  000612e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00115b16  00000000  00000000  0007d50b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  00193021  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007800  00000000  00000000  001930dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  0019a8dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000000fa  00000000  00000000  0019a92a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000010  00000000  00000000  0019aa24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000214 	.word	0x20000214
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800d1dc 	.word	0x0800d1dc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000218 	.word	0x20000218
 80001fc:	0800d1dc 	.word	0x0800d1dc

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000ccc:	f000 b9a0 	b.w	8001010 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	460c      	mov	r4, r1
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d14e      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d60:	4694      	mov	ip, r2
 8000d62:	458c      	cmp	ip, r1
 8000d64:	4686      	mov	lr, r0
 8000d66:	fab2 f282 	clz	r2, r2
 8000d6a:	d962      	bls.n	8000e32 <__udivmoddi4+0xde>
 8000d6c:	b14a      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d6e:	f1c2 0320 	rsb	r3, r2, #32
 8000d72:	4091      	lsls	r1, r2
 8000d74:	fa20 f303 	lsr.w	r3, r0, r3
 8000d78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7c:	4319      	orrs	r1, r3
 8000d7e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f f68c 	uxth.w	r6, ip
 8000d8a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d92:	fb07 1114 	mls	r1, r7, r4, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb04 f106 	mul.w	r1, r4, r6
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000daa:	f080 8112 	bcs.w	8000fd2 <__udivmoddi4+0x27e>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 810f 	bls.w	8000fd2 <__udivmoddi4+0x27e>
 8000db4:	3c02      	subs	r4, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a59      	subs	r1, r3, r1
 8000dba:	fa1f f38e 	uxth.w	r3, lr
 8000dbe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dca:	fb00 f606 	mul.w	r6, r0, r6
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x94>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dda:	f080 80fc 	bcs.w	8000fd6 <__udivmoddi4+0x282>
 8000dde:	429e      	cmp	r6, r3
 8000de0:	f240 80f9 	bls.w	8000fd6 <__udivmoddi4+0x282>
 8000de4:	4463      	add	r3, ip
 8000de6:	3802      	subs	r0, #2
 8000de8:	1b9b      	subs	r3, r3, r6
 8000dea:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dee:	2100      	movs	r1, #0
 8000df0:	b11d      	cbz	r5, 8000dfa <__udivmoddi4+0xa6>
 8000df2:	40d3      	lsrs	r3, r2
 8000df4:	2200      	movs	r2, #0
 8000df6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d905      	bls.n	8000e0e <__udivmoddi4+0xba>
 8000e02:	b10d      	cbz	r5, 8000e08 <__udivmoddi4+0xb4>
 8000e04:	e9c5 0100 	strd	r0, r1, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e7f5      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000e0e:	fab3 f183 	clz	r1, r3
 8000e12:	2900      	cmp	r1, #0
 8000e14:	d146      	bne.n	8000ea4 <__udivmoddi4+0x150>
 8000e16:	42a3      	cmp	r3, r4
 8000e18:	d302      	bcc.n	8000e20 <__udivmoddi4+0xcc>
 8000e1a:	4290      	cmp	r0, r2
 8000e1c:	f0c0 80f0 	bcc.w	8001000 <__udivmoddi4+0x2ac>
 8000e20:	1a86      	subs	r6, r0, r2
 8000e22:	eb64 0303 	sbc.w	r3, r4, r3
 8000e26:	2001      	movs	r0, #1
 8000e28:	2d00      	cmp	r5, #0
 8000e2a:	d0e6      	beq.n	8000dfa <__udivmoddi4+0xa6>
 8000e2c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e30:	e7e3      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000e32:	2a00      	cmp	r2, #0
 8000e34:	f040 8090 	bne.w	8000f58 <__udivmoddi4+0x204>
 8000e38:	eba1 040c 	sub.w	r4, r1, ip
 8000e3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e40:	fa1f f78c 	uxth.w	r7, ip
 8000e44:	2101      	movs	r1, #1
 8000e46:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e4a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e4e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e56:	fb07 f006 	mul.w	r0, r7, r6
 8000e5a:	4298      	cmp	r0, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x11c>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x11a>
 8000e68:	4298      	cmp	r0, r3
 8000e6a:	f200 80cd 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e6e:	4626      	mov	r6, r4
 8000e70:	1a1c      	subs	r4, r3, r0
 8000e72:	fa1f f38e 	uxth.w	r3, lr
 8000e76:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e7a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e7e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e82:	fb00 f707 	mul.w	r7, r0, r7
 8000e86:	429f      	cmp	r7, r3
 8000e88:	d908      	bls.n	8000e9c <__udivmoddi4+0x148>
 8000e8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e92:	d202      	bcs.n	8000e9a <__udivmoddi4+0x146>
 8000e94:	429f      	cmp	r7, r3
 8000e96:	f200 80b0 	bhi.w	8000ffa <__udivmoddi4+0x2a6>
 8000e9a:	4620      	mov	r0, r4
 8000e9c:	1bdb      	subs	r3, r3, r7
 8000e9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ea2:	e7a5      	b.n	8000df0 <__udivmoddi4+0x9c>
 8000ea4:	f1c1 0620 	rsb	r6, r1, #32
 8000ea8:	408b      	lsls	r3, r1
 8000eaa:	fa22 f706 	lsr.w	r7, r2, r6
 8000eae:	431f      	orrs	r7, r3
 8000eb0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000eb4:	fa04 f301 	lsl.w	r3, r4, r1
 8000eb8:	ea43 030c 	orr.w	r3, r3, ip
 8000ebc:	40f4      	lsrs	r4, r6
 8000ebe:	fa00 f801 	lsl.w	r8, r0, r1
 8000ec2:	0c38      	lsrs	r0, r7, #16
 8000ec4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ec8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ecc:	fa1f fc87 	uxth.w	ip, r7
 8000ed0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ed4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ed8:	fb0e f90c 	mul.w	r9, lr, ip
 8000edc:	45a1      	cmp	r9, r4
 8000ede:	fa02 f201 	lsl.w	r2, r2, r1
 8000ee2:	d90a      	bls.n	8000efa <__udivmoddi4+0x1a6>
 8000ee4:	193c      	adds	r4, r7, r4
 8000ee6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000eea:	f080 8084 	bcs.w	8000ff6 <__udivmoddi4+0x2a2>
 8000eee:	45a1      	cmp	r9, r4
 8000ef0:	f240 8081 	bls.w	8000ff6 <__udivmoddi4+0x2a2>
 8000ef4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ef8:	443c      	add	r4, r7
 8000efa:	eba4 0409 	sub.w	r4, r4, r9
 8000efe:	fa1f f983 	uxth.w	r9, r3
 8000f02:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f06:	fb00 4413 	mls	r4, r0, r3, r4
 8000f0a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f0e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f12:	45a4      	cmp	ip, r4
 8000f14:	d907      	bls.n	8000f26 <__udivmoddi4+0x1d2>
 8000f16:	193c      	adds	r4, r7, r4
 8000f18:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f1c:	d267      	bcs.n	8000fee <__udivmoddi4+0x29a>
 8000f1e:	45a4      	cmp	ip, r4
 8000f20:	d965      	bls.n	8000fee <__udivmoddi4+0x29a>
 8000f22:	3b02      	subs	r3, #2
 8000f24:	443c      	add	r4, r7
 8000f26:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f2a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f2e:	eba4 040c 	sub.w	r4, r4, ip
 8000f32:	429c      	cmp	r4, r3
 8000f34:	46ce      	mov	lr, r9
 8000f36:	469c      	mov	ip, r3
 8000f38:	d351      	bcc.n	8000fde <__udivmoddi4+0x28a>
 8000f3a:	d04e      	beq.n	8000fda <__udivmoddi4+0x286>
 8000f3c:	b155      	cbz	r5, 8000f54 <__udivmoddi4+0x200>
 8000f3e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f42:	eb64 040c 	sbc.w	r4, r4, ip
 8000f46:	fa04 f606 	lsl.w	r6, r4, r6
 8000f4a:	40cb      	lsrs	r3, r1
 8000f4c:	431e      	orrs	r6, r3
 8000f4e:	40cc      	lsrs	r4, r1
 8000f50:	e9c5 6400 	strd	r6, r4, [r5]
 8000f54:	2100      	movs	r1, #0
 8000f56:	e750      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000f58:	f1c2 0320 	rsb	r3, r2, #32
 8000f5c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f64:	fa24 f303 	lsr.w	r3, r4, r3
 8000f68:	4094      	lsls	r4, r2
 8000f6a:	430c      	orrs	r4, r1
 8000f6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f70:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f74:	fa1f f78c 	uxth.w	r7, ip
 8000f78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f7c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f80:	0c23      	lsrs	r3, r4, #16
 8000f82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f86:	fb00 f107 	mul.w	r1, r0, r7
 8000f8a:	4299      	cmp	r1, r3
 8000f8c:	d908      	bls.n	8000fa0 <__udivmoddi4+0x24c>
 8000f8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f92:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f96:	d22c      	bcs.n	8000ff2 <__udivmoddi4+0x29e>
 8000f98:	4299      	cmp	r1, r3
 8000f9a:	d92a      	bls.n	8000ff2 <__udivmoddi4+0x29e>
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	4463      	add	r3, ip
 8000fa0:	1a5b      	subs	r3, r3, r1
 8000fa2:	b2a4      	uxth	r4, r4
 8000fa4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fa8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fb0:	fb01 f307 	mul.w	r3, r1, r7
 8000fb4:	42a3      	cmp	r3, r4
 8000fb6:	d908      	bls.n	8000fca <__udivmoddi4+0x276>
 8000fb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fbc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fc0:	d213      	bcs.n	8000fea <__udivmoddi4+0x296>
 8000fc2:	42a3      	cmp	r3, r4
 8000fc4:	d911      	bls.n	8000fea <__udivmoddi4+0x296>
 8000fc6:	3902      	subs	r1, #2
 8000fc8:	4464      	add	r4, ip
 8000fca:	1ae4      	subs	r4, r4, r3
 8000fcc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fd0:	e739      	b.n	8000e46 <__udivmoddi4+0xf2>
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	e6f0      	b.n	8000db8 <__udivmoddi4+0x64>
 8000fd6:	4608      	mov	r0, r1
 8000fd8:	e706      	b.n	8000de8 <__udivmoddi4+0x94>
 8000fda:	45c8      	cmp	r8, r9
 8000fdc:	d2ae      	bcs.n	8000f3c <__udivmoddi4+0x1e8>
 8000fde:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fe2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fe6:	3801      	subs	r0, #1
 8000fe8:	e7a8      	b.n	8000f3c <__udivmoddi4+0x1e8>
 8000fea:	4631      	mov	r1, r6
 8000fec:	e7ed      	b.n	8000fca <__udivmoddi4+0x276>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	e799      	b.n	8000f26 <__udivmoddi4+0x1d2>
 8000ff2:	4630      	mov	r0, r6
 8000ff4:	e7d4      	b.n	8000fa0 <__udivmoddi4+0x24c>
 8000ff6:	46d6      	mov	lr, sl
 8000ff8:	e77f      	b.n	8000efa <__udivmoddi4+0x1a6>
 8000ffa:	4463      	add	r3, ip
 8000ffc:	3802      	subs	r0, #2
 8000ffe:	e74d      	b.n	8000e9c <__udivmoddi4+0x148>
 8001000:	4606      	mov	r6, r0
 8001002:	4623      	mov	r3, r4
 8001004:	4608      	mov	r0, r1
 8001006:	e70f      	b.n	8000e28 <__udivmoddi4+0xd4>
 8001008:	3e02      	subs	r6, #2
 800100a:	4463      	add	r3, ip
 800100c:	e730      	b.n	8000e70 <__udivmoddi4+0x11c>
 800100e:	bf00      	nop

08001010 <__aeabi_idiv0>:
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	0000      	movs	r0, r0
	...

08001018 <generate_gameover_sound_waves>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void generate_gameover_sound_waves(){
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
	//G4 : 392 Hz
	for (int j = 0; j < 112; j++){
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
 8001022:	e02a      	b.n	800107a <generate_gameover_sound_waves+0x62>
		 sine_g4[j] = (uint8_t)((arm_sin_f32((2*M_PI/112)*j)+1)*2047.5f);
 8001024:	6978      	ldr	r0, [r7, #20]
 8001026:	f7ff fa95 	bl	8000554 <__aeabi_i2d>
 800102a:	a351      	add	r3, pc, #324	@ (adr r3, 8001170 <generate_gameover_sound_waves+0x158>)
 800102c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001030:	f7ff fafa 	bl	8000628 <__aeabi_dmul>
 8001034:	4602      	mov	r2, r0
 8001036:	460b      	mov	r3, r1
 8001038:	4610      	mov	r0, r2
 800103a:	4619      	mov	r1, r3
 800103c:	f7ff fdec 	bl	8000c18 <__aeabi_d2f>
 8001040:	4603      	mov	r3, r0
 8001042:	ee00 3a10 	vmov	s0, r3
 8001046:	f007 fb67 	bl	8008718 <arm_sin_f32>
 800104a:	eef0 7a40 	vmov.f32	s15, s0
 800104e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001052:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001056:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8001160 <generate_gameover_sound_waves+0x148>
 800105a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800105e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001062:	edc7 7a01 	vstr	s15, [r7, #4]
 8001066:	793b      	ldrb	r3, [r7, #4]
 8001068:	b2d9      	uxtb	r1, r3
 800106a:	4a3e      	ldr	r2, [pc, #248]	@ (8001164 <generate_gameover_sound_waves+0x14c>)
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	4413      	add	r3, r2
 8001070:	460a      	mov	r2, r1
 8001072:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < 112; j++){
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	3301      	adds	r3, #1
 8001078:	617b      	str	r3, [r7, #20]
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	2b6f      	cmp	r3, #111	@ 0x6f
 800107e:	ddd1      	ble.n	8001024 <generate_gameover_sound_waves+0xc>
	}
	//E4: 330 Hz
	for (int j=0; j < 134; j++) {
 8001080:	2300      	movs	r3, #0
 8001082:	613b      	str	r3, [r7, #16]
 8001084:	e02a      	b.n	80010dc <generate_gameover_sound_waves+0xc4>
		sine_e4[j] = (uint8_t)((arm_sin_f32((2*M_PI/134)*j)+1)*2047.5f);
 8001086:	6938      	ldr	r0, [r7, #16]
 8001088:	f7ff fa64 	bl	8000554 <__aeabi_i2d>
 800108c:	a330      	add	r3, pc, #192	@ (adr r3, 8001150 <generate_gameover_sound_waves+0x138>)
 800108e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001092:	f7ff fac9 	bl	8000628 <__aeabi_dmul>
 8001096:	4602      	mov	r2, r0
 8001098:	460b      	mov	r3, r1
 800109a:	4610      	mov	r0, r2
 800109c:	4619      	mov	r1, r3
 800109e:	f7ff fdbb 	bl	8000c18 <__aeabi_d2f>
 80010a2:	4603      	mov	r3, r0
 80010a4:	ee00 3a10 	vmov	s0, r3
 80010a8:	f007 fb36 	bl	8008718 <arm_sin_f32>
 80010ac:	eef0 7a40 	vmov.f32	s15, s0
 80010b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80010b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010b8:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8001160 <generate_gameover_sound_waves+0x148>
 80010bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010c4:	edc7 7a01 	vstr	s15, [r7, #4]
 80010c8:	793b      	ldrb	r3, [r7, #4]
 80010ca:	b2d9      	uxtb	r1, r3
 80010cc:	4a26      	ldr	r2, [pc, #152]	@ (8001168 <generate_gameover_sound_waves+0x150>)
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	4413      	add	r3, r2
 80010d2:	460a      	mov	r2, r1
 80010d4:	701a      	strb	r2, [r3, #0]
	for (int j=0; j < 134; j++) {
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	3301      	adds	r3, #1
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	2b85      	cmp	r3, #133	@ 0x85
 80010e0:	ddd1      	ble.n	8001086 <generate_gameover_sound_waves+0x6e>
	}
	//C4: 261.63 Hz
	for (int j = 0; j < 169; j++){
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	e02a      	b.n	800113e <generate_gameover_sound_waves+0x126>
		 sine_c4[j] = (uint8_t)((arm_sin_f32((2*M_PI/169)*j)+1)*2047.5f);
 80010e8:	68f8      	ldr	r0, [r7, #12]
 80010ea:	f7ff fa33 	bl	8000554 <__aeabi_i2d>
 80010ee:	a31a      	add	r3, pc, #104	@ (adr r3, 8001158 <generate_gameover_sound_waves+0x140>)
 80010f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f4:	f7ff fa98 	bl	8000628 <__aeabi_dmul>
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	4610      	mov	r0, r2
 80010fe:	4619      	mov	r1, r3
 8001100:	f7ff fd8a 	bl	8000c18 <__aeabi_d2f>
 8001104:	4603      	mov	r3, r0
 8001106:	ee00 3a10 	vmov	s0, r3
 800110a:	f007 fb05 	bl	8008718 <arm_sin_f32>
 800110e:	eef0 7a40 	vmov.f32	s15, s0
 8001112:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001116:	ee77 7a87 	vadd.f32	s15, s15, s14
 800111a:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001160 <generate_gameover_sound_waves+0x148>
 800111e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001122:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001126:	edc7 7a01 	vstr	s15, [r7, #4]
 800112a:	793b      	ldrb	r3, [r7, #4]
 800112c:	b2d9      	uxtb	r1, r3
 800112e:	4a0f      	ldr	r2, [pc, #60]	@ (800116c <generate_gameover_sound_waves+0x154>)
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	4413      	add	r3, r2
 8001134:	460a      	mov	r2, r1
 8001136:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < 169; j++){
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	3301      	adds	r3, #1
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	2ba8      	cmp	r3, #168	@ 0xa8
 8001142:	ddd1      	ble.n	80010e8 <generate_gameover_sound_waves+0xd0>
	}
}
 8001144:	bf00      	nop
 8001146:	bf00      	nop
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	9ce93e2e 	.word	0x9ce93e2e
 8001154:	3fa801e4 	.word	0x3fa801e4
 8001158:	2f290867 	.word	0x2f290867
 800115c:	3fa30913 	.word	0x3fa30913
 8001160:	44fff000 	.word	0x44fff000
 8001164:	2000028c 	.word	0x2000028c
 8001168:	200002fc 	.word	0x200002fc
 800116c:	20000384 	.word	0x20000384
 8001170:	3bbba140 	.word	0x3bbba140
 8001174:	3facb91f 	.word	0x3facb91f

08001178 <play_gameover_sound>:

void play_gameover_sound(){
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
	start = 0;
 800117c:	4b08      	ldr	r3, [pc, #32]	@ (80011a0 <play_gameover_sound+0x28>)
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
	current_tone = sine_g4;
 8001182:	4b08      	ldr	r3, [pc, #32]	@ (80011a4 <play_gameover_sound+0x2c>)
 8001184:	4a08      	ldr	r2, [pc, #32]	@ (80011a8 <play_gameover_sound+0x30>)
 8001186:	601a      	str	r2, [r3, #0]
	current_num_sample = 112;
 8001188:	4b08      	ldr	r3, [pc, #32]	@ (80011ac <play_gameover_sound+0x34>)
 800118a:	2270      	movs	r2, #112	@ 0x70
 800118c:	601a      	str	r2, [r3, #0]
	tone_index = 0;
 800118e:	4b08      	ldr	r3, [pc, #32]	@ (80011b0 <play_gameover_sound+0x38>)
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]

	HAL_TIM_Base_Start_IT(&htim2);
 8001194:	4807      	ldr	r0, [pc, #28]	@ (80011b4 <play_gameover_sound+0x3c>)
 8001196:	f004 fceb 	bl	8005b70 <HAL_TIM_Base_Start_IT>
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000008 	.word	0x20000008
 80011a4:	20000000 	.word	0x20000000
 80011a8:	2000028c 	.word	0x2000028c
 80011ac:	20000004 	.word	0x20000004
 80011b0:	20000430 	.word	0x20000430
 80011b4:	2000064c 	.word	0x2000064c

080011b8 <play_start_sound>:

void play_start_sound(){
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
	start = 1;
 80011bc:	4b08      	ldr	r3, [pc, #32]	@ (80011e0 <play_start_sound+0x28>)
 80011be:	2201      	movs	r2, #1
 80011c0:	601a      	str	r2, [r3, #0]
	current_tone = sine_c4;
 80011c2:	4b08      	ldr	r3, [pc, #32]	@ (80011e4 <play_start_sound+0x2c>)
 80011c4:	4a08      	ldr	r2, [pc, #32]	@ (80011e8 <play_start_sound+0x30>)
 80011c6:	601a      	str	r2, [r3, #0]
	current_num_sample = 169;
 80011c8:	4b08      	ldr	r3, [pc, #32]	@ (80011ec <play_start_sound+0x34>)
 80011ca:	22a9      	movs	r2, #169	@ 0xa9
 80011cc:	601a      	str	r2, [r3, #0]
	tone_index = 0;
 80011ce:	4b08      	ldr	r3, [pc, #32]	@ (80011f0 <play_start_sound+0x38>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]

	HAL_TIM_Base_Start_IT(&htim2);
 80011d4:	4807      	ldr	r0, [pc, #28]	@ (80011f4 <play_start_sound+0x3c>)
 80011d6:	f004 fccb 	bl	8005b70 <HAL_TIM_Base_Start_IT>
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000008 	.word	0x20000008
 80011e4:	20000000 	.word	0x20000000
 80011e8:	20000384 	.word	0x20000384
 80011ec:	20000004 	.word	0x20000004
 80011f0:	20000430 	.word	0x20000430
 80011f4:	2000064c 	.word	0x2000064c

080011f8 <HAL_GPIO_EXTI_Callback>:

// This function is used for the calibration of the accelerometer
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	80fb      	strh	r3, [r7, #6]
    // Check if the interrupt is triggered by the push button
    if(GPIO_Pin == myButton_Pin) {
 8001202:	88fb      	ldrh	r3, [r7, #6]
 8001204:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001208:	d12a      	bne.n	8001260 <HAL_GPIO_EXTI_Callback+0x68>
		  if (current_position == 0) {
 800120a:	4b17      	ldr	r3, [pc, #92]	@ (8001268 <HAL_GPIO_EXTI_Callback+0x70>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d103      	bne.n	800121a <HAL_GPIO_EXTI_Callback+0x22>
			  // Record accelerometer data at position P0
			  BSP_ACCELERO_AccGetXYZ(accelero_p0);
 8001212:	4816      	ldr	r0, [pc, #88]	@ (800126c <HAL_GPIO_EXTI_Callback+0x74>)
 8001214:	f000 fe00 	bl	8001e18 <BSP_ACCELERO_AccGetXYZ>
 8001218:	e016      	b.n	8001248 <HAL_GPIO_EXTI_Callback+0x50>
		  }
		  else if (current_position == 1) {
 800121a:	4b13      	ldr	r3, [pc, #76]	@ (8001268 <HAL_GPIO_EXTI_Callback+0x70>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d103      	bne.n	800122a <HAL_GPIO_EXTI_Callback+0x32>
			  // Record accelerometer data at position P1
			  BSP_ACCELERO_AccGetXYZ(accelero_p1);
 8001222:	4813      	ldr	r0, [pc, #76]	@ (8001270 <HAL_GPIO_EXTI_Callback+0x78>)
 8001224:	f000 fdf8 	bl	8001e18 <BSP_ACCELERO_AccGetXYZ>
 8001228:	e00e      	b.n	8001248 <HAL_GPIO_EXTI_Callback+0x50>
		  }
		  else if (current_position == 2) {
 800122a:	4b0f      	ldr	r3, [pc, #60]	@ (8001268 <HAL_GPIO_EXTI_Callback+0x70>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2b02      	cmp	r3, #2
 8001230:	d103      	bne.n	800123a <HAL_GPIO_EXTI_Callback+0x42>
			  // Record accelerometer data at position P2
			  BSP_ACCELERO_AccGetXYZ(accelero_p2);
 8001232:	4810      	ldr	r0, [pc, #64]	@ (8001274 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001234:	f000 fdf0 	bl	8001e18 <BSP_ACCELERO_AccGetXYZ>
 8001238:	e006      	b.n	8001248 <HAL_GPIO_EXTI_Callback+0x50>
		  }
		  else if (current_position == 3) {
 800123a:	4b0b      	ldr	r3, [pc, #44]	@ (8001268 <HAL_GPIO_EXTI_Callback+0x70>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2b03      	cmp	r3, #3
 8001240:	d102      	bne.n	8001248 <HAL_GPIO_EXTI_Callback+0x50>
			  // Record accelerometer data at position P3
			  BSP_ACCELERO_AccGetXYZ(accelero_p3);
 8001242:	480d      	ldr	r0, [pc, #52]	@ (8001278 <HAL_GPIO_EXTI_Callback+0x80>)
 8001244:	f000 fde8 	bl	8001e18 <BSP_ACCELERO_AccGetXYZ>
		  }

		  current_position = current_position + 1;
 8001248:	4b07      	ldr	r3, [pc, #28]	@ (8001268 <HAL_GPIO_EXTI_Callback+0x70>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	3301      	adds	r3, #1
 800124e:	4a06      	ldr	r2, [pc, #24]	@ (8001268 <HAL_GPIO_EXTI_Callback+0x70>)
 8001250:	6013      	str	r3, [r2, #0]

		  // If all positions are calibrated, set calibrationDone flag
			if (current_position > 3) {
 8001252:	4b05      	ldr	r3, [pc, #20]	@ (8001268 <HAL_GPIO_EXTI_Callback+0x70>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2b03      	cmp	r3, #3
 8001258:	dd02      	ble.n	8001260 <HAL_GPIO_EXTI_Callback+0x68>
				calibrationDone = 1;
 800125a:	4b08      	ldr	r3, [pc, #32]	@ (800127c <HAL_GPIO_EXTI_Callback+0x84>)
 800125c:	2201      	movs	r2, #1
 800125e:	601a      	str	r2, [r3, #0]
			}
    }
}
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000230 	.word	0x20000230
 800126c:	20000238 	.word	0x20000238
 8001270:	20000240 	.word	0x20000240
 8001274:	20000248 	.word	0x20000248
 8001278:	20000250 	.word	0x20000250
 800127c:	20000234 	.word	0x20000234

08001280 <calibrate_accelerometer>:

void calibrate_accelerometer() {
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
	  // Compute offsets
	  OFFX = (accelero_p0[0] + accelero_p1[0] + accelero_p2[0] + accelero_p3[0]) / 4;
 8001284:	4b45      	ldr	r3, [pc, #276]	@ (800139c <calibrate_accelerometer+0x11c>)
 8001286:	f9b3 3000 	ldrsh.w	r3, [r3]
 800128a:	461a      	mov	r2, r3
 800128c:	4b44      	ldr	r3, [pc, #272]	@ (80013a0 <calibrate_accelerometer+0x120>)
 800128e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001292:	4413      	add	r3, r2
 8001294:	4a43      	ldr	r2, [pc, #268]	@ (80013a4 <calibrate_accelerometer+0x124>)
 8001296:	f9b2 2000 	ldrsh.w	r2, [r2]
 800129a:	4413      	add	r3, r2
 800129c:	4a42      	ldr	r2, [pc, #264]	@ (80013a8 <calibrate_accelerometer+0x128>)
 800129e:	f9b2 2000 	ldrsh.w	r2, [r2]
 80012a2:	4413      	add	r3, r2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	da00      	bge.n	80012aa <calibrate_accelerometer+0x2a>
 80012a8:	3303      	adds	r3, #3
 80012aa:	109b      	asrs	r3, r3, #2
 80012ac:	ee07 3a90 	vmov	s15, r3
 80012b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b4:	4b3d      	ldr	r3, [pc, #244]	@ (80013ac <calibrate_accelerometer+0x12c>)
 80012b6:	edc3 7a00 	vstr	s15, [r3]
	  OFFY = (accelero_p0[1] + accelero_p1[1] + accelero_p2[1] + accelero_p3[1]) / 4;
 80012ba:	4b38      	ldr	r3, [pc, #224]	@ (800139c <calibrate_accelerometer+0x11c>)
 80012bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80012c0:	461a      	mov	r2, r3
 80012c2:	4b37      	ldr	r3, [pc, #220]	@ (80013a0 <calibrate_accelerometer+0x120>)
 80012c4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80012c8:	4413      	add	r3, r2
 80012ca:	4a36      	ldr	r2, [pc, #216]	@ (80013a4 <calibrate_accelerometer+0x124>)
 80012cc:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80012d0:	4413      	add	r3, r2
 80012d2:	4a35      	ldr	r2, [pc, #212]	@ (80013a8 <calibrate_accelerometer+0x128>)
 80012d4:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80012d8:	4413      	add	r3, r2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	da00      	bge.n	80012e0 <calibrate_accelerometer+0x60>
 80012de:	3303      	adds	r3, #3
 80012e0:	109b      	asrs	r3, r3, #2
 80012e2:	ee07 3a90 	vmov	s15, r3
 80012e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ea:	4b31      	ldr	r3, [pc, #196]	@ (80013b0 <calibrate_accelerometer+0x130>)
 80012ec:	edc3 7a00 	vstr	s15, [r3]

	  // Compute sensitivities
	  SENSX = (accelero_p2[0] - accelero_p1[0]) / 2;
 80012f0:	4b2c      	ldr	r3, [pc, #176]	@ (80013a4 <calibrate_accelerometer+0x124>)
 80012f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012f6:	461a      	mov	r2, r3
 80012f8:	4b29      	ldr	r3, [pc, #164]	@ (80013a0 <calibrate_accelerometer+0x120>)
 80012fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	0fda      	lsrs	r2, r3, #31
 8001302:	4413      	add	r3, r2
 8001304:	105b      	asrs	r3, r3, #1
 8001306:	ee07 3a90 	vmov	s15, r3
 800130a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800130e:	4b29      	ldr	r3, [pc, #164]	@ (80013b4 <calibrate_accelerometer+0x134>)
 8001310:	edc3 7a00 	vstr	s15, [r3]
	  SENSY = (accelero_p0[1] - accelero_p3[1]) / 2;
 8001314:	4b21      	ldr	r3, [pc, #132]	@ (800139c <calibrate_accelerometer+0x11c>)
 8001316:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800131a:	461a      	mov	r2, r3
 800131c:	4b22      	ldr	r3, [pc, #136]	@ (80013a8 <calibrate_accelerometer+0x128>)
 800131e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	0fda      	lsrs	r2, r3, #31
 8001326:	4413      	add	r3, r2
 8001328:	105b      	asrs	r3, r3, #1
 800132a:	ee07 3a90 	vmov	s15, r3
 800132e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001332:	4b21      	ldr	r3, [pc, #132]	@ (80013b8 <calibrate_accelerometer+0x138>)
 8001334:	edc3 7a00 	vstr	s15, [r3]

	  // Compute calibration factors
	  CXY = (accelero_p0[0] - accelero_p3[0]) / (2 * SENSX);
 8001338:	4b18      	ldr	r3, [pc, #96]	@ (800139c <calibrate_accelerometer+0x11c>)
 800133a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800133e:	461a      	mov	r2, r3
 8001340:	4b19      	ldr	r3, [pc, #100]	@ (80013a8 <calibrate_accelerometer+0x128>)
 8001342:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	ee07 3a90 	vmov	s15, r3
 800134c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001350:	4b18      	ldr	r3, [pc, #96]	@ (80013b4 <calibrate_accelerometer+0x134>)
 8001352:	edd3 7a00 	vldr	s15, [r3]
 8001356:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800135a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800135e:	4b17      	ldr	r3, [pc, #92]	@ (80013bc <calibrate_accelerometer+0x13c>)
 8001360:	edc3 7a00 	vstr	s15, [r3]
	  CYX = (accelero_p2[1] - accelero_p1[1]) / (2 * SENSY);
 8001364:	4b0f      	ldr	r3, [pc, #60]	@ (80013a4 <calibrate_accelerometer+0x124>)
 8001366:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800136a:	461a      	mov	r2, r3
 800136c:	4b0c      	ldr	r3, [pc, #48]	@ (80013a0 <calibrate_accelerometer+0x120>)
 800136e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	ee07 3a90 	vmov	s15, r3
 8001378:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800137c:	4b0e      	ldr	r3, [pc, #56]	@ (80013b8 <calibrate_accelerometer+0x138>)
 800137e:	edd3 7a00 	vldr	s15, [r3]
 8001382:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001386:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800138a:	4b0d      	ldr	r3, [pc, #52]	@ (80013c0 <calibrate_accelerometer+0x140>)
 800138c:	edc3 7a00 	vstr	s15, [r3]
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	20000238 	.word	0x20000238
 80013a0:	20000240 	.word	0x20000240
 80013a4:	20000248 	.word	0x20000248
 80013a8:	20000250 	.word	0x20000250
 80013ac:	20000260 	.word	0x20000260
 80013b0:	20000264 	.word	0x20000264
 80013b4:	20000268 	.word	0x20000268
 80013b8:	2000026c 	.word	0x2000026c
 80013bc:	20000270 	.word	0x20000270
 80013c0:	20000274 	.word	0x20000274

080013c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013c8:	ed2d 8b02 	vpush	{d8}
 80013cc:	b08a      	sub	sp, #40	@ 0x28
 80013ce:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013d0:	f001 f91c 	bl	800260c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013d4:	f000 f932 	bl	800163c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013d8:	f000 fa90 	bl	80018fc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80013dc:	f000 fa42 	bl	8001864 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 80013e0:	f000 f9b2 	bl	8001748 <MX_I2C2_Init>
  MX_DAC1_Init();
 80013e4:	f000 f97c 	bl	80016e0 <MX_DAC1_Init>
  MX_TIM2_Init();
 80013e8:	f000 f9ee 	bl	80017c8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  BSP_ACCELERO_Init();
 80013ec:	f000 fcd6 	bl	8001d9c <BSP_ACCELERO_Init>
  //BSP_GYRO_Init();

  HAL_UART_Init(&huart1);
 80013f0:	487c      	ldr	r0, [pc, #496]	@ (80015e4 <main+0x220>)
 80013f2:	f005 f83b 	bl	800646c <HAL_UART_Init>
  rxStatus = HAL_UART_Receive_IT(&huart1, rxBuffer, 10);
 80013f6:	220a      	movs	r2, #10
 80013f8:	497b      	ldr	r1, [pc, #492]	@ (80015e8 <main+0x224>)
 80013fa:	487a      	ldr	r0, [pc, #488]	@ (80015e4 <main+0x220>)
 80013fc:	f005 f914 	bl	8006628 <HAL_UART_Receive_IT>
 8001400:	4603      	mov	r3, r0
 8001402:	461a      	mov	r2, r3
 8001404:	4b79      	ldr	r3, [pc, #484]	@ (80015ec <main+0x228>)
 8001406:	701a      	strb	r2, [r3, #0]

  current_position = 0;
 8001408:	4b79      	ldr	r3, [pc, #484]	@ (80015f0 <main+0x22c>)
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
  calibrationDone = 0;
 800140e:	4b79      	ldr	r3, [pc, #484]	@ (80015f4 <main+0x230>)
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]

  while (calibrationDone == 0) {
 8001414:	e01d      	b.n	8001452 <main+0x8e>
	  // waiting loop
	  sprintf(txBuffer, "Waiting for calibration \r\n");
 8001416:	4978      	ldr	r1, [pc, #480]	@ (80015f8 <main+0x234>)
 8001418:	4878      	ldr	r0, [pc, #480]	@ (80015fc <main+0x238>)
 800141a:	f008 f82f 	bl	800947c <siprintf>

	  HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, SIZE_BUFFER, 100);
 800141e:	2364      	movs	r3, #100	@ 0x64
 8001420:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001424:	4975      	ldr	r1, [pc, #468]	@ (80015fc <main+0x238>)
 8001426:	486f      	ldr	r0, [pc, #444]	@ (80015e4 <main+0x220>)
 8001428:	f005 f870 	bl	800650c <HAL_UART_Transmit>
	  HAL_Delay(1000);
 800142c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001430:	f001 f960 	bl	80026f4 <HAL_Delay>

	  for(int i = 0; i < SIZE_BUFFER; i++) {
 8001434:	2300      	movs	r3, #0
 8001436:	617b      	str	r3, [r7, #20]
 8001438:	e007      	b.n	800144a <main+0x86>
		  txBuffer[i] = 0;
 800143a:	4a70      	ldr	r2, [pc, #448]	@ (80015fc <main+0x238>)
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	4413      	add	r3, r2
 8001440:	2200      	movs	r2, #0
 8001442:	701a      	strb	r2, [r3, #0]
	  for(int i = 0; i < SIZE_BUFFER; i++) {
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	3301      	adds	r3, #1
 8001448:	617b      	str	r3, [r7, #20]
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001450:	dbf3      	blt.n	800143a <main+0x76>
  while (calibrationDone == 0) {
 8001452:	4b68      	ldr	r3, [pc, #416]	@ (80015f4 <main+0x230>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d0dd      	beq.n	8001416 <main+0x52>
	  }
  }

  calibrate_accelerometer();
 800145a:	f7ff ff11 	bl	8001280 <calibrate_accelerometer>
  sprintf(txBuffer, "Calibration done \r\n");
 800145e:	4968      	ldr	r1, [pc, #416]	@ (8001600 <main+0x23c>)
 8001460:	4866      	ldr	r0, [pc, #408]	@ (80015fc <main+0x238>)
 8001462:	f008 f80b 	bl	800947c <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, SIZE_BUFFER, 100);
 8001466:	2364      	movs	r3, #100	@ 0x64
 8001468:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800146c:	4963      	ldr	r1, [pc, #396]	@ (80015fc <main+0x238>)
 800146e:	485d      	ldr	r0, [pc, #372]	@ (80015e4 <main+0x220>)
 8001470:	f005 f84c 	bl	800650c <HAL_UART_Transmit>
  HAL_Delay(1000);
 8001474:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001478:	f001 f93c 	bl	80026f4 <HAL_Delay>

  for(int i = 0; i < SIZE_BUFFER; i++) {
 800147c:	2300      	movs	r3, #0
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	e007      	b.n	8001492 <main+0xce>
	  txBuffer[i] = 0;
 8001482:	4a5e      	ldr	r2, [pc, #376]	@ (80015fc <main+0x238>)
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	4413      	add	r3, r2
 8001488:	2200      	movs	r2, #0
 800148a:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < SIZE_BUFFER; i++) {
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	3301      	adds	r3, #1
 8001490:	613b      	str	r3, [r7, #16]
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001498:	dbf3      	blt.n	8001482 <main+0xbe>
  }

  generate_gameover_sound_waves();
 800149a:	f7ff fdbd 	bl	8001018 <generate_gameover_sound_waves>

  STATUS = HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800149e:	2100      	movs	r1, #0
 80014a0:	4858      	ldr	r0, [pc, #352]	@ (8001604 <main+0x240>)
 80014a2:	f001 fa7e 	bl	80029a2 <HAL_DAC_Start>
 80014a6:	4603      	mov	r3, r0
 80014a8:	461a      	mov	r2, r3
 80014aa:	4b57      	ldr	r3, [pc, #348]	@ (8001608 <main+0x244>)
 80014ac:	701a      	strb	r2, [r3, #0]
  	if(STATUS!=HAL_OK){
 80014ae:	4b56      	ldr	r3, [pc, #344]	@ (8001608 <main+0x244>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <main+0xf6>
  	  Error_Handler();
 80014b6:	f000 fb1b 	bl	8001af0 <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  play_start_sound();
 80014ba:	f7ff fe7d 	bl	80011b8 <play_start_sound>
  while (1)
  {
	  //rxStatus = HAL_UART_Receive_IT(&huart1, rxBuffer, 100);


	  BSP_ACCELERO_AccGetXYZ(accelero);
 80014be:	4853      	ldr	r0, [pc, #332]	@ (800160c <main+0x248>)
 80014c0:	f000 fcaa 	bl	8001e18 <BSP_ACCELERO_AccGetXYZ>

	  // Initial estimates
	  ACCX_prime = (accelero[0] - OFFX) / SENSX;
 80014c4:	4b51      	ldr	r3, [pc, #324]	@ (800160c <main+0x248>)
 80014c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ca:	ee07 3a90 	vmov	s15, r3
 80014ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014d2:	4b4f      	ldr	r3, [pc, #316]	@ (8001610 <main+0x24c>)
 80014d4:	edd3 7a00 	vldr	s15, [r3]
 80014d8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80014dc:	4b4d      	ldr	r3, [pc, #308]	@ (8001614 <main+0x250>)
 80014de:	ed93 7a00 	vldr	s14, [r3]
 80014e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014e6:	4b4c      	ldr	r3, [pc, #304]	@ (8001618 <main+0x254>)
 80014e8:	edc3 7a00 	vstr	s15, [r3]
	  ACCY_prime = (accelero[1] - OFFY) / SENSY;
 80014ec:	4b47      	ldr	r3, [pc, #284]	@ (800160c <main+0x248>)
 80014ee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80014f2:	ee07 3a90 	vmov	s15, r3
 80014f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014fa:	4b48      	ldr	r3, [pc, #288]	@ (800161c <main+0x258>)
 80014fc:	edd3 7a00 	vldr	s15, [r3]
 8001500:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001504:	4b46      	ldr	r3, [pc, #280]	@ (8001620 <main+0x25c>)
 8001506:	ed93 7a00 	vldr	s14, [r3]
 800150a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800150e:	4b45      	ldr	r3, [pc, #276]	@ (8001624 <main+0x260>)
 8001510:	edc3 7a00 	vstr	s15, [r3]
	//	ACCX_prime = (accelero[0] - OFFX) / SENSX - ACCY_prime * CXY;
	//	ACCY_prime = (accelero[1] - OFFY) / SENSY - ACCX_prime * CYX;
	  //}

	  // Store final calibrated values
	  ACCX = ACCX_prime;
 8001514:	4b40      	ldr	r3, [pc, #256]	@ (8001618 <main+0x254>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a43      	ldr	r2, [pc, #268]	@ (8001628 <main+0x264>)
 800151a:	6013      	str	r3, [r2, #0]
	  ACCY = ACCY_prime;
 800151c:	4b41      	ldr	r3, [pc, #260]	@ (8001624 <main+0x260>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a42      	ldr	r2, [pc, #264]	@ (800162c <main+0x268>)
 8001522:	6013      	str	r3, [r2, #0]

	  // Compute tilt angle in radians
	  float tilt = atan2f(ACCX, sqrtf(ACCY * ACCY));
 8001524:	4b40      	ldr	r3, [pc, #256]	@ (8001628 <main+0x264>)
 8001526:	ed93 8a00 	vldr	s16, [r3]
 800152a:	4b40      	ldr	r3, [pc, #256]	@ (800162c <main+0x268>)
 800152c:	ed93 7a00 	vldr	s14, [r3]
 8001530:	4b3e      	ldr	r3, [pc, #248]	@ (800162c <main+0x268>)
 8001532:	edd3 7a00 	vldr	s15, [r3]
 8001536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800153a:	eeb0 0a67 	vmov.f32	s0, s15
 800153e:	f00b fcaf 	bl	800cea0 <sqrtf>
 8001542:	eef0 7a40 	vmov.f32	s15, s0
 8001546:	eef0 0a67 	vmov.f32	s1, s15
 800154a:	eeb0 0a48 	vmov.f32	s0, s16
 800154e:	f00b fca5 	bl	800ce9c <atan2f>
 8001552:	ed87 0a02 	vstr	s0, [r7, #8]

	  // Convert radians to degrees if needed
	  float tilt_degrees = tilt * 180 / PI;
 8001556:	edd7 7a02 	vldr	s15, [r7, #8]
 800155a:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8001630 <main+0x26c>
 800155e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001562:	eddf 6a34 	vldr	s13, [pc, #208]	@ 8001634 <main+0x270>
 8001566:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800156a:	edc7 7a01 	vstr	s15, [r7, #4]

	  sprintf(txBuffer, "Calibrated Accelero X: %f, Y: %f, Tilt degrees: %f \r\n", ACCX, ACCY, tilt_degrees);
 800156e:	4b2e      	ldr	r3, [pc, #184]	@ (8001628 <main+0x264>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff f800 	bl	8000578 <__aeabi_f2d>
 8001578:	4680      	mov	r8, r0
 800157a:	4689      	mov	r9, r1
 800157c:	4b2b      	ldr	r3, [pc, #172]	@ (800162c <main+0x268>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4618      	mov	r0, r3
 8001582:	f7fe fff9 	bl	8000578 <__aeabi_f2d>
 8001586:	4604      	mov	r4, r0
 8001588:	460d      	mov	r5, r1
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f7fe fff4 	bl	8000578 <__aeabi_f2d>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001598:	e9cd 4500 	strd	r4, r5, [sp]
 800159c:	4642      	mov	r2, r8
 800159e:	464b      	mov	r3, r9
 80015a0:	4925      	ldr	r1, [pc, #148]	@ (8001638 <main+0x274>)
 80015a2:	4816      	ldr	r0, [pc, #88]	@ (80015fc <main+0x238>)
 80015a4:	f007 ff6a 	bl	800947c <siprintf>

//	  sprintf(output, "Accelero X: %d, Y: %d, Z: %d \r\n", accelero[0], accelero[1], accelero[2]);
	  HAL_Delay(10);
 80015a8:	200a      	movs	r0, #10
 80015aa:	f001 f8a3 	bl	80026f4 <HAL_Delay>
	  HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, SIZE_BUFFER,100);
 80015ae:	2364      	movs	r3, #100	@ 0x64
 80015b0:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80015b4:	4911      	ldr	r1, [pc, #68]	@ (80015fc <main+0x238>)
 80015b6:	480b      	ldr	r0, [pc, #44]	@ (80015e4 <main+0x220>)
 80015b8:	f004 ffa8 	bl	800650c <HAL_UART_Transmit>
	  HAL_Delay(25);
 80015bc:	2019      	movs	r0, #25
 80015be:	f001 f899 	bl	80026f4 <HAL_Delay>
	  for(int i = 0; i < SIZE_BUFFER; i++) {
 80015c2:	2300      	movs	r3, #0
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	e007      	b.n	80015d8 <main+0x214>
	       txBuffer[i] = 0;
 80015c8:	4a0c      	ldr	r2, [pc, #48]	@ (80015fc <main+0x238>)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	4413      	add	r3, r2
 80015ce:	2200      	movs	r2, #0
 80015d0:	701a      	strb	r2, [r3, #0]
	  for(int i = 0; i < SIZE_BUFFER; i++) {
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	3301      	adds	r3, #1
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80015de:	dbf3      	blt.n	80015c8 <main+0x204>
  {
 80015e0:	e76d      	b.n	80014be <main+0xfa>
 80015e2:	bf00      	nop
 80015e4:	20000698 	.word	0x20000698
 80015e8:	2000043c 	.word	0x2000043c
 80015ec:	200004a0 	.word	0x200004a0
 80015f0:	20000230 	.word	0x20000230
 80015f4:	20000234 	.word	0x20000234
 80015f8:	0800d1f8 	.word	0x0800d1f8
 80015fc:	200004a4 	.word	0x200004a4
 8001600:	0800d214 	.word	0x0800d214
 8001604:	200005e4 	.word	0x200005e4
 8001608:	20000288 	.word	0x20000288
 800160c:	20000258 	.word	0x20000258
 8001610:	20000260 	.word	0x20000260
 8001614:	20000268 	.word	0x20000268
 8001618:	20000280 	.word	0x20000280
 800161c:	20000264 	.word	0x20000264
 8001620:	2000026c 	.word	0x2000026c
 8001624:	20000284 	.word	0x20000284
 8001628:	20000278 	.word	0x20000278
 800162c:	2000027c 	.word	0x2000027c
 8001630:	43340000 	.word	0x43340000
 8001634:	40490fdb 	.word	0x40490fdb
 8001638:	0800d228 	.word	0x0800d228

0800163c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b096      	sub	sp, #88	@ 0x58
 8001640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001642:	f107 0314 	add.w	r3, r7, #20
 8001646:	2244      	movs	r2, #68	@ 0x44
 8001648:	2100      	movs	r1, #0
 800164a:	4618      	mov	r0, r3
 800164c:	f008 fea4 	bl	800a398 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001650:	463b      	mov	r3, r7
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]
 8001658:	609a      	str	r2, [r3, #8]
 800165a:	60da      	str	r2, [r3, #12]
 800165c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800165e:	2000      	movs	r0, #0
 8001660:	f002 fd9a 	bl	8004198 <HAL_PWREx_ControlVoltageScaling>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800166a:	f000 fa41 	bl	8001af0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800166e:	2310      	movs	r3, #16
 8001670:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001672:	2301      	movs	r3, #1
 8001674:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001676:	2300      	movs	r3, #0
 8001678:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800167a:	2360      	movs	r3, #96	@ 0x60
 800167c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800167e:	2302      	movs	r3, #2
 8001680:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001682:	2301      	movs	r3, #1
 8001684:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001686:	2301      	movs	r3, #1
 8001688:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800168a:	233c      	movs	r3, #60	@ 0x3c
 800168c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800168e:	2302      	movs	r3, #2
 8001690:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001692:	2302      	movs	r3, #2
 8001694:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001696:	2302      	movs	r3, #2
 8001698:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800169a:	f107 0314 	add.w	r3, r7, #20
 800169e:	4618      	mov	r0, r3
 80016a0:	f002 fe1e 	bl	80042e0 <HAL_RCC_OscConfig>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <SystemClock_Config+0x72>
  {
    Error_Handler();
 80016aa:	f000 fa21 	bl	8001af0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ae:	230f      	movs	r3, #15
 80016b0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016b2:	2303      	movs	r3, #3
 80016b4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016b6:	2300      	movs	r3, #0
 80016b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016be:	2300      	movs	r3, #0
 80016c0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80016c2:	463b      	mov	r3, r7
 80016c4:	2105      	movs	r1, #5
 80016c6:	4618      	mov	r0, r3
 80016c8:	f003 fa24 	bl	8004b14 <HAL_RCC_ClockConfig>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80016d2:	f000 fa0d 	bl	8001af0 <Error_Handler>
  }
}
 80016d6:	bf00      	nop
 80016d8:	3758      	adds	r7, #88	@ 0x58
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
	...

080016e0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08a      	sub	sp, #40	@ 0x28
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80016e6:	463b      	mov	r3, r7
 80016e8:	2228      	movs	r2, #40	@ 0x28
 80016ea:	2100      	movs	r1, #0
 80016ec:	4618      	mov	r0, r3
 80016ee:	f008 fe53 	bl	800a398 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80016f2:	4b13      	ldr	r3, [pc, #76]	@ (8001740 <MX_DAC1_Init+0x60>)
 80016f4:	4a13      	ldr	r2, [pc, #76]	@ (8001744 <MX_DAC1_Init+0x64>)
 80016f6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80016f8:	4811      	ldr	r0, [pc, #68]	@ (8001740 <MX_DAC1_Init+0x60>)
 80016fa:	f001 f930 	bl	800295e <HAL_DAC_Init>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001704:	f000 f9f4 	bl	8001af0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001708:	2300      	movs	r3, #0
 800170a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800170c:	2300      	movs	r3, #0
 800170e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8001710:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001714:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001716:	2300      	movs	r3, #0
 8001718:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800171e:	2300      	movs	r3, #0
 8001720:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001722:	463b      	mov	r3, r7
 8001724:	2200      	movs	r2, #0
 8001726:	4619      	mov	r1, r3
 8001728:	4805      	ldr	r0, [pc, #20]	@ (8001740 <MX_DAC1_Init+0x60>)
 800172a:	f001 fa15 	bl	8002b58 <HAL_DAC_ConfigChannel>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8001734:	f000 f9dc 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001738:	bf00      	nop
 800173a:	3728      	adds	r7, #40	@ 0x28
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	200005e4 	.word	0x200005e4
 8001744:	40007400 	.word	0x40007400

08001748 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800174c:	4b1b      	ldr	r3, [pc, #108]	@ (80017bc <MX_I2C2_Init+0x74>)
 800174e:	4a1c      	ldr	r2, [pc, #112]	@ (80017c0 <MX_I2C2_Init+0x78>)
 8001750:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8001752:	4b1a      	ldr	r3, [pc, #104]	@ (80017bc <MX_I2C2_Init+0x74>)
 8001754:	4a1b      	ldr	r2, [pc, #108]	@ (80017c4 <MX_I2C2_Init+0x7c>)
 8001756:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001758:	4b18      	ldr	r3, [pc, #96]	@ (80017bc <MX_I2C2_Init+0x74>)
 800175a:	2200      	movs	r2, #0
 800175c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800175e:	4b17      	ldr	r3, [pc, #92]	@ (80017bc <MX_I2C2_Init+0x74>)
 8001760:	2201      	movs	r2, #1
 8001762:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001764:	4b15      	ldr	r3, [pc, #84]	@ (80017bc <MX_I2C2_Init+0x74>)
 8001766:	2200      	movs	r2, #0
 8001768:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800176a:	4b14      	ldr	r3, [pc, #80]	@ (80017bc <MX_I2C2_Init+0x74>)
 800176c:	2200      	movs	r2, #0
 800176e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001770:	4b12      	ldr	r3, [pc, #72]	@ (80017bc <MX_I2C2_Init+0x74>)
 8001772:	2200      	movs	r2, #0
 8001774:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001776:	4b11      	ldr	r3, [pc, #68]	@ (80017bc <MX_I2C2_Init+0x74>)
 8001778:	2200      	movs	r2, #0
 800177a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800177c:	4b0f      	ldr	r3, [pc, #60]	@ (80017bc <MX_I2C2_Init+0x74>)
 800177e:	2200      	movs	r2, #0
 8001780:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001782:	480e      	ldr	r0, [pc, #56]	@ (80017bc <MX_I2C2_Init+0x74>)
 8001784:	f001 fe96 	bl	80034b4 <HAL_I2C_Init>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800178e:	f000 f9af 	bl	8001af0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001792:	2100      	movs	r1, #0
 8001794:	4809      	ldr	r0, [pc, #36]	@ (80017bc <MX_I2C2_Init+0x74>)
 8001796:	f002 fc47 	bl	8004028 <HAL_I2CEx_ConfigAnalogFilter>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80017a0:	f000 f9a6 	bl	8001af0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80017a4:	2100      	movs	r1, #0
 80017a6:	4805      	ldr	r0, [pc, #20]	@ (80017bc <MX_I2C2_Init+0x74>)
 80017a8:	f002 fc89 	bl	80040be <HAL_I2CEx_ConfigDigitalFilter>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80017b2:	f000 f99d 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	200005f8 	.word	0x200005f8
 80017c0:	40005800 	.word	0x40005800
 80017c4:	307075b1 	.word	0x307075b1

080017c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b088      	sub	sp, #32
 80017cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ce:	f107 0310 	add.w	r3, r7, #16
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	605a      	str	r2, [r3, #4]
 80017d8:	609a      	str	r2, [r3, #8]
 80017da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017dc:	1d3b      	adds	r3, r7, #4
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	605a      	str	r2, [r3, #4]
 80017e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001860 <MX_TIM2_Init+0x98>)
 80017e8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017ec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80017ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001860 <MX_TIM2_Init+0x98>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001860 <MX_TIM2_Init+0x98>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2721;
 80017fa:	4b19      	ldr	r3, [pc, #100]	@ (8001860 <MX_TIM2_Init+0x98>)
 80017fc:	f640 22a1 	movw	r2, #2721	@ 0xaa1
 8001800:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001802:	4b17      	ldr	r3, [pc, #92]	@ (8001860 <MX_TIM2_Init+0x98>)
 8001804:	2200      	movs	r2, #0
 8001806:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001808:	4b15      	ldr	r3, [pc, #84]	@ (8001860 <MX_TIM2_Init+0x98>)
 800180a:	2200      	movs	r2, #0
 800180c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800180e:	4814      	ldr	r0, [pc, #80]	@ (8001860 <MX_TIM2_Init+0x98>)
 8001810:	f004 f956 	bl	8005ac0 <HAL_TIM_Base_Init>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800181a:	f000 f969 	bl	8001af0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800181e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001822:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001824:	f107 0310 	add.w	r3, r7, #16
 8001828:	4619      	mov	r1, r3
 800182a:	480d      	ldr	r0, [pc, #52]	@ (8001860 <MX_TIM2_Init+0x98>)
 800182c:	f004 fb46 	bl	8005ebc <HAL_TIM_ConfigClockSource>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001836:	f000 f95b 	bl	8001af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800183a:	2300      	movs	r3, #0
 800183c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001842:	1d3b      	adds	r3, r7, #4
 8001844:	4619      	mov	r1, r3
 8001846:	4806      	ldr	r0, [pc, #24]	@ (8001860 <MX_TIM2_Init+0x98>)
 8001848:	f004 fd6a 	bl	8006320 <HAL_TIMEx_MasterConfigSynchronization>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001852:	f000 f94d 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001856:	bf00      	nop
 8001858:	3720      	adds	r7, #32
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	2000064c 	.word	0x2000064c

08001864 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001868:	4b22      	ldr	r3, [pc, #136]	@ (80018f4 <MX_USART1_UART_Init+0x90>)
 800186a:	4a23      	ldr	r2, [pc, #140]	@ (80018f8 <MX_USART1_UART_Init+0x94>)
 800186c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800186e:	4b21      	ldr	r3, [pc, #132]	@ (80018f4 <MX_USART1_UART_Init+0x90>)
 8001870:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001874:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001876:	4b1f      	ldr	r3, [pc, #124]	@ (80018f4 <MX_USART1_UART_Init+0x90>)
 8001878:	2200      	movs	r2, #0
 800187a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800187c:	4b1d      	ldr	r3, [pc, #116]	@ (80018f4 <MX_USART1_UART_Init+0x90>)
 800187e:	2200      	movs	r2, #0
 8001880:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001882:	4b1c      	ldr	r3, [pc, #112]	@ (80018f4 <MX_USART1_UART_Init+0x90>)
 8001884:	2200      	movs	r2, #0
 8001886:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001888:	4b1a      	ldr	r3, [pc, #104]	@ (80018f4 <MX_USART1_UART_Init+0x90>)
 800188a:	220c      	movs	r2, #12
 800188c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800188e:	4b19      	ldr	r3, [pc, #100]	@ (80018f4 <MX_USART1_UART_Init+0x90>)
 8001890:	2200      	movs	r2, #0
 8001892:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001894:	4b17      	ldr	r3, [pc, #92]	@ (80018f4 <MX_USART1_UART_Init+0x90>)
 8001896:	2200      	movs	r2, #0
 8001898:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800189a:	4b16      	ldr	r3, [pc, #88]	@ (80018f4 <MX_USART1_UART_Init+0x90>)
 800189c:	2200      	movs	r2, #0
 800189e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018a0:	4b14      	ldr	r3, [pc, #80]	@ (80018f4 <MX_USART1_UART_Init+0x90>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018a6:	4b13      	ldr	r3, [pc, #76]	@ (80018f4 <MX_USART1_UART_Init+0x90>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018ac:	4811      	ldr	r0, [pc, #68]	@ (80018f4 <MX_USART1_UART_Init+0x90>)
 80018ae:	f004 fddd 	bl	800646c <HAL_UART_Init>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80018b8:	f000 f91a 	bl	8001af0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018bc:	2100      	movs	r1, #0
 80018be:	480d      	ldr	r0, [pc, #52]	@ (80018f4 <MX_USART1_UART_Init+0x90>)
 80018c0:	f006 fe5f 	bl	8008582 <HAL_UARTEx_SetTxFifoThreshold>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80018ca:	f000 f911 	bl	8001af0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018ce:	2100      	movs	r1, #0
 80018d0:	4808      	ldr	r0, [pc, #32]	@ (80018f4 <MX_USART1_UART_Init+0x90>)
 80018d2:	f006 fe94 	bl	80085fe <HAL_UARTEx_SetRxFifoThreshold>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80018dc:	f000 f908 	bl	8001af0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80018e0:	4804      	ldr	r0, [pc, #16]	@ (80018f4 <MX_USART1_UART_Init+0x90>)
 80018e2:	f006 fe15 	bl	8008510 <HAL_UARTEx_DisableFifoMode>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80018ec:	f000 f900 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018f0:	bf00      	nop
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20000698 	.word	0x20000698
 80018f8:	40013800 	.word	0x40013800

080018fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b088      	sub	sp, #32
 8001900:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001902:	f107 030c 	add.w	r3, r7, #12
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	609a      	str	r2, [r3, #8]
 800190e:	60da      	str	r2, [r3, #12]
 8001910:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001912:	4b1f      	ldr	r3, [pc, #124]	@ (8001990 <MX_GPIO_Init+0x94>)
 8001914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001916:	4a1e      	ldr	r2, [pc, #120]	@ (8001990 <MX_GPIO_Init+0x94>)
 8001918:	f043 0304 	orr.w	r3, r3, #4
 800191c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800191e:	4b1c      	ldr	r3, [pc, #112]	@ (8001990 <MX_GPIO_Init+0x94>)
 8001920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001922:	f003 0304 	and.w	r3, r3, #4
 8001926:	60bb      	str	r3, [r7, #8]
 8001928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800192a:	4b19      	ldr	r3, [pc, #100]	@ (8001990 <MX_GPIO_Init+0x94>)
 800192c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800192e:	4a18      	ldr	r2, [pc, #96]	@ (8001990 <MX_GPIO_Init+0x94>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001936:	4b16      	ldr	r3, [pc, #88]	@ (8001990 <MX_GPIO_Init+0x94>)
 8001938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	607b      	str	r3, [r7, #4]
 8001940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001942:	4b13      	ldr	r3, [pc, #76]	@ (8001990 <MX_GPIO_Init+0x94>)
 8001944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001946:	4a12      	ldr	r2, [pc, #72]	@ (8001990 <MX_GPIO_Init+0x94>)
 8001948:	f043 0302 	orr.w	r3, r3, #2
 800194c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800194e:	4b10      	ldr	r3, [pc, #64]	@ (8001990 <MX_GPIO_Init+0x94>)
 8001950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	603b      	str	r3, [r7, #0]
 8001958:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : myButton_Pin */
  GPIO_InitStruct.Pin = myButton_Pin;
 800195a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800195e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001960:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001964:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(myButton_GPIO_Port, &GPIO_InitStruct);
 800196a:	f107 030c 	add.w	r3, r7, #12
 800196e:	4619      	mov	r1, r3
 8001970:	4808      	ldr	r0, [pc, #32]	@ (8001994 <MX_GPIO_Init+0x98>)
 8001972:	f001 fb03 	bl	8002f7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001976:	2200      	movs	r2, #0
 8001978:	2100      	movs	r1, #0
 800197a:	2028      	movs	r0, #40	@ 0x28
 800197c:	f000 ffb9 	bl	80028f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001980:	2028      	movs	r0, #40	@ 0x28
 8001982:	f000 ffd2 	bl	800292a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001986:	bf00      	nop
 8001988:	3720      	adds	r7, #32
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40021000 	.word	0x40021000
 8001994:	48000800 	.word	0x48000800

08001998 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019a8:	d15e      	bne.n	8001a68 <HAL_TIM_PeriodElapsedCallback+0xd0>
		HAL_IncTick();
 80019aa:	f000 fe83 	bl	80026b4 <HAL_IncTick>
		if(periods<80){
 80019ae:	4b30      	ldr	r3, [pc, #192]	@ (8001a70 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2b4f      	cmp	r3, #79	@ 0x4f
 80019b4:	dc26      	bgt.n	8001a04 <HAL_TIM_PeriodElapsedCallback+0x6c>
			STATUS = HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, current_tone[tone_index++]);
 80019b6:	4b2f      	ldr	r3, [pc, #188]	@ (8001a74 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	4b2f      	ldr	r3, [pc, #188]	@ (8001a78 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	1c59      	adds	r1, r3, #1
 80019c0:	482d      	ldr	r0, [pc, #180]	@ (8001a78 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80019c2:	6001      	str	r1, [r0, #0]
 80019c4:	4413      	add	r3, r2
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2200      	movs	r2, #0
 80019ca:	2100      	movs	r1, #0
 80019cc:	482b      	ldr	r0, [pc, #172]	@ (8001a7c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80019ce:	f001 f894 	bl	8002afa <HAL_DAC_SetValue>
 80019d2:	4603      	mov	r3, r0
 80019d4:	461a      	mov	r2, r3
 80019d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001a80 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80019d8:	701a      	strb	r2, [r3, #0]
			if(STATUS != HAL_OK){
 80019da:	4b29      	ldr	r3, [pc, #164]	@ (8001a80 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <HAL_TIM_PeriodElapsedCallback+0x4e>
				Error_Handler();
 80019e2:	f000 f885 	bl	8001af0 <Error_Handler>
			}
			if(tone_index==current_num_sample){
 80019e6:	4b24      	ldr	r3, [pc, #144]	@ (8001a78 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	4b26      	ldr	r3, [pc, #152]	@ (8001a84 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d13a      	bne.n	8001a68 <HAL_TIM_PeriodElapsedCallback+0xd0>
				tone_index=0;
 80019f2:	4b21      	ldr	r3, [pc, #132]	@ (8001a78 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
				periods++;
 80019f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001a70 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	3301      	adds	r3, #1
 80019fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001a70 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001a00:	6013      	str	r3, [r2, #0]
 8001a02:	e031      	b.n	8001a68 <HAL_TIM_PeriodElapsedCallback+0xd0>
			}
		}
		else {
			tone++;
 8001a04:	4b20      	ldr	r3, [pc, #128]	@ (8001a88 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	4a1f      	ldr	r2, [pc, #124]	@ (8001a88 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001a0c:	6013      	str	r3, [r2, #0]
			tone_index=0;
 8001a0e:	4b1a      	ldr	r3, [pc, #104]	@ (8001a78 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
			periods = 0;
 8001a14:	4b16      	ldr	r3, [pc, #88]	@ (8001a70 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]

			switch(tone){
 8001a1a:	4b1b      	ldr	r3, [pc, #108]	@ (8001a88 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d002      	beq.n	8001a28 <HAL_TIM_PeriodElapsedCallback+0x90>
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d007      	beq.n	8001a36 <HAL_TIM_PeriodElapsedCallback+0x9e>
 8001a26:	e018      	b.n	8001a5a <HAL_TIM_PeriodElapsedCallback+0xc2>
				case 1:
					current_tone = sine_e4;
 8001a28:	4b12      	ldr	r3, [pc, #72]	@ (8001a74 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001a2a:	4a18      	ldr	r2, [pc, #96]	@ (8001a8c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001a2c:	601a      	str	r2, [r3, #0]
					current_num_sample = 134;
 8001a2e:	4b15      	ldr	r3, [pc, #84]	@ (8001a84 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001a30:	2286      	movs	r2, #134	@ 0x86
 8001a32:	601a      	str	r2, [r3, #0]
					break;
 8001a34:	e018      	b.n	8001a68 <HAL_TIM_PeriodElapsedCallback+0xd0>
				case 2:
					if(start){
 8001a36:	4b16      	ldr	r3, [pc, #88]	@ (8001a90 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d006      	beq.n	8001a4c <HAL_TIM_PeriodElapsedCallback+0xb4>
						current_tone = sine_g4;
 8001a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a74 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001a40:	4a14      	ldr	r2, [pc, #80]	@ (8001a94 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001a42:	601a      	str	r2, [r3, #0]
						current_num_sample = 112;
 8001a44:	4b0f      	ldr	r3, [pc, #60]	@ (8001a84 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001a46:	2270      	movs	r2, #112	@ 0x70
 8001a48:	601a      	str	r2, [r3, #0]
					}else {
						current_tone = sine_c4;
						current_num_sample = 169;
					}
					break;
 8001a4a:	e00d      	b.n	8001a68 <HAL_TIM_PeriodElapsedCallback+0xd0>
						current_tone = sine_c4;
 8001a4c:	4b09      	ldr	r3, [pc, #36]	@ (8001a74 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001a4e:	4a12      	ldr	r2, [pc, #72]	@ (8001a98 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001a50:	601a      	str	r2, [r3, #0]
						current_num_sample = 169;
 8001a52:	4b0c      	ldr	r3, [pc, #48]	@ (8001a84 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001a54:	22a9      	movs	r2, #169	@ 0xa9
 8001a56:	601a      	str	r2, [r3, #0]
					break;
 8001a58:	e006      	b.n	8001a68 <HAL_TIM_PeriodElapsedCallback+0xd0>
				default:
					HAL_TIM_Base_Stop_IT(&htim2);
 8001a5a:	4810      	ldr	r0, [pc, #64]	@ (8001a9c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001a5c:	f004 f8f8 	bl	8005c50 <HAL_TIM_Base_Stop_IT>
					tone = 0;
 8001a60:	4b09      	ldr	r3, [pc, #36]	@ (8001a88 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
					return;
 8001a66:	bf00      	nop
			}


		}
	}
}
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20000434 	.word	0x20000434
 8001a74:	20000000 	.word	0x20000000
 8001a78:	20000430 	.word	0x20000430
 8001a7c:	200005e4 	.word	0x200005e4
 8001a80:	20000288 	.word	0x20000288
 8001a84:	20000004 	.word	0x20000004
 8001a88:	20000438 	.word	0x20000438
 8001a8c:	200002fc 	.word	0x200002fc
 8001a90:	20000008 	.word	0x20000008
 8001a94:	2000028c 	.word	0x2000028c
 8001a98:	20000384 	.word	0x20000384
 8001a9c:	2000064c 	.word	0x2000064c

08001aa0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a0c      	ldr	r2, [pc, #48]	@ (8001ae0 <HAL_UART_RxCpltCallback+0x40>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d112      	bne.n	8001ad8 <HAL_UART_RxCpltCallback+0x38>
  {
    HAL_UART_Receive_IT(&huart1, rxBuffer, 10);
 8001ab2:	220a      	movs	r2, #10
 8001ab4:	490b      	ldr	r1, [pc, #44]	@ (8001ae4 <HAL_UART_RxCpltCallback+0x44>)
 8001ab6:	480c      	ldr	r0, [pc, #48]	@ (8001ae8 <HAL_UART_RxCpltCallback+0x48>)
 8001ab8:	f004 fdb6 	bl	8006628 <HAL_UART_Receive_IT>

    if (strstr((char *)rxBuffer, "GAME_OVER\n") != NULL) {
 8001abc:	490b      	ldr	r1, [pc, #44]	@ (8001aec <HAL_UART_RxCpltCallback+0x4c>)
 8001abe:	4809      	ldr	r0, [pc, #36]	@ (8001ae4 <HAL_UART_RxCpltCallback+0x44>)
 8001ac0:	f008 fc54 	bl	800a36c <strstr>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d006      	beq.n	8001ad8 <HAL_UART_RxCpltCallback+0x38>
      play_gameover_sound();
 8001aca:	f7ff fb55 	bl	8001178 <play_gameover_sound>
      memset(rxBuffer, 0, sizeof(rxBuffer));
 8001ace:	2264      	movs	r2, #100	@ 0x64
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	4804      	ldr	r0, [pc, #16]	@ (8001ae4 <HAL_UART_RxCpltCallback+0x44>)
 8001ad4:	f008 fc60 	bl	800a398 <memset>
    }
  }
}
 8001ad8:	bf00      	nop
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40013800 	.word	0x40013800
 8001ae4:	2000043c 	.word	0x2000043c
 8001ae8:	20000698 	.word	0x20000698
 8001aec:	0800d260 	.word	0x0800d260

08001af0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001af4:	b672      	cpsid	i
}
 8001af6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001af8:	bf00      	nop
 8001afa:	e7fd      	b.n	8001af8 <Error_Handler+0x8>

08001afc <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08a      	sub	sp, #40	@ 0x28
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001b04:	4b27      	ldr	r3, [pc, #156]	@ (8001ba4 <I2Cx_MspInit+0xa8>)
 8001b06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b08:	4a26      	ldr	r2, [pc, #152]	@ (8001ba4 <I2Cx_MspInit+0xa8>)
 8001b0a:	f043 0302 	orr.w	r3, r3, #2
 8001b0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b10:	4b24      	ldr	r3, [pc, #144]	@ (8001ba4 <I2Cx_MspInit+0xa8>)
 8001b12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	613b      	str	r3, [r7, #16]
 8001b1a:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001b1c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001b20:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001b22:	2312      	movs	r3, #18
 8001b24:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001b26:	2301      	movs	r3, #1
 8001b28:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001b2e:	2304      	movs	r3, #4
 8001b30:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001b32:	f107 0314 	add.w	r3, r7, #20
 8001b36:	4619      	mov	r1, r3
 8001b38:	481b      	ldr	r0, [pc, #108]	@ (8001ba8 <I2Cx_MspInit+0xac>)
 8001b3a:	f001 fa1f 	bl	8002f7c <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001b3e:	f107 0314 	add.w	r3, r7, #20
 8001b42:	4619      	mov	r1, r3
 8001b44:	4818      	ldr	r0, [pc, #96]	@ (8001ba8 <I2Cx_MspInit+0xac>)
 8001b46:	f001 fa19 	bl	8002f7c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001b4a:	4b16      	ldr	r3, [pc, #88]	@ (8001ba4 <I2Cx_MspInit+0xa8>)
 8001b4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b4e:	4a15      	ldr	r2, [pc, #84]	@ (8001ba4 <I2Cx_MspInit+0xa8>)
 8001b50:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b54:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b56:	4b13      	ldr	r3, [pc, #76]	@ (8001ba4 <I2Cx_MspInit+0xa8>)
 8001b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001b62:	4b10      	ldr	r3, [pc, #64]	@ (8001ba4 <I2Cx_MspInit+0xa8>)
 8001b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b66:	4a0f      	ldr	r2, [pc, #60]	@ (8001ba4 <I2Cx_MspInit+0xa8>)
 8001b68:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b6c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ba4 <I2Cx_MspInit+0xa8>)
 8001b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b72:	4a0c      	ldr	r2, [pc, #48]	@ (8001ba4 <I2Cx_MspInit+0xa8>)
 8001b74:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001b78:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	210f      	movs	r1, #15
 8001b7e:	2021      	movs	r0, #33	@ 0x21
 8001b80:	f000 feb7 	bl	80028f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001b84:	2021      	movs	r0, #33	@ 0x21
 8001b86:	f000 fed0 	bl	800292a <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	210f      	movs	r1, #15
 8001b8e:	2022      	movs	r0, #34	@ 0x22
 8001b90:	f000 feaf 	bl	80028f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001b94:	2022      	movs	r0, #34	@ 0x22
 8001b96:	f000 fec8 	bl	800292a <HAL_NVIC_EnableIRQ>
}
 8001b9a:	bf00      	nop
 8001b9c:	3728      	adds	r7, #40	@ 0x28
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	48000400 	.word	0x48000400

08001bac <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4a12      	ldr	r2, [pc, #72]	@ (8001c00 <I2Cx_Init+0x54>)
 8001bb8:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a11      	ldr	r2, [pc, #68]	@ (8001c04 <I2Cx_Init+0x58>)
 8001bbe:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f7ff ff89 	bl	8001afc <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f001 fc62 	bl	80034b4 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f002 fa18 	bl	8004028 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001bf8:	bf00      	nop
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40005800 	.word	0x40005800
 8001c04:	00702681 	.word	0x00702681

08001c08 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08a      	sub	sp, #40	@ 0x28
 8001c0c:	af04      	add	r7, sp, #16
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	4608      	mov	r0, r1
 8001c12:	4611      	mov	r1, r2
 8001c14:	461a      	mov	r2, r3
 8001c16:	4603      	mov	r3, r0
 8001c18:	72fb      	strb	r3, [r7, #11]
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	813b      	strh	r3, [r7, #8]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001c22:	2300      	movs	r3, #0
 8001c24:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001c26:	7afb      	ldrb	r3, [r7, #11]
 8001c28:	b299      	uxth	r1, r3
 8001c2a:	88f8      	ldrh	r0, [r7, #6]
 8001c2c:	893a      	ldrh	r2, [r7, #8]
 8001c2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c32:	9302      	str	r3, [sp, #8]
 8001c34:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001c36:	9301      	str	r3, [sp, #4]
 8001c38:	6a3b      	ldr	r3, [r7, #32]
 8001c3a:	9300      	str	r3, [sp, #0]
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	68f8      	ldr	r0, [r7, #12]
 8001c40:	f001 fe16 	bl	8003870 <HAL_I2C_Mem_Read>
 8001c44:	4603      	mov	r3, r0
 8001c46:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001c48:	7dfb      	ldrb	r3, [r7, #23]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d004      	beq.n	8001c58 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8001c4e:	7afb      	ldrb	r3, [r7, #11]
 8001c50:	4619      	mov	r1, r3
 8001c52:	68f8      	ldr	r0, [r7, #12]
 8001c54:	f000 f832 	bl	8001cbc <I2Cx_Error>
  }
  return status;
 8001c58:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3718      	adds	r7, #24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b08a      	sub	sp, #40	@ 0x28
 8001c66:	af04      	add	r7, sp, #16
 8001c68:	60f8      	str	r0, [r7, #12]
 8001c6a:	4608      	mov	r0, r1
 8001c6c:	4611      	mov	r1, r2
 8001c6e:	461a      	mov	r2, r3
 8001c70:	4603      	mov	r3, r0
 8001c72:	72fb      	strb	r3, [r7, #11]
 8001c74:	460b      	mov	r3, r1
 8001c76:	813b      	strh	r3, [r7, #8]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001c80:	7afb      	ldrb	r3, [r7, #11]
 8001c82:	b299      	uxth	r1, r3
 8001c84:	88f8      	ldrh	r0, [r7, #6]
 8001c86:	893a      	ldrh	r2, [r7, #8]
 8001c88:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c8c:	9302      	str	r3, [sp, #8]
 8001c8e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001c90:	9301      	str	r3, [sp, #4]
 8001c92:	6a3b      	ldr	r3, [r7, #32]
 8001c94:	9300      	str	r3, [sp, #0]
 8001c96:	4603      	mov	r3, r0
 8001c98:	68f8      	ldr	r0, [r7, #12]
 8001c9a:	f001 fcd5 	bl	8003648 <HAL_I2C_Mem_Write>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001ca2:	7dfb      	ldrb	r3, [r7, #23]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d004      	beq.n	8001cb2 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001ca8:	7afb      	ldrb	r3, [r7, #11]
 8001caa:	4619      	mov	r1, r3
 8001cac:	68f8      	ldr	r0, [r7, #12]
 8001cae:	f000 f805 	bl	8001cbc <I2Cx_Error>
  }
  return status;
 8001cb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3718      	adds	r7, #24
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f001 fc8e 	bl	80035ea <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7ff ff6c 	bl	8001bac <I2Cx_Init>
}
 8001cd4:	bf00      	nop
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001ce0:	4802      	ldr	r0, [pc, #8]	@ (8001cec <SENSOR_IO_Init+0x10>)
 8001ce2:	f7ff ff63 	bl	8001bac <I2Cx_Init>
}
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	2000072c 	.word	0x2000072c

08001cf0 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af02      	add	r7, sp, #8
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	71fb      	strb	r3, [r7, #7]
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	71bb      	strb	r3, [r7, #6]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001d02:	79bb      	ldrb	r3, [r7, #6]
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	79f9      	ldrb	r1, [r7, #7]
 8001d08:	2301      	movs	r3, #1
 8001d0a:	9301      	str	r3, [sp, #4]
 8001d0c:	1d7b      	adds	r3, r7, #5
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	2301      	movs	r3, #1
 8001d12:	4803      	ldr	r0, [pc, #12]	@ (8001d20 <SENSOR_IO_Write+0x30>)
 8001d14:	f7ff ffa5 	bl	8001c62 <I2Cx_WriteMultiple>
}
 8001d18:	bf00      	nop
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	2000072c 	.word	0x2000072c

08001d24 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af02      	add	r7, sp, #8
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	460a      	mov	r2, r1
 8001d2e:	71fb      	strb	r3, [r7, #7]
 8001d30:	4613      	mov	r3, r2
 8001d32:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001d34:	2300      	movs	r3, #0
 8001d36:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001d38:	79bb      	ldrb	r3, [r7, #6]
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	79f9      	ldrb	r1, [r7, #7]
 8001d3e:	2301      	movs	r3, #1
 8001d40:	9301      	str	r3, [sp, #4]
 8001d42:	f107 030f 	add.w	r3, r7, #15
 8001d46:	9300      	str	r3, [sp, #0]
 8001d48:	2301      	movs	r3, #1
 8001d4a:	4804      	ldr	r0, [pc, #16]	@ (8001d5c <SENSOR_IO_Read+0x38>)
 8001d4c:	f7ff ff5c 	bl	8001c08 <I2Cx_ReadMultiple>

  return read_value;
 8001d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	2000072c 	.word	0x2000072c

08001d60 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af02      	add	r7, sp, #8
 8001d66:	603a      	str	r2, [r7, #0]
 8001d68:	461a      	mov	r2, r3
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	71fb      	strb	r3, [r7, #7]
 8001d6e:	460b      	mov	r3, r1
 8001d70:	71bb      	strb	r3, [r7, #6]
 8001d72:	4613      	mov	r3, r2
 8001d74:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001d76:	79bb      	ldrb	r3, [r7, #6]
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	79f9      	ldrb	r1, [r7, #7]
 8001d7c:	88bb      	ldrh	r3, [r7, #4]
 8001d7e:	9301      	str	r3, [sp, #4]
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	2301      	movs	r3, #1
 8001d86:	4804      	ldr	r0, [pc, #16]	@ (8001d98 <SENSOR_IO_ReadMultiple+0x38>)
 8001d88:	f7ff ff3e 	bl	8001c08 <I2Cx_ReadMultiple>
 8001d8c:	4603      	mov	r3, r0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	2000072c 	.word	0x2000072c

08001d9c <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8001da2:	2300      	movs	r3, #0
 8001da4:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8001da6:	2300      	movs	r3, #0
 8001da8:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8001daa:	4b19      	ldr	r3, [pc, #100]	@ (8001e10 <BSP_ACCELERO_Init+0x74>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	4798      	blx	r3
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b6a      	cmp	r3, #106	@ 0x6a
 8001db4:	d002      	beq.n	8001dbc <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	73fb      	strb	r3, [r7, #15]
 8001dba:	e024      	b.n	8001e06 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8001dbc:	4b15      	ldr	r3, [pc, #84]	@ (8001e14 <BSP_ACCELERO_Init+0x78>)
 8001dbe:	4a14      	ldr	r2, [pc, #80]	@ (8001e10 <BSP_ACCELERO_Init+0x74>)
 8001dc0:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8001dc2:	2330      	movs	r3, #48	@ 0x30
 8001dc4:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8001dce:	2340      	movs	r3, #64	@ 0x40
 8001dd0:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8001dda:	797a      	ldrb	r2, [r7, #5]
 8001ddc:	7abb      	ldrb	r3, [r7, #10]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8001de4:	7a3b      	ldrb	r3, [r7, #8]
 8001de6:	f043 0304 	orr.w	r3, r3, #4
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	021b      	lsls	r3, r3, #8
 8001dee:	b21a      	sxth	r2, r3
 8001df0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	b21b      	sxth	r3, r3
 8001df8:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8001dfa:	4b06      	ldr	r3, [pc, #24]	@ (8001e14 <BSP_ACCELERO_Init+0x78>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	89ba      	ldrh	r2, [r7, #12]
 8001e02:	4610      	mov	r0, r2
 8001e04:	4798      	blx	r3
  }  

  return ret;
 8001e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3710      	adds	r7, #16
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	20000010 	.word	0x20000010
 8001e14:	20000780 	.word	0x20000780

08001e18 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8001e20:	4b08      	ldr	r3, [pc, #32]	@ (8001e44 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d009      	beq.n	8001e3c <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8001e28:	4b06      	ldr	r3, [pc, #24]	@ (8001e44 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d004      	beq.n	8001e3c <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8001e32:	4b04      	ldr	r3, [pc, #16]	@ (8001e44 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	4798      	blx	r3
    }
  }
}
 8001e3c:	bf00      	nop
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20000780 	.word	0x20000780

08001e48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e4e:	4b0f      	ldr	r3, [pc, #60]	@ (8001e8c <HAL_MspInit+0x44>)
 8001e50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e52:	4a0e      	ldr	r2, [pc, #56]	@ (8001e8c <HAL_MspInit+0x44>)
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e8c <HAL_MspInit+0x44>)
 8001e5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	607b      	str	r3, [r7, #4]
 8001e64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e66:	4b09      	ldr	r3, [pc, #36]	@ (8001e8c <HAL_MspInit+0x44>)
 8001e68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e6a:	4a08      	ldr	r2, [pc, #32]	@ (8001e8c <HAL_MspInit+0x44>)
 8001e6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e70:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e72:	4b06      	ldr	r3, [pc, #24]	@ (8001e8c <HAL_MspInit+0x44>)
 8001e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e7a:	603b      	str	r3, [r7, #0]
 8001e7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	40021000 	.word	0x40021000

08001e90 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b08a      	sub	sp, #40	@ 0x28
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e98:	f107 0314 	add.w	r3, r7, #20
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	605a      	str	r2, [r3, #4]
 8001ea2:	609a      	str	r2, [r3, #8]
 8001ea4:	60da      	str	r2, [r3, #12]
 8001ea6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a19      	ldr	r2, [pc, #100]	@ (8001f14 <HAL_DAC_MspInit+0x84>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d12c      	bne.n	8001f0c <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001eb2:	4b19      	ldr	r3, [pc, #100]	@ (8001f18 <HAL_DAC_MspInit+0x88>)
 8001eb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eb6:	4a18      	ldr	r2, [pc, #96]	@ (8001f18 <HAL_DAC_MspInit+0x88>)
 8001eb8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001ebc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ebe:	4b16      	ldr	r3, [pc, #88]	@ (8001f18 <HAL_DAC_MspInit+0x88>)
 8001ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ec2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ec6:	613b      	str	r3, [r7, #16]
 8001ec8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eca:	4b13      	ldr	r3, [pc, #76]	@ (8001f18 <HAL_DAC_MspInit+0x88>)
 8001ecc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ece:	4a12      	ldr	r2, [pc, #72]	@ (8001f18 <HAL_DAC_MspInit+0x88>)
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ed6:	4b10      	ldr	r3, [pc, #64]	@ (8001f18 <HAL_DAC_MspInit+0x88>)
 8001ed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ee2:	2310      	movs	r3, #16
 8001ee4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eee:	f107 0314 	add.w	r3, r7, #20
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ef8:	f001 f840 	bl	8002f7c <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001efc:	2200      	movs	r2, #0
 8001efe:	2100      	movs	r1, #0
 8001f00:	2036      	movs	r0, #54	@ 0x36
 8001f02:	f000 fcf6 	bl	80028f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f06:	2036      	movs	r0, #54	@ 0x36
 8001f08:	f000 fd0f 	bl	800292a <HAL_NVIC_EnableIRQ>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8001f0c:	bf00      	nop
 8001f0e:	3728      	adds	r7, #40	@ 0x28
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40007400 	.word	0x40007400
 8001f18:	40021000 	.word	0x40021000

08001f1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b0ae      	sub	sp, #184	@ 0xb8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f24:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
 8001f32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f34:	f107 0310 	add.w	r3, r7, #16
 8001f38:	2294      	movs	r2, #148	@ 0x94
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f008 fa2b 	bl	800a398 <memset>
  if(hi2c->Instance==I2C2)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a21      	ldr	r2, [pc, #132]	@ (8001fcc <HAL_I2C_MspInit+0xb0>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d13b      	bne.n	8001fc4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001f4c:	2380      	movs	r3, #128	@ 0x80
 8001f4e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001f50:	2300      	movs	r3, #0
 8001f52:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f54:	f107 0310 	add.w	r3, r7, #16
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f003 f899 	bl	8005090 <HAL_RCCEx_PeriphCLKConfig>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001f64:	f7ff fdc4 	bl	8001af0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f68:	4b19      	ldr	r3, [pc, #100]	@ (8001fd0 <HAL_I2C_MspInit+0xb4>)
 8001f6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f6c:	4a18      	ldr	r2, [pc, #96]	@ (8001fd0 <HAL_I2C_MspInit+0xb4>)
 8001f6e:	f043 0302 	orr.w	r3, r3, #2
 8001f72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f74:	4b16      	ldr	r3, [pc, #88]	@ (8001fd0 <HAL_I2C_MspInit+0xb4>)
 8001f76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001f80:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001f84:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f88:	2312      	movs	r3, #18
 8001f8a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f94:	2303      	movs	r3, #3
 8001f96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001f9a:	2304      	movs	r3, #4
 8001f9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fa0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	480b      	ldr	r0, [pc, #44]	@ (8001fd4 <HAL_I2C_MspInit+0xb8>)
 8001fa8:	f000 ffe8 	bl	8002f7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001fac:	4b08      	ldr	r3, [pc, #32]	@ (8001fd0 <HAL_I2C_MspInit+0xb4>)
 8001fae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fb0:	4a07      	ldr	r2, [pc, #28]	@ (8001fd0 <HAL_I2C_MspInit+0xb4>)
 8001fb2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001fb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fb8:	4b05      	ldr	r3, [pc, #20]	@ (8001fd0 <HAL_I2C_MspInit+0xb4>)
 8001fba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fbc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fc0:	60bb      	str	r3, [r7, #8]
 8001fc2:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001fc4:	bf00      	nop
 8001fc6:	37b8      	adds	r7, #184	@ 0xb8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40005800 	.word	0x40005800
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	48000400 	.word	0x48000400

08001fd8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a0b      	ldr	r2, [pc, #44]	@ (8002014 <HAL_I2C_MspDeInit+0x3c>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d10f      	bne.n	800200a <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001fea:	4b0b      	ldr	r3, [pc, #44]	@ (8002018 <HAL_I2C_MspDeInit+0x40>)
 8001fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fee:	4a0a      	ldr	r2, [pc, #40]	@ (8002018 <HAL_I2C_MspDeInit+0x40>)
 8001ff0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001ff4:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8001ff6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001ffa:	4808      	ldr	r0, [pc, #32]	@ (800201c <HAL_I2C_MspDeInit+0x44>)
 8001ffc:	f001 f950 	bl	80032a0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8002000:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002004:	4805      	ldr	r0, [pc, #20]	@ (800201c <HAL_I2C_MspDeInit+0x44>)
 8002006:	f001 f94b 	bl	80032a0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 800200a:	bf00      	nop
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40005800 	.word	0x40005800
 8002018:	40021000 	.word	0x40021000
 800201c:	48000400 	.word	0x48000400

08002020 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002030:	d113      	bne.n	800205a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002032:	4b0c      	ldr	r3, [pc, #48]	@ (8002064 <HAL_TIM_Base_MspInit+0x44>)
 8002034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002036:	4a0b      	ldr	r2, [pc, #44]	@ (8002064 <HAL_TIM_Base_MspInit+0x44>)
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	6593      	str	r3, [r2, #88]	@ 0x58
 800203e:	4b09      	ldr	r3, [pc, #36]	@ (8002064 <HAL_TIM_Base_MspInit+0x44>)
 8002040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800204a:	2200      	movs	r2, #0
 800204c:	2100      	movs	r1, #0
 800204e:	201c      	movs	r0, #28
 8002050:	f000 fc4f 	bl	80028f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002054:	201c      	movs	r0, #28
 8002056:	f000 fc68 	bl	800292a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800205a:	bf00      	nop
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40021000 	.word	0x40021000

08002068 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b0ae      	sub	sp, #184	@ 0xb8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002070:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	605a      	str	r2, [r3, #4]
 800207a:	609a      	str	r2, [r3, #8]
 800207c:	60da      	str	r2, [r3, #12]
 800207e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002080:	f107 0310 	add.w	r3, r7, #16
 8002084:	2294      	movs	r2, #148	@ 0x94
 8002086:	2100      	movs	r1, #0
 8002088:	4618      	mov	r0, r3
 800208a:	f008 f985 	bl	800a398 <memset>
  if(huart->Instance==USART1)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a25      	ldr	r2, [pc, #148]	@ (8002128 <HAL_UART_MspInit+0xc0>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d142      	bne.n	800211e <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002098:	2301      	movs	r3, #1
 800209a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800209c:	2300      	movs	r3, #0
 800209e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020a0:	f107 0310 	add.w	r3, r7, #16
 80020a4:	4618      	mov	r0, r3
 80020a6:	f002 fff3 	bl	8005090 <HAL_RCCEx_PeriphCLKConfig>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80020b0:	f7ff fd1e 	bl	8001af0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020b4:	4b1d      	ldr	r3, [pc, #116]	@ (800212c <HAL_UART_MspInit+0xc4>)
 80020b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020b8:	4a1c      	ldr	r2, [pc, #112]	@ (800212c <HAL_UART_MspInit+0xc4>)
 80020ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020be:	6613      	str	r3, [r2, #96]	@ 0x60
 80020c0:	4b1a      	ldr	r3, [pc, #104]	@ (800212c <HAL_UART_MspInit+0xc4>)
 80020c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020cc:	4b17      	ldr	r3, [pc, #92]	@ (800212c <HAL_UART_MspInit+0xc4>)
 80020ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020d0:	4a16      	ldr	r2, [pc, #88]	@ (800212c <HAL_UART_MspInit+0xc4>)
 80020d2:	f043 0302 	orr.w	r3, r3, #2
 80020d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020d8:	4b14      	ldr	r3, [pc, #80]	@ (800212c <HAL_UART_MspInit+0xc4>)
 80020da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	60bb      	str	r3, [r7, #8]
 80020e2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020e4:	23c0      	movs	r3, #192	@ 0xc0
 80020e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ea:	2302      	movs	r3, #2
 80020ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f6:	2303      	movs	r3, #3
 80020f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020fc:	2307      	movs	r3, #7
 80020fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002102:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002106:	4619      	mov	r1, r3
 8002108:	4809      	ldr	r0, [pc, #36]	@ (8002130 <HAL_UART_MspInit+0xc8>)
 800210a:	f000 ff37 	bl	8002f7c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800210e:	2200      	movs	r2, #0
 8002110:	2101      	movs	r1, #1
 8002112:	2025      	movs	r0, #37	@ 0x25
 8002114:	f000 fbed 	bl	80028f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002118:	2025      	movs	r0, #37	@ 0x25
 800211a:	f000 fc06 	bl	800292a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800211e:	bf00      	nop
 8002120:	37b8      	adds	r7, #184	@ 0xb8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40013800 	.word	0x40013800
 800212c:	40021000 	.word	0x40021000
 8002130:	48000400 	.word	0x48000400

08002134 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002138:	bf00      	nop
 800213a:	e7fd      	b.n	8002138 <NMI_Handler+0x4>

0800213c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002140:	bf00      	nop
 8002142:	e7fd      	b.n	8002140 <HardFault_Handler+0x4>

08002144 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002148:	bf00      	nop
 800214a:	e7fd      	b.n	8002148 <MemManage_Handler+0x4>

0800214c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002150:	bf00      	nop
 8002152:	e7fd      	b.n	8002150 <BusFault_Handler+0x4>

08002154 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002158:	bf00      	nop
 800215a:	e7fd      	b.n	8002158 <UsageFault_Handler+0x4>

0800215c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002160:	bf00      	nop
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800216a:	b480      	push	{r7}
 800216c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800216e:	bf00      	nop
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800217c:	bf00      	nop
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800218a:	f000 fa93 	bl	80026b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800218e:	bf00      	nop
 8002190:	bd80      	pop	{r7, pc}
	...

08002194 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002198:	4802      	ldr	r0, [pc, #8]	@ (80021a4 <TIM2_IRQHandler+0x10>)
 800219a:	f003 fd88 	bl	8005cae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	2000064c 	.word	0x2000064c

080021a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80021ac:	4802      	ldr	r0, [pc, #8]	@ (80021b8 <USART1_IRQHandler+0x10>)
 80021ae:	f004 fa87 	bl	80066c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	20000698 	.word	0x20000698

080021bc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(myButton_Pin);
 80021c0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80021c4:	f001 f95e 	bl	8003484 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80021c8:	bf00      	nop
 80021ca:	bd80      	pop	{r7, pc}

080021cc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 80021d0:	4802      	ldr	r0, [pc, #8]	@ (80021dc <TIM6_DAC_IRQHandler+0x10>)
 80021d2:	f000 fc38 	bl	8002a46 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80021d6:	bf00      	nop
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	200005e4 	.word	0x200005e4

080021e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  return 1;
 80021e4:	2301      	movs	r3, #1
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <_kill>:

int _kill(int pid, int sig)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021fa:	f008 f8d9 	bl	800a3b0 <__errno>
 80021fe:	4603      	mov	r3, r0
 8002200:	2216      	movs	r2, #22
 8002202:	601a      	str	r2, [r3, #0]
  return -1;
 8002204:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002208:	4618      	mov	r0, r3
 800220a:	3708      	adds	r7, #8
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <_exit>:

void _exit (int status)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002218:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f7ff ffe7 	bl	80021f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002222:	bf00      	nop
 8002224:	e7fd      	b.n	8002222 <_exit+0x12>

08002226 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b086      	sub	sp, #24
 800222a:	af00      	add	r7, sp, #0
 800222c:	60f8      	str	r0, [r7, #12]
 800222e:	60b9      	str	r1, [r7, #8]
 8002230:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002232:	2300      	movs	r3, #0
 8002234:	617b      	str	r3, [r7, #20]
 8002236:	e00a      	b.n	800224e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002238:	f3af 8000 	nop.w
 800223c:	4601      	mov	r1, r0
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	1c5a      	adds	r2, r3, #1
 8002242:	60ba      	str	r2, [r7, #8]
 8002244:	b2ca      	uxtb	r2, r1
 8002246:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	3301      	adds	r3, #1
 800224c:	617b      	str	r3, [r7, #20]
 800224e:	697a      	ldr	r2, [r7, #20]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	429a      	cmp	r2, r3
 8002254:	dbf0      	blt.n	8002238 <_read+0x12>
  }

  return len;
 8002256:	687b      	ldr	r3, [r7, #4]
}
 8002258:	4618      	mov	r0, r3
 800225a:	3718      	adds	r7, #24
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800226c:	2300      	movs	r3, #0
 800226e:	617b      	str	r3, [r7, #20]
 8002270:	e009      	b.n	8002286 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	1c5a      	adds	r2, r3, #1
 8002276:	60ba      	str	r2, [r7, #8]
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	3301      	adds	r3, #1
 8002284:	617b      	str	r3, [r7, #20]
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	429a      	cmp	r2, r3
 800228c:	dbf1      	blt.n	8002272 <_write+0x12>
  }
  return len;
 800228e:	687b      	ldr	r3, [r7, #4]
}
 8002290:	4618      	mov	r0, r3
 8002292:	3718      	adds	r7, #24
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <_close>:

int _close(int file)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022c0:	605a      	str	r2, [r3, #4]
  return 0;
 80022c2:	2300      	movs	r3, #0
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <_isatty>:

int _isatty(int file)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022d8:	2301      	movs	r3, #1
}
 80022da:	4618      	mov	r0, r3
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022e6:	b480      	push	{r7}
 80022e8:	b085      	sub	sp, #20
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	60f8      	str	r0, [r7, #12]
 80022ee:	60b9      	str	r1, [r7, #8]
 80022f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3714      	adds	r7, #20
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002308:	4a14      	ldr	r2, [pc, #80]	@ (800235c <_sbrk+0x5c>)
 800230a:	4b15      	ldr	r3, [pc, #84]	@ (8002360 <_sbrk+0x60>)
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002314:	4b13      	ldr	r3, [pc, #76]	@ (8002364 <_sbrk+0x64>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d102      	bne.n	8002322 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800231c:	4b11      	ldr	r3, [pc, #68]	@ (8002364 <_sbrk+0x64>)
 800231e:	4a12      	ldr	r2, [pc, #72]	@ (8002368 <_sbrk+0x68>)
 8002320:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002322:	4b10      	ldr	r3, [pc, #64]	@ (8002364 <_sbrk+0x64>)
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4413      	add	r3, r2
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	429a      	cmp	r2, r3
 800232e:	d207      	bcs.n	8002340 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002330:	f008 f83e 	bl	800a3b0 <__errno>
 8002334:	4603      	mov	r3, r0
 8002336:	220c      	movs	r2, #12
 8002338:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800233a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800233e:	e009      	b.n	8002354 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002340:	4b08      	ldr	r3, [pc, #32]	@ (8002364 <_sbrk+0x64>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002346:	4b07      	ldr	r3, [pc, #28]	@ (8002364 <_sbrk+0x64>)
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4413      	add	r3, r2
 800234e:	4a05      	ldr	r2, [pc, #20]	@ (8002364 <_sbrk+0x64>)
 8002350:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002352:	68fb      	ldr	r3, [r7, #12]
}
 8002354:	4618      	mov	r0, r3
 8002356:	3718      	adds	r7, #24
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	200a0000 	.word	0x200a0000
 8002360:	00000400 	.word	0x00000400
 8002364:	20000784 	.word	0x20000784
 8002368:	200008d8 	.word	0x200008d8

0800236c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002370:	4b06      	ldr	r3, [pc, #24]	@ (800238c <SystemInit+0x20>)
 8002372:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002376:	4a05      	ldr	r2, [pc, #20]	@ (800238c <SystemInit+0x20>)
 8002378:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800237c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002380:	bf00      	nop
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	e000ed00 	.word	0xe000ed00

08002390 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002390:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80023c8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002394:	f7ff ffea 	bl	800236c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002398:	480c      	ldr	r0, [pc, #48]	@ (80023cc <LoopForever+0x6>)
  ldr r1, =_edata
 800239a:	490d      	ldr	r1, [pc, #52]	@ (80023d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800239c:	4a0d      	ldr	r2, [pc, #52]	@ (80023d4 <LoopForever+0xe>)
  movs r3, #0
 800239e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023a0:	e002      	b.n	80023a8 <LoopCopyDataInit>

080023a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023a6:	3304      	adds	r3, #4

080023a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023ac:	d3f9      	bcc.n	80023a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ae:	4a0a      	ldr	r2, [pc, #40]	@ (80023d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023b0:	4c0a      	ldr	r4, [pc, #40]	@ (80023dc <LoopForever+0x16>)
  movs r3, #0
 80023b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023b4:	e001      	b.n	80023ba <LoopFillZerobss>

080023b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023b8:	3204      	adds	r2, #4

080023ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023bc:	d3fb      	bcc.n	80023b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023be:	f007 fffd 	bl	800a3bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023c2:	f7fe ffff 	bl	80013c4 <main>

080023c6 <LoopForever>:

LoopForever:
    b LoopForever
 80023c6:	e7fe      	b.n	80023c6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80023c8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80023cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023d0:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 80023d4:	0800df54 	.word	0x0800df54
  ldr r2, =_sbss
 80023d8:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 80023dc:	200008d8 	.word	0x200008d8

080023e0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023e0:	e7fe      	b.n	80023e0 <ADC1_IRQHandler>

080023e2 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b084      	sub	sp, #16
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	4603      	mov	r3, r0
 80023ea:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80023ec:	2300      	movs	r3, #0
 80023ee:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80023f0:	2110      	movs	r1, #16
 80023f2:	20d4      	movs	r0, #212	@ 0xd4
 80023f4:	f7ff fc96 	bl	8001d24 <SENSOR_IO_Read>
 80023f8:	4603      	mov	r3, r0
 80023fa:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80023fc:	88fb      	ldrh	r3, [r7, #6]
 80023fe:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8002400:	7bbb      	ldrb	r3, [r7, #14]
 8002402:	f003 0303 	and.w	r3, r3, #3
 8002406:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8002408:	7bba      	ldrb	r2, [r7, #14]
 800240a:	7bfb      	ldrb	r3, [r7, #15]
 800240c:	4313      	orrs	r3, r2
 800240e:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8002410:	7bbb      	ldrb	r3, [r7, #14]
 8002412:	461a      	mov	r2, r3
 8002414:	2110      	movs	r1, #16
 8002416:	20d4      	movs	r0, #212	@ 0xd4
 8002418:	f7ff fc6a 	bl	8001cf0 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800241c:	2112      	movs	r1, #18
 800241e:	20d4      	movs	r0, #212	@ 0xd4
 8002420:	f7ff fc80 	bl	8001d24 <SENSOR_IO_Read>
 8002424:	4603      	mov	r3, r0
 8002426:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8002428:	88fb      	ldrh	r3, [r7, #6]
 800242a:	0a1b      	lsrs	r3, r3, #8
 800242c:	b29b      	uxth	r3, r3
 800242e:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8002430:	7bbb      	ldrb	r3, [r7, #14]
 8002432:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 8002436:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8002438:	7bba      	ldrb	r2, [r7, #14]
 800243a:	7bfb      	ldrb	r3, [r7, #15]
 800243c:	4313      	orrs	r3, r2
 800243e:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8002440:	7bbb      	ldrb	r3, [r7, #14]
 8002442:	461a      	mov	r2, r3
 8002444:	2112      	movs	r1, #18
 8002446:	20d4      	movs	r0, #212	@ 0xd4
 8002448:	f7ff fc52 	bl	8001cf0 <SENSOR_IO_Write>
}
 800244c:	bf00      	nop
 800244e:	3710      	adds	r7, #16
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800245a:	2300      	movs	r3, #0
 800245c:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800245e:	2110      	movs	r1, #16
 8002460:	20d4      	movs	r0, #212	@ 0xd4
 8002462:	f7ff fc5f 	bl	8001d24 <SENSOR_IO_Read>
 8002466:	4603      	mov	r3, r0
 8002468:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 800246a:	79fb      	ldrb	r3, [r7, #7]
 800246c:	f003 030f 	and.w	r3, r3, #15
 8002470:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8002472:	79fb      	ldrb	r3, [r7, #7]
 8002474:	461a      	mov	r2, r3
 8002476:	2110      	movs	r1, #16
 8002478:	20d4      	movs	r0, #212	@ 0xd4
 800247a:	f7ff fc39 	bl	8001cf0 <SENSOR_IO_Write>
}
 800247e:	bf00      	nop
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8002486:	b580      	push	{r7, lr}
 8002488:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 800248a:	f7ff fc27 	bl	8001cdc <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 800248e:	210f      	movs	r1, #15
 8002490:	20d4      	movs	r0, #212	@ 0xd4
 8002492:	f7ff fc47 	bl	8001d24 <SENSOR_IO_Read>
 8002496:	4603      	mov	r3, r0
}
 8002498:	4618      	mov	r0, r3
 800249a:	bd80      	pop	{r7, pc}

0800249c <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80024a6:	2300      	movs	r3, #0
 80024a8:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 80024aa:	2115      	movs	r1, #21
 80024ac:	20d4      	movs	r0, #212	@ 0xd4
 80024ae:	f7ff fc39 	bl	8001d24 <SENSOR_IO_Read>
 80024b2:	4603      	mov	r3, r0
 80024b4:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 80024b6:	7bfb      	ldrb	r3, [r7, #15]
 80024b8:	f023 0310 	bic.w	r3, r3, #16
 80024bc:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80024be:	88fb      	ldrh	r3, [r7, #6]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d003      	beq.n	80024cc <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80024c4:	7bfb      	ldrb	r3, [r7, #15]
 80024c6:	f043 0310 	orr.w	r3, r3, #16
 80024ca:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80024cc:	7bfb      	ldrb	r3, [r7, #15]
 80024ce:	461a      	mov	r2, r3
 80024d0:	2115      	movs	r1, #21
 80024d2:	20d4      	movs	r0, #212	@ 0xd4
 80024d4:	f7ff fc0c 	bl	8001cf0 <SENSOR_IO_Write>
}
 80024d8:	bf00      	nop
 80024da:	3710      	adds	r7, #16
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b088      	sub	sp, #32
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 80024e8:	2300      	movs	r3, #0
 80024ea:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80024ec:	2300      	movs	r3, #0
 80024ee:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80024f0:	f04f 0300 	mov.w	r3, #0
 80024f4:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80024f6:	2110      	movs	r1, #16
 80024f8:	20d4      	movs	r0, #212	@ 0xd4
 80024fa:	f7ff fc13 	bl	8001d24 <SENSOR_IO_Read>
 80024fe:	4603      	mov	r3, r0
 8002500:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8002502:	f107 0208 	add.w	r2, r7, #8
 8002506:	2306      	movs	r3, #6
 8002508:	2128      	movs	r1, #40	@ 0x28
 800250a:	20d4      	movs	r0, #212	@ 0xd4
 800250c:	f7ff fc28 	bl	8001d60 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002510:	2300      	movs	r3, #0
 8002512:	77fb      	strb	r3, [r7, #31]
 8002514:	e01a      	b.n	800254c <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002516:	7ffb      	ldrb	r3, [r7, #31]
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	3301      	adds	r3, #1
 800251c:	3320      	adds	r3, #32
 800251e:	443b      	add	r3, r7
 8002520:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002524:	021b      	lsls	r3, r3, #8
 8002526:	b29b      	uxth	r3, r3
 8002528:	7ffa      	ldrb	r2, [r7, #31]
 800252a:	0052      	lsls	r2, r2, #1
 800252c:	3220      	adds	r2, #32
 800252e:	443a      	add	r2, r7
 8002530:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8002534:	4413      	add	r3, r2
 8002536:	b29a      	uxth	r2, r3
 8002538:	7ffb      	ldrb	r3, [r7, #31]
 800253a:	b212      	sxth	r2, r2
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	3320      	adds	r3, #32
 8002540:	443b      	add	r3, r7
 8002542:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8002546:	7ffb      	ldrb	r3, [r7, #31]
 8002548:	3301      	adds	r3, #1
 800254a:	77fb      	strb	r3, [r7, #31]
 800254c:	7ffb      	ldrb	r3, [r7, #31]
 800254e:	2b02      	cmp	r3, #2
 8002550:	d9e1      	bls.n	8002516 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8002552:	7dfb      	ldrb	r3, [r7, #23]
 8002554:	f003 030c 	and.w	r3, r3, #12
 8002558:	2b0c      	cmp	r3, #12
 800255a:	d829      	bhi.n	80025b0 <LSM6DSL_AccReadXYZ+0xd0>
 800255c:	a201      	add	r2, pc, #4	@ (adr r2, 8002564 <LSM6DSL_AccReadXYZ+0x84>)
 800255e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002562:	bf00      	nop
 8002564:	08002599 	.word	0x08002599
 8002568:	080025b1 	.word	0x080025b1
 800256c:	080025b1 	.word	0x080025b1
 8002570:	080025b1 	.word	0x080025b1
 8002574:	080025ab 	.word	0x080025ab
 8002578:	080025b1 	.word	0x080025b1
 800257c:	080025b1 	.word	0x080025b1
 8002580:	080025b1 	.word	0x080025b1
 8002584:	0800259f 	.word	0x0800259f
 8002588:	080025b1 	.word	0x080025b1
 800258c:	080025b1 	.word	0x080025b1
 8002590:	080025b1 	.word	0x080025b1
 8002594:	080025a5 	.word	0x080025a5
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8002598:	4b18      	ldr	r3, [pc, #96]	@ (80025fc <LSM6DSL_AccReadXYZ+0x11c>)
 800259a:	61bb      	str	r3, [r7, #24]
    break;
 800259c:	e008      	b.n	80025b0 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 800259e:	4b18      	ldr	r3, [pc, #96]	@ (8002600 <LSM6DSL_AccReadXYZ+0x120>)
 80025a0:	61bb      	str	r3, [r7, #24]
    break;
 80025a2:	e005      	b.n	80025b0 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 80025a4:	4b17      	ldr	r3, [pc, #92]	@ (8002604 <LSM6DSL_AccReadXYZ+0x124>)
 80025a6:	61bb      	str	r3, [r7, #24]
    break;
 80025a8:	e002      	b.n	80025b0 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80025aa:	4b17      	ldr	r3, [pc, #92]	@ (8002608 <LSM6DSL_AccReadXYZ+0x128>)
 80025ac:	61bb      	str	r3, [r7, #24]
    break;    
 80025ae:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80025b0:	2300      	movs	r3, #0
 80025b2:	77fb      	strb	r3, [r7, #31]
 80025b4:	e01a      	b.n	80025ec <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80025b6:	7ffb      	ldrb	r3, [r7, #31]
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	3320      	adds	r3, #32
 80025bc:	443b      	add	r3, r7
 80025be:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80025c2:	ee07 3a90 	vmov	s15, r3
 80025c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025ca:	edd7 7a06 	vldr	s15, [r7, #24]
 80025ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025d2:	7ffb      	ldrb	r3, [r7, #31]
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	4413      	add	r3, r2
 80025da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025de:	ee17 2a90 	vmov	r2, s15
 80025e2:	b212      	sxth	r2, r2
 80025e4:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80025e6:	7ffb      	ldrb	r3, [r7, #31]
 80025e8:	3301      	adds	r3, #1
 80025ea:	77fb      	strb	r3, [r7, #31]
 80025ec:	7ffb      	ldrb	r3, [r7, #31]
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d9e1      	bls.n	80025b6 <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 80025f2:	bf00      	nop
 80025f4:	bf00      	nop
 80025f6:	3720      	adds	r7, #32
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	3d79db23 	.word	0x3d79db23
 8002600:	3df9db23 	.word	0x3df9db23
 8002604:	3e79db23 	.word	0x3e79db23
 8002608:	3ef9db23 	.word	0x3ef9db23

0800260c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002612:	2300      	movs	r3, #0
 8002614:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002616:	2003      	movs	r0, #3
 8002618:	f000 f960 	bl	80028dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800261c:	2000      	movs	r0, #0
 800261e:	f000 f80d 	bl	800263c <HAL_InitTick>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d002      	beq.n	800262e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	71fb      	strb	r3, [r7, #7]
 800262c:	e001      	b.n	8002632 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800262e:	f7ff fc0b 	bl	8001e48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002632:	79fb      	ldrb	r3, [r7, #7]
}
 8002634:	4618      	mov	r0, r3
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002644:	2300      	movs	r3, #0
 8002646:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002648:	4b17      	ldr	r3, [pc, #92]	@ (80026a8 <HAL_InitTick+0x6c>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d023      	beq.n	8002698 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002650:	4b16      	ldr	r3, [pc, #88]	@ (80026ac <HAL_InitTick+0x70>)
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	4b14      	ldr	r3, [pc, #80]	@ (80026a8 <HAL_InitTick+0x6c>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	4619      	mov	r1, r3
 800265a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800265e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002662:	fbb2 f3f3 	udiv	r3, r2, r3
 8002666:	4618      	mov	r0, r3
 8002668:	f000 f96d 	bl	8002946 <HAL_SYSTICK_Config>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d10f      	bne.n	8002692 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b0f      	cmp	r3, #15
 8002676:	d809      	bhi.n	800268c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002678:	2200      	movs	r2, #0
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002680:	f000 f937 	bl	80028f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002684:	4a0a      	ldr	r2, [pc, #40]	@ (80026b0 <HAL_InitTick+0x74>)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6013      	str	r3, [r2, #0]
 800268a:	e007      	b.n	800269c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	73fb      	strb	r3, [r7, #15]
 8002690:	e004      	b.n	800269c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	73fb      	strb	r3, [r7, #15]
 8002696:	e001      	b.n	800269c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800269c:	7bfb      	ldrb	r3, [r7, #15]
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	20000048 	.word	0x20000048
 80026ac:	2000000c 	.word	0x2000000c
 80026b0:	20000044 	.word	0x20000044

080026b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80026b8:	4b06      	ldr	r3, [pc, #24]	@ (80026d4 <HAL_IncTick+0x20>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	461a      	mov	r2, r3
 80026be:	4b06      	ldr	r3, [pc, #24]	@ (80026d8 <HAL_IncTick+0x24>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4413      	add	r3, r2
 80026c4:	4a04      	ldr	r2, [pc, #16]	@ (80026d8 <HAL_IncTick+0x24>)
 80026c6:	6013      	str	r3, [r2, #0]
}
 80026c8:	bf00      	nop
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	20000048 	.word	0x20000048
 80026d8:	20000788 	.word	0x20000788

080026dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  return uwTick;
 80026e0:	4b03      	ldr	r3, [pc, #12]	@ (80026f0 <HAL_GetTick+0x14>)
 80026e2:	681b      	ldr	r3, [r3, #0]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	20000788 	.word	0x20000788

080026f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026fc:	f7ff ffee 	bl	80026dc <HAL_GetTick>
 8002700:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800270c:	d005      	beq.n	800271a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800270e:	4b0a      	ldr	r3, [pc, #40]	@ (8002738 <HAL_Delay+0x44>)
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	461a      	mov	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	4413      	add	r3, r2
 8002718:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800271a:	bf00      	nop
 800271c:	f7ff ffde 	bl	80026dc <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	429a      	cmp	r2, r3
 800272a:	d8f7      	bhi.n	800271c <HAL_Delay+0x28>
  {
  }
}
 800272c:	bf00      	nop
 800272e:	bf00      	nop
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	20000048 	.word	0x20000048

0800273c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800274c:	4b0c      	ldr	r3, [pc, #48]	@ (8002780 <__NVIC_SetPriorityGrouping+0x44>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002752:	68ba      	ldr	r2, [r7, #8]
 8002754:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002758:	4013      	ands	r3, r2
 800275a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002764:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002768:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800276c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800276e:	4a04      	ldr	r2, [pc, #16]	@ (8002780 <__NVIC_SetPriorityGrouping+0x44>)
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	60d3      	str	r3, [r2, #12]
}
 8002774:	bf00      	nop
 8002776:	3714      	adds	r7, #20
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	e000ed00 	.word	0xe000ed00

08002784 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002788:	4b04      	ldr	r3, [pc, #16]	@ (800279c <__NVIC_GetPriorityGrouping+0x18>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	0a1b      	lsrs	r3, r3, #8
 800278e:	f003 0307 	and.w	r3, r3, #7
}
 8002792:	4618      	mov	r0, r3
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr
 800279c:	e000ed00 	.word	0xe000ed00

080027a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	4603      	mov	r3, r0
 80027a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	db0b      	blt.n	80027ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027b2:	79fb      	ldrb	r3, [r7, #7]
 80027b4:	f003 021f 	and.w	r2, r3, #31
 80027b8:	4907      	ldr	r1, [pc, #28]	@ (80027d8 <__NVIC_EnableIRQ+0x38>)
 80027ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027be:	095b      	lsrs	r3, r3, #5
 80027c0:	2001      	movs	r0, #1
 80027c2:	fa00 f202 	lsl.w	r2, r0, r2
 80027c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027ca:	bf00      	nop
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	e000e100 	.word	0xe000e100

080027dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	4603      	mov	r3, r0
 80027e4:	6039      	str	r1, [r7, #0]
 80027e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	db0a      	blt.n	8002806 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	490c      	ldr	r1, [pc, #48]	@ (8002828 <__NVIC_SetPriority+0x4c>)
 80027f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fa:	0112      	lsls	r2, r2, #4
 80027fc:	b2d2      	uxtb	r2, r2
 80027fe:	440b      	add	r3, r1
 8002800:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002804:	e00a      	b.n	800281c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	b2da      	uxtb	r2, r3
 800280a:	4908      	ldr	r1, [pc, #32]	@ (800282c <__NVIC_SetPriority+0x50>)
 800280c:	79fb      	ldrb	r3, [r7, #7]
 800280e:	f003 030f 	and.w	r3, r3, #15
 8002812:	3b04      	subs	r3, #4
 8002814:	0112      	lsls	r2, r2, #4
 8002816:	b2d2      	uxtb	r2, r2
 8002818:	440b      	add	r3, r1
 800281a:	761a      	strb	r2, [r3, #24]
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr
 8002828:	e000e100 	.word	0xe000e100
 800282c:	e000ed00 	.word	0xe000ed00

08002830 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002830:	b480      	push	{r7}
 8002832:	b089      	sub	sp, #36	@ 0x24
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f003 0307 	and.w	r3, r3, #7
 8002842:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	f1c3 0307 	rsb	r3, r3, #7
 800284a:	2b04      	cmp	r3, #4
 800284c:	bf28      	it	cs
 800284e:	2304      	movcs	r3, #4
 8002850:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	3304      	adds	r3, #4
 8002856:	2b06      	cmp	r3, #6
 8002858:	d902      	bls.n	8002860 <NVIC_EncodePriority+0x30>
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	3b03      	subs	r3, #3
 800285e:	e000      	b.n	8002862 <NVIC_EncodePriority+0x32>
 8002860:	2300      	movs	r3, #0
 8002862:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002864:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	43da      	mvns	r2, r3
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	401a      	ands	r2, r3
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002878:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	fa01 f303 	lsl.w	r3, r1, r3
 8002882:	43d9      	mvns	r1, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002888:	4313      	orrs	r3, r2
         );
}
 800288a:	4618      	mov	r0, r3
 800288c:	3724      	adds	r7, #36	@ 0x24
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
	...

08002898 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	3b01      	subs	r3, #1
 80028a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028a8:	d301      	bcc.n	80028ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028aa:	2301      	movs	r3, #1
 80028ac:	e00f      	b.n	80028ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028ae:	4a0a      	ldr	r2, [pc, #40]	@ (80028d8 <SysTick_Config+0x40>)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	3b01      	subs	r3, #1
 80028b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028b6:	210f      	movs	r1, #15
 80028b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80028bc:	f7ff ff8e 	bl	80027dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028c0:	4b05      	ldr	r3, [pc, #20]	@ (80028d8 <SysTick_Config+0x40>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028c6:	4b04      	ldr	r3, [pc, #16]	@ (80028d8 <SysTick_Config+0x40>)
 80028c8:	2207      	movs	r2, #7
 80028ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	e000e010 	.word	0xe000e010

080028dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f7ff ff29 	bl	800273c <__NVIC_SetPriorityGrouping>
}
 80028ea:	bf00      	nop
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b086      	sub	sp, #24
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	4603      	mov	r3, r0
 80028fa:	60b9      	str	r1, [r7, #8]
 80028fc:	607a      	str	r2, [r7, #4]
 80028fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002900:	2300      	movs	r3, #0
 8002902:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002904:	f7ff ff3e 	bl	8002784 <__NVIC_GetPriorityGrouping>
 8002908:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	68b9      	ldr	r1, [r7, #8]
 800290e:	6978      	ldr	r0, [r7, #20]
 8002910:	f7ff ff8e 	bl	8002830 <NVIC_EncodePriority>
 8002914:	4602      	mov	r2, r0
 8002916:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800291a:	4611      	mov	r1, r2
 800291c:	4618      	mov	r0, r3
 800291e:	f7ff ff5d 	bl	80027dc <__NVIC_SetPriority>
}
 8002922:	bf00      	nop
 8002924:	3718      	adds	r7, #24
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b082      	sub	sp, #8
 800292e:	af00      	add	r7, sp, #0
 8002930:	4603      	mov	r3, r0
 8002932:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff ff31 	bl	80027a0 <__NVIC_EnableIRQ>
}
 800293e:	bf00      	nop
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b082      	sub	sp, #8
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f7ff ffa2 	bl	8002898 <SysTick_Config>
 8002954:	4603      	mov	r3, r0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b082      	sub	sp, #8
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e014      	b.n	800299a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	791b      	ldrb	r3, [r3, #4]
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d105      	bne.n	8002986 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f7ff fa85 	bl	8001e90 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2202      	movs	r2, #2
 800298a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b083      	sub	sp, #12
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
 80029aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	795b      	ldrb	r3, [r3, #5]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d101      	bne.n	80029b8 <HAL_DAC_Start+0x16>
 80029b4:	2302      	movs	r3, #2
 80029b6:	e040      	b.n	8002a3a <HAL_DAC_Start+0x98>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2202      	movs	r2, #2
 80029c2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6819      	ldr	r1, [r3, #0]
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	f003 0310 	and.w	r3, r3, #16
 80029d0:	2201      	movs	r2, #1
 80029d2:	409a      	lsls	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	430a      	orrs	r2, r1
 80029da:	601a      	str	r2, [r3, #0]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (Channel == DAC_CHANNEL_1)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d10f      	bne.n	8002a02 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d11d      	bne.n	8002a2c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	685a      	ldr	r2, [r3, #4]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f042 0201 	orr.w	r2, r2, #1
 80029fe:	605a      	str	r2, [r3, #4]
 8002a00:	e014      	b.n	8002a2c <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	f003 0310 	and.w	r3, r3, #16
 8002a12:	2102      	movs	r1, #2
 8002a14:	fa01 f303 	lsl.w	r3, r1, r3
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d107      	bne.n	8002a2c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f042 0202 	orr.w	r2, r2, #2
 8002a2a:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b082      	sub	sp, #8
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a5c:	d120      	bne.n	8002aa0 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a6c:	d118      	bne.n	8002aa0 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2204      	movs	r2, #4
 8002a72:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	f043 0201 	orr.w	r2, r3, #1
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a88:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002a98:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 f852 	bl	8002b44 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002aaa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002aae:	d120      	bne.n	8002af2 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ab6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002aba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002abe:	d118      	bne.n	8002af2 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2204      	movs	r2, #4
 8002ac4:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	f043 0202 	orr.w	r2, r3, #2
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002ada:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8002aea:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 f97f 	bl	8002df0 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8002af2:	bf00      	nop
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b087      	sub	sp, #28
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	60f8      	str	r0, [r7, #12]
 8002b02:	60b9      	str	r1, [r7, #8]
 8002b04:	607a      	str	r2, [r7, #4]
 8002b06:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d105      	bne.n	8002b24 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002b18:	697a      	ldr	r2, [r7, #20]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	3308      	adds	r3, #8
 8002b20:	617b      	str	r3, [r7, #20]
 8002b22:	e004      	b.n	8002b2e <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002b24:	697a      	ldr	r2, [r7, #20]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4413      	add	r3, r2
 8002b2a:	3314      	adds	r3, #20
 8002b2c:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	461a      	mov	r2, r3
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	371c      	adds	r7, #28
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b088      	sub	sp, #32
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002b64:	2300      	movs	r3, #0
 8002b66:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	795b      	ldrb	r3, [r3, #5]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d101      	bne.n	8002b74 <HAL_DAC_ConfigChannel+0x1c>
 8002b70:	2302      	movs	r3, #2
 8002b72:	e137      	b.n	8002de4 <HAL_DAC_ConfigChannel+0x28c>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2201      	movs	r2, #1
 8002b78:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2202      	movs	r2, #2
 8002b7e:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	2b04      	cmp	r3, #4
 8002b86:	f040 8081 	bne.w	8002c8c <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002b8a:	f7ff fda7 	bl	80026dc <HAL_GetTick>
 8002b8e:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d140      	bne.n	8002c18 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002b96:	e018      	b.n	8002bca <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002b98:	f7ff fda0 	bl	80026dc <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d911      	bls.n	8002bca <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d00a      	beq.n	8002bca <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	f043 0208 	orr.w	r2, r3, #8
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2203      	movs	r2, #3
 8002bc4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e10c      	b.n	8002de4 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bd0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1df      	bne.n	8002b98 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8002bd8:	2001      	movs	r0, #1
 8002bda:	f7ff fd8b 	bl	80026f4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68ba      	ldr	r2, [r7, #8]
 8002be4:	69d2      	ldr	r2, [r2, #28]
 8002be6:	641a      	str	r2, [r3, #64]	@ 0x40
 8002be8:	e023      	b.n	8002c32 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002bea:	f7ff fd77 	bl	80026dc <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d90f      	bls.n	8002c18 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	da0a      	bge.n	8002c18 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	f043 0208 	orr.w	r2, r3, #8
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2203      	movs	r2, #3
 8002c12:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e0e5      	b.n	8002de4 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	dbe3      	blt.n	8002bea <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8002c22:	2001      	movs	r0, #1
 8002c24:	f7ff fd66 	bl	80026f4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68ba      	ldr	r2, [r7, #8]
 8002c2e:	69d2      	ldr	r2, [r2, #28]
 8002c30:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f003 0310 	and.w	r3, r3, #16
 8002c3e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8002c42:	fa01 f303 	lsl.w	r3, r1, r3
 8002c46:	43db      	mvns	r3, r3
 8002c48:	ea02 0103 	and.w	r1, r2, r3
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	6a1a      	ldr	r2, [r3, #32]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f003 0310 	and.w	r3, r3, #16
 8002c56:	409a      	lsls	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f003 0310 	and.w	r3, r3, #16
 8002c6c:	21ff      	movs	r1, #255	@ 0xff
 8002c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c72:	43db      	mvns	r3, r3
 8002c74:	ea02 0103 	and.w	r1, r2, r3
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f003 0310 	and.w	r3, r3, #16
 8002c82:	409a      	lsls	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d11d      	bne.n	8002cd0 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c9a:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f003 0310 	and.w	r3, r3, #16
 8002ca2:	221f      	movs	r2, #31
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	69fa      	ldr	r2, [r7, #28]
 8002cac:	4013      	ands	r3, r2
 8002cae:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f003 0310 	and.w	r3, r3, #16
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc2:	69fa      	ldr	r2, [r7, #28]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	69fa      	ldr	r2, [r7, #28]
 8002cce:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cd6:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f003 0310 	and.w	r3, r3, #16
 8002cde:	2207      	movs	r2, #7
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	69fa      	ldr	r2, [r7, #28]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	685a      	ldr	r2, [r3, #4]
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f003 0310 	and.w	r3, r3, #16
 8002d04:	697a      	ldr	r2, [r7, #20]
 8002d06:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0a:	69fa      	ldr	r2, [r7, #28]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	69fa      	ldr	r2, [r7, #28]
 8002d16:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	6819      	ldr	r1, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f003 0310 	and.w	r3, r3, #16
 8002d24:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	43da      	mvns	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	400a      	ands	r2, r1
 8002d34:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f003 0310 	and.w	r3, r3, #16
 8002d44:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	69fa      	ldr	r2, [r7, #28]
 8002d50:	4013      	ands	r3, r2
 8002d52:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f003 0310 	and.w	r3, r3, #16
 8002d60:	697a      	ldr	r2, [r7, #20]
 8002d62:	fa02 f303 	lsl.w	r3, r2, r3
 8002d66:	69fa      	ldr	r2, [r7, #28]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d74:	d104      	bne.n	8002d80 <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d7c:	61fb      	str	r3, [r7, #28]
 8002d7e:	e018      	b.n	8002db2 <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d104      	bne.n	8002d92 <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002d8e:	61fb      	str	r3, [r7, #28]
 8002d90:	e00f      	b.n	8002db2 <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8002d92:	f002 f885 	bl	8004ea0 <HAL_RCC_GetHCLKFreq>
 8002d96:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	4a14      	ldr	r2, [pc, #80]	@ (8002dec <HAL_DAC_ConfigChannel+0x294>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d904      	bls.n	8002daa <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002da6:	61fb      	str	r3, [r7, #28]
 8002da8:	e003      	b.n	8002db2 <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002db0:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	69fa      	ldr	r2, [r7, #28]
 8002db8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	6819      	ldr	r1, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f003 0310 	and.w	r3, r3, #16
 8002dc6:	22c0      	movs	r2, #192	@ 0xc0
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	43da      	mvns	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	400a      	ands	r2, r1
 8002dd4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2200      	movs	r2, #0
 8002de0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3720      	adds	r7, #32
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	04c4b400 	.word	0x04c4b400

08002df0 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d008      	beq.n	8002e2e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2204      	movs	r2, #4
 8002e20:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e040      	b.n	8002eb0 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 020e 	bic.w	r2, r2, #14
 8002e3c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e4c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f022 0201 	bic.w	r2, r2, #1
 8002e5c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e62:	f003 021c 	and.w	r2, r3, #28
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6a:	2101      	movs	r1, #1
 8002e6c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e70:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002e7a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00c      	beq.n	8002e9e <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e8e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e92:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002e9c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002eae:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3714      	adds	r7, #20
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d005      	beq.n	8002ee0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2204      	movs	r2, #4
 8002ed8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	73fb      	strb	r3, [r7, #15]
 8002ede:	e047      	b.n	8002f70 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f022 020e 	bic.w	r2, r2, #14
 8002eee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0201 	bic.w	r2, r2, #1
 8002efe:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f0a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f0e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f14:	f003 021c 	and.w	r2, r3, #28
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1c:	2101      	movs	r1, #1
 8002f1e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f22:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002f2c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00c      	beq.n	8002f50 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f44:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002f4e:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d003      	beq.n	8002f70 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	4798      	blx	r3
    }
  }
  return status;
 8002f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
	...

08002f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b087      	sub	sp, #28
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f86:	2300      	movs	r3, #0
 8002f88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f8a:	e166      	b.n	800325a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	2101      	movs	r1, #1
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	fa01 f303 	lsl.w	r3, r1, r3
 8002f98:	4013      	ands	r3, r2
 8002f9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f000 8158 	beq.w	8003254 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f003 0303 	and.w	r3, r3, #3
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d005      	beq.n	8002fbc <HAL_GPIO_Init+0x40>
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f003 0303 	and.w	r3, r3, #3
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d130      	bne.n	800301e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	2203      	movs	r2, #3
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	68da      	ldr	r2, [r3, #12]
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffa:	43db      	mvns	r3, r3
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	4013      	ands	r3, r2
 8003000:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	091b      	lsrs	r3, r3, #4
 8003008:	f003 0201 	and.w	r2, r3, #1
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	fa02 f303 	lsl.w	r3, r2, r3
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	4313      	orrs	r3, r2
 8003016:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f003 0303 	and.w	r3, r3, #3
 8003026:	2b03      	cmp	r3, #3
 8003028:	d017      	beq.n	800305a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	2203      	movs	r2, #3
 8003036:	fa02 f303 	lsl.w	r3, r2, r3
 800303a:	43db      	mvns	r3, r3
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	4013      	ands	r3, r2
 8003040:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	689a      	ldr	r2, [r3, #8]
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	fa02 f303 	lsl.w	r3, r2, r3
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	4313      	orrs	r3, r2
 8003052:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f003 0303 	and.w	r3, r3, #3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d123      	bne.n	80030ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	08da      	lsrs	r2, r3, #3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	3208      	adds	r2, #8
 800306e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003072:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	220f      	movs	r2, #15
 800307e:	fa02 f303 	lsl.w	r3, r2, r3
 8003082:	43db      	mvns	r3, r3
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	4013      	ands	r3, r2
 8003088:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	691a      	ldr	r2, [r3, #16]
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	f003 0307 	and.w	r3, r3, #7
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	fa02 f303 	lsl.w	r3, r2, r3
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	4313      	orrs	r3, r2
 800309e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	08da      	lsrs	r2, r3, #3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3208      	adds	r2, #8
 80030a8:	6939      	ldr	r1, [r7, #16]
 80030aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	2203      	movs	r2, #3
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	43db      	mvns	r3, r3
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	4013      	ands	r3, r2
 80030c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f003 0203 	and.w	r2, r3, #3
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	fa02 f303 	lsl.w	r3, r2, r3
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	4313      	orrs	r3, r2
 80030da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f000 80b2 	beq.w	8003254 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030f0:	4b61      	ldr	r3, [pc, #388]	@ (8003278 <HAL_GPIO_Init+0x2fc>)
 80030f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030f4:	4a60      	ldr	r2, [pc, #384]	@ (8003278 <HAL_GPIO_Init+0x2fc>)
 80030f6:	f043 0301 	orr.w	r3, r3, #1
 80030fa:	6613      	str	r3, [r2, #96]	@ 0x60
 80030fc:	4b5e      	ldr	r3, [pc, #376]	@ (8003278 <HAL_GPIO_Init+0x2fc>)
 80030fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003100:	f003 0301 	and.w	r3, r3, #1
 8003104:	60bb      	str	r3, [r7, #8]
 8003106:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003108:	4a5c      	ldr	r2, [pc, #368]	@ (800327c <HAL_GPIO_Init+0x300>)
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	089b      	lsrs	r3, r3, #2
 800310e:	3302      	adds	r3, #2
 8003110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003114:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	f003 0303 	and.w	r3, r3, #3
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	220f      	movs	r2, #15
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	43db      	mvns	r3, r3
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	4013      	ands	r3, r2
 800312a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003132:	d02b      	beq.n	800318c <HAL_GPIO_Init+0x210>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a52      	ldr	r2, [pc, #328]	@ (8003280 <HAL_GPIO_Init+0x304>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d025      	beq.n	8003188 <HAL_GPIO_Init+0x20c>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a51      	ldr	r2, [pc, #324]	@ (8003284 <HAL_GPIO_Init+0x308>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d01f      	beq.n	8003184 <HAL_GPIO_Init+0x208>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a50      	ldr	r2, [pc, #320]	@ (8003288 <HAL_GPIO_Init+0x30c>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d019      	beq.n	8003180 <HAL_GPIO_Init+0x204>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a4f      	ldr	r2, [pc, #316]	@ (800328c <HAL_GPIO_Init+0x310>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d013      	beq.n	800317c <HAL_GPIO_Init+0x200>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a4e      	ldr	r2, [pc, #312]	@ (8003290 <HAL_GPIO_Init+0x314>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d00d      	beq.n	8003178 <HAL_GPIO_Init+0x1fc>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a4d      	ldr	r2, [pc, #308]	@ (8003294 <HAL_GPIO_Init+0x318>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d007      	beq.n	8003174 <HAL_GPIO_Init+0x1f8>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a4c      	ldr	r2, [pc, #304]	@ (8003298 <HAL_GPIO_Init+0x31c>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d101      	bne.n	8003170 <HAL_GPIO_Init+0x1f4>
 800316c:	2307      	movs	r3, #7
 800316e:	e00e      	b.n	800318e <HAL_GPIO_Init+0x212>
 8003170:	2308      	movs	r3, #8
 8003172:	e00c      	b.n	800318e <HAL_GPIO_Init+0x212>
 8003174:	2306      	movs	r3, #6
 8003176:	e00a      	b.n	800318e <HAL_GPIO_Init+0x212>
 8003178:	2305      	movs	r3, #5
 800317a:	e008      	b.n	800318e <HAL_GPIO_Init+0x212>
 800317c:	2304      	movs	r3, #4
 800317e:	e006      	b.n	800318e <HAL_GPIO_Init+0x212>
 8003180:	2303      	movs	r3, #3
 8003182:	e004      	b.n	800318e <HAL_GPIO_Init+0x212>
 8003184:	2302      	movs	r3, #2
 8003186:	e002      	b.n	800318e <HAL_GPIO_Init+0x212>
 8003188:	2301      	movs	r3, #1
 800318a:	e000      	b.n	800318e <HAL_GPIO_Init+0x212>
 800318c:	2300      	movs	r3, #0
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	f002 0203 	and.w	r2, r2, #3
 8003194:	0092      	lsls	r2, r2, #2
 8003196:	4093      	lsls	r3, r2
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	4313      	orrs	r3, r2
 800319c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800319e:	4937      	ldr	r1, [pc, #220]	@ (800327c <HAL_GPIO_Init+0x300>)
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	089b      	lsrs	r3, r3, #2
 80031a4:	3302      	adds	r3, #2
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80031ac:	4b3b      	ldr	r3, [pc, #236]	@ (800329c <HAL_GPIO_Init+0x320>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	43db      	mvns	r3, r3
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	4013      	ands	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d003      	beq.n	80031d0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80031c8:	693a      	ldr	r2, [r7, #16]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80031d0:	4a32      	ldr	r2, [pc, #200]	@ (800329c <HAL_GPIO_Init+0x320>)
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80031d6:	4b31      	ldr	r3, [pc, #196]	@ (800329c <HAL_GPIO_Init+0x320>)
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	43db      	mvns	r3, r3
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	4013      	ands	r3, r2
 80031e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d003      	beq.n	80031fa <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80031fa:	4a28      	ldr	r2, [pc, #160]	@ (800329c <HAL_GPIO_Init+0x320>)
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003200:	4b26      	ldr	r3, [pc, #152]	@ (800329c <HAL_GPIO_Init+0x320>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	43db      	mvns	r3, r3
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	4013      	ands	r3, r2
 800320e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d003      	beq.n	8003224 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	4313      	orrs	r3, r2
 8003222:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003224:	4a1d      	ldr	r2, [pc, #116]	@ (800329c <HAL_GPIO_Init+0x320>)
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800322a:	4b1c      	ldr	r3, [pc, #112]	@ (800329c <HAL_GPIO_Init+0x320>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	43db      	mvns	r3, r3
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	4013      	ands	r3, r2
 8003238:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	4313      	orrs	r3, r2
 800324c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800324e:	4a13      	ldr	r2, [pc, #76]	@ (800329c <HAL_GPIO_Init+0x320>)
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	3301      	adds	r3, #1
 8003258:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	fa22 f303 	lsr.w	r3, r2, r3
 8003264:	2b00      	cmp	r3, #0
 8003266:	f47f ae91 	bne.w	8002f8c <HAL_GPIO_Init+0x10>
  }
}
 800326a:	bf00      	nop
 800326c:	bf00      	nop
 800326e:	371c      	adds	r7, #28
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr
 8003278:	40021000 	.word	0x40021000
 800327c:	40010000 	.word	0x40010000
 8003280:	48000400 	.word	0x48000400
 8003284:	48000800 	.word	0x48000800
 8003288:	48000c00 	.word	0x48000c00
 800328c:	48001000 	.word	0x48001000
 8003290:	48001400 	.word	0x48001400
 8003294:	48001800 	.word	0x48001800
 8003298:	48001c00 	.word	0x48001c00
 800329c:	40010400 	.word	0x40010400

080032a0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b087      	sub	sp, #28
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032aa:	2300      	movs	r3, #0
 80032ac:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80032ae:	e0c9      	b.n	8003444 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80032b0:	2201      	movs	r2, #1
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	fa02 f303 	lsl.w	r3, r2, r3
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	4013      	ands	r3, r2
 80032bc:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f000 80bc 	beq.w	800343e <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80032c6:	4a66      	ldr	r2, [pc, #408]	@ (8003460 <HAL_GPIO_DeInit+0x1c0>)
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	089b      	lsrs	r3, r3, #2
 80032cc:	3302      	adds	r3, #2
 80032ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032d2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	f003 0303 	and.w	r3, r3, #3
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	220f      	movs	r2, #15
 80032de:	fa02 f303 	lsl.w	r3, r2, r3
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	4013      	ands	r3, r2
 80032e6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80032ee:	d02b      	beq.n	8003348 <HAL_GPIO_DeInit+0xa8>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a5c      	ldr	r2, [pc, #368]	@ (8003464 <HAL_GPIO_DeInit+0x1c4>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d025      	beq.n	8003344 <HAL_GPIO_DeInit+0xa4>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a5b      	ldr	r2, [pc, #364]	@ (8003468 <HAL_GPIO_DeInit+0x1c8>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d01f      	beq.n	8003340 <HAL_GPIO_DeInit+0xa0>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a5a      	ldr	r2, [pc, #360]	@ (800346c <HAL_GPIO_DeInit+0x1cc>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d019      	beq.n	800333c <HAL_GPIO_DeInit+0x9c>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a59      	ldr	r2, [pc, #356]	@ (8003470 <HAL_GPIO_DeInit+0x1d0>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d013      	beq.n	8003338 <HAL_GPIO_DeInit+0x98>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a58      	ldr	r2, [pc, #352]	@ (8003474 <HAL_GPIO_DeInit+0x1d4>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d00d      	beq.n	8003334 <HAL_GPIO_DeInit+0x94>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a57      	ldr	r2, [pc, #348]	@ (8003478 <HAL_GPIO_DeInit+0x1d8>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d007      	beq.n	8003330 <HAL_GPIO_DeInit+0x90>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a56      	ldr	r2, [pc, #344]	@ (800347c <HAL_GPIO_DeInit+0x1dc>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d101      	bne.n	800332c <HAL_GPIO_DeInit+0x8c>
 8003328:	2307      	movs	r3, #7
 800332a:	e00e      	b.n	800334a <HAL_GPIO_DeInit+0xaa>
 800332c:	2308      	movs	r3, #8
 800332e:	e00c      	b.n	800334a <HAL_GPIO_DeInit+0xaa>
 8003330:	2306      	movs	r3, #6
 8003332:	e00a      	b.n	800334a <HAL_GPIO_DeInit+0xaa>
 8003334:	2305      	movs	r3, #5
 8003336:	e008      	b.n	800334a <HAL_GPIO_DeInit+0xaa>
 8003338:	2304      	movs	r3, #4
 800333a:	e006      	b.n	800334a <HAL_GPIO_DeInit+0xaa>
 800333c:	2303      	movs	r3, #3
 800333e:	e004      	b.n	800334a <HAL_GPIO_DeInit+0xaa>
 8003340:	2302      	movs	r3, #2
 8003342:	e002      	b.n	800334a <HAL_GPIO_DeInit+0xaa>
 8003344:	2301      	movs	r3, #1
 8003346:	e000      	b.n	800334a <HAL_GPIO_DeInit+0xaa>
 8003348:	2300      	movs	r3, #0
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	f002 0203 	and.w	r2, r2, #3
 8003350:	0092      	lsls	r2, r2, #2
 8003352:	4093      	lsls	r3, r2
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	429a      	cmp	r2, r3
 8003358:	d132      	bne.n	80033c0 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800335a:	4b49      	ldr	r3, [pc, #292]	@ (8003480 <HAL_GPIO_DeInit+0x1e0>)
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	43db      	mvns	r3, r3
 8003362:	4947      	ldr	r1, [pc, #284]	@ (8003480 <HAL_GPIO_DeInit+0x1e0>)
 8003364:	4013      	ands	r3, r2
 8003366:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003368:	4b45      	ldr	r3, [pc, #276]	@ (8003480 <HAL_GPIO_DeInit+0x1e0>)
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	43db      	mvns	r3, r3
 8003370:	4943      	ldr	r1, [pc, #268]	@ (8003480 <HAL_GPIO_DeInit+0x1e0>)
 8003372:	4013      	ands	r3, r2
 8003374:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003376:	4b42      	ldr	r3, [pc, #264]	@ (8003480 <HAL_GPIO_DeInit+0x1e0>)
 8003378:	68da      	ldr	r2, [r3, #12]
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	43db      	mvns	r3, r3
 800337e:	4940      	ldr	r1, [pc, #256]	@ (8003480 <HAL_GPIO_DeInit+0x1e0>)
 8003380:	4013      	ands	r3, r2
 8003382:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003384:	4b3e      	ldr	r3, [pc, #248]	@ (8003480 <HAL_GPIO_DeInit+0x1e0>)
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	43db      	mvns	r3, r3
 800338c:	493c      	ldr	r1, [pc, #240]	@ (8003480 <HAL_GPIO_DeInit+0x1e0>)
 800338e:	4013      	ands	r3, r2
 8003390:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f003 0303 	and.w	r3, r3, #3
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	220f      	movs	r2, #15
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80033a2:	4a2f      	ldr	r2, [pc, #188]	@ (8003460 <HAL_GPIO_DeInit+0x1c0>)
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	089b      	lsrs	r3, r3, #2
 80033a8:	3302      	adds	r3, #2
 80033aa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	43da      	mvns	r2, r3
 80033b2:	482b      	ldr	r0, [pc, #172]	@ (8003460 <HAL_GPIO_DeInit+0x1c0>)
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	089b      	lsrs	r3, r3, #2
 80033b8:	400a      	ands	r2, r1
 80033ba:	3302      	adds	r3, #2
 80033bc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	2103      	movs	r1, #3
 80033ca:	fa01 f303 	lsl.w	r3, r1, r3
 80033ce:	431a      	orrs	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	08da      	lsrs	r2, r3, #3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3208      	adds	r2, #8
 80033dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	f003 0307 	and.w	r3, r3, #7
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	220f      	movs	r2, #15
 80033ea:	fa02 f303 	lsl.w	r3, r2, r3
 80033ee:	43db      	mvns	r3, r3
 80033f0:	697a      	ldr	r2, [r7, #20]
 80033f2:	08d2      	lsrs	r2, r2, #3
 80033f4:	4019      	ands	r1, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	3208      	adds	r2, #8
 80033fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	689a      	ldr	r2, [r3, #8]
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	2103      	movs	r1, #3
 8003408:	fa01 f303 	lsl.w	r3, r1, r3
 800340c:	43db      	mvns	r3, r3
 800340e:	401a      	ands	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	2101      	movs	r1, #1
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	fa01 f303 	lsl.w	r3, r1, r3
 8003420:	43db      	mvns	r3, r3
 8003422:	401a      	ands	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	68da      	ldr	r2, [r3, #12]
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	2103      	movs	r1, #3
 8003432:	fa01 f303 	lsl.w	r3, r1, r3
 8003436:	43db      	mvns	r3, r3
 8003438:	401a      	ands	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	3301      	adds	r3, #1
 8003442:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	fa22 f303 	lsr.w	r3, r2, r3
 800344c:	2b00      	cmp	r3, #0
 800344e:	f47f af2f 	bne.w	80032b0 <HAL_GPIO_DeInit+0x10>
  }
}
 8003452:	bf00      	nop
 8003454:	bf00      	nop
 8003456:	371c      	adds	r7, #28
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr
 8003460:	40010000 	.word	0x40010000
 8003464:	48000400 	.word	0x48000400
 8003468:	48000800 	.word	0x48000800
 800346c:	48000c00 	.word	0x48000c00
 8003470:	48001000 	.word	0x48001000
 8003474:	48001400 	.word	0x48001400
 8003478:	48001800 	.word	0x48001800
 800347c:	48001c00 	.word	0x48001c00
 8003480:	40010400 	.word	0x40010400

08003484 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	4603      	mov	r3, r0
 800348c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800348e:	4b08      	ldr	r3, [pc, #32]	@ (80034b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003490:	695a      	ldr	r2, [r3, #20]
 8003492:	88fb      	ldrh	r3, [r7, #6]
 8003494:	4013      	ands	r3, r2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d006      	beq.n	80034a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800349a:	4a05      	ldr	r2, [pc, #20]	@ (80034b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800349c:	88fb      	ldrh	r3, [r7, #6]
 800349e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80034a0:	88fb      	ldrh	r3, [r7, #6]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7fd fea8 	bl	80011f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80034a8:	bf00      	nop
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	40010400 	.word	0x40010400

080034b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e08d      	b.n	80035e2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d106      	bne.n	80034e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f7fe fd1e 	bl	8001f1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2224      	movs	r2, #36	@ 0x24
 80034e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f022 0201 	bic.w	r2, r2, #1
 80034f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003504:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003514:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d107      	bne.n	800352e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	689a      	ldr	r2, [r3, #8]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800352a:	609a      	str	r2, [r3, #8]
 800352c:	e006      	b.n	800353c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	689a      	ldr	r2, [r3, #8]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800353a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	2b02      	cmp	r3, #2
 8003542:	d108      	bne.n	8003556 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003552:	605a      	str	r2, [r3, #4]
 8003554:	e007      	b.n	8003566 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	685a      	ldr	r2, [r3, #4]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003564:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	6812      	ldr	r2, [r2, #0]
 8003570:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003574:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003578:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68da      	ldr	r2, [r3, #12]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003588:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	691a      	ldr	r2, [r3, #16]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	430a      	orrs	r2, r1
 80035a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	69d9      	ldr	r1, [r3, #28]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a1a      	ldr	r2, [r3, #32]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	430a      	orrs	r2, r1
 80035b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f042 0201 	orr.w	r2, r2, #1
 80035c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2220      	movs	r2, #32
 80035ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3708      	adds	r7, #8
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b082      	sub	sp, #8
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d101      	bne.n	80035fc <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e021      	b.n	8003640 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2224      	movs	r2, #36	@ 0x24
 8003600:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 0201 	bic.w	r2, r2, #1
 8003612:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f7fe fcdf 	bl	8001fd8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3708      	adds	r7, #8
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b088      	sub	sp, #32
 800364c:	af02      	add	r7, sp, #8
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	4608      	mov	r0, r1
 8003652:	4611      	mov	r1, r2
 8003654:	461a      	mov	r2, r3
 8003656:	4603      	mov	r3, r0
 8003658:	817b      	strh	r3, [r7, #10]
 800365a:	460b      	mov	r3, r1
 800365c:	813b      	strh	r3, [r7, #8]
 800365e:	4613      	mov	r3, r2
 8003660:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b20      	cmp	r3, #32
 800366c:	f040 80f9 	bne.w	8003862 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003670:	6a3b      	ldr	r3, [r7, #32]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d002      	beq.n	800367c <HAL_I2C_Mem_Write+0x34>
 8003676:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003678:	2b00      	cmp	r3, #0
 800367a:	d105      	bne.n	8003688 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003682:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e0ed      	b.n	8003864 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800368e:	2b01      	cmp	r3, #1
 8003690:	d101      	bne.n	8003696 <HAL_I2C_Mem_Write+0x4e>
 8003692:	2302      	movs	r3, #2
 8003694:	e0e6      	b.n	8003864 <HAL_I2C_Mem_Write+0x21c>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800369e:	f7ff f81d 	bl	80026dc <HAL_GetTick>
 80036a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	9300      	str	r3, [sp, #0]
 80036a8:	2319      	movs	r3, #25
 80036aa:	2201      	movs	r2, #1
 80036ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80036b0:	68f8      	ldr	r0, [r7, #12]
 80036b2:	f000 fac3 	bl	8003c3c <I2C_WaitOnFlagUntilTimeout>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d001      	beq.n	80036c0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e0d1      	b.n	8003864 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2221      	movs	r2, #33	@ 0x21
 80036c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2240      	movs	r2, #64	@ 0x40
 80036cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6a3a      	ldr	r2, [r7, #32]
 80036da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80036e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036e8:	88f8      	ldrh	r0, [r7, #6]
 80036ea:	893a      	ldrh	r2, [r7, #8]
 80036ec:	8979      	ldrh	r1, [r7, #10]
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	9301      	str	r3, [sp, #4]
 80036f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036f4:	9300      	str	r3, [sp, #0]
 80036f6:	4603      	mov	r3, r0
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f000 f9d3 	bl	8003aa4 <I2C_RequestMemoryWrite>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d005      	beq.n	8003710 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e0a9      	b.n	8003864 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003714:	b29b      	uxth	r3, r3
 8003716:	2bff      	cmp	r3, #255	@ 0xff
 8003718:	d90e      	bls.n	8003738 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	22ff      	movs	r2, #255	@ 0xff
 800371e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003724:	b2da      	uxtb	r2, r3
 8003726:	8979      	ldrh	r1, [r7, #10]
 8003728:	2300      	movs	r3, #0
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f000 fc47 	bl	8003fc4 <I2C_TransferConfig>
 8003736:	e00f      	b.n	8003758 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800373c:	b29a      	uxth	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003746:	b2da      	uxtb	r2, r3
 8003748:	8979      	ldrh	r1, [r7, #10]
 800374a:	2300      	movs	r3, #0
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f000 fc36 	bl	8003fc4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003758:	697a      	ldr	r2, [r7, #20]
 800375a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f000 fac6 	bl	8003cee <I2C_WaitOnTXISFlagUntilTimeout>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d001      	beq.n	800376c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e07b      	b.n	8003864 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003770:	781a      	ldrb	r2, [r3, #0]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377c:	1c5a      	adds	r2, r3, #1
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003786:	b29b      	uxth	r3, r3
 8003788:	3b01      	subs	r3, #1
 800378a:	b29a      	uxth	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003794:	3b01      	subs	r3, #1
 8003796:	b29a      	uxth	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d034      	beq.n	8003810 <HAL_I2C_Mem_Write+0x1c8>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d130      	bne.n	8003810 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	9300      	str	r3, [sp, #0]
 80037b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037b4:	2200      	movs	r2, #0
 80037b6:	2180      	movs	r1, #128	@ 0x80
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f000 fa3f 	bl	8003c3c <I2C_WaitOnFlagUntilTimeout>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e04d      	b.n	8003864 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	2bff      	cmp	r3, #255	@ 0xff
 80037d0:	d90e      	bls.n	80037f0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	22ff      	movs	r2, #255	@ 0xff
 80037d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037dc:	b2da      	uxtb	r2, r3
 80037de:	8979      	ldrh	r1, [r7, #10]
 80037e0:	2300      	movs	r3, #0
 80037e2:	9300      	str	r3, [sp, #0]
 80037e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f000 fbeb 	bl	8003fc4 <I2C_TransferConfig>
 80037ee:	e00f      	b.n	8003810 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037fe:	b2da      	uxtb	r2, r3
 8003800:	8979      	ldrh	r1, [r7, #10]
 8003802:	2300      	movs	r3, #0
 8003804:	9300      	str	r3, [sp, #0]
 8003806:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f000 fbda 	bl	8003fc4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003814:	b29b      	uxth	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d19e      	bne.n	8003758 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f000 faac 	bl	8003d7c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e01a      	b.n	8003864 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2220      	movs	r2, #32
 8003834:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	6859      	ldr	r1, [r3, #4]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	4b0a      	ldr	r3, [pc, #40]	@ (800386c <HAL_I2C_Mem_Write+0x224>)
 8003842:	400b      	ands	r3, r1
 8003844:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2220      	movs	r2, #32
 800384a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800385e:	2300      	movs	r3, #0
 8003860:	e000      	b.n	8003864 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003862:	2302      	movs	r3, #2
  }
}
 8003864:	4618      	mov	r0, r3
 8003866:	3718      	adds	r7, #24
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	fe00e800 	.word	0xfe00e800

08003870 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b088      	sub	sp, #32
 8003874:	af02      	add	r7, sp, #8
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	4608      	mov	r0, r1
 800387a:	4611      	mov	r1, r2
 800387c:	461a      	mov	r2, r3
 800387e:	4603      	mov	r3, r0
 8003880:	817b      	strh	r3, [r7, #10]
 8003882:	460b      	mov	r3, r1
 8003884:	813b      	strh	r3, [r7, #8]
 8003886:	4613      	mov	r3, r2
 8003888:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b20      	cmp	r3, #32
 8003894:	f040 80fd 	bne.w	8003a92 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003898:	6a3b      	ldr	r3, [r7, #32]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d002      	beq.n	80038a4 <HAL_I2C_Mem_Read+0x34>
 800389e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d105      	bne.n	80038b0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038aa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e0f1      	b.n	8003a94 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d101      	bne.n	80038be <HAL_I2C_Mem_Read+0x4e>
 80038ba:	2302      	movs	r3, #2
 80038bc:	e0ea      	b.n	8003a94 <HAL_I2C_Mem_Read+0x224>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80038c6:	f7fe ff09 	bl	80026dc <HAL_GetTick>
 80038ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	9300      	str	r3, [sp, #0]
 80038d0:	2319      	movs	r3, #25
 80038d2:	2201      	movs	r2, #1
 80038d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f000 f9af 	bl	8003c3c <I2C_WaitOnFlagUntilTimeout>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d001      	beq.n	80038e8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e0d5      	b.n	8003a94 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2222      	movs	r2, #34	@ 0x22
 80038ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2240      	movs	r2, #64	@ 0x40
 80038f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6a3a      	ldr	r2, [r7, #32]
 8003902:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003908:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003910:	88f8      	ldrh	r0, [r7, #6]
 8003912:	893a      	ldrh	r2, [r7, #8]
 8003914:	8979      	ldrh	r1, [r7, #10]
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	9301      	str	r3, [sp, #4]
 800391a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800391c:	9300      	str	r3, [sp, #0]
 800391e:	4603      	mov	r3, r0
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 f913 	bl	8003b4c <I2C_RequestMemoryRead>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d005      	beq.n	8003938 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e0ad      	b.n	8003a94 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800393c:	b29b      	uxth	r3, r3
 800393e:	2bff      	cmp	r3, #255	@ 0xff
 8003940:	d90e      	bls.n	8003960 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2201      	movs	r2, #1
 8003946:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800394c:	b2da      	uxtb	r2, r3
 800394e:	8979      	ldrh	r1, [r7, #10]
 8003950:	4b52      	ldr	r3, [pc, #328]	@ (8003a9c <HAL_I2C_Mem_Read+0x22c>)
 8003952:	9300      	str	r3, [sp, #0]
 8003954:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003958:	68f8      	ldr	r0, [r7, #12]
 800395a:	f000 fb33 	bl	8003fc4 <I2C_TransferConfig>
 800395e:	e00f      	b.n	8003980 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003964:	b29a      	uxth	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800396e:	b2da      	uxtb	r2, r3
 8003970:	8979      	ldrh	r1, [r7, #10]
 8003972:	4b4a      	ldr	r3, [pc, #296]	@ (8003a9c <HAL_I2C_Mem_Read+0x22c>)
 8003974:	9300      	str	r3, [sp, #0]
 8003976:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f000 fb22 	bl	8003fc4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	9300      	str	r3, [sp, #0]
 8003984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003986:	2200      	movs	r2, #0
 8003988:	2104      	movs	r1, #4
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	f000 f956 	bl	8003c3c <I2C_WaitOnFlagUntilTimeout>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e07c      	b.n	8003a94 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a4:	b2d2      	uxtb	r2, r2
 80039a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ac:	1c5a      	adds	r2, r3, #1
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039b6:	3b01      	subs	r3, #1
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	3b01      	subs	r3, #1
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d034      	beq.n	8003a40 <HAL_I2C_Mem_Read+0x1d0>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d130      	bne.n	8003a40 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	9300      	str	r3, [sp, #0]
 80039e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039e4:	2200      	movs	r2, #0
 80039e6:	2180      	movs	r1, #128	@ 0x80
 80039e8:	68f8      	ldr	r0, [r7, #12]
 80039ea:	f000 f927 	bl	8003c3c <I2C_WaitOnFlagUntilTimeout>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d001      	beq.n	80039f8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e04d      	b.n	8003a94 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	2bff      	cmp	r3, #255	@ 0xff
 8003a00:	d90e      	bls.n	8003a20 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2201      	movs	r2, #1
 8003a06:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a0c:	b2da      	uxtb	r2, r3
 8003a0e:	8979      	ldrh	r1, [r7, #10]
 8003a10:	2300      	movs	r3, #0
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f000 fad3 	bl	8003fc4 <I2C_TransferConfig>
 8003a1e:	e00f      	b.n	8003a40 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a2e:	b2da      	uxtb	r2, r3
 8003a30:	8979      	ldrh	r1, [r7, #10]
 8003a32:	2300      	movs	r3, #0
 8003a34:	9300      	str	r3, [sp, #0]
 8003a36:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f000 fac2 	bl	8003fc4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d19a      	bne.n	8003980 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f000 f994 	bl	8003d7c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e01a      	b.n	8003a94 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2220      	movs	r2, #32
 8003a64:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	6859      	ldr	r1, [r3, #4]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	4b0b      	ldr	r3, [pc, #44]	@ (8003aa0 <HAL_I2C_Mem_Read+0x230>)
 8003a72:	400b      	ands	r3, r1
 8003a74:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2220      	movs	r2, #32
 8003a7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	e000      	b.n	8003a94 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003a92:	2302      	movs	r3, #2
  }
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3718      	adds	r7, #24
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	80002400 	.word	0x80002400
 8003aa0:	fe00e800 	.word	0xfe00e800

08003aa4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af02      	add	r7, sp, #8
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	4608      	mov	r0, r1
 8003aae:	4611      	mov	r1, r2
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	817b      	strh	r3, [r7, #10]
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	813b      	strh	r3, [r7, #8]
 8003aba:	4613      	mov	r3, r2
 8003abc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003abe:	88fb      	ldrh	r3, [r7, #6]
 8003ac0:	b2da      	uxtb	r2, r3
 8003ac2:	8979      	ldrh	r1, [r7, #10]
 8003ac4:	4b20      	ldr	r3, [pc, #128]	@ (8003b48 <I2C_RequestMemoryWrite+0xa4>)
 8003ac6:	9300      	str	r3, [sp, #0]
 8003ac8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f000 fa79 	bl	8003fc4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ad2:	69fa      	ldr	r2, [r7, #28]
 8003ad4:	69b9      	ldr	r1, [r7, #24]
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f000 f909 	bl	8003cee <I2C_WaitOnTXISFlagUntilTimeout>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e02c      	b.n	8003b40 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ae6:	88fb      	ldrh	r3, [r7, #6]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d105      	bne.n	8003af8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003aec:	893b      	ldrh	r3, [r7, #8]
 8003aee:	b2da      	uxtb	r2, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	629a      	str	r2, [r3, #40]	@ 0x28
 8003af6:	e015      	b.n	8003b24 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003af8:	893b      	ldrh	r3, [r7, #8]
 8003afa:	0a1b      	lsrs	r3, r3, #8
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	b2da      	uxtb	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b06:	69fa      	ldr	r2, [r7, #28]
 8003b08:	69b9      	ldr	r1, [r7, #24]
 8003b0a:	68f8      	ldr	r0, [r7, #12]
 8003b0c:	f000 f8ef 	bl	8003cee <I2C_WaitOnTXISFlagUntilTimeout>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d001      	beq.n	8003b1a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e012      	b.n	8003b40 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b1a:	893b      	ldrh	r3, [r7, #8]
 8003b1c:	b2da      	uxtb	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	9300      	str	r3, [sp, #0]
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	2180      	movs	r1, #128	@ 0x80
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f000 f884 	bl	8003c3c <I2C_WaitOnFlagUntilTimeout>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e000      	b.n	8003b40 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3710      	adds	r7, #16
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	80002000 	.word	0x80002000

08003b4c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b086      	sub	sp, #24
 8003b50:	af02      	add	r7, sp, #8
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	4608      	mov	r0, r1
 8003b56:	4611      	mov	r1, r2
 8003b58:	461a      	mov	r2, r3
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	817b      	strh	r3, [r7, #10]
 8003b5e:	460b      	mov	r3, r1
 8003b60:	813b      	strh	r3, [r7, #8]
 8003b62:	4613      	mov	r3, r2
 8003b64:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003b66:	88fb      	ldrh	r3, [r7, #6]
 8003b68:	b2da      	uxtb	r2, r3
 8003b6a:	8979      	ldrh	r1, [r7, #10]
 8003b6c:	4b20      	ldr	r3, [pc, #128]	@ (8003bf0 <I2C_RequestMemoryRead+0xa4>)
 8003b6e:	9300      	str	r3, [sp, #0]
 8003b70:	2300      	movs	r3, #0
 8003b72:	68f8      	ldr	r0, [r7, #12]
 8003b74:	f000 fa26 	bl	8003fc4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b78:	69fa      	ldr	r2, [r7, #28]
 8003b7a:	69b9      	ldr	r1, [r7, #24]
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 f8b6 	bl	8003cee <I2C_WaitOnTXISFlagUntilTimeout>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d001      	beq.n	8003b8c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e02c      	b.n	8003be6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b8c:	88fb      	ldrh	r3, [r7, #6]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d105      	bne.n	8003b9e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b92:	893b      	ldrh	r3, [r7, #8]
 8003b94:	b2da      	uxtb	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b9c:	e015      	b.n	8003bca <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003b9e:	893b      	ldrh	r3, [r7, #8]
 8003ba0:	0a1b      	lsrs	r3, r3, #8
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	b2da      	uxtb	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bac:	69fa      	ldr	r2, [r7, #28]
 8003bae:	69b9      	ldr	r1, [r7, #24]
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f000 f89c 	bl	8003cee <I2C_WaitOnTXISFlagUntilTimeout>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d001      	beq.n	8003bc0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e012      	b.n	8003be6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003bc0:	893b      	ldrh	r3, [r7, #8]
 8003bc2:	b2da      	uxtb	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	2140      	movs	r1, #64	@ 0x40
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f000 f831 	bl	8003c3c <I2C_WaitOnFlagUntilTimeout>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d001      	beq.n	8003be4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e000      	b.n	8003be6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	80002000 	.word	0x80002000

08003bf4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d103      	bne.n	8003c12 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	f003 0301 	and.w	r3, r3, #1
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d007      	beq.n	8003c30 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	699a      	ldr	r2, [r3, #24]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f042 0201 	orr.w	r2, r2, #1
 8003c2e:	619a      	str	r2, [r3, #24]
  }
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	603b      	str	r3, [r7, #0]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c4c:	e03b      	b.n	8003cc6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	6839      	ldr	r1, [r7, #0]
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	f000 f8d6 	bl	8003e04 <I2C_IsErrorOccurred>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e041      	b.n	8003ce6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c68:	d02d      	beq.n	8003cc6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c6a:	f7fe fd37 	bl	80026dc <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	683a      	ldr	r2, [r7, #0]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d302      	bcc.n	8003c80 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d122      	bne.n	8003cc6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	699a      	ldr	r2, [r3, #24]
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	4013      	ands	r3, r2
 8003c8a:	68ba      	ldr	r2, [r7, #8]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	bf0c      	ite	eq
 8003c90:	2301      	moveq	r3, #1
 8003c92:	2300      	movne	r3, #0
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	461a      	mov	r2, r3
 8003c98:	79fb      	ldrb	r3, [r7, #7]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d113      	bne.n	8003cc6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ca2:	f043 0220 	orr.w	r2, r3, #32
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2220      	movs	r2, #32
 8003cae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e00f      	b.n	8003ce6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	699a      	ldr	r2, [r3, #24]
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	4013      	ands	r3, r2
 8003cd0:	68ba      	ldr	r2, [r7, #8]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	bf0c      	ite	eq
 8003cd6:	2301      	moveq	r3, #1
 8003cd8:	2300      	movne	r3, #0
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	461a      	mov	r2, r3
 8003cde:	79fb      	ldrb	r3, [r7, #7]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d0b4      	beq.n	8003c4e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b084      	sub	sp, #16
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	60f8      	str	r0, [r7, #12]
 8003cf6:	60b9      	str	r1, [r7, #8]
 8003cf8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003cfa:	e033      	b.n	8003d64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	68b9      	ldr	r1, [r7, #8]
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f000 f87f 	bl	8003e04 <I2C_IsErrorOccurred>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d001      	beq.n	8003d10 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e031      	b.n	8003d74 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d16:	d025      	beq.n	8003d64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d18:	f7fe fce0 	bl	80026dc <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	68ba      	ldr	r2, [r7, #8]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d302      	bcc.n	8003d2e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d11a      	bne.n	8003d64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d013      	beq.n	8003d64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d40:	f043 0220 	orr.w	r2, r3, #32
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e007      	b.n	8003d74 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d1c4      	bne.n	8003cfc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3710      	adds	r7, #16
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d88:	e02f      	b.n	8003dea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	68b9      	ldr	r1, [r7, #8]
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f000 f838 	bl	8003e04 <I2C_IsErrorOccurred>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e02d      	b.n	8003dfa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d9e:	f7fe fc9d 	bl	80026dc <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	68ba      	ldr	r2, [r7, #8]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d302      	bcc.n	8003db4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d11a      	bne.n	8003dea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	f003 0320 	and.w	r3, r3, #32
 8003dbe:	2b20      	cmp	r3, #32
 8003dc0:	d013      	beq.n	8003dea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dc6:	f043 0220 	orr.w	r2, r3, #32
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2220      	movs	r2, #32
 8003dd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e007      	b.n	8003dfa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	f003 0320 	and.w	r3, r3, #32
 8003df4:	2b20      	cmp	r3, #32
 8003df6:	d1c8      	bne.n	8003d8a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3710      	adds	r7, #16
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
	...

08003e04 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b08a      	sub	sp, #40	@ 0x28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e10:	2300      	movs	r3, #0
 8003e12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	f003 0310 	and.w	r3, r3, #16
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d068      	beq.n	8003f02 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2210      	movs	r2, #16
 8003e36:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003e38:	e049      	b.n	8003ece <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e40:	d045      	beq.n	8003ece <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003e42:	f7fe fc4b 	bl	80026dc <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d302      	bcc.n	8003e58 <I2C_IsErrorOccurred+0x54>
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d13a      	bne.n	8003ece <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e62:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e6a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e7a:	d121      	bne.n	8003ec0 <I2C_IsErrorOccurred+0xbc>
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e82:	d01d      	beq.n	8003ec0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003e84:	7cfb      	ldrb	r3, [r7, #19]
 8003e86:	2b20      	cmp	r3, #32
 8003e88:	d01a      	beq.n	8003ec0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e98:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003e9a:	f7fe fc1f 	bl	80026dc <HAL_GetTick>
 8003e9e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ea0:	e00e      	b.n	8003ec0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003ea2:	f7fe fc1b 	bl	80026dc <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	2b19      	cmp	r3, #25
 8003eae:	d907      	bls.n	8003ec0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003eb0:	6a3b      	ldr	r3, [r7, #32]
 8003eb2:	f043 0320 	orr.w	r3, r3, #32
 8003eb6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003ebe:	e006      	b.n	8003ece <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	f003 0320 	and.w	r3, r3, #32
 8003eca:	2b20      	cmp	r3, #32
 8003ecc:	d1e9      	bne.n	8003ea2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	f003 0320 	and.w	r3, r3, #32
 8003ed8:	2b20      	cmp	r3, #32
 8003eda:	d003      	beq.n	8003ee4 <I2C_IsErrorOccurred+0xe0>
 8003edc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d0aa      	beq.n	8003e3a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003ee4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d103      	bne.n	8003ef4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2220      	movs	r2, #32
 8003ef2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003ef4:	6a3b      	ldr	r3, [r7, #32]
 8003ef6:	f043 0304 	orr.w	r3, r3, #4
 8003efa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00b      	beq.n	8003f2c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003f14:	6a3b      	ldr	r3, [r7, #32]
 8003f16:	f043 0301 	orr.w	r3, r3, #1
 8003f1a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003f24:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00b      	beq.n	8003f4e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003f36:	6a3b      	ldr	r3, [r7, #32]
 8003f38:	f043 0308 	orr.w	r3, r3, #8
 8003f3c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f46:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00b      	beq.n	8003f70 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003f58:	6a3b      	ldr	r3, [r7, #32]
 8003f5a:	f043 0302 	orr.w	r3, r3, #2
 8003f5e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f68:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003f70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d01c      	beq.n	8003fb2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003f78:	68f8      	ldr	r0, [r7, #12]
 8003f7a:	f7ff fe3b 	bl	8003bf4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	6859      	ldr	r1, [r3, #4]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	4b0d      	ldr	r3, [pc, #52]	@ (8003fc0 <I2C_IsErrorOccurred+0x1bc>)
 8003f8a:	400b      	ands	r3, r1
 8003f8c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f92:	6a3b      	ldr	r3, [r7, #32]
 8003f94:	431a      	orrs	r2, r3
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003fb2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3728      	adds	r7, #40	@ 0x28
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	fe00e800 	.word	0xfe00e800

08003fc4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b087      	sub	sp, #28
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	607b      	str	r3, [r7, #4]
 8003fce:	460b      	mov	r3, r1
 8003fd0:	817b      	strh	r3, [r7, #10]
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003fd6:	897b      	ldrh	r3, [r7, #10]
 8003fd8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003fdc:	7a7b      	ldrb	r3, [r7, #9]
 8003fde:	041b      	lsls	r3, r3, #16
 8003fe0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003fe4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003fea:	6a3b      	ldr	r3, [r7, #32]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003ff2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	6a3b      	ldr	r3, [r7, #32]
 8003ffc:	0d5b      	lsrs	r3, r3, #21
 8003ffe:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004002:	4b08      	ldr	r3, [pc, #32]	@ (8004024 <I2C_TransferConfig+0x60>)
 8004004:	430b      	orrs	r3, r1
 8004006:	43db      	mvns	r3, r3
 8004008:	ea02 0103 	and.w	r1, r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	430a      	orrs	r2, r1
 8004014:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004016:	bf00      	nop
 8004018:	371c      	adds	r7, #28
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	03ff63ff 	.word	0x03ff63ff

08004028 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b20      	cmp	r3, #32
 800403c:	d138      	bne.n	80040b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004044:	2b01      	cmp	r3, #1
 8004046:	d101      	bne.n	800404c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004048:	2302      	movs	r3, #2
 800404a:	e032      	b.n	80040b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2224      	movs	r2, #36	@ 0x24
 8004058:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f022 0201 	bic.w	r2, r2, #1
 800406a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800407a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6819      	ldr	r1, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	683a      	ldr	r2, [r7, #0]
 8004088:	430a      	orrs	r2, r1
 800408a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f042 0201 	orr.w	r2, r2, #1
 800409a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2220      	movs	r2, #32
 80040a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80040ac:	2300      	movs	r3, #0
 80040ae:	e000      	b.n	80040b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80040b0:	2302      	movs	r3, #2
  }
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	370c      	adds	r7, #12
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr

080040be <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80040be:	b480      	push	{r7}
 80040c0:	b085      	sub	sp, #20
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
 80040c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	2b20      	cmp	r3, #32
 80040d2:	d139      	bne.n	8004148 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d101      	bne.n	80040e2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80040de:	2302      	movs	r3, #2
 80040e0:	e033      	b.n	800414a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2224      	movs	r2, #36	@ 0x24
 80040ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 0201 	bic.w	r2, r2, #1
 8004100:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004110:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	021b      	lsls	r3, r3, #8
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	4313      	orrs	r3, r2
 800411a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68fa      	ldr	r2, [r7, #12]
 8004122:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f042 0201 	orr.w	r2, r2, #1
 8004132:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2220      	movs	r2, #32
 8004138:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004144:	2300      	movs	r3, #0
 8004146:	e000      	b.n	800414a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004148:	2302      	movs	r3, #2
  }
}
 800414a:	4618      	mov	r0, r3
 800414c:	3714      	adds	r7, #20
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
	...

08004158 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004158:	b480      	push	{r7}
 800415a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800415c:	4b0d      	ldr	r3, [pc, #52]	@ (8004194 <HAL_PWREx_GetVoltageRange+0x3c>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004164:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004168:	d102      	bne.n	8004170 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800416a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800416e:	e00b      	b.n	8004188 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004170:	4b08      	ldr	r3, [pc, #32]	@ (8004194 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004172:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004176:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800417a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800417e:	d102      	bne.n	8004186 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004180:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004184:	e000      	b.n	8004188 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004186:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004188:	4618      	mov	r0, r3
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	40007000 	.word	0x40007000

08004198 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d141      	bne.n	800422a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80041a6:	4b4b      	ldr	r3, [pc, #300]	@ (80042d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80041ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041b2:	d131      	bne.n	8004218 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80041b4:	4b47      	ldr	r3, [pc, #284]	@ (80042d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041ba:	4a46      	ldr	r2, [pc, #280]	@ (80042d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80041c4:	4b43      	ldr	r3, [pc, #268]	@ (80042d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80041cc:	4a41      	ldr	r2, [pc, #260]	@ (80042d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80041d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80041d4:	4b40      	ldr	r3, [pc, #256]	@ (80042d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2232      	movs	r2, #50	@ 0x32
 80041da:	fb02 f303 	mul.w	r3, r2, r3
 80041de:	4a3f      	ldr	r2, [pc, #252]	@ (80042dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80041e0:	fba2 2303 	umull	r2, r3, r2, r3
 80041e4:	0c9b      	lsrs	r3, r3, #18
 80041e6:	3301      	adds	r3, #1
 80041e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041ea:	e002      	b.n	80041f2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	3b01      	subs	r3, #1
 80041f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041f2:	4b38      	ldr	r3, [pc, #224]	@ (80042d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041fe:	d102      	bne.n	8004206 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1f2      	bne.n	80041ec <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004206:	4b33      	ldr	r3, [pc, #204]	@ (80042d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800420e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004212:	d158      	bne.n	80042c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e057      	b.n	80042c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004218:	4b2e      	ldr	r3, [pc, #184]	@ (80042d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800421a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800421e:	4a2d      	ldr	r2, [pc, #180]	@ (80042d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004220:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004224:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004228:	e04d      	b.n	80042c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004230:	d141      	bne.n	80042b6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004232:	4b28      	ldr	r3, [pc, #160]	@ (80042d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800423a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800423e:	d131      	bne.n	80042a4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004240:	4b24      	ldr	r3, [pc, #144]	@ (80042d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004242:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004246:	4a23      	ldr	r2, [pc, #140]	@ (80042d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004248:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800424c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004250:	4b20      	ldr	r3, [pc, #128]	@ (80042d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004258:	4a1e      	ldr	r2, [pc, #120]	@ (80042d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800425a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800425e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004260:	4b1d      	ldr	r3, [pc, #116]	@ (80042d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2232      	movs	r2, #50	@ 0x32
 8004266:	fb02 f303 	mul.w	r3, r2, r3
 800426a:	4a1c      	ldr	r2, [pc, #112]	@ (80042dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800426c:	fba2 2303 	umull	r2, r3, r2, r3
 8004270:	0c9b      	lsrs	r3, r3, #18
 8004272:	3301      	adds	r3, #1
 8004274:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004276:	e002      	b.n	800427e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	3b01      	subs	r3, #1
 800427c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800427e:	4b15      	ldr	r3, [pc, #84]	@ (80042d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004286:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800428a:	d102      	bne.n	8004292 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1f2      	bne.n	8004278 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004292:	4b10      	ldr	r3, [pc, #64]	@ (80042d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004294:	695b      	ldr	r3, [r3, #20]
 8004296:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800429a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800429e:	d112      	bne.n	80042c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e011      	b.n	80042c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80042a4:	4b0b      	ldr	r3, [pc, #44]	@ (80042d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042aa:	4a0a      	ldr	r2, [pc, #40]	@ (80042d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80042b4:	e007      	b.n	80042c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80042b6:	4b07      	ldr	r3, [pc, #28]	@ (80042d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80042be:	4a05      	ldr	r2, [pc, #20]	@ (80042d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042c0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80042c4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3714      	adds	r7, #20
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr
 80042d4:	40007000 	.word	0x40007000
 80042d8:	2000000c 	.word	0x2000000c
 80042dc:	431bde83 	.word	0x431bde83

080042e0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b088      	sub	sp, #32
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d102      	bne.n	80042f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	f000 bc08 	b.w	8004b04 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042f4:	4b96      	ldr	r3, [pc, #600]	@ (8004550 <HAL_RCC_OscConfig+0x270>)
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	f003 030c 	and.w	r3, r3, #12
 80042fc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042fe:	4b94      	ldr	r3, [pc, #592]	@ (8004550 <HAL_RCC_OscConfig+0x270>)
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	f003 0303 	and.w	r3, r3, #3
 8004306:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0310 	and.w	r3, r3, #16
 8004310:	2b00      	cmp	r3, #0
 8004312:	f000 80e4 	beq.w	80044de <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d007      	beq.n	800432c <HAL_RCC_OscConfig+0x4c>
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	2b0c      	cmp	r3, #12
 8004320:	f040 808b 	bne.w	800443a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	2b01      	cmp	r3, #1
 8004328:	f040 8087 	bne.w	800443a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800432c:	4b88      	ldr	r3, [pc, #544]	@ (8004550 <HAL_RCC_OscConfig+0x270>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0302 	and.w	r3, r3, #2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d005      	beq.n	8004344 <HAL_RCC_OscConfig+0x64>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d101      	bne.n	8004344 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e3df      	b.n	8004b04 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a1a      	ldr	r2, [r3, #32]
 8004348:	4b81      	ldr	r3, [pc, #516]	@ (8004550 <HAL_RCC_OscConfig+0x270>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0308 	and.w	r3, r3, #8
 8004350:	2b00      	cmp	r3, #0
 8004352:	d004      	beq.n	800435e <HAL_RCC_OscConfig+0x7e>
 8004354:	4b7e      	ldr	r3, [pc, #504]	@ (8004550 <HAL_RCC_OscConfig+0x270>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800435c:	e005      	b.n	800436a <HAL_RCC_OscConfig+0x8a>
 800435e:	4b7c      	ldr	r3, [pc, #496]	@ (8004550 <HAL_RCC_OscConfig+0x270>)
 8004360:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004364:	091b      	lsrs	r3, r3, #4
 8004366:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800436a:	4293      	cmp	r3, r2
 800436c:	d223      	bcs.n	80043b6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	4618      	mov	r0, r3
 8004374:	f000 fdcc 	bl	8004f10 <RCC_SetFlashLatencyFromMSIRange>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e3c0      	b.n	8004b04 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004382:	4b73      	ldr	r3, [pc, #460]	@ (8004550 <HAL_RCC_OscConfig+0x270>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a72      	ldr	r2, [pc, #456]	@ (8004550 <HAL_RCC_OscConfig+0x270>)
 8004388:	f043 0308 	orr.w	r3, r3, #8
 800438c:	6013      	str	r3, [r2, #0]
 800438e:	4b70      	ldr	r3, [pc, #448]	@ (8004550 <HAL_RCC_OscConfig+0x270>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	496d      	ldr	r1, [pc, #436]	@ (8004550 <HAL_RCC_OscConfig+0x270>)
 800439c:	4313      	orrs	r3, r2
 800439e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043a0:	4b6b      	ldr	r3, [pc, #428]	@ (8004550 <HAL_RCC_OscConfig+0x270>)
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	69db      	ldr	r3, [r3, #28]
 80043ac:	021b      	lsls	r3, r3, #8
 80043ae:	4968      	ldr	r1, [pc, #416]	@ (8004550 <HAL_RCC_OscConfig+0x270>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	604b      	str	r3, [r1, #4]
 80043b4:	e025      	b.n	8004402 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043b6:	4b66      	ldr	r3, [pc, #408]	@ (8004550 <HAL_RCC_OscConfig+0x270>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a65      	ldr	r2, [pc, #404]	@ (8004550 <HAL_RCC_OscConfig+0x270>)
 80043bc:	f043 0308 	orr.w	r3, r3, #8
 80043c0:	6013      	str	r3, [r2, #0]
 80043c2:	4b63      	ldr	r3, [pc, #396]	@ (8004550 <HAL_RCC_OscConfig+0x270>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	4960      	ldr	r1, [pc, #384]	@ (8004550 <HAL_RCC_OscConfig+0x270>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043d4:	4b5e      	ldr	r3, [pc, #376]	@ (8004550 <HAL_RCC_OscConfig+0x270>)
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	69db      	ldr	r3, [r3, #28]
 80043e0:	021b      	lsls	r3, r3, #8
 80043e2:	495b      	ldr	r1, [pc, #364]	@ (8004550 <HAL_RCC_OscConfig+0x270>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d109      	bne.n	8004402 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f000 fd8c 	bl	8004f10 <RCC_SetFlashLatencyFromMSIRange>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e380      	b.n	8004b04 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004402:	f000 fcc1 	bl	8004d88 <HAL_RCC_GetSysClockFreq>
 8004406:	4602      	mov	r2, r0
 8004408:	4b51      	ldr	r3, [pc, #324]	@ (8004550 <HAL_RCC_OscConfig+0x270>)
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	091b      	lsrs	r3, r3, #4
 800440e:	f003 030f 	and.w	r3, r3, #15
 8004412:	4950      	ldr	r1, [pc, #320]	@ (8004554 <HAL_RCC_OscConfig+0x274>)
 8004414:	5ccb      	ldrb	r3, [r1, r3]
 8004416:	f003 031f 	and.w	r3, r3, #31
 800441a:	fa22 f303 	lsr.w	r3, r2, r3
 800441e:	4a4e      	ldr	r2, [pc, #312]	@ (8004558 <HAL_RCC_OscConfig+0x278>)
 8004420:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004422:	4b4e      	ldr	r3, [pc, #312]	@ (800455c <HAL_RCC_OscConfig+0x27c>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4618      	mov	r0, r3
 8004428:	f7fe f908 	bl	800263c <HAL_InitTick>
 800442c:	4603      	mov	r3, r0
 800442e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004430:	7bfb      	ldrb	r3, [r7, #15]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d052      	beq.n	80044dc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004436:	7bfb      	ldrb	r3, [r7, #15]
 8004438:	e364      	b.n	8004b04 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d032      	beq.n	80044a8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004442:	4b43      	ldr	r3, [pc, #268]	@ (8004550 <HAL_RCC_OscConfig+0x270>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a42      	ldr	r2, [pc, #264]	@ (8004550 <HAL_RCC_OscConfig+0x270>)
 8004448:	f043 0301 	orr.w	r3, r3, #1
 800444c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800444e:	f7fe f945 	bl	80026dc <HAL_GetTick>
 8004452:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004454:	e008      	b.n	8004468 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004456:	f7fe f941 	bl	80026dc <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b02      	cmp	r3, #2
 8004462:	d901      	bls.n	8004468 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e34d      	b.n	8004b04 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004468:	4b39      	ldr	r3, [pc, #228]	@ (8004550 <HAL_RCC_OscConfig+0x270>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b00      	cmp	r3, #0
 8004472:	d0f0      	beq.n	8004456 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004474:	4b36      	ldr	r3, [pc, #216]	@ (8004550 <HAL_RCC_OscConfig+0x270>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a35      	ldr	r2, [pc, #212]	@ (8004550 <HAL_RCC_OscConfig+0x270>)
 800447a:	f043 0308 	orr.w	r3, r3, #8
 800447e:	6013      	str	r3, [r2, #0]
 8004480:	4b33      	ldr	r3, [pc, #204]	@ (8004550 <HAL_RCC_OscConfig+0x270>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a1b      	ldr	r3, [r3, #32]
 800448c:	4930      	ldr	r1, [pc, #192]	@ (8004550 <HAL_RCC_OscConfig+0x270>)
 800448e:	4313      	orrs	r3, r2
 8004490:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004492:	4b2f      	ldr	r3, [pc, #188]	@ (8004550 <HAL_RCC_OscConfig+0x270>)
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	69db      	ldr	r3, [r3, #28]
 800449e:	021b      	lsls	r3, r3, #8
 80044a0:	492b      	ldr	r1, [pc, #172]	@ (8004550 <HAL_RCC_OscConfig+0x270>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	604b      	str	r3, [r1, #4]
 80044a6:	e01a      	b.n	80044de <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80044a8:	4b29      	ldr	r3, [pc, #164]	@ (8004550 <HAL_RCC_OscConfig+0x270>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a28      	ldr	r2, [pc, #160]	@ (8004550 <HAL_RCC_OscConfig+0x270>)
 80044ae:	f023 0301 	bic.w	r3, r3, #1
 80044b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044b4:	f7fe f912 	bl	80026dc <HAL_GetTick>
 80044b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80044ba:	e008      	b.n	80044ce <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044bc:	f7fe f90e 	bl	80026dc <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e31a      	b.n	8004b04 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80044ce:	4b20      	ldr	r3, [pc, #128]	@ (8004550 <HAL_RCC_OscConfig+0x270>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1f0      	bne.n	80044bc <HAL_RCC_OscConfig+0x1dc>
 80044da:	e000      	b.n	80044de <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044dc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d073      	beq.n	80045d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	2b08      	cmp	r3, #8
 80044ee:	d005      	beq.n	80044fc <HAL_RCC_OscConfig+0x21c>
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	2b0c      	cmp	r3, #12
 80044f4:	d10e      	bne.n	8004514 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	2b03      	cmp	r3, #3
 80044fa:	d10b      	bne.n	8004514 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044fc:	4b14      	ldr	r3, [pc, #80]	@ (8004550 <HAL_RCC_OscConfig+0x270>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d063      	beq.n	80045d0 <HAL_RCC_OscConfig+0x2f0>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d15f      	bne.n	80045d0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e2f7      	b.n	8004b04 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800451c:	d106      	bne.n	800452c <HAL_RCC_OscConfig+0x24c>
 800451e:	4b0c      	ldr	r3, [pc, #48]	@ (8004550 <HAL_RCC_OscConfig+0x270>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a0b      	ldr	r2, [pc, #44]	@ (8004550 <HAL_RCC_OscConfig+0x270>)
 8004524:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004528:	6013      	str	r3, [r2, #0]
 800452a:	e025      	b.n	8004578 <HAL_RCC_OscConfig+0x298>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004534:	d114      	bne.n	8004560 <HAL_RCC_OscConfig+0x280>
 8004536:	4b06      	ldr	r3, [pc, #24]	@ (8004550 <HAL_RCC_OscConfig+0x270>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a05      	ldr	r2, [pc, #20]	@ (8004550 <HAL_RCC_OscConfig+0x270>)
 800453c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004540:	6013      	str	r3, [r2, #0]
 8004542:	4b03      	ldr	r3, [pc, #12]	@ (8004550 <HAL_RCC_OscConfig+0x270>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a02      	ldr	r2, [pc, #8]	@ (8004550 <HAL_RCC_OscConfig+0x270>)
 8004548:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800454c:	6013      	str	r3, [r2, #0]
 800454e:	e013      	b.n	8004578 <HAL_RCC_OscConfig+0x298>
 8004550:	40021000 	.word	0x40021000
 8004554:	0800d26c 	.word	0x0800d26c
 8004558:	2000000c 	.word	0x2000000c
 800455c:	20000044 	.word	0x20000044
 8004560:	4ba0      	ldr	r3, [pc, #640]	@ (80047e4 <HAL_RCC_OscConfig+0x504>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a9f      	ldr	r2, [pc, #636]	@ (80047e4 <HAL_RCC_OscConfig+0x504>)
 8004566:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800456a:	6013      	str	r3, [r2, #0]
 800456c:	4b9d      	ldr	r3, [pc, #628]	@ (80047e4 <HAL_RCC_OscConfig+0x504>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a9c      	ldr	r2, [pc, #624]	@ (80047e4 <HAL_RCC_OscConfig+0x504>)
 8004572:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004576:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d013      	beq.n	80045a8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004580:	f7fe f8ac 	bl	80026dc <HAL_GetTick>
 8004584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004586:	e008      	b.n	800459a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004588:	f7fe f8a8 	bl	80026dc <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	2b64      	cmp	r3, #100	@ 0x64
 8004594:	d901      	bls.n	800459a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e2b4      	b.n	8004b04 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800459a:	4b92      	ldr	r3, [pc, #584]	@ (80047e4 <HAL_RCC_OscConfig+0x504>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d0f0      	beq.n	8004588 <HAL_RCC_OscConfig+0x2a8>
 80045a6:	e014      	b.n	80045d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a8:	f7fe f898 	bl	80026dc <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045ae:	e008      	b.n	80045c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045b0:	f7fe f894 	bl	80026dc <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b64      	cmp	r3, #100	@ 0x64
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e2a0      	b.n	8004b04 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045c2:	4b88      	ldr	r3, [pc, #544]	@ (80047e4 <HAL_RCC_OscConfig+0x504>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1f0      	bne.n	80045b0 <HAL_RCC_OscConfig+0x2d0>
 80045ce:	e000      	b.n	80045d2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d060      	beq.n	80046a0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	2b04      	cmp	r3, #4
 80045e2:	d005      	beq.n	80045f0 <HAL_RCC_OscConfig+0x310>
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	2b0c      	cmp	r3, #12
 80045e8:	d119      	bne.n	800461e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d116      	bne.n	800461e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045f0:	4b7c      	ldr	r3, [pc, #496]	@ (80047e4 <HAL_RCC_OscConfig+0x504>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d005      	beq.n	8004608 <HAL_RCC_OscConfig+0x328>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d101      	bne.n	8004608 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e27d      	b.n	8004b04 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004608:	4b76      	ldr	r3, [pc, #472]	@ (80047e4 <HAL_RCC_OscConfig+0x504>)
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	061b      	lsls	r3, r3, #24
 8004616:	4973      	ldr	r1, [pc, #460]	@ (80047e4 <HAL_RCC_OscConfig+0x504>)
 8004618:	4313      	orrs	r3, r2
 800461a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800461c:	e040      	b.n	80046a0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d023      	beq.n	800466e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004626:	4b6f      	ldr	r3, [pc, #444]	@ (80047e4 <HAL_RCC_OscConfig+0x504>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a6e      	ldr	r2, [pc, #440]	@ (80047e4 <HAL_RCC_OscConfig+0x504>)
 800462c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004630:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004632:	f7fe f853 	bl	80026dc <HAL_GetTick>
 8004636:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004638:	e008      	b.n	800464c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800463a:	f7fe f84f 	bl	80026dc <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	2b02      	cmp	r3, #2
 8004646:	d901      	bls.n	800464c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e25b      	b.n	8004b04 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800464c:	4b65      	ldr	r3, [pc, #404]	@ (80047e4 <HAL_RCC_OscConfig+0x504>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004654:	2b00      	cmp	r3, #0
 8004656:	d0f0      	beq.n	800463a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004658:	4b62      	ldr	r3, [pc, #392]	@ (80047e4 <HAL_RCC_OscConfig+0x504>)
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	061b      	lsls	r3, r3, #24
 8004666:	495f      	ldr	r1, [pc, #380]	@ (80047e4 <HAL_RCC_OscConfig+0x504>)
 8004668:	4313      	orrs	r3, r2
 800466a:	604b      	str	r3, [r1, #4]
 800466c:	e018      	b.n	80046a0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800466e:	4b5d      	ldr	r3, [pc, #372]	@ (80047e4 <HAL_RCC_OscConfig+0x504>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a5c      	ldr	r2, [pc, #368]	@ (80047e4 <HAL_RCC_OscConfig+0x504>)
 8004674:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004678:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800467a:	f7fe f82f 	bl	80026dc <HAL_GetTick>
 800467e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004680:	e008      	b.n	8004694 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004682:	f7fe f82b 	bl	80026dc <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	2b02      	cmp	r3, #2
 800468e:	d901      	bls.n	8004694 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e237      	b.n	8004b04 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004694:	4b53      	ldr	r3, [pc, #332]	@ (80047e4 <HAL_RCC_OscConfig+0x504>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800469c:	2b00      	cmp	r3, #0
 800469e:	d1f0      	bne.n	8004682 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0308 	and.w	r3, r3, #8
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d03c      	beq.n	8004726 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	695b      	ldr	r3, [r3, #20]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d01c      	beq.n	80046ee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046b4:	4b4b      	ldr	r3, [pc, #300]	@ (80047e4 <HAL_RCC_OscConfig+0x504>)
 80046b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046ba:	4a4a      	ldr	r2, [pc, #296]	@ (80047e4 <HAL_RCC_OscConfig+0x504>)
 80046bc:	f043 0301 	orr.w	r3, r3, #1
 80046c0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c4:	f7fe f80a 	bl	80026dc <HAL_GetTick>
 80046c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046ca:	e008      	b.n	80046de <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046cc:	f7fe f806 	bl	80026dc <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d901      	bls.n	80046de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e212      	b.n	8004b04 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046de:	4b41      	ldr	r3, [pc, #260]	@ (80047e4 <HAL_RCC_OscConfig+0x504>)
 80046e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046e4:	f003 0302 	and.w	r3, r3, #2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d0ef      	beq.n	80046cc <HAL_RCC_OscConfig+0x3ec>
 80046ec:	e01b      	b.n	8004726 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046ee:	4b3d      	ldr	r3, [pc, #244]	@ (80047e4 <HAL_RCC_OscConfig+0x504>)
 80046f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046f4:	4a3b      	ldr	r2, [pc, #236]	@ (80047e4 <HAL_RCC_OscConfig+0x504>)
 80046f6:	f023 0301 	bic.w	r3, r3, #1
 80046fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046fe:	f7fd ffed 	bl	80026dc <HAL_GetTick>
 8004702:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004704:	e008      	b.n	8004718 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004706:	f7fd ffe9 	bl	80026dc <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	2b02      	cmp	r3, #2
 8004712:	d901      	bls.n	8004718 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e1f5      	b.n	8004b04 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004718:	4b32      	ldr	r3, [pc, #200]	@ (80047e4 <HAL_RCC_OscConfig+0x504>)
 800471a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800471e:	f003 0302 	and.w	r3, r3, #2
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1ef      	bne.n	8004706 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0304 	and.w	r3, r3, #4
 800472e:	2b00      	cmp	r3, #0
 8004730:	f000 80a6 	beq.w	8004880 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004734:	2300      	movs	r3, #0
 8004736:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004738:	4b2a      	ldr	r3, [pc, #168]	@ (80047e4 <HAL_RCC_OscConfig+0x504>)
 800473a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800473c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d10d      	bne.n	8004760 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004744:	4b27      	ldr	r3, [pc, #156]	@ (80047e4 <HAL_RCC_OscConfig+0x504>)
 8004746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004748:	4a26      	ldr	r2, [pc, #152]	@ (80047e4 <HAL_RCC_OscConfig+0x504>)
 800474a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800474e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004750:	4b24      	ldr	r3, [pc, #144]	@ (80047e4 <HAL_RCC_OscConfig+0x504>)
 8004752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004754:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004758:	60bb      	str	r3, [r7, #8]
 800475a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800475c:	2301      	movs	r3, #1
 800475e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004760:	4b21      	ldr	r3, [pc, #132]	@ (80047e8 <HAL_RCC_OscConfig+0x508>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004768:	2b00      	cmp	r3, #0
 800476a:	d118      	bne.n	800479e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800476c:	4b1e      	ldr	r3, [pc, #120]	@ (80047e8 <HAL_RCC_OscConfig+0x508>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a1d      	ldr	r2, [pc, #116]	@ (80047e8 <HAL_RCC_OscConfig+0x508>)
 8004772:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004776:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004778:	f7fd ffb0 	bl	80026dc <HAL_GetTick>
 800477c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800477e:	e008      	b.n	8004792 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004780:	f7fd ffac 	bl	80026dc <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b02      	cmp	r3, #2
 800478c:	d901      	bls.n	8004792 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e1b8      	b.n	8004b04 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004792:	4b15      	ldr	r3, [pc, #84]	@ (80047e8 <HAL_RCC_OscConfig+0x508>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800479a:	2b00      	cmp	r3, #0
 800479c:	d0f0      	beq.n	8004780 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d108      	bne.n	80047b8 <HAL_RCC_OscConfig+0x4d8>
 80047a6:	4b0f      	ldr	r3, [pc, #60]	@ (80047e4 <HAL_RCC_OscConfig+0x504>)
 80047a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047ac:	4a0d      	ldr	r2, [pc, #52]	@ (80047e4 <HAL_RCC_OscConfig+0x504>)
 80047ae:	f043 0301 	orr.w	r3, r3, #1
 80047b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047b6:	e029      	b.n	800480c <HAL_RCC_OscConfig+0x52c>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	2b05      	cmp	r3, #5
 80047be:	d115      	bne.n	80047ec <HAL_RCC_OscConfig+0x50c>
 80047c0:	4b08      	ldr	r3, [pc, #32]	@ (80047e4 <HAL_RCC_OscConfig+0x504>)
 80047c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047c6:	4a07      	ldr	r2, [pc, #28]	@ (80047e4 <HAL_RCC_OscConfig+0x504>)
 80047c8:	f043 0304 	orr.w	r3, r3, #4
 80047cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047d0:	4b04      	ldr	r3, [pc, #16]	@ (80047e4 <HAL_RCC_OscConfig+0x504>)
 80047d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047d6:	4a03      	ldr	r2, [pc, #12]	@ (80047e4 <HAL_RCC_OscConfig+0x504>)
 80047d8:	f043 0301 	orr.w	r3, r3, #1
 80047dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047e0:	e014      	b.n	800480c <HAL_RCC_OscConfig+0x52c>
 80047e2:	bf00      	nop
 80047e4:	40021000 	.word	0x40021000
 80047e8:	40007000 	.word	0x40007000
 80047ec:	4b9d      	ldr	r3, [pc, #628]	@ (8004a64 <HAL_RCC_OscConfig+0x784>)
 80047ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047f2:	4a9c      	ldr	r2, [pc, #624]	@ (8004a64 <HAL_RCC_OscConfig+0x784>)
 80047f4:	f023 0301 	bic.w	r3, r3, #1
 80047f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047fc:	4b99      	ldr	r3, [pc, #612]	@ (8004a64 <HAL_RCC_OscConfig+0x784>)
 80047fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004802:	4a98      	ldr	r2, [pc, #608]	@ (8004a64 <HAL_RCC_OscConfig+0x784>)
 8004804:	f023 0304 	bic.w	r3, r3, #4
 8004808:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d016      	beq.n	8004842 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004814:	f7fd ff62 	bl	80026dc <HAL_GetTick>
 8004818:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800481a:	e00a      	b.n	8004832 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800481c:	f7fd ff5e 	bl	80026dc <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	f241 3288 	movw	r2, #5000	@ 0x1388
 800482a:	4293      	cmp	r3, r2
 800482c:	d901      	bls.n	8004832 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e168      	b.n	8004b04 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004832:	4b8c      	ldr	r3, [pc, #560]	@ (8004a64 <HAL_RCC_OscConfig+0x784>)
 8004834:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004838:	f003 0302 	and.w	r3, r3, #2
 800483c:	2b00      	cmp	r3, #0
 800483e:	d0ed      	beq.n	800481c <HAL_RCC_OscConfig+0x53c>
 8004840:	e015      	b.n	800486e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004842:	f7fd ff4b 	bl	80026dc <HAL_GetTick>
 8004846:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004848:	e00a      	b.n	8004860 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800484a:	f7fd ff47 	bl	80026dc <HAL_GetTick>
 800484e:	4602      	mov	r2, r0
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004858:	4293      	cmp	r3, r2
 800485a:	d901      	bls.n	8004860 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e151      	b.n	8004b04 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004860:	4b80      	ldr	r3, [pc, #512]	@ (8004a64 <HAL_RCC_OscConfig+0x784>)
 8004862:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1ed      	bne.n	800484a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800486e:	7ffb      	ldrb	r3, [r7, #31]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d105      	bne.n	8004880 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004874:	4b7b      	ldr	r3, [pc, #492]	@ (8004a64 <HAL_RCC_OscConfig+0x784>)
 8004876:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004878:	4a7a      	ldr	r2, [pc, #488]	@ (8004a64 <HAL_RCC_OscConfig+0x784>)
 800487a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800487e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0320 	and.w	r3, r3, #32
 8004888:	2b00      	cmp	r3, #0
 800488a:	d03c      	beq.n	8004906 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004890:	2b00      	cmp	r3, #0
 8004892:	d01c      	beq.n	80048ce <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004894:	4b73      	ldr	r3, [pc, #460]	@ (8004a64 <HAL_RCC_OscConfig+0x784>)
 8004896:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800489a:	4a72      	ldr	r2, [pc, #456]	@ (8004a64 <HAL_RCC_OscConfig+0x784>)
 800489c:	f043 0301 	orr.w	r3, r3, #1
 80048a0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048a4:	f7fd ff1a 	bl	80026dc <HAL_GetTick>
 80048a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80048aa:	e008      	b.n	80048be <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048ac:	f7fd ff16 	bl	80026dc <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e122      	b.n	8004b04 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80048be:	4b69      	ldr	r3, [pc, #420]	@ (8004a64 <HAL_RCC_OscConfig+0x784>)
 80048c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048c4:	f003 0302 	and.w	r3, r3, #2
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d0ef      	beq.n	80048ac <HAL_RCC_OscConfig+0x5cc>
 80048cc:	e01b      	b.n	8004906 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80048ce:	4b65      	ldr	r3, [pc, #404]	@ (8004a64 <HAL_RCC_OscConfig+0x784>)
 80048d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048d4:	4a63      	ldr	r2, [pc, #396]	@ (8004a64 <HAL_RCC_OscConfig+0x784>)
 80048d6:	f023 0301 	bic.w	r3, r3, #1
 80048da:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048de:	f7fd fefd 	bl	80026dc <HAL_GetTick>
 80048e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80048e4:	e008      	b.n	80048f8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048e6:	f7fd fef9 	bl	80026dc <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d901      	bls.n	80048f8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e105      	b.n	8004b04 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80048f8:	4b5a      	ldr	r3, [pc, #360]	@ (8004a64 <HAL_RCC_OscConfig+0x784>)
 80048fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1ef      	bne.n	80048e6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800490a:	2b00      	cmp	r3, #0
 800490c:	f000 80f9 	beq.w	8004b02 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004914:	2b02      	cmp	r3, #2
 8004916:	f040 80cf 	bne.w	8004ab8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800491a:	4b52      	ldr	r3, [pc, #328]	@ (8004a64 <HAL_RCC_OscConfig+0x784>)
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	f003 0203 	and.w	r2, r3, #3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800492a:	429a      	cmp	r2, r3
 800492c:	d12c      	bne.n	8004988 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004938:	3b01      	subs	r3, #1
 800493a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800493c:	429a      	cmp	r2, r3
 800493e:	d123      	bne.n	8004988 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800494a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800494c:	429a      	cmp	r2, r3
 800494e:	d11b      	bne.n	8004988 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800495a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800495c:	429a      	cmp	r2, r3
 800495e:	d113      	bne.n	8004988 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800496a:	085b      	lsrs	r3, r3, #1
 800496c:	3b01      	subs	r3, #1
 800496e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004970:	429a      	cmp	r2, r3
 8004972:	d109      	bne.n	8004988 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800497e:	085b      	lsrs	r3, r3, #1
 8004980:	3b01      	subs	r3, #1
 8004982:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004984:	429a      	cmp	r2, r3
 8004986:	d071      	beq.n	8004a6c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	2b0c      	cmp	r3, #12
 800498c:	d068      	beq.n	8004a60 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800498e:	4b35      	ldr	r3, [pc, #212]	@ (8004a64 <HAL_RCC_OscConfig+0x784>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d105      	bne.n	80049a6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800499a:	4b32      	ldr	r3, [pc, #200]	@ (8004a64 <HAL_RCC_OscConfig+0x784>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d001      	beq.n	80049aa <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e0ac      	b.n	8004b04 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80049aa:	4b2e      	ldr	r3, [pc, #184]	@ (8004a64 <HAL_RCC_OscConfig+0x784>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a2d      	ldr	r2, [pc, #180]	@ (8004a64 <HAL_RCC_OscConfig+0x784>)
 80049b0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049b4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80049b6:	f7fd fe91 	bl	80026dc <HAL_GetTick>
 80049ba:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049bc:	e008      	b.n	80049d0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049be:	f7fd fe8d 	bl	80026dc <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d901      	bls.n	80049d0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e099      	b.n	8004b04 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049d0:	4b24      	ldr	r3, [pc, #144]	@ (8004a64 <HAL_RCC_OscConfig+0x784>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1f0      	bne.n	80049be <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049dc:	4b21      	ldr	r3, [pc, #132]	@ (8004a64 <HAL_RCC_OscConfig+0x784>)
 80049de:	68da      	ldr	r2, [r3, #12]
 80049e0:	4b21      	ldr	r3, [pc, #132]	@ (8004a68 <HAL_RCC_OscConfig+0x788>)
 80049e2:	4013      	ands	r3, r2
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80049ec:	3a01      	subs	r2, #1
 80049ee:	0112      	lsls	r2, r2, #4
 80049f0:	4311      	orrs	r1, r2
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80049f6:	0212      	lsls	r2, r2, #8
 80049f8:	4311      	orrs	r1, r2
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80049fe:	0852      	lsrs	r2, r2, #1
 8004a00:	3a01      	subs	r2, #1
 8004a02:	0552      	lsls	r2, r2, #21
 8004a04:	4311      	orrs	r1, r2
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004a0a:	0852      	lsrs	r2, r2, #1
 8004a0c:	3a01      	subs	r2, #1
 8004a0e:	0652      	lsls	r2, r2, #25
 8004a10:	4311      	orrs	r1, r2
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004a16:	06d2      	lsls	r2, r2, #27
 8004a18:	430a      	orrs	r2, r1
 8004a1a:	4912      	ldr	r1, [pc, #72]	@ (8004a64 <HAL_RCC_OscConfig+0x784>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004a20:	4b10      	ldr	r3, [pc, #64]	@ (8004a64 <HAL_RCC_OscConfig+0x784>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a0f      	ldr	r2, [pc, #60]	@ (8004a64 <HAL_RCC_OscConfig+0x784>)
 8004a26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a2a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a2c:	4b0d      	ldr	r3, [pc, #52]	@ (8004a64 <HAL_RCC_OscConfig+0x784>)
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	4a0c      	ldr	r2, [pc, #48]	@ (8004a64 <HAL_RCC_OscConfig+0x784>)
 8004a32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a36:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a38:	f7fd fe50 	bl	80026dc <HAL_GetTick>
 8004a3c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a3e:	e008      	b.n	8004a52 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a40:	f7fd fe4c 	bl	80026dc <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d901      	bls.n	8004a52 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e058      	b.n	8004b04 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a52:	4b04      	ldr	r3, [pc, #16]	@ (8004a64 <HAL_RCC_OscConfig+0x784>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d0f0      	beq.n	8004a40 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a5e:	e050      	b.n	8004b02 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e04f      	b.n	8004b04 <HAL_RCC_OscConfig+0x824>
 8004a64:	40021000 	.word	0x40021000
 8004a68:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a6c:	4b27      	ldr	r3, [pc, #156]	@ (8004b0c <HAL_RCC_OscConfig+0x82c>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d144      	bne.n	8004b02 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004a78:	4b24      	ldr	r3, [pc, #144]	@ (8004b0c <HAL_RCC_OscConfig+0x82c>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a23      	ldr	r2, [pc, #140]	@ (8004b0c <HAL_RCC_OscConfig+0x82c>)
 8004a7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a82:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a84:	4b21      	ldr	r3, [pc, #132]	@ (8004b0c <HAL_RCC_OscConfig+0x82c>)
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	4a20      	ldr	r2, [pc, #128]	@ (8004b0c <HAL_RCC_OscConfig+0x82c>)
 8004a8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a8e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a90:	f7fd fe24 	bl	80026dc <HAL_GetTick>
 8004a94:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a96:	e008      	b.n	8004aaa <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a98:	f7fd fe20 	bl	80026dc <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d901      	bls.n	8004aaa <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e02c      	b.n	8004b04 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aaa:	4b18      	ldr	r3, [pc, #96]	@ (8004b0c <HAL_RCC_OscConfig+0x82c>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d0f0      	beq.n	8004a98 <HAL_RCC_OscConfig+0x7b8>
 8004ab6:	e024      	b.n	8004b02 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	2b0c      	cmp	r3, #12
 8004abc:	d01f      	beq.n	8004afe <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004abe:	4b13      	ldr	r3, [pc, #76]	@ (8004b0c <HAL_RCC_OscConfig+0x82c>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a12      	ldr	r2, [pc, #72]	@ (8004b0c <HAL_RCC_OscConfig+0x82c>)
 8004ac4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ac8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aca:	f7fd fe07 	bl	80026dc <HAL_GetTick>
 8004ace:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ad0:	e008      	b.n	8004ae4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ad2:	f7fd fe03 	bl	80026dc <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d901      	bls.n	8004ae4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e00f      	b.n	8004b04 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ae4:	4b09      	ldr	r3, [pc, #36]	@ (8004b0c <HAL_RCC_OscConfig+0x82c>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d1f0      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004af0:	4b06      	ldr	r3, [pc, #24]	@ (8004b0c <HAL_RCC_OscConfig+0x82c>)
 8004af2:	68da      	ldr	r2, [r3, #12]
 8004af4:	4905      	ldr	r1, [pc, #20]	@ (8004b0c <HAL_RCC_OscConfig+0x82c>)
 8004af6:	4b06      	ldr	r3, [pc, #24]	@ (8004b10 <HAL_RCC_OscConfig+0x830>)
 8004af8:	4013      	ands	r3, r2
 8004afa:	60cb      	str	r3, [r1, #12]
 8004afc:	e001      	b.n	8004b02 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e000      	b.n	8004b04 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3720      	adds	r7, #32
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	40021000 	.word	0x40021000
 8004b10:	feeefffc 	.word	0xfeeefffc

08004b14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d101      	bne.n	8004b2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e11d      	b.n	8004d68 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b2c:	4b90      	ldr	r3, [pc, #576]	@ (8004d70 <HAL_RCC_ClockConfig+0x25c>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 030f 	and.w	r3, r3, #15
 8004b34:	683a      	ldr	r2, [r7, #0]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d910      	bls.n	8004b5c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b3a:	4b8d      	ldr	r3, [pc, #564]	@ (8004d70 <HAL_RCC_ClockConfig+0x25c>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f023 020f 	bic.w	r2, r3, #15
 8004b42:	498b      	ldr	r1, [pc, #556]	@ (8004d70 <HAL_RCC_ClockConfig+0x25c>)
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b4a:	4b89      	ldr	r3, [pc, #548]	@ (8004d70 <HAL_RCC_ClockConfig+0x25c>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 030f 	and.w	r3, r3, #15
 8004b52:	683a      	ldr	r2, [r7, #0]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d001      	beq.n	8004b5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e105      	b.n	8004d68 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0302 	and.w	r3, r3, #2
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d010      	beq.n	8004b8a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	689a      	ldr	r2, [r3, #8]
 8004b6c:	4b81      	ldr	r3, [pc, #516]	@ (8004d74 <HAL_RCC_ClockConfig+0x260>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d908      	bls.n	8004b8a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b78:	4b7e      	ldr	r3, [pc, #504]	@ (8004d74 <HAL_RCC_ClockConfig+0x260>)
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	497b      	ldr	r1, [pc, #492]	@ (8004d74 <HAL_RCC_ClockConfig+0x260>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d079      	beq.n	8004c8a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	2b03      	cmp	r3, #3
 8004b9c:	d11e      	bne.n	8004bdc <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b9e:	4b75      	ldr	r3, [pc, #468]	@ (8004d74 <HAL_RCC_ClockConfig+0x260>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d101      	bne.n	8004bae <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e0dc      	b.n	8004d68 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004bae:	f000 fa09 	bl	8004fc4 <RCC_GetSysClockFreqFromPLLSource>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	4a70      	ldr	r2, [pc, #448]	@ (8004d78 <HAL_RCC_ClockConfig+0x264>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d946      	bls.n	8004c48 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004bba:	4b6e      	ldr	r3, [pc, #440]	@ (8004d74 <HAL_RCC_ClockConfig+0x260>)
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d140      	bne.n	8004c48 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004bc6:	4b6b      	ldr	r3, [pc, #428]	@ (8004d74 <HAL_RCC_ClockConfig+0x260>)
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004bce:	4a69      	ldr	r2, [pc, #420]	@ (8004d74 <HAL_RCC_ClockConfig+0x260>)
 8004bd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bd4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004bd6:	2380      	movs	r3, #128	@ 0x80
 8004bd8:	617b      	str	r3, [r7, #20]
 8004bda:	e035      	b.n	8004c48 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d107      	bne.n	8004bf4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004be4:	4b63      	ldr	r3, [pc, #396]	@ (8004d74 <HAL_RCC_ClockConfig+0x260>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d115      	bne.n	8004c1c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e0b9      	b.n	8004d68 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d107      	bne.n	8004c0c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004bfc:	4b5d      	ldr	r3, [pc, #372]	@ (8004d74 <HAL_RCC_ClockConfig+0x260>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0302 	and.w	r3, r3, #2
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d109      	bne.n	8004c1c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e0ad      	b.n	8004d68 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c0c:	4b59      	ldr	r3, [pc, #356]	@ (8004d74 <HAL_RCC_ClockConfig+0x260>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d101      	bne.n	8004c1c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e0a5      	b.n	8004d68 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004c1c:	f000 f8b4 	bl	8004d88 <HAL_RCC_GetSysClockFreq>
 8004c20:	4603      	mov	r3, r0
 8004c22:	4a55      	ldr	r2, [pc, #340]	@ (8004d78 <HAL_RCC_ClockConfig+0x264>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d90f      	bls.n	8004c48 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004c28:	4b52      	ldr	r3, [pc, #328]	@ (8004d74 <HAL_RCC_ClockConfig+0x260>)
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d109      	bne.n	8004c48 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004c34:	4b4f      	ldr	r3, [pc, #316]	@ (8004d74 <HAL_RCC_ClockConfig+0x260>)
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c3c:	4a4d      	ldr	r2, [pc, #308]	@ (8004d74 <HAL_RCC_ClockConfig+0x260>)
 8004c3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c42:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004c44:	2380      	movs	r3, #128	@ 0x80
 8004c46:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c48:	4b4a      	ldr	r3, [pc, #296]	@ (8004d74 <HAL_RCC_ClockConfig+0x260>)
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f023 0203 	bic.w	r2, r3, #3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	4947      	ldr	r1, [pc, #284]	@ (8004d74 <HAL_RCC_ClockConfig+0x260>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c5a:	f7fd fd3f 	bl	80026dc <HAL_GetTick>
 8004c5e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c60:	e00a      	b.n	8004c78 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c62:	f7fd fd3b 	bl	80026dc <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d901      	bls.n	8004c78 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e077      	b.n	8004d68 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c78:	4b3e      	ldr	r3, [pc, #248]	@ (8004d74 <HAL_RCC_ClockConfig+0x260>)
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f003 020c 	and.w	r2, r3, #12
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d1eb      	bne.n	8004c62 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	2b80      	cmp	r3, #128	@ 0x80
 8004c8e:	d105      	bne.n	8004c9c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004c90:	4b38      	ldr	r3, [pc, #224]	@ (8004d74 <HAL_RCC_ClockConfig+0x260>)
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	4a37      	ldr	r2, [pc, #220]	@ (8004d74 <HAL_RCC_ClockConfig+0x260>)
 8004c96:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c9a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d010      	beq.n	8004cca <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689a      	ldr	r2, [r3, #8]
 8004cac:	4b31      	ldr	r3, [pc, #196]	@ (8004d74 <HAL_RCC_ClockConfig+0x260>)
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d208      	bcs.n	8004cca <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cb8:	4b2e      	ldr	r3, [pc, #184]	@ (8004d74 <HAL_RCC_ClockConfig+0x260>)
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	492b      	ldr	r1, [pc, #172]	@ (8004d74 <HAL_RCC_ClockConfig+0x260>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cca:	4b29      	ldr	r3, [pc, #164]	@ (8004d70 <HAL_RCC_ClockConfig+0x25c>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 030f 	and.w	r3, r3, #15
 8004cd2:	683a      	ldr	r2, [r7, #0]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d210      	bcs.n	8004cfa <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cd8:	4b25      	ldr	r3, [pc, #148]	@ (8004d70 <HAL_RCC_ClockConfig+0x25c>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f023 020f 	bic.w	r2, r3, #15
 8004ce0:	4923      	ldr	r1, [pc, #140]	@ (8004d70 <HAL_RCC_ClockConfig+0x25c>)
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ce8:	4b21      	ldr	r3, [pc, #132]	@ (8004d70 <HAL_RCC_ClockConfig+0x25c>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 030f 	and.w	r3, r3, #15
 8004cf0:	683a      	ldr	r2, [r7, #0]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d001      	beq.n	8004cfa <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e036      	b.n	8004d68 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0304 	and.w	r3, r3, #4
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d008      	beq.n	8004d18 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d06:	4b1b      	ldr	r3, [pc, #108]	@ (8004d74 <HAL_RCC_ClockConfig+0x260>)
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	4918      	ldr	r1, [pc, #96]	@ (8004d74 <HAL_RCC_ClockConfig+0x260>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0308 	and.w	r3, r3, #8
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d009      	beq.n	8004d38 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d24:	4b13      	ldr	r3, [pc, #76]	@ (8004d74 <HAL_RCC_ClockConfig+0x260>)
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	00db      	lsls	r3, r3, #3
 8004d32:	4910      	ldr	r1, [pc, #64]	@ (8004d74 <HAL_RCC_ClockConfig+0x260>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d38:	f000 f826 	bl	8004d88 <HAL_RCC_GetSysClockFreq>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8004d74 <HAL_RCC_ClockConfig+0x260>)
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	091b      	lsrs	r3, r3, #4
 8004d44:	f003 030f 	and.w	r3, r3, #15
 8004d48:	490c      	ldr	r1, [pc, #48]	@ (8004d7c <HAL_RCC_ClockConfig+0x268>)
 8004d4a:	5ccb      	ldrb	r3, [r1, r3]
 8004d4c:	f003 031f 	and.w	r3, r3, #31
 8004d50:	fa22 f303 	lsr.w	r3, r2, r3
 8004d54:	4a0a      	ldr	r2, [pc, #40]	@ (8004d80 <HAL_RCC_ClockConfig+0x26c>)
 8004d56:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004d58:	4b0a      	ldr	r3, [pc, #40]	@ (8004d84 <HAL_RCC_ClockConfig+0x270>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7fd fc6d 	bl	800263c <HAL_InitTick>
 8004d62:	4603      	mov	r3, r0
 8004d64:	73fb      	strb	r3, [r7, #15]

  return status;
 8004d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3718      	adds	r7, #24
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	40022000 	.word	0x40022000
 8004d74:	40021000 	.word	0x40021000
 8004d78:	04c4b400 	.word	0x04c4b400
 8004d7c:	0800d26c 	.word	0x0800d26c
 8004d80:	2000000c 	.word	0x2000000c
 8004d84:	20000044 	.word	0x20000044

08004d88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b089      	sub	sp, #36	@ 0x24
 8004d8c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	61fb      	str	r3, [r7, #28]
 8004d92:	2300      	movs	r3, #0
 8004d94:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d96:	4b3e      	ldr	r3, [pc, #248]	@ (8004e90 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f003 030c 	and.w	r3, r3, #12
 8004d9e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004da0:	4b3b      	ldr	r3, [pc, #236]	@ (8004e90 <HAL_RCC_GetSysClockFreq+0x108>)
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	f003 0303 	and.w	r3, r3, #3
 8004da8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d005      	beq.n	8004dbc <HAL_RCC_GetSysClockFreq+0x34>
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	2b0c      	cmp	r3, #12
 8004db4:	d121      	bne.n	8004dfa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d11e      	bne.n	8004dfa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004dbc:	4b34      	ldr	r3, [pc, #208]	@ (8004e90 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0308 	and.w	r3, r3, #8
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d107      	bne.n	8004dd8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004dc8:	4b31      	ldr	r3, [pc, #196]	@ (8004e90 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dce:	0a1b      	lsrs	r3, r3, #8
 8004dd0:	f003 030f 	and.w	r3, r3, #15
 8004dd4:	61fb      	str	r3, [r7, #28]
 8004dd6:	e005      	b.n	8004de4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004dd8:	4b2d      	ldr	r3, [pc, #180]	@ (8004e90 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	091b      	lsrs	r3, r3, #4
 8004dde:	f003 030f 	and.w	r3, r3, #15
 8004de2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004de4:	4a2b      	ldr	r2, [pc, #172]	@ (8004e94 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d10d      	bne.n	8004e10 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004df8:	e00a      	b.n	8004e10 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	2b04      	cmp	r3, #4
 8004dfe:	d102      	bne.n	8004e06 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004e00:	4b25      	ldr	r3, [pc, #148]	@ (8004e98 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e02:	61bb      	str	r3, [r7, #24]
 8004e04:	e004      	b.n	8004e10 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	2b08      	cmp	r3, #8
 8004e0a:	d101      	bne.n	8004e10 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004e0c:	4b23      	ldr	r3, [pc, #140]	@ (8004e9c <HAL_RCC_GetSysClockFreq+0x114>)
 8004e0e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	2b0c      	cmp	r3, #12
 8004e14:	d134      	bne.n	8004e80 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e16:	4b1e      	ldr	r3, [pc, #120]	@ (8004e90 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	f003 0303 	and.w	r3, r3, #3
 8004e1e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d003      	beq.n	8004e2e <HAL_RCC_GetSysClockFreq+0xa6>
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	2b03      	cmp	r3, #3
 8004e2a:	d003      	beq.n	8004e34 <HAL_RCC_GetSysClockFreq+0xac>
 8004e2c:	e005      	b.n	8004e3a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004e2e:	4b1a      	ldr	r3, [pc, #104]	@ (8004e98 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e30:	617b      	str	r3, [r7, #20]
      break;
 8004e32:	e005      	b.n	8004e40 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004e34:	4b19      	ldr	r3, [pc, #100]	@ (8004e9c <HAL_RCC_GetSysClockFreq+0x114>)
 8004e36:	617b      	str	r3, [r7, #20]
      break;
 8004e38:	e002      	b.n	8004e40 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	617b      	str	r3, [r7, #20]
      break;
 8004e3e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e40:	4b13      	ldr	r3, [pc, #76]	@ (8004e90 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	091b      	lsrs	r3, r3, #4
 8004e46:	f003 030f 	and.w	r3, r3, #15
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004e4e:	4b10      	ldr	r3, [pc, #64]	@ (8004e90 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	0a1b      	lsrs	r3, r3, #8
 8004e54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e58:	697a      	ldr	r2, [r7, #20]
 8004e5a:	fb03 f202 	mul.w	r2, r3, r2
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e64:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e66:	4b0a      	ldr	r3, [pc, #40]	@ (8004e90 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	0e5b      	lsrs	r3, r3, #25
 8004e6c:	f003 0303 	and.w	r3, r3, #3
 8004e70:	3301      	adds	r3, #1
 8004e72:	005b      	lsls	r3, r3, #1
 8004e74:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e7e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004e80:	69bb      	ldr	r3, [r7, #24]
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3724      	adds	r7, #36	@ 0x24
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	40021000 	.word	0x40021000
 8004e94:	0800d284 	.word	0x0800d284
 8004e98:	00f42400 	.word	0x00f42400
 8004e9c:	007a1200 	.word	0x007a1200

08004ea0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ea4:	4b03      	ldr	r3, [pc, #12]	@ (8004eb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	2000000c 	.word	0x2000000c

08004eb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004ebc:	f7ff fff0 	bl	8004ea0 <HAL_RCC_GetHCLKFreq>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	4b06      	ldr	r3, [pc, #24]	@ (8004edc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	0a1b      	lsrs	r3, r3, #8
 8004ec8:	f003 0307 	and.w	r3, r3, #7
 8004ecc:	4904      	ldr	r1, [pc, #16]	@ (8004ee0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ece:	5ccb      	ldrb	r3, [r1, r3]
 8004ed0:	f003 031f 	and.w	r3, r3, #31
 8004ed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	40021000 	.word	0x40021000
 8004ee0:	0800d27c 	.word	0x0800d27c

08004ee4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004ee8:	f7ff ffda 	bl	8004ea0 <HAL_RCC_GetHCLKFreq>
 8004eec:	4602      	mov	r2, r0
 8004eee:	4b06      	ldr	r3, [pc, #24]	@ (8004f08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	0adb      	lsrs	r3, r3, #11
 8004ef4:	f003 0307 	and.w	r3, r3, #7
 8004ef8:	4904      	ldr	r1, [pc, #16]	@ (8004f0c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004efa:	5ccb      	ldrb	r3, [r1, r3]
 8004efc:	f003 031f 	and.w	r3, r3, #31
 8004f00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	40021000 	.word	0x40021000
 8004f0c:	0800d27c 	.word	0x0800d27c

08004f10 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b086      	sub	sp, #24
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004f18:	2300      	movs	r3, #0
 8004f1a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004f1c:	4b27      	ldr	r3, [pc, #156]	@ (8004fbc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004f1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d003      	beq.n	8004f30 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004f28:	f7ff f916 	bl	8004158 <HAL_PWREx_GetVoltageRange>
 8004f2c:	6178      	str	r0, [r7, #20]
 8004f2e:	e014      	b.n	8004f5a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f30:	4b22      	ldr	r3, [pc, #136]	@ (8004fbc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004f32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f34:	4a21      	ldr	r2, [pc, #132]	@ (8004fbc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004f36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f3c:	4b1f      	ldr	r3, [pc, #124]	@ (8004fbc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f44:	60fb      	str	r3, [r7, #12]
 8004f46:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004f48:	f7ff f906 	bl	8004158 <HAL_PWREx_GetVoltageRange>
 8004f4c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004f4e:	4b1b      	ldr	r3, [pc, #108]	@ (8004fbc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f52:	4a1a      	ldr	r2, [pc, #104]	@ (8004fbc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004f54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f58:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f60:	d10b      	bne.n	8004f7a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2b80      	cmp	r3, #128	@ 0x80
 8004f66:	d913      	bls.n	8004f90 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2ba0      	cmp	r3, #160	@ 0xa0
 8004f6c:	d902      	bls.n	8004f74 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f6e:	2302      	movs	r3, #2
 8004f70:	613b      	str	r3, [r7, #16]
 8004f72:	e00d      	b.n	8004f90 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f74:	2301      	movs	r3, #1
 8004f76:	613b      	str	r3, [r7, #16]
 8004f78:	e00a      	b.n	8004f90 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f7e:	d902      	bls.n	8004f86 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004f80:	2302      	movs	r3, #2
 8004f82:	613b      	str	r3, [r7, #16]
 8004f84:	e004      	b.n	8004f90 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2b70      	cmp	r3, #112	@ 0x70
 8004f8a:	d101      	bne.n	8004f90 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004f90:	4b0b      	ldr	r3, [pc, #44]	@ (8004fc0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f023 020f 	bic.w	r2, r3, #15
 8004f98:	4909      	ldr	r1, [pc, #36]	@ (8004fc0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004fa0:	4b07      	ldr	r3, [pc, #28]	@ (8004fc0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 030f 	and.w	r3, r3, #15
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d001      	beq.n	8004fb2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e000      	b.n	8004fb4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3718      	adds	r7, #24
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	40021000 	.word	0x40021000
 8004fc0:	40022000 	.word	0x40022000

08004fc4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b087      	sub	sp, #28
 8004fc8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004fca:	4b2d      	ldr	r3, [pc, #180]	@ (8005080 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	f003 0303 	and.w	r3, r3, #3
 8004fd2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2b03      	cmp	r3, #3
 8004fd8:	d00b      	beq.n	8004ff2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2b03      	cmp	r3, #3
 8004fde:	d825      	bhi.n	800502c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d008      	beq.n	8004ff8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d11f      	bne.n	800502c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004fec:	4b25      	ldr	r3, [pc, #148]	@ (8005084 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004fee:	613b      	str	r3, [r7, #16]
    break;
 8004ff0:	e01f      	b.n	8005032 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004ff2:	4b25      	ldr	r3, [pc, #148]	@ (8005088 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004ff4:	613b      	str	r3, [r7, #16]
    break;
 8004ff6:	e01c      	b.n	8005032 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004ff8:	4b21      	ldr	r3, [pc, #132]	@ (8005080 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0308 	and.w	r3, r3, #8
 8005000:	2b00      	cmp	r3, #0
 8005002:	d107      	bne.n	8005014 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005004:	4b1e      	ldr	r3, [pc, #120]	@ (8005080 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005006:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800500a:	0a1b      	lsrs	r3, r3, #8
 800500c:	f003 030f 	and.w	r3, r3, #15
 8005010:	617b      	str	r3, [r7, #20]
 8005012:	e005      	b.n	8005020 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005014:	4b1a      	ldr	r3, [pc, #104]	@ (8005080 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	091b      	lsrs	r3, r3, #4
 800501a:	f003 030f 	and.w	r3, r3, #15
 800501e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005020:	4a1a      	ldr	r2, [pc, #104]	@ (800508c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005028:	613b      	str	r3, [r7, #16]
    break;
 800502a:	e002      	b.n	8005032 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800502c:	2300      	movs	r3, #0
 800502e:	613b      	str	r3, [r7, #16]
    break;
 8005030:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005032:	4b13      	ldr	r3, [pc, #76]	@ (8005080 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	091b      	lsrs	r3, r3, #4
 8005038:	f003 030f 	and.w	r3, r3, #15
 800503c:	3301      	adds	r3, #1
 800503e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005040:	4b0f      	ldr	r3, [pc, #60]	@ (8005080 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	0a1b      	lsrs	r3, r3, #8
 8005046:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800504a:	693a      	ldr	r2, [r7, #16]
 800504c:	fb03 f202 	mul.w	r2, r3, r2
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	fbb2 f3f3 	udiv	r3, r2, r3
 8005056:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005058:	4b09      	ldr	r3, [pc, #36]	@ (8005080 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	0e5b      	lsrs	r3, r3, #25
 800505e:	f003 0303 	and.w	r3, r3, #3
 8005062:	3301      	adds	r3, #1
 8005064:	005b      	lsls	r3, r3, #1
 8005066:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005068:	693a      	ldr	r2, [r7, #16]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005070:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005072:	683b      	ldr	r3, [r7, #0]
}
 8005074:	4618      	mov	r0, r3
 8005076:	371c      	adds	r7, #28
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr
 8005080:	40021000 	.word	0x40021000
 8005084:	00f42400 	.word	0x00f42400
 8005088:	007a1200 	.word	0x007a1200
 800508c:	0800d284 	.word	0x0800d284

08005090 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b086      	sub	sp, #24
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005098:	2300      	movs	r3, #0
 800509a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800509c:	2300      	movs	r3, #0
 800509e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d040      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050b0:	2b80      	cmp	r3, #128	@ 0x80
 80050b2:	d02a      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80050b4:	2b80      	cmp	r3, #128	@ 0x80
 80050b6:	d825      	bhi.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80050b8:	2b60      	cmp	r3, #96	@ 0x60
 80050ba:	d026      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80050bc:	2b60      	cmp	r3, #96	@ 0x60
 80050be:	d821      	bhi.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80050c0:	2b40      	cmp	r3, #64	@ 0x40
 80050c2:	d006      	beq.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80050c4:	2b40      	cmp	r3, #64	@ 0x40
 80050c6:	d81d      	bhi.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d009      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80050cc:	2b20      	cmp	r3, #32
 80050ce:	d010      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80050d0:	e018      	b.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80050d2:	4b89      	ldr	r3, [pc, #548]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	4a88      	ldr	r2, [pc, #544]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050dc:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80050de:	e015      	b.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	3304      	adds	r3, #4
 80050e4:	2100      	movs	r1, #0
 80050e6:	4618      	mov	r0, r3
 80050e8:	f000 fb02 	bl	80056f0 <RCCEx_PLLSAI1_Config>
 80050ec:	4603      	mov	r3, r0
 80050ee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80050f0:	e00c      	b.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	3320      	adds	r3, #32
 80050f6:	2100      	movs	r1, #0
 80050f8:	4618      	mov	r0, r3
 80050fa:	f000 fbed 	bl	80058d8 <RCCEx_PLLSAI2_Config>
 80050fe:	4603      	mov	r3, r0
 8005100:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005102:	e003      	b.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	74fb      	strb	r3, [r7, #19]
      break;
 8005108:	e000      	b.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800510a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800510c:	7cfb      	ldrb	r3, [r7, #19]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d10b      	bne.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005112:	4b79      	ldr	r3, [pc, #484]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005114:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005118:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005120:	4975      	ldr	r1, [pc, #468]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005122:	4313      	orrs	r3, r2
 8005124:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005128:	e001      	b.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800512a:	7cfb      	ldrb	r3, [r7, #19]
 800512c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d047      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800513e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005142:	d030      	beq.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005144:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005148:	d82a      	bhi.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800514a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800514e:	d02a      	beq.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005150:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005154:	d824      	bhi.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005156:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800515a:	d008      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800515c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005160:	d81e      	bhi.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00a      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005166:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800516a:	d010      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800516c:	e018      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800516e:	4b62      	ldr	r3, [pc, #392]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	4a61      	ldr	r2, [pc, #388]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005174:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005178:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800517a:	e015      	b.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	3304      	adds	r3, #4
 8005180:	2100      	movs	r1, #0
 8005182:	4618      	mov	r0, r3
 8005184:	f000 fab4 	bl	80056f0 <RCCEx_PLLSAI1_Config>
 8005188:	4603      	mov	r3, r0
 800518a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800518c:	e00c      	b.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	3320      	adds	r3, #32
 8005192:	2100      	movs	r1, #0
 8005194:	4618      	mov	r0, r3
 8005196:	f000 fb9f 	bl	80058d8 <RCCEx_PLLSAI2_Config>
 800519a:	4603      	mov	r3, r0
 800519c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800519e:	e003      	b.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	74fb      	strb	r3, [r7, #19]
      break;
 80051a4:	e000      	b.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80051a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051a8:	7cfb      	ldrb	r3, [r7, #19]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10b      	bne.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80051ae:	4b52      	ldr	r3, [pc, #328]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80051b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051bc:	494e      	ldr	r1, [pc, #312]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80051c4:	e001      	b.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051c6:	7cfb      	ldrb	r3, [r7, #19]
 80051c8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	f000 809f 	beq.w	8005316 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051d8:	2300      	movs	r3, #0
 80051da:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80051dc:	4b46      	ldr	r3, [pc, #280]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d101      	bne.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80051e8:	2301      	movs	r3, #1
 80051ea:	e000      	b.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80051ec:	2300      	movs	r3, #0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00d      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051f2:	4b41      	ldr	r3, [pc, #260]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051f6:	4a40      	ldr	r2, [pc, #256]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80051fe:	4b3e      	ldr	r3, [pc, #248]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005202:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005206:	60bb      	str	r3, [r7, #8]
 8005208:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800520a:	2301      	movs	r3, #1
 800520c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800520e:	4b3b      	ldr	r3, [pc, #236]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a3a      	ldr	r2, [pc, #232]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005214:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005218:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800521a:	f7fd fa5f 	bl	80026dc <HAL_GetTick>
 800521e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005220:	e009      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005222:	f7fd fa5b 	bl	80026dc <HAL_GetTick>
 8005226:	4602      	mov	r2, r0
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	2b02      	cmp	r3, #2
 800522e:	d902      	bls.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	74fb      	strb	r3, [r7, #19]
        break;
 8005234:	e005      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005236:	4b31      	ldr	r3, [pc, #196]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800523e:	2b00      	cmp	r3, #0
 8005240:	d0ef      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005242:	7cfb      	ldrb	r3, [r7, #19]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d15b      	bne.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005248:	4b2b      	ldr	r3, [pc, #172]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800524a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800524e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005252:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d01f      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005260:	697a      	ldr	r2, [r7, #20]
 8005262:	429a      	cmp	r2, r3
 8005264:	d019      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005266:	4b24      	ldr	r3, [pc, #144]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005268:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800526c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005270:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005272:	4b21      	ldr	r3, [pc, #132]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005274:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005278:	4a1f      	ldr	r2, [pc, #124]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800527a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800527e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005282:	4b1d      	ldr	r3, [pc, #116]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005284:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005288:	4a1b      	ldr	r2, [pc, #108]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800528a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800528e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005292:	4a19      	ldr	r2, [pc, #100]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	f003 0301 	and.w	r3, r3, #1
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d016      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a4:	f7fd fa1a 	bl	80026dc <HAL_GetTick>
 80052a8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052aa:	e00b      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052ac:	f7fd fa16 	bl	80026dc <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d902      	bls.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	74fb      	strb	r3, [r7, #19]
            break;
 80052c2:	e006      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052c4:	4b0c      	ldr	r3, [pc, #48]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052ca:	f003 0302 	and.w	r3, r3, #2
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d0ec      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80052d2:	7cfb      	ldrb	r3, [r7, #19]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d10c      	bne.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052d8:	4b07      	ldr	r3, [pc, #28]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052de:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052e8:	4903      	ldr	r1, [pc, #12]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80052f0:	e008      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80052f2:	7cfb      	ldrb	r3, [r7, #19]
 80052f4:	74bb      	strb	r3, [r7, #18]
 80052f6:	e005      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80052f8:	40021000 	.word	0x40021000
 80052fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005300:	7cfb      	ldrb	r3, [r7, #19]
 8005302:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005304:	7c7b      	ldrb	r3, [r7, #17]
 8005306:	2b01      	cmp	r3, #1
 8005308:	d105      	bne.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800530a:	4ba0      	ldr	r3, [pc, #640]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800530c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800530e:	4a9f      	ldr	r2, [pc, #636]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005310:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005314:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0301 	and.w	r3, r3, #1
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00a      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005322:	4b9a      	ldr	r3, [pc, #616]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005324:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005328:	f023 0203 	bic.w	r2, r3, #3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005330:	4996      	ldr	r1, [pc, #600]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005332:	4313      	orrs	r3, r2
 8005334:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0302 	and.w	r3, r3, #2
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00a      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005344:	4b91      	ldr	r3, [pc, #580]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005346:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800534a:	f023 020c 	bic.w	r2, r3, #12
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005352:	498e      	ldr	r1, [pc, #568]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005354:	4313      	orrs	r3, r2
 8005356:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0304 	and.w	r3, r3, #4
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00a      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005366:	4b89      	ldr	r3, [pc, #548]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005368:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800536c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005374:	4985      	ldr	r1, [pc, #532]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005376:	4313      	orrs	r3, r2
 8005378:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0308 	and.w	r3, r3, #8
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00a      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005388:	4b80      	ldr	r3, [pc, #512]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800538a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800538e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005396:	497d      	ldr	r1, [pc, #500]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005398:	4313      	orrs	r3, r2
 800539a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0310 	and.w	r3, r3, #16
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00a      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80053aa:	4b78      	ldr	r3, [pc, #480]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053b8:	4974      	ldr	r1, [pc, #464]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053ba:	4313      	orrs	r3, r2
 80053bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0320 	and.w	r3, r3, #32
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d00a      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053cc:	4b6f      	ldr	r3, [pc, #444]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053d2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053da:	496c      	ldr	r1, [pc, #432]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053dc:	4313      	orrs	r3, r2
 80053de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00a      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053ee:	4b67      	ldr	r3, [pc, #412]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053f4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053fc:	4963      	ldr	r1, [pc, #396]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800540c:	2b00      	cmp	r3, #0
 800540e:	d00a      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005410:	4b5e      	ldr	r3, [pc, #376]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005416:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800541e:	495b      	ldr	r1, [pc, #364]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005420:	4313      	orrs	r3, r2
 8005422:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00a      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005432:	4b56      	ldr	r3, [pc, #344]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005434:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005438:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005440:	4952      	ldr	r1, [pc, #328]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005442:	4313      	orrs	r3, r2
 8005444:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005450:	2b00      	cmp	r3, #0
 8005452:	d00a      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005454:	4b4d      	ldr	r3, [pc, #308]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005456:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800545a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005462:	494a      	ldr	r1, [pc, #296]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005464:	4313      	orrs	r3, r2
 8005466:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00a      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005476:	4b45      	ldr	r3, [pc, #276]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005478:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800547c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005484:	4941      	ldr	r1, [pc, #260]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005486:	4313      	orrs	r3, r2
 8005488:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d00a      	beq.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005498:	4b3c      	ldr	r3, [pc, #240]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800549a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800549e:	f023 0203 	bic.w	r2, r3, #3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054a6:	4939      	ldr	r1, [pc, #228]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054a8:	4313      	orrs	r3, r2
 80054aa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d028      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054ba:	4b34      	ldr	r3, [pc, #208]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054c0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054c8:	4930      	ldr	r1, [pc, #192]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054d8:	d106      	bne.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054da:	4b2c      	ldr	r3, [pc, #176]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	4a2b      	ldr	r2, [pc, #172]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80054e4:	60d3      	str	r3, [r2, #12]
 80054e6:	e011      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80054f0:	d10c      	bne.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	3304      	adds	r3, #4
 80054f6:	2101      	movs	r1, #1
 80054f8:	4618      	mov	r0, r3
 80054fa:	f000 f8f9 	bl	80056f0 <RCCEx_PLLSAI1_Config>
 80054fe:	4603      	mov	r3, r0
 8005500:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005502:	7cfb      	ldrb	r3, [r7, #19]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d001      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005508:	7cfb      	ldrb	r3, [r7, #19]
 800550a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d04d      	beq.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800551c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005520:	d108      	bne.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005522:	4b1a      	ldr	r3, [pc, #104]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005524:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005528:	4a18      	ldr	r2, [pc, #96]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800552a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800552e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8005532:	e012      	b.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005534:	4b15      	ldr	r3, [pc, #84]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005536:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800553a:	4a14      	ldr	r2, [pc, #80]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800553c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005540:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8005544:	4b11      	ldr	r3, [pc, #68]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800554a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005552:	490e      	ldr	r1, [pc, #56]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005554:	4313      	orrs	r3, r2
 8005556:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800555e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005562:	d106      	bne.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005564:	4b09      	ldr	r3, [pc, #36]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	4a08      	ldr	r2, [pc, #32]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800556a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800556e:	60d3      	str	r3, [r2, #12]
 8005570:	e020      	b.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005576:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800557a:	d109      	bne.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800557c:	4b03      	ldr	r3, [pc, #12]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	4a02      	ldr	r2, [pc, #8]	@ (800558c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005582:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005586:	60d3      	str	r3, [r2, #12]
 8005588:	e014      	b.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800558a:	bf00      	nop
 800558c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005594:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005598:	d10c      	bne.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	3304      	adds	r3, #4
 800559e:	2101      	movs	r1, #1
 80055a0:	4618      	mov	r0, r3
 80055a2:	f000 f8a5 	bl	80056f0 <RCCEx_PLLSAI1_Config>
 80055a6:	4603      	mov	r3, r0
 80055a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055aa:	7cfb      	ldrb	r3, [r7, #19]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d001      	beq.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80055b0:	7cfb      	ldrb	r3, [r7, #19]
 80055b2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d028      	beq.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055c0:	4b4a      	ldr	r3, [pc, #296]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055c6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80055ce:	4947      	ldr	r1, [pc, #284]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80055da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80055de:	d106      	bne.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055e0:	4b42      	ldr	r3, [pc, #264]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	4a41      	ldr	r2, [pc, #260]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80055ea:	60d3      	str	r3, [r2, #12]
 80055ec:	e011      	b.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80055f2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80055f6:	d10c      	bne.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	3304      	adds	r3, #4
 80055fc:	2101      	movs	r1, #1
 80055fe:	4618      	mov	r0, r3
 8005600:	f000 f876 	bl	80056f0 <RCCEx_PLLSAI1_Config>
 8005604:	4603      	mov	r3, r0
 8005606:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005608:	7cfb      	ldrb	r3, [r7, #19]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d001      	beq.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800560e:	7cfb      	ldrb	r3, [r7, #19]
 8005610:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d01e      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800561e:	4b33      	ldr	r3, [pc, #204]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005620:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005624:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800562e:	492f      	ldr	r1, [pc, #188]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005630:	4313      	orrs	r3, r2
 8005632:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800563c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005640:	d10c      	bne.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	3304      	adds	r3, #4
 8005646:	2102      	movs	r1, #2
 8005648:	4618      	mov	r0, r3
 800564a:	f000 f851 	bl	80056f0 <RCCEx_PLLSAI1_Config>
 800564e:	4603      	mov	r3, r0
 8005650:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005652:	7cfb      	ldrb	r3, [r7, #19]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d001      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005658:	7cfb      	ldrb	r3, [r7, #19]
 800565a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005664:	2b00      	cmp	r3, #0
 8005666:	d00b      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005668:	4b20      	ldr	r3, [pc, #128]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800566a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800566e:	f023 0204 	bic.w	r2, r3, #4
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005678:	491c      	ldr	r1, [pc, #112]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800567a:	4313      	orrs	r3, r2
 800567c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00b      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800568c:	4b17      	ldr	r3, [pc, #92]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800568e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005692:	f023 0218 	bic.w	r2, r3, #24
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800569c:	4913      	ldr	r1, [pc, #76]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d017      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80056b0:	4b0e      	ldr	r3, [pc, #56]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80056b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80056c0:	490a      	ldr	r1, [pc, #40]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80056ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80056d2:	d105      	bne.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056d4:	4b05      	ldr	r3, [pc, #20]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	4a04      	ldr	r2, [pc, #16]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056de:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80056e0:	7cbb      	ldrb	r3, [r7, #18]
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3718      	adds	r7, #24
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	40021000 	.word	0x40021000

080056f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056fa:	2300      	movs	r3, #0
 80056fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80056fe:	4b72      	ldr	r3, [pc, #456]	@ (80058c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	f003 0303 	and.w	r3, r3, #3
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00e      	beq.n	8005728 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800570a:	4b6f      	ldr	r3, [pc, #444]	@ (80058c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	f003 0203 	and.w	r2, r3, #3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	429a      	cmp	r2, r3
 8005718:	d103      	bne.n	8005722 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
       ||
 800571e:	2b00      	cmp	r3, #0
 8005720:	d142      	bne.n	80057a8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	73fb      	strb	r3, [r7, #15]
 8005726:	e03f      	b.n	80057a8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2b03      	cmp	r3, #3
 800572e:	d018      	beq.n	8005762 <RCCEx_PLLSAI1_Config+0x72>
 8005730:	2b03      	cmp	r3, #3
 8005732:	d825      	bhi.n	8005780 <RCCEx_PLLSAI1_Config+0x90>
 8005734:	2b01      	cmp	r3, #1
 8005736:	d002      	beq.n	800573e <RCCEx_PLLSAI1_Config+0x4e>
 8005738:	2b02      	cmp	r3, #2
 800573a:	d009      	beq.n	8005750 <RCCEx_PLLSAI1_Config+0x60>
 800573c:	e020      	b.n	8005780 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800573e:	4b62      	ldr	r3, [pc, #392]	@ (80058c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0302 	and.w	r3, r3, #2
 8005746:	2b00      	cmp	r3, #0
 8005748:	d11d      	bne.n	8005786 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800574e:	e01a      	b.n	8005786 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005750:	4b5d      	ldr	r3, [pc, #372]	@ (80058c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005758:	2b00      	cmp	r3, #0
 800575a:	d116      	bne.n	800578a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005760:	e013      	b.n	800578a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005762:	4b59      	ldr	r3, [pc, #356]	@ (80058c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800576a:	2b00      	cmp	r3, #0
 800576c:	d10f      	bne.n	800578e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800576e:	4b56      	ldr	r3, [pc, #344]	@ (80058c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d109      	bne.n	800578e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800577e:	e006      	b.n	800578e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	73fb      	strb	r3, [r7, #15]
      break;
 8005784:	e004      	b.n	8005790 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005786:	bf00      	nop
 8005788:	e002      	b.n	8005790 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800578a:	bf00      	nop
 800578c:	e000      	b.n	8005790 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800578e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005790:	7bfb      	ldrb	r3, [r7, #15]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d108      	bne.n	80057a8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005796:	4b4c      	ldr	r3, [pc, #304]	@ (80058c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	f023 0203 	bic.w	r2, r3, #3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4949      	ldr	r1, [pc, #292]	@ (80058c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057a4:	4313      	orrs	r3, r2
 80057a6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80057a8:	7bfb      	ldrb	r3, [r7, #15]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	f040 8086 	bne.w	80058bc <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80057b0:	4b45      	ldr	r3, [pc, #276]	@ (80058c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a44      	ldr	r2, [pc, #272]	@ (80058c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80057ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057bc:	f7fc ff8e 	bl	80026dc <HAL_GetTick>
 80057c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80057c2:	e009      	b.n	80057d8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80057c4:	f7fc ff8a 	bl	80026dc <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d902      	bls.n	80057d8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	73fb      	strb	r3, [r7, #15]
        break;
 80057d6:	e005      	b.n	80057e4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80057d8:	4b3b      	ldr	r3, [pc, #236]	@ (80058c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1ef      	bne.n	80057c4 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80057e4:	7bfb      	ldrb	r3, [r7, #15]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d168      	bne.n	80058bc <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d113      	bne.n	8005818 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057f0:	4b35      	ldr	r3, [pc, #212]	@ (80058c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057f2:	691a      	ldr	r2, [r3, #16]
 80057f4:	4b35      	ldr	r3, [pc, #212]	@ (80058cc <RCCEx_PLLSAI1_Config+0x1dc>)
 80057f6:	4013      	ands	r3, r2
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	6892      	ldr	r2, [r2, #8]
 80057fc:	0211      	lsls	r1, r2, #8
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	68d2      	ldr	r2, [r2, #12]
 8005802:	06d2      	lsls	r2, r2, #27
 8005804:	4311      	orrs	r1, r2
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	6852      	ldr	r2, [r2, #4]
 800580a:	3a01      	subs	r2, #1
 800580c:	0112      	lsls	r2, r2, #4
 800580e:	430a      	orrs	r2, r1
 8005810:	492d      	ldr	r1, [pc, #180]	@ (80058c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005812:	4313      	orrs	r3, r2
 8005814:	610b      	str	r3, [r1, #16]
 8005816:	e02d      	b.n	8005874 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	2b01      	cmp	r3, #1
 800581c:	d115      	bne.n	800584a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800581e:	4b2a      	ldr	r3, [pc, #168]	@ (80058c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005820:	691a      	ldr	r2, [r3, #16]
 8005822:	4b2b      	ldr	r3, [pc, #172]	@ (80058d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005824:	4013      	ands	r3, r2
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	6892      	ldr	r2, [r2, #8]
 800582a:	0211      	lsls	r1, r2, #8
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	6912      	ldr	r2, [r2, #16]
 8005830:	0852      	lsrs	r2, r2, #1
 8005832:	3a01      	subs	r2, #1
 8005834:	0552      	lsls	r2, r2, #21
 8005836:	4311      	orrs	r1, r2
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	6852      	ldr	r2, [r2, #4]
 800583c:	3a01      	subs	r2, #1
 800583e:	0112      	lsls	r2, r2, #4
 8005840:	430a      	orrs	r2, r1
 8005842:	4921      	ldr	r1, [pc, #132]	@ (80058c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005844:	4313      	orrs	r3, r2
 8005846:	610b      	str	r3, [r1, #16]
 8005848:	e014      	b.n	8005874 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800584a:	4b1f      	ldr	r3, [pc, #124]	@ (80058c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800584c:	691a      	ldr	r2, [r3, #16]
 800584e:	4b21      	ldr	r3, [pc, #132]	@ (80058d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005850:	4013      	ands	r3, r2
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	6892      	ldr	r2, [r2, #8]
 8005856:	0211      	lsls	r1, r2, #8
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	6952      	ldr	r2, [r2, #20]
 800585c:	0852      	lsrs	r2, r2, #1
 800585e:	3a01      	subs	r2, #1
 8005860:	0652      	lsls	r2, r2, #25
 8005862:	4311      	orrs	r1, r2
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	6852      	ldr	r2, [r2, #4]
 8005868:	3a01      	subs	r2, #1
 800586a:	0112      	lsls	r2, r2, #4
 800586c:	430a      	orrs	r2, r1
 800586e:	4916      	ldr	r1, [pc, #88]	@ (80058c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005870:	4313      	orrs	r3, r2
 8005872:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005874:	4b14      	ldr	r3, [pc, #80]	@ (80058c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a13      	ldr	r2, [pc, #76]	@ (80058c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800587a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800587e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005880:	f7fc ff2c 	bl	80026dc <HAL_GetTick>
 8005884:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005886:	e009      	b.n	800589c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005888:	f7fc ff28 	bl	80026dc <HAL_GetTick>
 800588c:	4602      	mov	r2, r0
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	2b02      	cmp	r3, #2
 8005894:	d902      	bls.n	800589c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005896:	2303      	movs	r3, #3
 8005898:	73fb      	strb	r3, [r7, #15]
          break;
 800589a:	e005      	b.n	80058a8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800589c:	4b0a      	ldr	r3, [pc, #40]	@ (80058c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d0ef      	beq.n	8005888 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80058a8:	7bfb      	ldrb	r3, [r7, #15]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d106      	bne.n	80058bc <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80058ae:	4b06      	ldr	r3, [pc, #24]	@ (80058c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80058b0:	691a      	ldr	r2, [r3, #16]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	699b      	ldr	r3, [r3, #24]
 80058b6:	4904      	ldr	r1, [pc, #16]	@ (80058c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80058b8:	4313      	orrs	r3, r2
 80058ba:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80058bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3710      	adds	r7, #16
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	40021000 	.word	0x40021000
 80058cc:	07ff800f 	.word	0x07ff800f
 80058d0:	ff9f800f 	.word	0xff9f800f
 80058d4:	f9ff800f 	.word	0xf9ff800f

080058d8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058e2:	2300      	movs	r3, #0
 80058e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80058e6:	4b72      	ldr	r3, [pc, #456]	@ (8005ab0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	f003 0303 	and.w	r3, r3, #3
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00e      	beq.n	8005910 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80058f2:	4b6f      	ldr	r3, [pc, #444]	@ (8005ab0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	f003 0203 	and.w	r2, r3, #3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	429a      	cmp	r2, r3
 8005900:	d103      	bne.n	800590a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
       ||
 8005906:	2b00      	cmp	r3, #0
 8005908:	d142      	bne.n	8005990 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	73fb      	strb	r3, [r7, #15]
 800590e:	e03f      	b.n	8005990 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2b03      	cmp	r3, #3
 8005916:	d018      	beq.n	800594a <RCCEx_PLLSAI2_Config+0x72>
 8005918:	2b03      	cmp	r3, #3
 800591a:	d825      	bhi.n	8005968 <RCCEx_PLLSAI2_Config+0x90>
 800591c:	2b01      	cmp	r3, #1
 800591e:	d002      	beq.n	8005926 <RCCEx_PLLSAI2_Config+0x4e>
 8005920:	2b02      	cmp	r3, #2
 8005922:	d009      	beq.n	8005938 <RCCEx_PLLSAI2_Config+0x60>
 8005924:	e020      	b.n	8005968 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005926:	4b62      	ldr	r3, [pc, #392]	@ (8005ab0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 0302 	and.w	r3, r3, #2
 800592e:	2b00      	cmp	r3, #0
 8005930:	d11d      	bne.n	800596e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005936:	e01a      	b.n	800596e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005938:	4b5d      	ldr	r3, [pc, #372]	@ (8005ab0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005940:	2b00      	cmp	r3, #0
 8005942:	d116      	bne.n	8005972 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005948:	e013      	b.n	8005972 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800594a:	4b59      	ldr	r3, [pc, #356]	@ (8005ab0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005952:	2b00      	cmp	r3, #0
 8005954:	d10f      	bne.n	8005976 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005956:	4b56      	ldr	r3, [pc, #344]	@ (8005ab0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d109      	bne.n	8005976 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005966:	e006      	b.n	8005976 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	73fb      	strb	r3, [r7, #15]
      break;
 800596c:	e004      	b.n	8005978 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800596e:	bf00      	nop
 8005970:	e002      	b.n	8005978 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005972:	bf00      	nop
 8005974:	e000      	b.n	8005978 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005976:	bf00      	nop
    }

    if(status == HAL_OK)
 8005978:	7bfb      	ldrb	r3, [r7, #15]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d108      	bne.n	8005990 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800597e:	4b4c      	ldr	r3, [pc, #304]	@ (8005ab0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	f023 0203 	bic.w	r2, r3, #3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4949      	ldr	r1, [pc, #292]	@ (8005ab0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800598c:	4313      	orrs	r3, r2
 800598e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005990:	7bfb      	ldrb	r3, [r7, #15]
 8005992:	2b00      	cmp	r3, #0
 8005994:	f040 8086 	bne.w	8005aa4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005998:	4b45      	ldr	r3, [pc, #276]	@ (8005ab0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a44      	ldr	r2, [pc, #272]	@ (8005ab0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800599e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059a4:	f7fc fe9a 	bl	80026dc <HAL_GetTick>
 80059a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80059aa:	e009      	b.n	80059c0 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80059ac:	f7fc fe96 	bl	80026dc <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d902      	bls.n	80059c0 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	73fb      	strb	r3, [r7, #15]
        break;
 80059be:	e005      	b.n	80059cc <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80059c0:	4b3b      	ldr	r3, [pc, #236]	@ (8005ab0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d1ef      	bne.n	80059ac <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80059cc:	7bfb      	ldrb	r3, [r7, #15]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d168      	bne.n	8005aa4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d113      	bne.n	8005a00 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80059d8:	4b35      	ldr	r3, [pc, #212]	@ (8005ab0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059da:	695a      	ldr	r2, [r3, #20]
 80059dc:	4b35      	ldr	r3, [pc, #212]	@ (8005ab4 <RCCEx_PLLSAI2_Config+0x1dc>)
 80059de:	4013      	ands	r3, r2
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	6892      	ldr	r2, [r2, #8]
 80059e4:	0211      	lsls	r1, r2, #8
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	68d2      	ldr	r2, [r2, #12]
 80059ea:	06d2      	lsls	r2, r2, #27
 80059ec:	4311      	orrs	r1, r2
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	6852      	ldr	r2, [r2, #4]
 80059f2:	3a01      	subs	r2, #1
 80059f4:	0112      	lsls	r2, r2, #4
 80059f6:	430a      	orrs	r2, r1
 80059f8:	492d      	ldr	r1, [pc, #180]	@ (8005ab0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	614b      	str	r3, [r1, #20]
 80059fe:	e02d      	b.n	8005a5c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d115      	bne.n	8005a32 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a06:	4b2a      	ldr	r3, [pc, #168]	@ (8005ab0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a08:	695a      	ldr	r2, [r3, #20]
 8005a0a:	4b2b      	ldr	r3, [pc, #172]	@ (8005ab8 <RCCEx_PLLSAI2_Config+0x1e0>)
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	6892      	ldr	r2, [r2, #8]
 8005a12:	0211      	lsls	r1, r2, #8
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	6912      	ldr	r2, [r2, #16]
 8005a18:	0852      	lsrs	r2, r2, #1
 8005a1a:	3a01      	subs	r2, #1
 8005a1c:	0552      	lsls	r2, r2, #21
 8005a1e:	4311      	orrs	r1, r2
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	6852      	ldr	r2, [r2, #4]
 8005a24:	3a01      	subs	r2, #1
 8005a26:	0112      	lsls	r2, r2, #4
 8005a28:	430a      	orrs	r2, r1
 8005a2a:	4921      	ldr	r1, [pc, #132]	@ (8005ab0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	614b      	str	r3, [r1, #20]
 8005a30:	e014      	b.n	8005a5c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a32:	4b1f      	ldr	r3, [pc, #124]	@ (8005ab0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a34:	695a      	ldr	r2, [r3, #20]
 8005a36:	4b21      	ldr	r3, [pc, #132]	@ (8005abc <RCCEx_PLLSAI2_Config+0x1e4>)
 8005a38:	4013      	ands	r3, r2
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	6892      	ldr	r2, [r2, #8]
 8005a3e:	0211      	lsls	r1, r2, #8
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	6952      	ldr	r2, [r2, #20]
 8005a44:	0852      	lsrs	r2, r2, #1
 8005a46:	3a01      	subs	r2, #1
 8005a48:	0652      	lsls	r2, r2, #25
 8005a4a:	4311      	orrs	r1, r2
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	6852      	ldr	r2, [r2, #4]
 8005a50:	3a01      	subs	r2, #1
 8005a52:	0112      	lsls	r2, r2, #4
 8005a54:	430a      	orrs	r2, r1
 8005a56:	4916      	ldr	r1, [pc, #88]	@ (8005ab0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005a5c:	4b14      	ldr	r3, [pc, #80]	@ (8005ab0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a13      	ldr	r2, [pc, #76]	@ (8005ab0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a66:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a68:	f7fc fe38 	bl	80026dc <HAL_GetTick>
 8005a6c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a6e:	e009      	b.n	8005a84 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005a70:	f7fc fe34 	bl	80026dc <HAL_GetTick>
 8005a74:	4602      	mov	r2, r0
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d902      	bls.n	8005a84 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	73fb      	strb	r3, [r7, #15]
          break;
 8005a82:	e005      	b.n	8005a90 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a84:	4b0a      	ldr	r3, [pc, #40]	@ (8005ab0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d0ef      	beq.n	8005a70 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005a90:	7bfb      	ldrb	r3, [r7, #15]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d106      	bne.n	8005aa4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005a96:	4b06      	ldr	r3, [pc, #24]	@ (8005ab0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a98:	695a      	ldr	r2, [r3, #20]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	699b      	ldr	r3, [r3, #24]
 8005a9e:	4904      	ldr	r1, [pc, #16]	@ (8005ab0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3710      	adds	r7, #16
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	40021000 	.word	0x40021000
 8005ab4:	07ff800f 	.word	0x07ff800f
 8005ab8:	ff9f800f 	.word	0xff9f800f
 8005abc:	f9ff800f 	.word	0xf9ff800f

08005ac0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d101      	bne.n	8005ad2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e049      	b.n	8005b66 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d106      	bne.n	8005aec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f7fc fa9a 	bl	8002020 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2202      	movs	r2, #2
 8005af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	3304      	adds	r3, #4
 8005afc:	4619      	mov	r1, r3
 8005afe:	4610      	mov	r0, r2
 8005b00:	f000 face 	bl	80060a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3708      	adds	r7, #8
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
	...

08005b70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b085      	sub	sp, #20
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d001      	beq.n	8005b88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e04f      	b.n	8005c28 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2202      	movs	r2, #2
 8005b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68da      	ldr	r2, [r3, #12]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f042 0201 	orr.w	r2, r2, #1
 8005b9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a23      	ldr	r2, [pc, #140]	@ (8005c34 <HAL_TIM_Base_Start_IT+0xc4>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d01d      	beq.n	8005be6 <HAL_TIM_Base_Start_IT+0x76>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bb2:	d018      	beq.n	8005be6 <HAL_TIM_Base_Start_IT+0x76>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a1f      	ldr	r2, [pc, #124]	@ (8005c38 <HAL_TIM_Base_Start_IT+0xc8>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d013      	beq.n	8005be6 <HAL_TIM_Base_Start_IT+0x76>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a1e      	ldr	r2, [pc, #120]	@ (8005c3c <HAL_TIM_Base_Start_IT+0xcc>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d00e      	beq.n	8005be6 <HAL_TIM_Base_Start_IT+0x76>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a1c      	ldr	r2, [pc, #112]	@ (8005c40 <HAL_TIM_Base_Start_IT+0xd0>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d009      	beq.n	8005be6 <HAL_TIM_Base_Start_IT+0x76>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a1b      	ldr	r2, [pc, #108]	@ (8005c44 <HAL_TIM_Base_Start_IT+0xd4>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d004      	beq.n	8005be6 <HAL_TIM_Base_Start_IT+0x76>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a19      	ldr	r2, [pc, #100]	@ (8005c48 <HAL_TIM_Base_Start_IT+0xd8>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d115      	bne.n	8005c12 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	689a      	ldr	r2, [r3, #8]
 8005bec:	4b17      	ldr	r3, [pc, #92]	@ (8005c4c <HAL_TIM_Base_Start_IT+0xdc>)
 8005bee:	4013      	ands	r3, r2
 8005bf0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2b06      	cmp	r3, #6
 8005bf6:	d015      	beq.n	8005c24 <HAL_TIM_Base_Start_IT+0xb4>
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bfe:	d011      	beq.n	8005c24 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f042 0201 	orr.w	r2, r2, #1
 8005c0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c10:	e008      	b.n	8005c24 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f042 0201 	orr.w	r2, r2, #1
 8005c20:	601a      	str	r2, [r3, #0]
 8005c22:	e000      	b.n	8005c26 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c24:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3714      	adds	r7, #20
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr
 8005c34:	40012c00 	.word	0x40012c00
 8005c38:	40000400 	.word	0x40000400
 8005c3c:	40000800 	.word	0x40000800
 8005c40:	40000c00 	.word	0x40000c00
 8005c44:	40013400 	.word	0x40013400
 8005c48:	40014000 	.word	0x40014000
 8005c4c:	00010007 	.word	0x00010007

08005c50 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68da      	ldr	r2, [r3, #12]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f022 0201 	bic.w	r2, r2, #1
 8005c66:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	6a1a      	ldr	r2, [r3, #32]
 8005c6e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005c72:	4013      	ands	r3, r2
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d10f      	bne.n	8005c98 <HAL_TIM_Base_Stop_IT+0x48>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	6a1a      	ldr	r2, [r3, #32]
 8005c7e:	f240 4344 	movw	r3, #1092	@ 0x444
 8005c82:	4013      	ands	r3, r2
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d107      	bne.n	8005c98 <HAL_TIM_Base_Stop_IT+0x48>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f022 0201 	bic.w	r2, r2, #1
 8005c96:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	370c      	adds	r7, #12
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr

08005cae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	b084      	sub	sp, #16
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	f003 0302 	and.w	r3, r3, #2
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d020      	beq.n	8005d12 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f003 0302 	and.w	r3, r3, #2
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d01b      	beq.n	8005d12 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f06f 0202 	mvn.w	r2, #2
 8005ce2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	699b      	ldr	r3, [r3, #24]
 8005cf0:	f003 0303 	and.w	r3, r3, #3
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d003      	beq.n	8005d00 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 f9b2 	bl	8006062 <HAL_TIM_IC_CaptureCallback>
 8005cfe:	e005      	b.n	8005d0c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f000 f9a4 	bl	800604e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 f9b5 	bl	8006076 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	f003 0304 	and.w	r3, r3, #4
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d020      	beq.n	8005d5e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f003 0304 	and.w	r3, r3, #4
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d01b      	beq.n	8005d5e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f06f 0204 	mvn.w	r2, #4
 8005d2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2202      	movs	r2, #2
 8005d34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	699b      	ldr	r3, [r3, #24]
 8005d3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d003      	beq.n	8005d4c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 f98c 	bl	8006062 <HAL_TIM_IC_CaptureCallback>
 8005d4a:	e005      	b.n	8005d58 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 f97e 	bl	800604e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 f98f 	bl	8006076 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	f003 0308 	and.w	r3, r3, #8
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d020      	beq.n	8005daa <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f003 0308 	and.w	r3, r3, #8
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d01b      	beq.n	8005daa <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f06f 0208 	mvn.w	r2, #8
 8005d7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2204      	movs	r2, #4
 8005d80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	69db      	ldr	r3, [r3, #28]
 8005d88:	f003 0303 	and.w	r3, r3, #3
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d003      	beq.n	8005d98 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f000 f966 	bl	8006062 <HAL_TIM_IC_CaptureCallback>
 8005d96:	e005      	b.n	8005da4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 f958 	bl	800604e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 f969 	bl	8006076 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	f003 0310 	and.w	r3, r3, #16
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d020      	beq.n	8005df6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f003 0310 	and.w	r3, r3, #16
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d01b      	beq.n	8005df6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f06f 0210 	mvn.w	r2, #16
 8005dc6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2208      	movs	r2, #8
 8005dcc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	69db      	ldr	r3, [r3, #28]
 8005dd4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d003      	beq.n	8005de4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f000 f940 	bl	8006062 <HAL_TIM_IC_CaptureCallback>
 8005de2:	e005      	b.n	8005df0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 f932 	bl	800604e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 f943 	bl	8006076 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	f003 0301 	and.w	r3, r3, #1
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d00c      	beq.n	8005e1a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f003 0301 	and.w	r3, r3, #1
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d007      	beq.n	8005e1a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f06f 0201 	mvn.w	r2, #1
 8005e12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f7fb fdbf 	bl	8001998 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d104      	bne.n	8005e2e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00c      	beq.n	8005e48 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d007      	beq.n	8005e48 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 fafe 	bl	8006444 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00c      	beq.n	8005e6c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d007      	beq.n	8005e6c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 faf6 	bl	8006458 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00c      	beq.n	8005e90 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d007      	beq.n	8005e90 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 f8fd 	bl	800608a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	f003 0320 	and.w	r3, r3, #32
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00c      	beq.n	8005eb4 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f003 0320 	and.w	r3, r3, #32
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d007      	beq.n	8005eb4 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f06f 0220 	mvn.w	r2, #32
 8005eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 fabe 	bl	8006430 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005eb4:	bf00      	nop
 8005eb6:	3710      	adds	r7, #16
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d101      	bne.n	8005ed8 <HAL_TIM_ConfigClockSource+0x1c>
 8005ed4:	2302      	movs	r3, #2
 8005ed6:	e0b6      	b.n	8006046 <HAL_TIM_ConfigClockSource+0x18a>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2202      	movs	r2, #2
 8005ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ef6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005efa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68ba      	ldr	r2, [r7, #8]
 8005f0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f14:	d03e      	beq.n	8005f94 <HAL_TIM_ConfigClockSource+0xd8>
 8005f16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f1a:	f200 8087 	bhi.w	800602c <HAL_TIM_ConfigClockSource+0x170>
 8005f1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f22:	f000 8086 	beq.w	8006032 <HAL_TIM_ConfigClockSource+0x176>
 8005f26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f2a:	d87f      	bhi.n	800602c <HAL_TIM_ConfigClockSource+0x170>
 8005f2c:	2b70      	cmp	r3, #112	@ 0x70
 8005f2e:	d01a      	beq.n	8005f66 <HAL_TIM_ConfigClockSource+0xaa>
 8005f30:	2b70      	cmp	r3, #112	@ 0x70
 8005f32:	d87b      	bhi.n	800602c <HAL_TIM_ConfigClockSource+0x170>
 8005f34:	2b60      	cmp	r3, #96	@ 0x60
 8005f36:	d050      	beq.n	8005fda <HAL_TIM_ConfigClockSource+0x11e>
 8005f38:	2b60      	cmp	r3, #96	@ 0x60
 8005f3a:	d877      	bhi.n	800602c <HAL_TIM_ConfigClockSource+0x170>
 8005f3c:	2b50      	cmp	r3, #80	@ 0x50
 8005f3e:	d03c      	beq.n	8005fba <HAL_TIM_ConfigClockSource+0xfe>
 8005f40:	2b50      	cmp	r3, #80	@ 0x50
 8005f42:	d873      	bhi.n	800602c <HAL_TIM_ConfigClockSource+0x170>
 8005f44:	2b40      	cmp	r3, #64	@ 0x40
 8005f46:	d058      	beq.n	8005ffa <HAL_TIM_ConfigClockSource+0x13e>
 8005f48:	2b40      	cmp	r3, #64	@ 0x40
 8005f4a:	d86f      	bhi.n	800602c <HAL_TIM_ConfigClockSource+0x170>
 8005f4c:	2b30      	cmp	r3, #48	@ 0x30
 8005f4e:	d064      	beq.n	800601a <HAL_TIM_ConfigClockSource+0x15e>
 8005f50:	2b30      	cmp	r3, #48	@ 0x30
 8005f52:	d86b      	bhi.n	800602c <HAL_TIM_ConfigClockSource+0x170>
 8005f54:	2b20      	cmp	r3, #32
 8005f56:	d060      	beq.n	800601a <HAL_TIM_ConfigClockSource+0x15e>
 8005f58:	2b20      	cmp	r3, #32
 8005f5a:	d867      	bhi.n	800602c <HAL_TIM_ConfigClockSource+0x170>
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d05c      	beq.n	800601a <HAL_TIM_ConfigClockSource+0x15e>
 8005f60:	2b10      	cmp	r3, #16
 8005f62:	d05a      	beq.n	800601a <HAL_TIM_ConfigClockSource+0x15e>
 8005f64:	e062      	b.n	800602c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f76:	f000 f9b3 	bl	80062e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005f88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68ba      	ldr	r2, [r7, #8]
 8005f90:	609a      	str	r2, [r3, #8]
      break;
 8005f92:	e04f      	b.n	8006034 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fa4:	f000 f99c 	bl	80062e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	689a      	ldr	r2, [r3, #8]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005fb6:	609a      	str	r2, [r3, #8]
      break;
 8005fb8:	e03c      	b.n	8006034 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	f000 f910 	bl	80061ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	2150      	movs	r1, #80	@ 0x50
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f000 f969 	bl	80062aa <TIM_ITRx_SetConfig>
      break;
 8005fd8:	e02c      	b.n	8006034 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	f000 f92f 	bl	800624a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2160      	movs	r1, #96	@ 0x60
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f000 f959 	bl	80062aa <TIM_ITRx_SetConfig>
      break;
 8005ff8:	e01c      	b.n	8006034 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006006:	461a      	mov	r2, r3
 8006008:	f000 f8f0 	bl	80061ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2140      	movs	r1, #64	@ 0x40
 8006012:	4618      	mov	r0, r3
 8006014:	f000 f949 	bl	80062aa <TIM_ITRx_SetConfig>
      break;
 8006018:	e00c      	b.n	8006034 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4619      	mov	r1, r3
 8006024:	4610      	mov	r0, r2
 8006026:	f000 f940 	bl	80062aa <TIM_ITRx_SetConfig>
      break;
 800602a:	e003      	b.n	8006034 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	73fb      	strb	r3, [r7, #15]
      break;
 8006030:	e000      	b.n	8006034 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006032:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006044:	7bfb      	ldrb	r3, [r7, #15]
}
 8006046:	4618      	mov	r0, r3
 8006048:	3710      	adds	r7, #16
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}

0800604e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800604e:	b480      	push	{r7}
 8006050:	b083      	sub	sp, #12
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006056:	bf00      	nop
 8006058:	370c      	adds	r7, #12
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr

08006062 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006062:	b480      	push	{r7}
 8006064:	b083      	sub	sp, #12
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800606a:	bf00      	nop
 800606c:	370c      	adds	r7, #12
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr

08006076 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006076:	b480      	push	{r7}
 8006078:	b083      	sub	sp, #12
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800607e:	bf00      	nop
 8006080:	370c      	adds	r7, #12
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr

0800608a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800608a:	b480      	push	{r7}
 800608c:	b083      	sub	sp, #12
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006092:	bf00      	nop
 8006094:	370c      	adds	r7, #12
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr
	...

080060a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b085      	sub	sp, #20
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4a46      	ldr	r2, [pc, #280]	@ (80061cc <TIM_Base_SetConfig+0x12c>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d013      	beq.n	80060e0 <TIM_Base_SetConfig+0x40>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060be:	d00f      	beq.n	80060e0 <TIM_Base_SetConfig+0x40>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4a43      	ldr	r2, [pc, #268]	@ (80061d0 <TIM_Base_SetConfig+0x130>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d00b      	beq.n	80060e0 <TIM_Base_SetConfig+0x40>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	4a42      	ldr	r2, [pc, #264]	@ (80061d4 <TIM_Base_SetConfig+0x134>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d007      	beq.n	80060e0 <TIM_Base_SetConfig+0x40>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	4a41      	ldr	r2, [pc, #260]	@ (80061d8 <TIM_Base_SetConfig+0x138>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d003      	beq.n	80060e0 <TIM_Base_SetConfig+0x40>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a40      	ldr	r2, [pc, #256]	@ (80061dc <TIM_Base_SetConfig+0x13c>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d108      	bne.n	80060f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a35      	ldr	r2, [pc, #212]	@ (80061cc <TIM_Base_SetConfig+0x12c>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d01f      	beq.n	800613a <TIM_Base_SetConfig+0x9a>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006100:	d01b      	beq.n	800613a <TIM_Base_SetConfig+0x9a>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a32      	ldr	r2, [pc, #200]	@ (80061d0 <TIM_Base_SetConfig+0x130>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d017      	beq.n	800613a <TIM_Base_SetConfig+0x9a>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a31      	ldr	r2, [pc, #196]	@ (80061d4 <TIM_Base_SetConfig+0x134>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d013      	beq.n	800613a <TIM_Base_SetConfig+0x9a>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a30      	ldr	r2, [pc, #192]	@ (80061d8 <TIM_Base_SetConfig+0x138>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d00f      	beq.n	800613a <TIM_Base_SetConfig+0x9a>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a2f      	ldr	r2, [pc, #188]	@ (80061dc <TIM_Base_SetConfig+0x13c>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d00b      	beq.n	800613a <TIM_Base_SetConfig+0x9a>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a2e      	ldr	r2, [pc, #184]	@ (80061e0 <TIM_Base_SetConfig+0x140>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d007      	beq.n	800613a <TIM_Base_SetConfig+0x9a>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a2d      	ldr	r2, [pc, #180]	@ (80061e4 <TIM_Base_SetConfig+0x144>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d003      	beq.n	800613a <TIM_Base_SetConfig+0x9a>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a2c      	ldr	r2, [pc, #176]	@ (80061e8 <TIM_Base_SetConfig+0x148>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d108      	bne.n	800614c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006140:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	4313      	orrs	r3, r2
 800614a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	695b      	ldr	r3, [r3, #20]
 8006156:	4313      	orrs	r3, r2
 8006158:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	689a      	ldr	r2, [r3, #8]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a16      	ldr	r2, [pc, #88]	@ (80061cc <TIM_Base_SetConfig+0x12c>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d00f      	beq.n	8006198 <TIM_Base_SetConfig+0xf8>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4a18      	ldr	r2, [pc, #96]	@ (80061dc <TIM_Base_SetConfig+0x13c>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d00b      	beq.n	8006198 <TIM_Base_SetConfig+0xf8>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a17      	ldr	r2, [pc, #92]	@ (80061e0 <TIM_Base_SetConfig+0x140>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d007      	beq.n	8006198 <TIM_Base_SetConfig+0xf8>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a16      	ldr	r2, [pc, #88]	@ (80061e4 <TIM_Base_SetConfig+0x144>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d003      	beq.n	8006198 <TIM_Base_SetConfig+0xf8>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a15      	ldr	r2, [pc, #84]	@ (80061e8 <TIM_Base_SetConfig+0x148>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d103      	bne.n	80061a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	691a      	ldr	r2, [r3, #16]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	f003 0301 	and.w	r3, r3, #1
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d105      	bne.n	80061be <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	f023 0201 	bic.w	r2, r3, #1
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	611a      	str	r2, [r3, #16]
  }
}
 80061be:	bf00      	nop
 80061c0:	3714      	adds	r7, #20
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	40012c00 	.word	0x40012c00
 80061d0:	40000400 	.word	0x40000400
 80061d4:	40000800 	.word	0x40000800
 80061d8:	40000c00 	.word	0x40000c00
 80061dc:	40013400 	.word	0x40013400
 80061e0:	40014000 	.word	0x40014000
 80061e4:	40014400 	.word	0x40014400
 80061e8:	40014800 	.word	0x40014800

080061ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b087      	sub	sp, #28
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6a1b      	ldr	r3, [r3, #32]
 80061fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	f023 0201 	bic.w	r2, r3, #1
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006216:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	011b      	lsls	r3, r3, #4
 800621c:	693a      	ldr	r2, [r7, #16]
 800621e:	4313      	orrs	r3, r2
 8006220:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	f023 030a 	bic.w	r3, r3, #10
 8006228:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800622a:	697a      	ldr	r2, [r7, #20]
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	4313      	orrs	r3, r2
 8006230:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	697a      	ldr	r2, [r7, #20]
 800623c:	621a      	str	r2, [r3, #32]
}
 800623e:	bf00      	nop
 8006240:	371c      	adds	r7, #28
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr

0800624a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800624a:	b480      	push	{r7}
 800624c:	b087      	sub	sp, #28
 800624e:	af00      	add	r7, sp, #0
 8006250:	60f8      	str	r0, [r7, #12]
 8006252:	60b9      	str	r1, [r7, #8]
 8006254:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6a1b      	ldr	r3, [r3, #32]
 800625a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6a1b      	ldr	r3, [r3, #32]
 8006260:	f023 0210 	bic.w	r2, r3, #16
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	699b      	ldr	r3, [r3, #24]
 800626c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006274:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	031b      	lsls	r3, r3, #12
 800627a:	693a      	ldr	r2, [r7, #16]
 800627c:	4313      	orrs	r3, r2
 800627e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006286:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	011b      	lsls	r3, r3, #4
 800628c:	697a      	ldr	r2, [r7, #20]
 800628e:	4313      	orrs	r3, r2
 8006290:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	693a      	ldr	r2, [r7, #16]
 8006296:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	697a      	ldr	r2, [r7, #20]
 800629c:	621a      	str	r2, [r3, #32]
}
 800629e:	bf00      	nop
 80062a0:	371c      	adds	r7, #28
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr

080062aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80062aa:	b480      	push	{r7}
 80062ac:	b085      	sub	sp, #20
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
 80062b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062c2:	683a      	ldr	r2, [r7, #0]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	f043 0307 	orr.w	r3, r3, #7
 80062cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	609a      	str	r2, [r3, #8]
}
 80062d4:	bf00      	nop
 80062d6:	3714      	adds	r7, #20
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b087      	sub	sp, #28
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	607a      	str	r2, [r7, #4]
 80062ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80062fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	021a      	lsls	r2, r3, #8
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	431a      	orrs	r2, r3
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	4313      	orrs	r3, r2
 8006308:	697a      	ldr	r2, [r7, #20]
 800630a:	4313      	orrs	r3, r2
 800630c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	697a      	ldr	r2, [r7, #20]
 8006312:	609a      	str	r2, [r3, #8]
}
 8006314:	bf00      	nop
 8006316:	371c      	adds	r7, #28
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006320:	b480      	push	{r7}
 8006322:	b085      	sub	sp, #20
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006330:	2b01      	cmp	r3, #1
 8006332:	d101      	bne.n	8006338 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006334:	2302      	movs	r3, #2
 8006336:	e068      	b.n	800640a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2202      	movs	r2, #2
 8006344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a2e      	ldr	r2, [pc, #184]	@ (8006418 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d004      	beq.n	800636c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a2d      	ldr	r2, [pc, #180]	@ (800641c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d108      	bne.n	800637e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006372:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	4313      	orrs	r3, r2
 800637c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006384:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	4313      	orrs	r3, r2
 800638e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a1e      	ldr	r2, [pc, #120]	@ (8006418 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d01d      	beq.n	80063de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063aa:	d018      	beq.n	80063de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a1b      	ldr	r2, [pc, #108]	@ (8006420 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d013      	beq.n	80063de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a1a      	ldr	r2, [pc, #104]	@ (8006424 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d00e      	beq.n	80063de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a18      	ldr	r2, [pc, #96]	@ (8006428 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d009      	beq.n	80063de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a13      	ldr	r2, [pc, #76]	@ (800641c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d004      	beq.n	80063de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a14      	ldr	r2, [pc, #80]	@ (800642c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d10c      	bne.n	80063f8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	68ba      	ldr	r2, [r7, #8]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	68ba      	ldr	r2, [r7, #8]
 80063f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3714      	adds	r7, #20
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	40012c00 	.word	0x40012c00
 800641c:	40013400 	.word	0x40013400
 8006420:	40000400 	.word	0x40000400
 8006424:	40000800 	.word	0x40000800
 8006428:	40000c00 	.word	0x40000c00
 800642c:	40014000 	.word	0x40014000

08006430 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006438:	bf00      	nop
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800644c:	bf00      	nop
 800644e:	370c      	adds	r7, #12
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d101      	bne.n	800647e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	e042      	b.n	8006504 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006484:	2b00      	cmp	r3, #0
 8006486:	d106      	bne.n	8006496 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f7fb fde9 	bl	8002068 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2224      	movs	r2, #36	@ 0x24
 800649a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f022 0201 	bic.w	r2, r2, #1
 80064ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d002      	beq.n	80064bc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 ff60 	bl	800737c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 fc61 	bl	8006d84 <UART_SetConfig>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d101      	bne.n	80064cc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	e01b      	b.n	8006504 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	685a      	ldr	r2, [r3, #4]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80064da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	689a      	ldr	r2, [r3, #8]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80064ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f042 0201 	orr.w	r2, r2, #1
 80064fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 ffdf 	bl	80074c0 <UART_CheckIdleState>
 8006502:	4603      	mov	r3, r0
}
 8006504:	4618      	mov	r0, r3
 8006506:	3708      	adds	r7, #8
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}

0800650c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b08a      	sub	sp, #40	@ 0x28
 8006510:	af02      	add	r7, sp, #8
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	603b      	str	r3, [r7, #0]
 8006518:	4613      	mov	r3, r2
 800651a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006522:	2b20      	cmp	r3, #32
 8006524:	d17b      	bne.n	800661e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d002      	beq.n	8006532 <HAL_UART_Transmit+0x26>
 800652c:	88fb      	ldrh	r3, [r7, #6]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d101      	bne.n	8006536 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e074      	b.n	8006620 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2221      	movs	r2, #33	@ 0x21
 8006542:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006546:	f7fc f8c9 	bl	80026dc <HAL_GetTick>
 800654a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	88fa      	ldrh	r2, [r7, #6]
 8006550:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	88fa      	ldrh	r2, [r7, #6]
 8006558:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006564:	d108      	bne.n	8006578 <HAL_UART_Transmit+0x6c>
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d104      	bne.n	8006578 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800656e:	2300      	movs	r3, #0
 8006570:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	61bb      	str	r3, [r7, #24]
 8006576:	e003      	b.n	8006580 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800657c:	2300      	movs	r3, #0
 800657e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006580:	e030      	b.n	80065e4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	9300      	str	r3, [sp, #0]
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	2200      	movs	r2, #0
 800658a:	2180      	movs	r1, #128	@ 0x80
 800658c:	68f8      	ldr	r0, [r7, #12]
 800658e:	f001 f841 	bl	8007614 <UART_WaitOnFlagUntilTimeout>
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d005      	beq.n	80065a4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2220      	movs	r2, #32
 800659c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80065a0:	2303      	movs	r3, #3
 80065a2:	e03d      	b.n	8006620 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d10b      	bne.n	80065c2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	881a      	ldrh	r2, [r3, #0]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065b6:	b292      	uxth	r2, r2
 80065b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	3302      	adds	r3, #2
 80065be:	61bb      	str	r3, [r7, #24]
 80065c0:	e007      	b.n	80065d2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80065c2:	69fb      	ldr	r3, [r7, #28]
 80065c4:	781a      	ldrb	r2, [r3, #0]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	3301      	adds	r3, #1
 80065d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80065d8:	b29b      	uxth	r3, r3
 80065da:	3b01      	subs	r3, #1
 80065dc:	b29a      	uxth	r2, r3
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d1c8      	bne.n	8006582 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	9300      	str	r3, [sp, #0]
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	2200      	movs	r2, #0
 80065f8:	2140      	movs	r1, #64	@ 0x40
 80065fa:	68f8      	ldr	r0, [r7, #12]
 80065fc:	f001 f80a 	bl	8007614 <UART_WaitOnFlagUntilTimeout>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d005      	beq.n	8006612 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2220      	movs	r2, #32
 800660a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	e006      	b.n	8006620 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2220      	movs	r2, #32
 8006616:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800661a:	2300      	movs	r3, #0
 800661c:	e000      	b.n	8006620 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800661e:	2302      	movs	r3, #2
  }
}
 8006620:	4618      	mov	r0, r3
 8006622:	3720      	adds	r7, #32
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b08a      	sub	sp, #40	@ 0x28
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	4613      	mov	r3, r2
 8006634:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800663c:	2b20      	cmp	r3, #32
 800663e:	d137      	bne.n	80066b0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d002      	beq.n	800664c <HAL_UART_Receive_IT+0x24>
 8006646:	88fb      	ldrh	r3, [r7, #6]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d101      	bne.n	8006650 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	e030      	b.n	80066b2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2200      	movs	r2, #0
 8006654:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a18      	ldr	r2, [pc, #96]	@ (80066bc <HAL_UART_Receive_IT+0x94>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d01f      	beq.n	80066a0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800666a:	2b00      	cmp	r3, #0
 800666c:	d018      	beq.n	80066a0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	e853 3f00 	ldrex	r3, [r3]
 800667a:	613b      	str	r3, [r7, #16]
   return(result);
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006682:	627b      	str	r3, [r7, #36]	@ 0x24
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	461a      	mov	r2, r3
 800668a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800668c:	623b      	str	r3, [r7, #32]
 800668e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006690:	69f9      	ldr	r1, [r7, #28]
 8006692:	6a3a      	ldr	r2, [r7, #32]
 8006694:	e841 2300 	strex	r3, r2, [r1]
 8006698:	61bb      	str	r3, [r7, #24]
   return(result);
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d1e6      	bne.n	800666e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80066a0:	88fb      	ldrh	r3, [r7, #6]
 80066a2:	461a      	mov	r2, r3
 80066a4:	68b9      	ldr	r1, [r7, #8]
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	f001 f822 	bl	80076f0 <UART_Start_Receive_IT>
 80066ac:	4603      	mov	r3, r0
 80066ae:	e000      	b.n	80066b2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80066b0:	2302      	movs	r3, #2
  }
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3728      	adds	r7, #40	@ 0x28
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	40008000 	.word	0x40008000

080066c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b0ba      	sub	sp, #232	@ 0xe8
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	69db      	ldr	r3, [r3, #28]
 80066ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80066e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80066ea:	f640 030f 	movw	r3, #2063	@ 0x80f
 80066ee:	4013      	ands	r3, r2
 80066f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80066f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d11b      	bne.n	8006734 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80066fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006700:	f003 0320 	and.w	r3, r3, #32
 8006704:	2b00      	cmp	r3, #0
 8006706:	d015      	beq.n	8006734 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800670c:	f003 0320 	and.w	r3, r3, #32
 8006710:	2b00      	cmp	r3, #0
 8006712:	d105      	bne.n	8006720 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006714:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006718:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800671c:	2b00      	cmp	r3, #0
 800671e:	d009      	beq.n	8006734 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006724:	2b00      	cmp	r3, #0
 8006726:	f000 8300 	beq.w	8006d2a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	4798      	blx	r3
      }
      return;
 8006732:	e2fa      	b.n	8006d2a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8006734:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006738:	2b00      	cmp	r3, #0
 800673a:	f000 8123 	beq.w	8006984 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800673e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006742:	4b8d      	ldr	r3, [pc, #564]	@ (8006978 <HAL_UART_IRQHandler+0x2b8>)
 8006744:	4013      	ands	r3, r2
 8006746:	2b00      	cmp	r3, #0
 8006748:	d106      	bne.n	8006758 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800674a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800674e:	4b8b      	ldr	r3, [pc, #556]	@ (800697c <HAL_UART_IRQHandler+0x2bc>)
 8006750:	4013      	ands	r3, r2
 8006752:	2b00      	cmp	r3, #0
 8006754:	f000 8116 	beq.w	8006984 <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800675c:	f003 0301 	and.w	r3, r3, #1
 8006760:	2b00      	cmp	r3, #0
 8006762:	d011      	beq.n	8006788 <HAL_UART_IRQHandler+0xc8>
 8006764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006768:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00b      	beq.n	8006788 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2201      	movs	r2, #1
 8006776:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800677e:	f043 0201 	orr.w	r2, r3, #1
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800678c:	f003 0302 	and.w	r3, r3, #2
 8006790:	2b00      	cmp	r3, #0
 8006792:	d011      	beq.n	80067b8 <HAL_UART_IRQHandler+0xf8>
 8006794:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006798:	f003 0301 	and.w	r3, r3, #1
 800679c:	2b00      	cmp	r3, #0
 800679e:	d00b      	beq.n	80067b8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2202      	movs	r2, #2
 80067a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067ae:	f043 0204 	orr.w	r2, r3, #4
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80067b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067bc:	f003 0304 	and.w	r3, r3, #4
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d011      	beq.n	80067e8 <HAL_UART_IRQHandler+0x128>
 80067c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067c8:	f003 0301 	and.w	r3, r3, #1
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d00b      	beq.n	80067e8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2204      	movs	r2, #4
 80067d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067de:	f043 0202 	orr.w	r2, r3, #2
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 80067e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067ec:	f003 0308 	and.w	r3, r3, #8
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d017      	beq.n	8006824 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80067f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067f8:	f003 0320 	and.w	r3, r3, #32
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d105      	bne.n	800680c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006800:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006804:	4b5c      	ldr	r3, [pc, #368]	@ (8006978 <HAL_UART_IRQHandler+0x2b8>)
 8006806:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006808:	2b00      	cmp	r3, #0
 800680a:	d00b      	beq.n	8006824 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2208      	movs	r2, #8
 8006812:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800681a:	f043 0208 	orr.w	r2, r3, #8
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006828:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800682c:	2b00      	cmp	r3, #0
 800682e:	d012      	beq.n	8006856 <HAL_UART_IRQHandler+0x196>
 8006830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006834:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006838:	2b00      	cmp	r3, #0
 800683a:	d00c      	beq.n	8006856 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006844:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800684c:	f043 0220 	orr.w	r2, r3, #32
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800685c:	2b00      	cmp	r3, #0
 800685e:	f000 8266 	beq.w	8006d2e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006866:	f003 0320 	and.w	r3, r3, #32
 800686a:	2b00      	cmp	r3, #0
 800686c:	d013      	beq.n	8006896 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800686e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006872:	f003 0320 	and.w	r3, r3, #32
 8006876:	2b00      	cmp	r3, #0
 8006878:	d105      	bne.n	8006886 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800687a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800687e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006882:	2b00      	cmp	r3, #0
 8006884:	d007      	beq.n	8006896 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800688a:	2b00      	cmp	r3, #0
 800688c:	d003      	beq.n	8006896 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800689c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068aa:	2b40      	cmp	r3, #64	@ 0x40
 80068ac:	d005      	beq.n	80068ba <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80068ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80068b2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d054      	beq.n	8006964 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f001 f83a 	bl	8007934 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068ca:	2b40      	cmp	r3, #64	@ 0x40
 80068cc:	d146      	bne.n	800695c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	3308      	adds	r3, #8
 80068d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80068dc:	e853 3f00 	ldrex	r3, [r3]
 80068e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80068e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80068e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	3308      	adds	r3, #8
 80068f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80068fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80068fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006902:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006906:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800690a:	e841 2300 	strex	r3, r2, [r1]
 800690e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006912:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1d9      	bne.n	80068ce <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006920:	2b00      	cmp	r3, #0
 8006922:	d017      	beq.n	8006954 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800692a:	4a15      	ldr	r2, [pc, #84]	@ (8006980 <HAL_UART_IRQHandler+0x2c0>)
 800692c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006934:	4618      	mov	r0, r3
 8006936:	f7fc fac1 	bl	8002ebc <HAL_DMA_Abort_IT>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d019      	beq.n	8006974 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800694e:	4610      	mov	r0, r2
 8006950:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006952:	e00f      	b.n	8006974 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 f9ff 	bl	8006d58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800695a:	e00b      	b.n	8006974 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 f9fb 	bl	8006d58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006962:	e007      	b.n	8006974 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 f9f7 	bl	8006d58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006972:	e1dc      	b.n	8006d2e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006974:	bf00      	nop
    return;
 8006976:	e1da      	b.n	8006d2e <HAL_UART_IRQHandler+0x66e>
 8006978:	10000001 	.word	0x10000001
 800697c:	04000120 	.word	0x04000120
 8006980:	08007a01 	.word	0x08007a01

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006988:	2b01      	cmp	r3, #1
 800698a:	f040 8170 	bne.w	8006c6e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800698e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006992:	f003 0310 	and.w	r3, r3, #16
 8006996:	2b00      	cmp	r3, #0
 8006998:	f000 8169 	beq.w	8006c6e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800699c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069a0:	f003 0310 	and.w	r3, r3, #16
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	f000 8162 	beq.w	8006c6e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	2210      	movs	r2, #16
 80069b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069bc:	2b40      	cmp	r3, #64	@ 0x40
 80069be:	f040 80d8 	bne.w	8006b72 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80069d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	f000 80af 	beq.w	8006b38 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80069e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80069e4:	429a      	cmp	r2, r3
 80069e6:	f080 80a7 	bcs.w	8006b38 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80069f0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 0320 	and.w	r3, r3, #32
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	f040 8087 	bne.w	8006b16 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a10:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006a14:	e853 3f00 	ldrex	r3, [r3]
 8006a18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006a1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006a20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006a32:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006a36:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006a3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006a42:	e841 2300 	strex	r3, r2, [r1]
 8006a46:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006a4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1da      	bne.n	8006a08 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	3308      	adds	r3, #8
 8006a58:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006a5c:	e853 3f00 	ldrex	r3, [r3]
 8006a60:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006a62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006a64:	f023 0301 	bic.w	r3, r3, #1
 8006a68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	3308      	adds	r3, #8
 8006a72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006a76:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006a7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006a7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006a82:	e841 2300 	strex	r3, r2, [r1]
 8006a86:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006a88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d1e1      	bne.n	8006a52 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	3308      	adds	r3, #8
 8006a94:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a98:	e853 3f00 	ldrex	r3, [r3]
 8006a9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006a9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006aa0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006aa4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	3308      	adds	r3, #8
 8006aae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006ab2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006ab4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006ab8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006aba:	e841 2300 	strex	r3, r2, [r1]
 8006abe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006ac0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d1e3      	bne.n	8006a8e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2220      	movs	r2, #32
 8006aca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ada:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006adc:	e853 3f00 	ldrex	r3, [r3]
 8006ae0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006ae2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ae4:	f023 0310 	bic.w	r3, r3, #16
 8006ae8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	461a      	mov	r2, r3
 8006af2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006af6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006af8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006afa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006afc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006afe:	e841 2300 	strex	r3, r2, [r1]
 8006b02:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006b04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d1e4      	bne.n	8006ad4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b10:	4618      	mov	r0, r3
 8006b12:	f7fc f977 	bl	8002e04 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2202      	movs	r2, #2
 8006b1a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	1ad3      	subs	r3, r2, r3
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	4619      	mov	r1, r3
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 f91b 	bl	8006d6c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006b36:	e0fc      	b.n	8006d32 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006b3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006b42:	429a      	cmp	r2, r3
 8006b44:	f040 80f5 	bne.w	8006d32 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 0320 	and.w	r3, r3, #32
 8006b56:	2b20      	cmp	r3, #32
 8006b58:	f040 80eb 	bne.w	8006d32 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2202      	movs	r2, #2
 8006b60:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006b68:	4619      	mov	r1, r3
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 f8fe 	bl	8006d6c <HAL_UARTEx_RxEventCallback>
      return;
 8006b70:	e0df      	b.n	8006d32 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	f000 80d1 	beq.w	8006d36 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8006b94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	f000 80cc 	beq.w	8006d36 <HAL_UART_IRQHandler+0x676>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ba6:	e853 3f00 	ldrex	r3, [r3]
 8006baa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006bac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006bb2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	461a      	mov	r2, r3
 8006bbc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006bc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bc2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006bc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006bc8:	e841 2300 	strex	r3, r2, [r1]
 8006bcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006bce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d1e4      	bne.n	8006b9e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	3308      	adds	r3, #8
 8006bda:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bde:	e853 3f00 	ldrex	r3, [r3]
 8006be2:	623b      	str	r3, [r7, #32]
   return(result);
 8006be4:	6a3b      	ldr	r3, [r7, #32]
 8006be6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006bea:	f023 0301 	bic.w	r3, r3, #1
 8006bee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	3308      	adds	r3, #8
 8006bf8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006bfc:	633a      	str	r2, [r7, #48]	@ 0x30
 8006bfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c00:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c04:	e841 2300 	strex	r3, r2, [r1]
 8006c08:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d1e1      	bne.n	8006bd4 <HAL_UART_IRQHandler+0x514>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2220      	movs	r2, #32
 8006c14:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	e853 3f00 	ldrex	r3, [r3]
 8006c30:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f023 0310 	bic.w	r3, r3, #16
 8006c38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	461a      	mov	r2, r3
 8006c42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006c46:	61fb      	str	r3, [r7, #28]
 8006c48:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c4a:	69b9      	ldr	r1, [r7, #24]
 8006c4c:	69fa      	ldr	r2, [r7, #28]
 8006c4e:	e841 2300 	strex	r3, r2, [r1]
 8006c52:	617b      	str	r3, [r7, #20]
   return(result);
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d1e4      	bne.n	8006c24 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2202      	movs	r2, #2
 8006c5e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c64:	4619      	mov	r1, r3
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 f880 	bl	8006d6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006c6c:	e063      	b.n	8006d36 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00e      	beq.n	8006c98 <HAL_UART_IRQHandler+0x5d8>
 8006c7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d008      	beq.n	8006c98 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006c8e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f001 fc1f 	bl	80084d4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c96:	e051      	b.n	8006d3c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006c98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d014      	beq.n	8006cce <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006ca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ca8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d105      	bne.n	8006cbc <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006cb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006cb4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d008      	beq.n	8006cce <HAL_UART_IRQHandler+0x60e>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d03a      	beq.n	8006d3a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	4798      	blx	r3
    }
    return;
 8006ccc:	e035      	b.n	8006d3a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d009      	beq.n	8006cee <HAL_UART_IRQHandler+0x62e>
 8006cda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d003      	beq.n	8006cee <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 fea0 	bl	8007a2c <UART_EndTransmit_IT>
    return;
 8006cec:	e026      	b.n	8006d3c <HAL_UART_IRQHandler+0x67c>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cf2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d009      	beq.n	8006d0e <HAL_UART_IRQHandler+0x64e>
 8006cfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cfe:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d003      	beq.n	8006d0e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f001 fbf8 	bl	80084fc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d0c:	e016      	b.n	8006d3c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d12:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d010      	beq.n	8006d3c <HAL_UART_IRQHandler+0x67c>
 8006d1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	da0c      	bge.n	8006d3c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f001 fbe0 	bl	80084e8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d28:	e008      	b.n	8006d3c <HAL_UART_IRQHandler+0x67c>
      return;
 8006d2a:	bf00      	nop
 8006d2c:	e006      	b.n	8006d3c <HAL_UART_IRQHandler+0x67c>
    return;
 8006d2e:	bf00      	nop
 8006d30:	e004      	b.n	8006d3c <HAL_UART_IRQHandler+0x67c>
      return;
 8006d32:	bf00      	nop
 8006d34:	e002      	b.n	8006d3c <HAL_UART_IRQHandler+0x67c>
      return;
 8006d36:	bf00      	nop
 8006d38:	e000      	b.n	8006d3c <HAL_UART_IRQHandler+0x67c>
    return;
 8006d3a:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8006d3c:	37e8      	adds	r7, #232	@ 0xe8
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
 8006d42:	bf00      	nop

08006d44 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006d4c:	bf00      	nop
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr

08006d58 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006d60:	bf00      	nop
 8006d62:	370c      	adds	r7, #12
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr

08006d6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	460b      	mov	r3, r1
 8006d76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d78:	bf00      	nop
 8006d7a:	370c      	adds	r7, #12
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d88:	b08c      	sub	sp, #48	@ 0x30
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	689a      	ldr	r2, [r3, #8]
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	691b      	ldr	r3, [r3, #16]
 8006d9c:	431a      	orrs	r2, r3
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	695b      	ldr	r3, [r3, #20]
 8006da2:	431a      	orrs	r2, r3
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	69db      	ldr	r3, [r3, #28]
 8006da8:	4313      	orrs	r3, r2
 8006daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	4baa      	ldr	r3, [pc, #680]	@ (800705c <UART_SetConfig+0x2d8>)
 8006db4:	4013      	ands	r3, r2
 8006db6:	697a      	ldr	r2, [r7, #20]
 8006db8:	6812      	ldr	r2, [r2, #0]
 8006dba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006dbc:	430b      	orrs	r3, r1
 8006dbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	68da      	ldr	r2, [r3, #12]
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	430a      	orrs	r2, r1
 8006dd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	699b      	ldr	r3, [r3, #24]
 8006dda:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a9f      	ldr	r2, [pc, #636]	@ (8007060 <UART_SetConfig+0x2dc>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d004      	beq.n	8006df0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	6a1b      	ldr	r3, [r3, #32]
 8006dea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006dec:	4313      	orrs	r3, r2
 8006dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006dfa:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006dfe:	697a      	ldr	r2, [r7, #20]
 8006e00:	6812      	ldr	r2, [r2, #0]
 8006e02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e04:	430b      	orrs	r3, r1
 8006e06:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e0e:	f023 010f 	bic.w	r1, r3, #15
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	430a      	orrs	r2, r1
 8006e1c:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a90      	ldr	r2, [pc, #576]	@ (8007064 <UART_SetConfig+0x2e0>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d125      	bne.n	8006e74 <UART_SetConfig+0xf0>
 8006e28:	4b8f      	ldr	r3, [pc, #572]	@ (8007068 <UART_SetConfig+0x2e4>)
 8006e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e2e:	f003 0303 	and.w	r3, r3, #3
 8006e32:	2b03      	cmp	r3, #3
 8006e34:	d81a      	bhi.n	8006e6c <UART_SetConfig+0xe8>
 8006e36:	a201      	add	r2, pc, #4	@ (adr r2, 8006e3c <UART_SetConfig+0xb8>)
 8006e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e3c:	08006e4d 	.word	0x08006e4d
 8006e40:	08006e5d 	.word	0x08006e5d
 8006e44:	08006e55 	.word	0x08006e55
 8006e48:	08006e65 	.word	0x08006e65
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e52:	e116      	b.n	8007082 <UART_SetConfig+0x2fe>
 8006e54:	2302      	movs	r3, #2
 8006e56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e5a:	e112      	b.n	8007082 <UART_SetConfig+0x2fe>
 8006e5c:	2304      	movs	r3, #4
 8006e5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e62:	e10e      	b.n	8007082 <UART_SetConfig+0x2fe>
 8006e64:	2308      	movs	r3, #8
 8006e66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e6a:	e10a      	b.n	8007082 <UART_SetConfig+0x2fe>
 8006e6c:	2310      	movs	r3, #16
 8006e6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e72:	e106      	b.n	8007082 <UART_SetConfig+0x2fe>
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a7c      	ldr	r2, [pc, #496]	@ (800706c <UART_SetConfig+0x2e8>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d138      	bne.n	8006ef0 <UART_SetConfig+0x16c>
 8006e7e:	4b7a      	ldr	r3, [pc, #488]	@ (8007068 <UART_SetConfig+0x2e4>)
 8006e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e84:	f003 030c 	and.w	r3, r3, #12
 8006e88:	2b0c      	cmp	r3, #12
 8006e8a:	d82d      	bhi.n	8006ee8 <UART_SetConfig+0x164>
 8006e8c:	a201      	add	r2, pc, #4	@ (adr r2, 8006e94 <UART_SetConfig+0x110>)
 8006e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e92:	bf00      	nop
 8006e94:	08006ec9 	.word	0x08006ec9
 8006e98:	08006ee9 	.word	0x08006ee9
 8006e9c:	08006ee9 	.word	0x08006ee9
 8006ea0:	08006ee9 	.word	0x08006ee9
 8006ea4:	08006ed9 	.word	0x08006ed9
 8006ea8:	08006ee9 	.word	0x08006ee9
 8006eac:	08006ee9 	.word	0x08006ee9
 8006eb0:	08006ee9 	.word	0x08006ee9
 8006eb4:	08006ed1 	.word	0x08006ed1
 8006eb8:	08006ee9 	.word	0x08006ee9
 8006ebc:	08006ee9 	.word	0x08006ee9
 8006ec0:	08006ee9 	.word	0x08006ee9
 8006ec4:	08006ee1 	.word	0x08006ee1
 8006ec8:	2300      	movs	r3, #0
 8006eca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ece:	e0d8      	b.n	8007082 <UART_SetConfig+0x2fe>
 8006ed0:	2302      	movs	r3, #2
 8006ed2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ed6:	e0d4      	b.n	8007082 <UART_SetConfig+0x2fe>
 8006ed8:	2304      	movs	r3, #4
 8006eda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ede:	e0d0      	b.n	8007082 <UART_SetConfig+0x2fe>
 8006ee0:	2308      	movs	r3, #8
 8006ee2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ee6:	e0cc      	b.n	8007082 <UART_SetConfig+0x2fe>
 8006ee8:	2310      	movs	r3, #16
 8006eea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006eee:	e0c8      	b.n	8007082 <UART_SetConfig+0x2fe>
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a5e      	ldr	r2, [pc, #376]	@ (8007070 <UART_SetConfig+0x2ec>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d125      	bne.n	8006f46 <UART_SetConfig+0x1c2>
 8006efa:	4b5b      	ldr	r3, [pc, #364]	@ (8007068 <UART_SetConfig+0x2e4>)
 8006efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f00:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006f04:	2b30      	cmp	r3, #48	@ 0x30
 8006f06:	d016      	beq.n	8006f36 <UART_SetConfig+0x1b2>
 8006f08:	2b30      	cmp	r3, #48	@ 0x30
 8006f0a:	d818      	bhi.n	8006f3e <UART_SetConfig+0x1ba>
 8006f0c:	2b20      	cmp	r3, #32
 8006f0e:	d00a      	beq.n	8006f26 <UART_SetConfig+0x1a2>
 8006f10:	2b20      	cmp	r3, #32
 8006f12:	d814      	bhi.n	8006f3e <UART_SetConfig+0x1ba>
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d002      	beq.n	8006f1e <UART_SetConfig+0x19a>
 8006f18:	2b10      	cmp	r3, #16
 8006f1a:	d008      	beq.n	8006f2e <UART_SetConfig+0x1aa>
 8006f1c:	e00f      	b.n	8006f3e <UART_SetConfig+0x1ba>
 8006f1e:	2300      	movs	r3, #0
 8006f20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f24:	e0ad      	b.n	8007082 <UART_SetConfig+0x2fe>
 8006f26:	2302      	movs	r3, #2
 8006f28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f2c:	e0a9      	b.n	8007082 <UART_SetConfig+0x2fe>
 8006f2e:	2304      	movs	r3, #4
 8006f30:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f34:	e0a5      	b.n	8007082 <UART_SetConfig+0x2fe>
 8006f36:	2308      	movs	r3, #8
 8006f38:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f3c:	e0a1      	b.n	8007082 <UART_SetConfig+0x2fe>
 8006f3e:	2310      	movs	r3, #16
 8006f40:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f44:	e09d      	b.n	8007082 <UART_SetConfig+0x2fe>
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a4a      	ldr	r2, [pc, #296]	@ (8007074 <UART_SetConfig+0x2f0>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d125      	bne.n	8006f9c <UART_SetConfig+0x218>
 8006f50:	4b45      	ldr	r3, [pc, #276]	@ (8007068 <UART_SetConfig+0x2e4>)
 8006f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f56:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006f5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f5c:	d016      	beq.n	8006f8c <UART_SetConfig+0x208>
 8006f5e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f60:	d818      	bhi.n	8006f94 <UART_SetConfig+0x210>
 8006f62:	2b80      	cmp	r3, #128	@ 0x80
 8006f64:	d00a      	beq.n	8006f7c <UART_SetConfig+0x1f8>
 8006f66:	2b80      	cmp	r3, #128	@ 0x80
 8006f68:	d814      	bhi.n	8006f94 <UART_SetConfig+0x210>
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d002      	beq.n	8006f74 <UART_SetConfig+0x1f0>
 8006f6e:	2b40      	cmp	r3, #64	@ 0x40
 8006f70:	d008      	beq.n	8006f84 <UART_SetConfig+0x200>
 8006f72:	e00f      	b.n	8006f94 <UART_SetConfig+0x210>
 8006f74:	2300      	movs	r3, #0
 8006f76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f7a:	e082      	b.n	8007082 <UART_SetConfig+0x2fe>
 8006f7c:	2302      	movs	r3, #2
 8006f7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f82:	e07e      	b.n	8007082 <UART_SetConfig+0x2fe>
 8006f84:	2304      	movs	r3, #4
 8006f86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f8a:	e07a      	b.n	8007082 <UART_SetConfig+0x2fe>
 8006f8c:	2308      	movs	r3, #8
 8006f8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f92:	e076      	b.n	8007082 <UART_SetConfig+0x2fe>
 8006f94:	2310      	movs	r3, #16
 8006f96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f9a:	e072      	b.n	8007082 <UART_SetConfig+0x2fe>
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a35      	ldr	r2, [pc, #212]	@ (8007078 <UART_SetConfig+0x2f4>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d12a      	bne.n	8006ffc <UART_SetConfig+0x278>
 8006fa6:	4b30      	ldr	r3, [pc, #192]	@ (8007068 <UART_SetConfig+0x2e4>)
 8006fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fb0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006fb4:	d01a      	beq.n	8006fec <UART_SetConfig+0x268>
 8006fb6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006fba:	d81b      	bhi.n	8006ff4 <UART_SetConfig+0x270>
 8006fbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fc0:	d00c      	beq.n	8006fdc <UART_SetConfig+0x258>
 8006fc2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fc6:	d815      	bhi.n	8006ff4 <UART_SetConfig+0x270>
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d003      	beq.n	8006fd4 <UART_SetConfig+0x250>
 8006fcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fd0:	d008      	beq.n	8006fe4 <UART_SetConfig+0x260>
 8006fd2:	e00f      	b.n	8006ff4 <UART_SetConfig+0x270>
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fda:	e052      	b.n	8007082 <UART_SetConfig+0x2fe>
 8006fdc:	2302      	movs	r3, #2
 8006fde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fe2:	e04e      	b.n	8007082 <UART_SetConfig+0x2fe>
 8006fe4:	2304      	movs	r3, #4
 8006fe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fea:	e04a      	b.n	8007082 <UART_SetConfig+0x2fe>
 8006fec:	2308      	movs	r3, #8
 8006fee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ff2:	e046      	b.n	8007082 <UART_SetConfig+0x2fe>
 8006ff4:	2310      	movs	r3, #16
 8006ff6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ffa:	e042      	b.n	8007082 <UART_SetConfig+0x2fe>
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a17      	ldr	r2, [pc, #92]	@ (8007060 <UART_SetConfig+0x2dc>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d13a      	bne.n	800707c <UART_SetConfig+0x2f8>
 8007006:	4b18      	ldr	r3, [pc, #96]	@ (8007068 <UART_SetConfig+0x2e4>)
 8007008:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800700c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007010:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007014:	d01a      	beq.n	800704c <UART_SetConfig+0x2c8>
 8007016:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800701a:	d81b      	bhi.n	8007054 <UART_SetConfig+0x2d0>
 800701c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007020:	d00c      	beq.n	800703c <UART_SetConfig+0x2b8>
 8007022:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007026:	d815      	bhi.n	8007054 <UART_SetConfig+0x2d0>
 8007028:	2b00      	cmp	r3, #0
 800702a:	d003      	beq.n	8007034 <UART_SetConfig+0x2b0>
 800702c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007030:	d008      	beq.n	8007044 <UART_SetConfig+0x2c0>
 8007032:	e00f      	b.n	8007054 <UART_SetConfig+0x2d0>
 8007034:	2300      	movs	r3, #0
 8007036:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800703a:	e022      	b.n	8007082 <UART_SetConfig+0x2fe>
 800703c:	2302      	movs	r3, #2
 800703e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007042:	e01e      	b.n	8007082 <UART_SetConfig+0x2fe>
 8007044:	2304      	movs	r3, #4
 8007046:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800704a:	e01a      	b.n	8007082 <UART_SetConfig+0x2fe>
 800704c:	2308      	movs	r3, #8
 800704e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007052:	e016      	b.n	8007082 <UART_SetConfig+0x2fe>
 8007054:	2310      	movs	r3, #16
 8007056:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800705a:	e012      	b.n	8007082 <UART_SetConfig+0x2fe>
 800705c:	cfff69f3 	.word	0xcfff69f3
 8007060:	40008000 	.word	0x40008000
 8007064:	40013800 	.word	0x40013800
 8007068:	40021000 	.word	0x40021000
 800706c:	40004400 	.word	0x40004400
 8007070:	40004800 	.word	0x40004800
 8007074:	40004c00 	.word	0x40004c00
 8007078:	40005000 	.word	0x40005000
 800707c:	2310      	movs	r3, #16
 800707e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4aae      	ldr	r2, [pc, #696]	@ (8007340 <UART_SetConfig+0x5bc>)
 8007088:	4293      	cmp	r3, r2
 800708a:	f040 8097 	bne.w	80071bc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800708e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007092:	2b08      	cmp	r3, #8
 8007094:	d823      	bhi.n	80070de <UART_SetConfig+0x35a>
 8007096:	a201      	add	r2, pc, #4	@ (adr r2, 800709c <UART_SetConfig+0x318>)
 8007098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800709c:	080070c1 	.word	0x080070c1
 80070a0:	080070df 	.word	0x080070df
 80070a4:	080070c9 	.word	0x080070c9
 80070a8:	080070df 	.word	0x080070df
 80070ac:	080070cf 	.word	0x080070cf
 80070b0:	080070df 	.word	0x080070df
 80070b4:	080070df 	.word	0x080070df
 80070b8:	080070df 	.word	0x080070df
 80070bc:	080070d7 	.word	0x080070d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070c0:	f7fd fefa 	bl	8004eb8 <HAL_RCC_GetPCLK1Freq>
 80070c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80070c6:	e010      	b.n	80070ea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070c8:	4b9e      	ldr	r3, [pc, #632]	@ (8007344 <UART_SetConfig+0x5c0>)
 80070ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80070cc:	e00d      	b.n	80070ea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070ce:	f7fd fe5b 	bl	8004d88 <HAL_RCC_GetSysClockFreq>
 80070d2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80070d4:	e009      	b.n	80070ea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80070dc:	e005      	b.n	80070ea <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80070de:	2300      	movs	r3, #0
 80070e0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80070e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80070ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	f000 8130 	beq.w	8007352 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070f6:	4a94      	ldr	r2, [pc, #592]	@ (8007348 <UART_SetConfig+0x5c4>)
 80070f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070fc:	461a      	mov	r2, r3
 80070fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007100:	fbb3 f3f2 	udiv	r3, r3, r2
 8007104:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	685a      	ldr	r2, [r3, #4]
 800710a:	4613      	mov	r3, r2
 800710c:	005b      	lsls	r3, r3, #1
 800710e:	4413      	add	r3, r2
 8007110:	69ba      	ldr	r2, [r7, #24]
 8007112:	429a      	cmp	r2, r3
 8007114:	d305      	bcc.n	8007122 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800711c:	69ba      	ldr	r2, [r7, #24]
 800711e:	429a      	cmp	r2, r3
 8007120:	d903      	bls.n	800712a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007128:	e113      	b.n	8007352 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800712a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800712c:	2200      	movs	r2, #0
 800712e:	60bb      	str	r3, [r7, #8]
 8007130:	60fa      	str	r2, [r7, #12]
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007136:	4a84      	ldr	r2, [pc, #528]	@ (8007348 <UART_SetConfig+0x5c4>)
 8007138:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800713c:	b29b      	uxth	r3, r3
 800713e:	2200      	movs	r2, #0
 8007140:	603b      	str	r3, [r7, #0]
 8007142:	607a      	str	r2, [r7, #4]
 8007144:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007148:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800714c:	f7f9 fdb4 	bl	8000cb8 <__aeabi_uldivmod>
 8007150:	4602      	mov	r2, r0
 8007152:	460b      	mov	r3, r1
 8007154:	4610      	mov	r0, r2
 8007156:	4619      	mov	r1, r3
 8007158:	f04f 0200 	mov.w	r2, #0
 800715c:	f04f 0300 	mov.w	r3, #0
 8007160:	020b      	lsls	r3, r1, #8
 8007162:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007166:	0202      	lsls	r2, r0, #8
 8007168:	6979      	ldr	r1, [r7, #20]
 800716a:	6849      	ldr	r1, [r1, #4]
 800716c:	0849      	lsrs	r1, r1, #1
 800716e:	2000      	movs	r0, #0
 8007170:	460c      	mov	r4, r1
 8007172:	4605      	mov	r5, r0
 8007174:	eb12 0804 	adds.w	r8, r2, r4
 8007178:	eb43 0905 	adc.w	r9, r3, r5
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	469a      	mov	sl, r3
 8007184:	4693      	mov	fp, r2
 8007186:	4652      	mov	r2, sl
 8007188:	465b      	mov	r3, fp
 800718a:	4640      	mov	r0, r8
 800718c:	4649      	mov	r1, r9
 800718e:	f7f9 fd93 	bl	8000cb8 <__aeabi_uldivmod>
 8007192:	4602      	mov	r2, r0
 8007194:	460b      	mov	r3, r1
 8007196:	4613      	mov	r3, r2
 8007198:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800719a:	6a3b      	ldr	r3, [r7, #32]
 800719c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071a0:	d308      	bcc.n	80071b4 <UART_SetConfig+0x430>
 80071a2:	6a3b      	ldr	r3, [r7, #32]
 80071a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80071a8:	d204      	bcs.n	80071b4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	6a3a      	ldr	r2, [r7, #32]
 80071b0:	60da      	str	r2, [r3, #12]
 80071b2:	e0ce      	b.n	8007352 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80071b4:	2301      	movs	r3, #1
 80071b6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80071ba:	e0ca      	b.n	8007352 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	69db      	ldr	r3, [r3, #28]
 80071c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80071c4:	d166      	bne.n	8007294 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80071c6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80071ca:	2b08      	cmp	r3, #8
 80071cc:	d827      	bhi.n	800721e <UART_SetConfig+0x49a>
 80071ce:	a201      	add	r2, pc, #4	@ (adr r2, 80071d4 <UART_SetConfig+0x450>)
 80071d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d4:	080071f9 	.word	0x080071f9
 80071d8:	08007201 	.word	0x08007201
 80071dc:	08007209 	.word	0x08007209
 80071e0:	0800721f 	.word	0x0800721f
 80071e4:	0800720f 	.word	0x0800720f
 80071e8:	0800721f 	.word	0x0800721f
 80071ec:	0800721f 	.word	0x0800721f
 80071f0:	0800721f 	.word	0x0800721f
 80071f4:	08007217 	.word	0x08007217
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071f8:	f7fd fe5e 	bl	8004eb8 <HAL_RCC_GetPCLK1Freq>
 80071fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80071fe:	e014      	b.n	800722a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007200:	f7fd fe70 	bl	8004ee4 <HAL_RCC_GetPCLK2Freq>
 8007204:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007206:	e010      	b.n	800722a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007208:	4b4e      	ldr	r3, [pc, #312]	@ (8007344 <UART_SetConfig+0x5c0>)
 800720a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800720c:	e00d      	b.n	800722a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800720e:	f7fd fdbb 	bl	8004d88 <HAL_RCC_GetSysClockFreq>
 8007212:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007214:	e009      	b.n	800722a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007216:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800721a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800721c:	e005      	b.n	800722a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800721e:	2300      	movs	r3, #0
 8007220:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007228:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800722a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800722c:	2b00      	cmp	r3, #0
 800722e:	f000 8090 	beq.w	8007352 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007236:	4a44      	ldr	r2, [pc, #272]	@ (8007348 <UART_SetConfig+0x5c4>)
 8007238:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800723c:	461a      	mov	r2, r3
 800723e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007240:	fbb3 f3f2 	udiv	r3, r3, r2
 8007244:	005a      	lsls	r2, r3, #1
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	085b      	lsrs	r3, r3, #1
 800724c:	441a      	add	r2, r3
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	fbb2 f3f3 	udiv	r3, r2, r3
 8007256:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007258:	6a3b      	ldr	r3, [r7, #32]
 800725a:	2b0f      	cmp	r3, #15
 800725c:	d916      	bls.n	800728c <UART_SetConfig+0x508>
 800725e:	6a3b      	ldr	r3, [r7, #32]
 8007260:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007264:	d212      	bcs.n	800728c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007266:	6a3b      	ldr	r3, [r7, #32]
 8007268:	b29b      	uxth	r3, r3
 800726a:	f023 030f 	bic.w	r3, r3, #15
 800726e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007270:	6a3b      	ldr	r3, [r7, #32]
 8007272:	085b      	lsrs	r3, r3, #1
 8007274:	b29b      	uxth	r3, r3
 8007276:	f003 0307 	and.w	r3, r3, #7
 800727a:	b29a      	uxth	r2, r3
 800727c:	8bfb      	ldrh	r3, [r7, #30]
 800727e:	4313      	orrs	r3, r2
 8007280:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	8bfa      	ldrh	r2, [r7, #30]
 8007288:	60da      	str	r2, [r3, #12]
 800728a:	e062      	b.n	8007352 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800728c:	2301      	movs	r3, #1
 800728e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007292:	e05e      	b.n	8007352 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007294:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007298:	2b08      	cmp	r3, #8
 800729a:	d828      	bhi.n	80072ee <UART_SetConfig+0x56a>
 800729c:	a201      	add	r2, pc, #4	@ (adr r2, 80072a4 <UART_SetConfig+0x520>)
 800729e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072a2:	bf00      	nop
 80072a4:	080072c9 	.word	0x080072c9
 80072a8:	080072d1 	.word	0x080072d1
 80072ac:	080072d9 	.word	0x080072d9
 80072b0:	080072ef 	.word	0x080072ef
 80072b4:	080072df 	.word	0x080072df
 80072b8:	080072ef 	.word	0x080072ef
 80072bc:	080072ef 	.word	0x080072ef
 80072c0:	080072ef 	.word	0x080072ef
 80072c4:	080072e7 	.word	0x080072e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072c8:	f7fd fdf6 	bl	8004eb8 <HAL_RCC_GetPCLK1Freq>
 80072cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80072ce:	e014      	b.n	80072fa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072d0:	f7fd fe08 	bl	8004ee4 <HAL_RCC_GetPCLK2Freq>
 80072d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80072d6:	e010      	b.n	80072fa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072d8:	4b1a      	ldr	r3, [pc, #104]	@ (8007344 <UART_SetConfig+0x5c0>)
 80072da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80072dc:	e00d      	b.n	80072fa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072de:	f7fd fd53 	bl	8004d88 <HAL_RCC_GetSysClockFreq>
 80072e2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80072e4:	e009      	b.n	80072fa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80072ec:	e005      	b.n	80072fa <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80072ee:	2300      	movs	r3, #0
 80072f0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80072f8:	bf00      	nop
    }

    if (pclk != 0U)
 80072fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d028      	beq.n	8007352 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007304:	4a10      	ldr	r2, [pc, #64]	@ (8007348 <UART_SetConfig+0x5c4>)
 8007306:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800730a:	461a      	mov	r2, r3
 800730c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800730e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	085b      	lsrs	r3, r3, #1
 8007318:	441a      	add	r2, r3
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007322:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007324:	6a3b      	ldr	r3, [r7, #32]
 8007326:	2b0f      	cmp	r3, #15
 8007328:	d910      	bls.n	800734c <UART_SetConfig+0x5c8>
 800732a:	6a3b      	ldr	r3, [r7, #32]
 800732c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007330:	d20c      	bcs.n	800734c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007332:	6a3b      	ldr	r3, [r7, #32]
 8007334:	b29a      	uxth	r2, r3
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	60da      	str	r2, [r3, #12]
 800733c:	e009      	b.n	8007352 <UART_SetConfig+0x5ce>
 800733e:	bf00      	nop
 8007340:	40008000 	.word	0x40008000
 8007344:	00f42400 	.word	0x00f42400
 8007348:	0800d2b4 	.word	0x0800d2b4
      }
      else
      {
        ret = HAL_ERROR;
 800734c:	2301      	movs	r3, #1
 800734e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	2201      	movs	r2, #1
 8007356:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	2201      	movs	r2, #1
 800735e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	2200      	movs	r2, #0
 8007366:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	2200      	movs	r2, #0
 800736c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800736e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007372:	4618      	mov	r0, r3
 8007374:	3730      	adds	r7, #48	@ 0x30
 8007376:	46bd      	mov	sp, r7
 8007378:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800737c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007388:	f003 0308 	and.w	r3, r3, #8
 800738c:	2b00      	cmp	r3, #0
 800738e:	d00a      	beq.n	80073a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	430a      	orrs	r2, r1
 80073a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073aa:	f003 0301 	and.w	r3, r3, #1
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00a      	beq.n	80073c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	430a      	orrs	r2, r1
 80073c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073cc:	f003 0302 	and.w	r3, r3, #2
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d00a      	beq.n	80073ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	430a      	orrs	r2, r1
 80073e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073ee:	f003 0304 	and.w	r3, r3, #4
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d00a      	beq.n	800740c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	430a      	orrs	r2, r1
 800740a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007410:	f003 0310 	and.w	r3, r3, #16
 8007414:	2b00      	cmp	r3, #0
 8007416:	d00a      	beq.n	800742e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	430a      	orrs	r2, r1
 800742c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007432:	f003 0320 	and.w	r3, r3, #32
 8007436:	2b00      	cmp	r3, #0
 8007438:	d00a      	beq.n	8007450 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	430a      	orrs	r2, r1
 800744e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007454:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007458:	2b00      	cmp	r3, #0
 800745a:	d01a      	beq.n	8007492 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	430a      	orrs	r2, r1
 8007470:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007476:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800747a:	d10a      	bne.n	8007492 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	430a      	orrs	r2, r1
 8007490:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800749a:	2b00      	cmp	r3, #0
 800749c:	d00a      	beq.n	80074b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	430a      	orrs	r2, r1
 80074b2:	605a      	str	r2, [r3, #4]
  }
}
 80074b4:	bf00      	nop
 80074b6:	370c      	adds	r7, #12
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b098      	sub	sp, #96	@ 0x60
 80074c4:	af02      	add	r7, sp, #8
 80074c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80074d0:	f7fb f904 	bl	80026dc <HAL_GetTick>
 80074d4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f003 0308 	and.w	r3, r3, #8
 80074e0:	2b08      	cmp	r3, #8
 80074e2:	d12f      	bne.n	8007544 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80074e8:	9300      	str	r3, [sp, #0]
 80074ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074ec:	2200      	movs	r2, #0
 80074ee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 f88e 	bl	8007614 <UART_WaitOnFlagUntilTimeout>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d022      	beq.n	8007544 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007506:	e853 3f00 	ldrex	r3, [r3]
 800750a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800750c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800750e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007512:	653b      	str	r3, [r7, #80]	@ 0x50
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	461a      	mov	r2, r3
 800751a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800751c:	647b      	str	r3, [r7, #68]	@ 0x44
 800751e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007520:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007522:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007524:	e841 2300 	strex	r3, r2, [r1]
 8007528:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800752a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800752c:	2b00      	cmp	r3, #0
 800752e:	d1e6      	bne.n	80074fe <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2220      	movs	r2, #32
 8007534:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007540:	2303      	movs	r3, #3
 8007542:	e063      	b.n	800760c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f003 0304 	and.w	r3, r3, #4
 800754e:	2b04      	cmp	r3, #4
 8007550:	d149      	bne.n	80075e6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007552:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007556:	9300      	str	r3, [sp, #0]
 8007558:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800755a:	2200      	movs	r2, #0
 800755c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 f857 	bl	8007614 <UART_WaitOnFlagUntilTimeout>
 8007566:	4603      	mov	r3, r0
 8007568:	2b00      	cmp	r3, #0
 800756a:	d03c      	beq.n	80075e6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007574:	e853 3f00 	ldrex	r3, [r3]
 8007578:	623b      	str	r3, [r7, #32]
   return(result);
 800757a:	6a3b      	ldr	r3, [r7, #32]
 800757c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007580:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	461a      	mov	r2, r3
 8007588:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800758a:	633b      	str	r3, [r7, #48]	@ 0x30
 800758c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007590:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007592:	e841 2300 	strex	r3, r2, [r1]
 8007596:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800759a:	2b00      	cmp	r3, #0
 800759c:	d1e6      	bne.n	800756c <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	3308      	adds	r3, #8
 80075a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	e853 3f00 	ldrex	r3, [r3]
 80075ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	f023 0301 	bic.w	r3, r3, #1
 80075b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	3308      	adds	r3, #8
 80075bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80075be:	61fa      	str	r2, [r7, #28]
 80075c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c2:	69b9      	ldr	r1, [r7, #24]
 80075c4:	69fa      	ldr	r2, [r7, #28]
 80075c6:	e841 2300 	strex	r3, r2, [r1]
 80075ca:	617b      	str	r3, [r7, #20]
   return(result);
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d1e5      	bne.n	800759e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2220      	movs	r2, #32
 80075d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2200      	movs	r2, #0
 80075de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075e2:	2303      	movs	r3, #3
 80075e4:	e012      	b.n	800760c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2220      	movs	r2, #32
 80075ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2220      	movs	r2, #32
 80075f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2200      	movs	r2, #0
 80075fa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2200      	movs	r2, #0
 8007606:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800760a:	2300      	movs	r3, #0
}
 800760c:	4618      	mov	r0, r3
 800760e:	3758      	adds	r7, #88	@ 0x58
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b084      	sub	sp, #16
 8007618:	af00      	add	r7, sp, #0
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	60b9      	str	r1, [r7, #8]
 800761e:	603b      	str	r3, [r7, #0]
 8007620:	4613      	mov	r3, r2
 8007622:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007624:	e04f      	b.n	80076c6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007626:	69bb      	ldr	r3, [r7, #24]
 8007628:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800762c:	d04b      	beq.n	80076c6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800762e:	f7fb f855 	bl	80026dc <HAL_GetTick>
 8007632:	4602      	mov	r2, r0
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	1ad3      	subs	r3, r2, r3
 8007638:	69ba      	ldr	r2, [r7, #24]
 800763a:	429a      	cmp	r2, r3
 800763c:	d302      	bcc.n	8007644 <UART_WaitOnFlagUntilTimeout+0x30>
 800763e:	69bb      	ldr	r3, [r7, #24]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d101      	bne.n	8007648 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007644:	2303      	movs	r3, #3
 8007646:	e04e      	b.n	80076e6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f003 0304 	and.w	r3, r3, #4
 8007652:	2b00      	cmp	r3, #0
 8007654:	d037      	beq.n	80076c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	2b80      	cmp	r3, #128	@ 0x80
 800765a:	d034      	beq.n	80076c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	2b40      	cmp	r3, #64	@ 0x40
 8007660:	d031      	beq.n	80076c6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	69db      	ldr	r3, [r3, #28]
 8007668:	f003 0308 	and.w	r3, r3, #8
 800766c:	2b08      	cmp	r3, #8
 800766e:	d110      	bne.n	8007692 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	2208      	movs	r2, #8
 8007676:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007678:	68f8      	ldr	r0, [r7, #12]
 800767a:	f000 f95b 	bl	8007934 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2208      	movs	r2, #8
 8007682:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2200      	movs	r2, #0
 800768a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	e029      	b.n	80076e6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	69db      	ldr	r3, [r3, #28]
 8007698:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800769c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076a0:	d111      	bne.n	80076c6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80076aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80076ac:	68f8      	ldr	r0, [r7, #12]
 80076ae:	f000 f941 	bl	8007934 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2220      	movs	r2, #32
 80076b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2200      	movs	r2, #0
 80076be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80076c2:	2303      	movs	r3, #3
 80076c4:	e00f      	b.n	80076e6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	69da      	ldr	r2, [r3, #28]
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	4013      	ands	r3, r2
 80076d0:	68ba      	ldr	r2, [r7, #8]
 80076d2:	429a      	cmp	r2, r3
 80076d4:	bf0c      	ite	eq
 80076d6:	2301      	moveq	r3, #1
 80076d8:	2300      	movne	r3, #0
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	461a      	mov	r2, r3
 80076de:	79fb      	ldrb	r3, [r7, #7]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d0a0      	beq.n	8007626 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80076e4:	2300      	movs	r3, #0
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3710      	adds	r7, #16
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
	...

080076f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b0a3      	sub	sp, #140	@ 0x8c
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	60b9      	str	r1, [r7, #8]
 80076fa:	4613      	mov	r3, r2
 80076fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	68ba      	ldr	r2, [r7, #8]
 8007702:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	88fa      	ldrh	r2, [r7, #6]
 8007708:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	88fa      	ldrh	r2, [r7, #6]
 8007710:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2200      	movs	r2, #0
 8007718:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007722:	d10e      	bne.n	8007742 <UART_Start_Receive_IT+0x52>
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	691b      	ldr	r3, [r3, #16]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d105      	bne.n	8007738 <UART_Start_Receive_IT+0x48>
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007732:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007736:	e02d      	b.n	8007794 <UART_Start_Receive_IT+0xa4>
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	22ff      	movs	r2, #255	@ 0xff
 800773c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007740:	e028      	b.n	8007794 <UART_Start_Receive_IT+0xa4>
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d10d      	bne.n	8007766 <UART_Start_Receive_IT+0x76>
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	691b      	ldr	r3, [r3, #16]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d104      	bne.n	800775c <UART_Start_Receive_IT+0x6c>
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	22ff      	movs	r2, #255	@ 0xff
 8007756:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800775a:	e01b      	b.n	8007794 <UART_Start_Receive_IT+0xa4>
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	227f      	movs	r2, #127	@ 0x7f
 8007760:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007764:	e016      	b.n	8007794 <UART_Start_Receive_IT+0xa4>
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800776e:	d10d      	bne.n	800778c <UART_Start_Receive_IT+0x9c>
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	691b      	ldr	r3, [r3, #16]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d104      	bne.n	8007782 <UART_Start_Receive_IT+0x92>
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	227f      	movs	r2, #127	@ 0x7f
 800777c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007780:	e008      	b.n	8007794 <UART_Start_Receive_IT+0xa4>
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	223f      	movs	r2, #63	@ 0x3f
 8007786:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800778a:	e003      	b.n	8007794 <UART_Start_Receive_IT+0xa4>
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2200      	movs	r2, #0
 8007790:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2200      	movs	r2, #0
 8007798:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2222      	movs	r2, #34	@ 0x22
 80077a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	3308      	adds	r3, #8
 80077aa:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80077ae:	e853 3f00 	ldrex	r3, [r3]
 80077b2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80077b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80077b6:	f043 0301 	orr.w	r3, r3, #1
 80077ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	3308      	adds	r3, #8
 80077c4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80077c8:	673a      	str	r2, [r7, #112]	@ 0x70
 80077ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077cc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80077ce:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80077d0:	e841 2300 	strex	r3, r2, [r1]
 80077d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80077d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d1e3      	bne.n	80077a4 <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077e4:	d14f      	bne.n	8007886 <UART_Start_Receive_IT+0x196>
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80077ec:	88fa      	ldrh	r2, [r7, #6]
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d349      	bcc.n	8007886 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077fa:	d107      	bne.n	800780c <UART_Start_Receive_IT+0x11c>
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	691b      	ldr	r3, [r3, #16]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d103      	bne.n	800780c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	4a47      	ldr	r2, [pc, #284]	@ (8007924 <UART_Start_Receive_IT+0x234>)
 8007808:	675a      	str	r2, [r3, #116]	@ 0x74
 800780a:	e002      	b.n	8007812 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	4a46      	ldr	r2, [pc, #280]	@ (8007928 <UART_Start_Receive_IT+0x238>)
 8007810:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	691b      	ldr	r3, [r3, #16]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d01a      	beq.n	8007850 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007820:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007822:	e853 3f00 	ldrex	r3, [r3]
 8007826:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007828:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800782a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800782e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	461a      	mov	r2, r3
 8007838:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800783c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800783e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007840:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007842:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007844:	e841 2300 	strex	r3, r2, [r1]
 8007848:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800784a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800784c:	2b00      	cmp	r3, #0
 800784e:	d1e4      	bne.n	800781a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	3308      	adds	r3, #8
 8007856:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007858:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800785a:	e853 3f00 	ldrex	r3, [r3]
 800785e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007862:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007866:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	3308      	adds	r3, #8
 800786e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007870:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007872:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007874:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007876:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007878:	e841 2300 	strex	r3, r2, [r1]
 800787c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800787e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007880:	2b00      	cmp	r3, #0
 8007882:	d1e5      	bne.n	8007850 <UART_Start_Receive_IT+0x160>
 8007884:	e046      	b.n	8007914 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800788e:	d107      	bne.n	80078a0 <UART_Start_Receive_IT+0x1b0>
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	691b      	ldr	r3, [r3, #16]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d103      	bne.n	80078a0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	4a24      	ldr	r2, [pc, #144]	@ (800792c <UART_Start_Receive_IT+0x23c>)
 800789c:	675a      	str	r2, [r3, #116]	@ 0x74
 800789e:	e002      	b.n	80078a6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	4a23      	ldr	r2, [pc, #140]	@ (8007930 <UART_Start_Receive_IT+0x240>)
 80078a4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	691b      	ldr	r3, [r3, #16]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d019      	beq.n	80078e2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078b6:	e853 3f00 	ldrex	r3, [r3]
 80078ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80078bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078be:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80078c2:	677b      	str	r3, [r7, #116]	@ 0x74
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	461a      	mov	r2, r3
 80078ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80078cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80078ce:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80078d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80078d4:	e841 2300 	strex	r3, r2, [r1]
 80078d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80078da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d1e6      	bne.n	80078ae <UART_Start_Receive_IT+0x1be>
 80078e0:	e018      	b.n	8007914 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	e853 3f00 	ldrex	r3, [r3]
 80078ee:	613b      	str	r3, [r7, #16]
   return(result);
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	f043 0320 	orr.w	r3, r3, #32
 80078f6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	461a      	mov	r2, r3
 80078fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007900:	623b      	str	r3, [r7, #32]
 8007902:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007904:	69f9      	ldr	r1, [r7, #28]
 8007906:	6a3a      	ldr	r2, [r7, #32]
 8007908:	e841 2300 	strex	r3, r2, [r1]
 800790c:	61bb      	str	r3, [r7, #24]
   return(result);
 800790e:	69bb      	ldr	r3, [r7, #24]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d1e6      	bne.n	80078e2 <UART_Start_Receive_IT+0x1f2>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	378c      	adds	r7, #140	@ 0x8c
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr
 8007922:	bf00      	nop
 8007924:	08008165 	.word	0x08008165
 8007928:	08007dfd 	.word	0x08007dfd
 800792c:	08007c41 	.word	0x08007c41
 8007930:	08007a85 	.word	0x08007a85

08007934 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007934:	b480      	push	{r7}
 8007936:	b095      	sub	sp, #84	@ 0x54
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007942:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007944:	e853 3f00 	ldrex	r3, [r3]
 8007948:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800794a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800794c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007950:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	461a      	mov	r2, r3
 8007958:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800795a:	643b      	str	r3, [r7, #64]	@ 0x40
 800795c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800795e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007960:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007962:	e841 2300 	strex	r3, r2, [r1]
 8007966:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800796a:	2b00      	cmp	r3, #0
 800796c:	d1e6      	bne.n	800793c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	3308      	adds	r3, #8
 8007974:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007976:	6a3b      	ldr	r3, [r7, #32]
 8007978:	e853 3f00 	ldrex	r3, [r3]
 800797c:	61fb      	str	r3, [r7, #28]
   return(result);
 800797e:	69fb      	ldr	r3, [r7, #28]
 8007980:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007984:	f023 0301 	bic.w	r3, r3, #1
 8007988:	64bb      	str	r3, [r7, #72]	@ 0x48
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	3308      	adds	r3, #8
 8007990:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007992:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007994:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007996:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007998:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800799a:	e841 2300 	strex	r3, r2, [r1]
 800799e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80079a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d1e3      	bne.n	800796e <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d118      	bne.n	80079e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	e853 3f00 	ldrex	r3, [r3]
 80079ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	f023 0310 	bic.w	r3, r3, #16
 80079c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	461a      	mov	r2, r3
 80079ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079cc:	61bb      	str	r3, [r7, #24]
 80079ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d0:	6979      	ldr	r1, [r7, #20]
 80079d2:	69ba      	ldr	r2, [r7, #24]
 80079d4:	e841 2300 	strex	r3, r2, [r1]
 80079d8:	613b      	str	r3, [r7, #16]
   return(result);
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d1e6      	bne.n	80079ae <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2220      	movs	r2, #32
 80079e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80079f4:	bf00      	nop
 80079f6:	3754      	adds	r7, #84	@ 0x54
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr

08007a00 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a0c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2200      	movs	r2, #0
 8007a12:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a1e:	68f8      	ldr	r0, [r7, #12]
 8007a20:	f7ff f99a 	bl	8006d58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a24:	bf00      	nop
 8007a26:	3710      	adds	r7, #16
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b088      	sub	sp, #32
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	e853 3f00 	ldrex	r3, [r3]
 8007a40:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a48:	61fb      	str	r3, [r7, #28]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	461a      	mov	r2, r3
 8007a50:	69fb      	ldr	r3, [r7, #28]
 8007a52:	61bb      	str	r3, [r7, #24]
 8007a54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a56:	6979      	ldr	r1, [r7, #20]
 8007a58:	69ba      	ldr	r2, [r7, #24]
 8007a5a:	e841 2300 	strex	r3, r2, [r1]
 8007a5e:	613b      	str	r3, [r7, #16]
   return(result);
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d1e6      	bne.n	8007a34 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2220      	movs	r2, #32
 8007a6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2200      	movs	r2, #0
 8007a72:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f7ff f965 	bl	8006d44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a7a:	bf00      	nop
 8007a7c:	3720      	adds	r7, #32
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
	...

08007a84 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b09c      	sub	sp, #112	@ 0x70
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007a92:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a9c:	2b22      	cmp	r3, #34	@ 0x22
 8007a9e:	f040 80be 	bne.w	8007c1e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007aa8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007aac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007ab0:	b2d9      	uxtb	r1, r3
 8007ab2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007ab6:	b2da      	uxtb	r2, r3
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007abc:	400a      	ands	r2, r1
 8007abe:	b2d2      	uxtb	r2, r2
 8007ac0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ac6:	1c5a      	adds	r2, r3, #1
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	3b01      	subs	r3, #1
 8007ad6:	b29a      	uxth	r2, r3
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	f040 80a3 	bne.w	8007c32 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007af4:	e853 3f00 	ldrex	r3, [r3]
 8007af8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007afa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007afc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	461a      	mov	r2, r3
 8007b08:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007b0a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007b0c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b0e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007b10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007b12:	e841 2300 	strex	r3, r2, [r1]
 8007b16:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007b18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d1e6      	bne.n	8007aec <UART_RxISR_8BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	3308      	adds	r3, #8
 8007b24:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b28:	e853 3f00 	ldrex	r3, [r3]
 8007b2c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007b2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b30:	f023 0301 	bic.w	r3, r3, #1
 8007b34:	667b      	str	r3, [r7, #100]	@ 0x64
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	3308      	adds	r3, #8
 8007b3c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007b3e:	647a      	str	r2, [r7, #68]	@ 0x44
 8007b40:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b42:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b46:	e841 2300 	strex	r3, r2, [r1]
 8007b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007b4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d1e5      	bne.n	8007b1e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2220      	movs	r2, #32
 8007b56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a34      	ldr	r2, [pc, #208]	@ (8007c3c <UART_RxISR_8BIT+0x1b8>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d01f      	beq.n	8007bb0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d018      	beq.n	8007bb0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b86:	e853 3f00 	ldrex	r3, [r3]
 8007b8a:	623b      	str	r3, [r7, #32]
   return(result);
 8007b8c:	6a3b      	ldr	r3, [r7, #32]
 8007b8e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007b92:	663b      	str	r3, [r7, #96]	@ 0x60
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	461a      	mov	r2, r3
 8007b9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ba2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ba4:	e841 2300 	strex	r3, r2, [r1]
 8007ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d1e6      	bne.n	8007b7e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d12e      	bne.n	8007c16 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	e853 3f00 	ldrex	r3, [r3]
 8007bca:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f023 0310 	bic.w	r3, r3, #16
 8007bd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	461a      	mov	r2, r3
 8007bda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007bdc:	61fb      	str	r3, [r7, #28]
 8007bde:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be0:	69b9      	ldr	r1, [r7, #24]
 8007be2:	69fa      	ldr	r2, [r7, #28]
 8007be4:	e841 2300 	strex	r3, r2, [r1]
 8007be8:	617b      	str	r3, [r7, #20]
   return(result);
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d1e6      	bne.n	8007bbe <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	69db      	ldr	r3, [r3, #28]
 8007bf6:	f003 0310 	and.w	r3, r3, #16
 8007bfa:	2b10      	cmp	r3, #16
 8007bfc:	d103      	bne.n	8007c06 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	2210      	movs	r2, #16
 8007c04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f7ff f8ac 	bl	8006d6c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007c14:	e00d      	b.n	8007c32 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f7f9 ff42 	bl	8001aa0 <HAL_UART_RxCpltCallback>
}
 8007c1c:	e009      	b.n	8007c32 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	8b1b      	ldrh	r3, [r3, #24]
 8007c24:	b29a      	uxth	r2, r3
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f042 0208 	orr.w	r2, r2, #8
 8007c2e:	b292      	uxth	r2, r2
 8007c30:	831a      	strh	r2, [r3, #24]
}
 8007c32:	bf00      	nop
 8007c34:	3770      	adds	r7, #112	@ 0x70
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	bf00      	nop
 8007c3c:	40008000 	.word	0x40008000

08007c40 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b09c      	sub	sp, #112	@ 0x70
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007c4e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c58:	2b22      	cmp	r3, #34	@ 0x22
 8007c5a:	f040 80be 	bne.w	8007dda <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007c64:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c6c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007c6e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007c72:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007c76:	4013      	ands	r3, r2
 8007c78:	b29a      	uxth	r2, r3
 8007c7a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007c7c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c82:	1c9a      	adds	r2, r3, #2
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	3b01      	subs	r3, #1
 8007c92:	b29a      	uxth	r2, r3
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	f040 80a3 	bne.w	8007dee <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007cb0:	e853 3f00 	ldrex	r3, [r3]
 8007cb4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007cb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007cb8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007cbc:	667b      	str	r3, [r7, #100]	@ 0x64
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007cc6:	657b      	str	r3, [r7, #84]	@ 0x54
 8007cc8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cca:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007ccc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007cce:	e841 2300 	strex	r3, r2, [r1]
 8007cd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007cd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d1e6      	bne.n	8007ca8 <UART_RxISR_16BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	3308      	adds	r3, #8
 8007ce0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ce4:	e853 3f00 	ldrex	r3, [r3]
 8007ce8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cec:	f023 0301 	bic.w	r3, r3, #1
 8007cf0:	663b      	str	r3, [r7, #96]	@ 0x60
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	3308      	adds	r3, #8
 8007cf8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007cfa:	643a      	str	r2, [r7, #64]	@ 0x40
 8007cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cfe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007d00:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007d02:	e841 2300 	strex	r3, r2, [r1]
 8007d06:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d1e5      	bne.n	8007cda <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2220      	movs	r2, #32
 8007d12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a34      	ldr	r2, [pc, #208]	@ (8007df8 <UART_RxISR_16BIT+0x1b8>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d01f      	beq.n	8007d6c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d018      	beq.n	8007d6c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d40:	6a3b      	ldr	r3, [r7, #32]
 8007d42:	e853 3f00 	ldrex	r3, [r3]
 8007d46:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d48:	69fb      	ldr	r3, [r7, #28]
 8007d4a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007d4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	461a      	mov	r2, r3
 8007d56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d5a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007d5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d60:	e841 2300 	strex	r3, r2, [r1]
 8007d64:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d1e6      	bne.n	8007d3a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d12e      	bne.n	8007dd2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	e853 3f00 	ldrex	r3, [r3]
 8007d86:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	f023 0310 	bic.w	r3, r3, #16
 8007d8e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	461a      	mov	r2, r3
 8007d96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007d98:	61bb      	str	r3, [r7, #24]
 8007d9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d9c:	6979      	ldr	r1, [r7, #20]
 8007d9e:	69ba      	ldr	r2, [r7, #24]
 8007da0:	e841 2300 	strex	r3, r2, [r1]
 8007da4:	613b      	str	r3, [r7, #16]
   return(result);
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d1e6      	bne.n	8007d7a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	69db      	ldr	r3, [r3, #28]
 8007db2:	f003 0310 	and.w	r3, r3, #16
 8007db6:	2b10      	cmp	r3, #16
 8007db8:	d103      	bne.n	8007dc2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	2210      	movs	r2, #16
 8007dc0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007dc8:	4619      	mov	r1, r3
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f7fe ffce 	bl	8006d6c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007dd0:	e00d      	b.n	8007dee <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f7f9 fe64 	bl	8001aa0 <HAL_UART_RxCpltCallback>
}
 8007dd8:	e009      	b.n	8007dee <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	8b1b      	ldrh	r3, [r3, #24]
 8007de0:	b29a      	uxth	r2, r3
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f042 0208 	orr.w	r2, r2, #8
 8007dea:	b292      	uxth	r2, r2
 8007dec:	831a      	strh	r2, [r3, #24]
}
 8007dee:	bf00      	nop
 8007df0:	3770      	adds	r7, #112	@ 0x70
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	40008000 	.word	0x40008000

08007dfc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b0ac      	sub	sp, #176	@ 0xb0
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007e0a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	69db      	ldr	r3, [r3, #28]
 8007e14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e32:	2b22      	cmp	r3, #34	@ 0x22
 8007e34:	f040 8183 	bne.w	800813e <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007e3e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007e42:	e126      	b.n	8008092 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007e4a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007e4e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8007e52:	b2d9      	uxtb	r1, r3
 8007e54:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8007e58:	b2da      	uxtb	r2, r3
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e5e:	400a      	ands	r2, r1
 8007e60:	b2d2      	uxtb	r2, r2
 8007e62:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e68:	1c5a      	adds	r2, r3, #1
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007e74:	b29b      	uxth	r3, r3
 8007e76:	3b01      	subs	r3, #1
 8007e78:	b29a      	uxth	r2, r3
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	69db      	ldr	r3, [r3, #28]
 8007e86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007e8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e8e:	f003 0307 	and.w	r3, r3, #7
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d053      	beq.n	8007f3e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007e96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e9a:	f003 0301 	and.w	r3, r3, #1
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d011      	beq.n	8007ec6 <UART_RxISR_8BIT_FIFOEN+0xca>
 8007ea2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007ea6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d00b      	beq.n	8007ec6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ebc:	f043 0201 	orr.w	r2, r3, #1
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ec6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007eca:	f003 0302 	and.w	r3, r3, #2
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d011      	beq.n	8007ef6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007ed2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007ed6:	f003 0301 	and.w	r3, r3, #1
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d00b      	beq.n	8007ef6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	2202      	movs	r2, #2
 8007ee4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007eec:	f043 0204 	orr.w	r2, r3, #4
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ef6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007efa:	f003 0304 	and.w	r3, r3, #4
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d011      	beq.n	8007f26 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007f02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007f06:	f003 0301 	and.w	r3, r3, #1
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d00b      	beq.n	8007f26 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	2204      	movs	r2, #4
 8007f14:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f1c:	f043 0202 	orr.w	r2, r3, #2
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d006      	beq.n	8007f3e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f7fe ff11 	bl	8006d58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	f040 80a3 	bne.w	8008092 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007f54:	e853 3f00 	ldrex	r3, [r3]
 8007f58:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8007f5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	461a      	mov	r2, r3
 8007f6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007f70:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f72:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8007f74:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007f76:	e841 2300 	strex	r3, r2, [r1]
 8007f7a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8007f7c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d1e4      	bne.n	8007f4c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	3308      	adds	r3, #8
 8007f88:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007f8c:	e853 3f00 	ldrex	r3, [r3]
 8007f90:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8007f92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007f94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007f98:	f023 0301 	bic.w	r3, r3, #1
 8007f9c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	3308      	adds	r3, #8
 8007fa6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007faa:	66ba      	str	r2, [r7, #104]	@ 0x68
 8007fac:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fae:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007fb0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007fb2:	e841 2300 	strex	r3, r2, [r1]
 8007fb6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007fb8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d1e1      	bne.n	8007f82 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2220      	movs	r2, #32
 8007fc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a61      	ldr	r2, [pc, #388]	@ (800815c <UART_RxISR_8BIT_FIFOEN+0x360>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d021      	beq.n	8008020 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d01a      	beq.n	8008020 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ff0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ff2:	e853 3f00 	ldrex	r3, [r3]
 8007ff6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007ff8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ffa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007ffe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	461a      	mov	r2, r3
 8008008:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800800c:	657b      	str	r3, [r7, #84]	@ 0x54
 800800e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008010:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008012:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008014:	e841 2300 	strex	r3, r2, [r1]
 8008018:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800801a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800801c:	2b00      	cmp	r3, #0
 800801e:	d1e4      	bne.n	8007fea <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008024:	2b01      	cmp	r3, #1
 8008026:	d130      	bne.n	800808a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2200      	movs	r2, #0
 800802c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008036:	e853 3f00 	ldrex	r3, [r3]
 800803a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800803c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800803e:	f023 0310 	bic.w	r3, r3, #16
 8008042:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	461a      	mov	r2, r3
 800804c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008050:	643b      	str	r3, [r7, #64]	@ 0x40
 8008052:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008054:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008056:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008058:	e841 2300 	strex	r3, r2, [r1]
 800805c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800805e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008060:	2b00      	cmp	r3, #0
 8008062:	d1e4      	bne.n	800802e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	69db      	ldr	r3, [r3, #28]
 800806a:	f003 0310 	and.w	r3, r3, #16
 800806e:	2b10      	cmp	r3, #16
 8008070:	d103      	bne.n	800807a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	2210      	movs	r2, #16
 8008078:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008080:	4619      	mov	r1, r3
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f7fe fe72 	bl	8006d6c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8008088:	e00e      	b.n	80080a8 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f7f9 fd08 	bl	8001aa0 <HAL_UART_RxCpltCallback>
        break;
 8008090:	e00a      	b.n	80080a8 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008092:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8008096:	2b00      	cmp	r3, #0
 8008098:	d006      	beq.n	80080a8 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 800809a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800809e:	f003 0320 	and.w	r3, r3, #32
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	f47f aece 	bne.w	8007e44 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80080ae:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80080b2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d04b      	beq.n	8008152 <UART_RxISR_8BIT_FIFOEN+0x356>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80080c0:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d244      	bcs.n	8008152 <UART_RxISR_8BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	3308      	adds	r3, #8
 80080ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d0:	6a3b      	ldr	r3, [r7, #32]
 80080d2:	e853 3f00 	ldrex	r3, [r3]
 80080d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80080d8:	69fb      	ldr	r3, [r7, #28]
 80080da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80080de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	3308      	adds	r3, #8
 80080e8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80080ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80080ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80080f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080f4:	e841 2300 	strex	r3, r2, [r1]
 80080f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80080fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d1e3      	bne.n	80080c8 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	4a17      	ldr	r2, [pc, #92]	@ (8008160 <UART_RxISR_8BIT_FIFOEN+0x364>)
 8008104:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	e853 3f00 	ldrex	r3, [r3]
 8008112:	60bb      	str	r3, [r7, #8]
   return(result);
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	f043 0320 	orr.w	r3, r3, #32
 800811a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	461a      	mov	r2, r3
 8008124:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008128:	61bb      	str	r3, [r7, #24]
 800812a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800812c:	6979      	ldr	r1, [r7, #20]
 800812e:	69ba      	ldr	r2, [r7, #24]
 8008130:	e841 2300 	strex	r3, r2, [r1]
 8008134:	613b      	str	r3, [r7, #16]
   return(result);
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d1e4      	bne.n	8008106 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800813c:	e009      	b.n	8008152 <UART_RxISR_8BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	8b1b      	ldrh	r3, [r3, #24]
 8008144:	b29a      	uxth	r2, r3
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f042 0208 	orr.w	r2, r2, #8
 800814e:	b292      	uxth	r2, r2
 8008150:	831a      	strh	r2, [r3, #24]
}
 8008152:	bf00      	nop
 8008154:	37b0      	adds	r7, #176	@ 0xb0
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
 800815a:	bf00      	nop
 800815c:	40008000 	.word	0x40008000
 8008160:	08007a85 	.word	0x08007a85

08008164 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b0ae      	sub	sp, #184	@ 0xb8
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008172:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	69db      	ldr	r3, [r3, #28]
 800817c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800819a:	2b22      	cmp	r3, #34	@ 0x22
 800819c:	f040 8187 	bne.w	80084ae <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80081a6:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80081aa:	e12a      	b.n	8008402 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80081b2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80081be:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80081c2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80081c6:	4013      	ands	r3, r2
 80081c8:	b29a      	uxth	r2, r3
 80081ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80081ce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081d4:	1c9a      	adds	r2, r3, #2
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	3b01      	subs	r3, #1
 80081e4:	b29a      	uxth	r2, r3
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	69db      	ldr	r3, [r3, #28]
 80081f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80081f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80081fa:	f003 0307 	and.w	r3, r3, #7
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d053      	beq.n	80082aa <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008202:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008206:	f003 0301 	and.w	r3, r3, #1
 800820a:	2b00      	cmp	r3, #0
 800820c:	d011      	beq.n	8008232 <UART_RxISR_16BIT_FIFOEN+0xce>
 800820e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008212:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008216:	2b00      	cmp	r3, #0
 8008218:	d00b      	beq.n	8008232 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	2201      	movs	r2, #1
 8008220:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008228:	f043 0201 	orr.w	r2, r3, #1
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008232:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008236:	f003 0302 	and.w	r3, r3, #2
 800823a:	2b00      	cmp	r3, #0
 800823c:	d011      	beq.n	8008262 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800823e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008242:	f003 0301 	and.w	r3, r3, #1
 8008246:	2b00      	cmp	r3, #0
 8008248:	d00b      	beq.n	8008262 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	2202      	movs	r2, #2
 8008250:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008258:	f043 0204 	orr.w	r2, r3, #4
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008262:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008266:	f003 0304 	and.w	r3, r3, #4
 800826a:	2b00      	cmp	r3, #0
 800826c:	d011      	beq.n	8008292 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800826e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008272:	f003 0301 	and.w	r3, r3, #1
 8008276:	2b00      	cmp	r3, #0
 8008278:	d00b      	beq.n	8008292 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	2204      	movs	r2, #4
 8008280:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008288:	f043 0202 	orr.w	r2, r3, #2
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008298:	2b00      	cmp	r3, #0
 800829a:	d006      	beq.n	80082aa <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f7fe fd5b 	bl	8006d58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	f040 80a5 	bne.w	8008402 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80082c0:	e853 3f00 	ldrex	r3, [r3]
 80082c4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80082c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80082c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80082cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	461a      	mov	r2, r3
 80082d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80082da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80082de:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80082e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80082e6:	e841 2300 	strex	r3, r2, [r1]
 80082ea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80082ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d1e2      	bne.n	80082b8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	3308      	adds	r3, #8
 80082f8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80082fc:	e853 3f00 	ldrex	r3, [r3]
 8008300:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008302:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008304:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008308:	f023 0301 	bic.w	r3, r3, #1
 800830c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	3308      	adds	r3, #8
 8008316:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800831a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800831c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800831e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008320:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008322:	e841 2300 	strex	r3, r2, [r1]
 8008326:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008328:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800832a:	2b00      	cmp	r3, #0
 800832c:	d1e1      	bne.n	80082f2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2220      	movs	r2, #32
 8008332:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2200      	movs	r2, #0
 800833a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2200      	movs	r2, #0
 8008340:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4a61      	ldr	r2, [pc, #388]	@ (80084cc <UART_RxISR_16BIT_FIFOEN+0x368>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d021      	beq.n	8008390 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008356:	2b00      	cmp	r3, #0
 8008358:	d01a      	beq.n	8008390 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008360:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008362:	e853 3f00 	ldrex	r3, [r3]
 8008366:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008368:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800836a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800836e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	461a      	mov	r2, r3
 8008378:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800837c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800837e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008380:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008382:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008384:	e841 2300 	strex	r3, r2, [r1]
 8008388:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800838a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800838c:	2b00      	cmp	r3, #0
 800838e:	d1e4      	bne.n	800835a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008394:	2b01      	cmp	r3, #1
 8008396:	d130      	bne.n	80083fa <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083a6:	e853 3f00 	ldrex	r3, [r3]
 80083aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80083ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083ae:	f023 0310 	bic.w	r3, r3, #16
 80083b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	461a      	mov	r2, r3
 80083bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80083c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80083c2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80083c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80083c8:	e841 2300 	strex	r3, r2, [r1]
 80083cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80083ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d1e4      	bne.n	800839e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	69db      	ldr	r3, [r3, #28]
 80083da:	f003 0310 	and.w	r3, r3, #16
 80083de:	2b10      	cmp	r3, #16
 80083e0:	d103      	bne.n	80083ea <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	2210      	movs	r2, #16
 80083e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80083f0:	4619      	mov	r1, r3
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f7fe fcba 	bl	8006d6c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80083f8:	e00e      	b.n	8008418 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f7f9 fb50 	bl	8001aa0 <HAL_UART_RxCpltCallback>
        break;
 8008400:	e00a      	b.n	8008418 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008402:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8008406:	2b00      	cmp	r3, #0
 8008408:	d006      	beq.n	8008418 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800840a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800840e:	f003 0320 	and.w	r3, r3, #32
 8008412:	2b00      	cmp	r3, #0
 8008414:	f47f aeca 	bne.w	80081ac <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800841e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008422:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8008426:	2b00      	cmp	r3, #0
 8008428:	d04b      	beq.n	80084c2 <UART_RxISR_16BIT_FIFOEN+0x35e>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008430:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8008434:	429a      	cmp	r2, r3
 8008436:	d244      	bcs.n	80084c2 <UART_RxISR_16BIT_FIFOEN+0x35e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	3308      	adds	r3, #8
 800843e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008442:	e853 3f00 	ldrex	r3, [r3]
 8008446:	623b      	str	r3, [r7, #32]
   return(result);
 8008448:	6a3b      	ldr	r3, [r7, #32]
 800844a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800844e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	3308      	adds	r3, #8
 8008458:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800845c:	633a      	str	r2, [r7, #48]	@ 0x30
 800845e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008460:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008462:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008464:	e841 2300 	strex	r3, r2, [r1]
 8008468:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800846a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800846c:	2b00      	cmp	r3, #0
 800846e:	d1e3      	bne.n	8008438 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	4a17      	ldr	r2, [pc, #92]	@ (80084d0 <UART_RxISR_16BIT_FIFOEN+0x36c>)
 8008474:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	e853 3f00 	ldrex	r3, [r3]
 8008482:	60fb      	str	r3, [r7, #12]
   return(result);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f043 0320 	orr.w	r3, r3, #32
 800848a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	461a      	mov	r2, r3
 8008494:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008498:	61fb      	str	r3, [r7, #28]
 800849a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800849c:	69b9      	ldr	r1, [r7, #24]
 800849e:	69fa      	ldr	r2, [r7, #28]
 80084a0:	e841 2300 	strex	r3, r2, [r1]
 80084a4:	617b      	str	r3, [r7, #20]
   return(result);
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d1e4      	bne.n	8008476 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80084ac:	e009      	b.n	80084c2 <UART_RxISR_16BIT_FIFOEN+0x35e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	8b1b      	ldrh	r3, [r3, #24]
 80084b4:	b29a      	uxth	r2, r3
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f042 0208 	orr.w	r2, r2, #8
 80084be:	b292      	uxth	r2, r2
 80084c0:	831a      	strh	r2, [r3, #24]
}
 80084c2:	bf00      	nop
 80084c4:	37b8      	adds	r7, #184	@ 0xb8
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}
 80084ca:	bf00      	nop
 80084cc:	40008000 	.word	0x40008000
 80084d0:	08007c41 	.word	0x08007c41

080084d4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b083      	sub	sp, #12
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80084dc:	bf00      	nop
 80084de:	370c      	adds	r7, #12
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr

080084e8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b083      	sub	sp, #12
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80084f0:	bf00      	nop
 80084f2:	370c      	adds	r7, #12
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr

080084fc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b083      	sub	sp, #12
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008504:	bf00      	nop
 8008506:	370c      	adds	r7, #12
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr

08008510 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008510:	b480      	push	{r7}
 8008512:	b085      	sub	sp, #20
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800851e:	2b01      	cmp	r3, #1
 8008520:	d101      	bne.n	8008526 <HAL_UARTEx_DisableFifoMode+0x16>
 8008522:	2302      	movs	r3, #2
 8008524:	e027      	b.n	8008576 <HAL_UARTEx_DisableFifoMode+0x66>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2201      	movs	r2, #1
 800852a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2224      	movs	r2, #36	@ 0x24
 8008532:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f022 0201 	bic.w	r2, r2, #1
 800854c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008554:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	68fa      	ldr	r2, [r7, #12]
 8008562:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2220      	movs	r2, #32
 8008568:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008574:	2300      	movs	r3, #0
}
 8008576:	4618      	mov	r0, r3
 8008578:	3714      	adds	r7, #20
 800857a:	46bd      	mov	sp, r7
 800857c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008580:	4770      	bx	lr

08008582 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008582:	b580      	push	{r7, lr}
 8008584:	b084      	sub	sp, #16
 8008586:	af00      	add	r7, sp, #0
 8008588:	6078      	str	r0, [r7, #4]
 800858a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008592:	2b01      	cmp	r3, #1
 8008594:	d101      	bne.n	800859a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008596:	2302      	movs	r3, #2
 8008598:	e02d      	b.n	80085f6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2201      	movs	r2, #1
 800859e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2224      	movs	r2, #36	@ 0x24
 80085a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f022 0201 	bic.w	r2, r2, #1
 80085c0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	689b      	ldr	r3, [r3, #8]
 80085c8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	683a      	ldr	r2, [r7, #0]
 80085d2:	430a      	orrs	r2, r1
 80085d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 f850 	bl	800867c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	68fa      	ldr	r2, [r7, #12]
 80085e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2220      	movs	r2, #32
 80085e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2200      	movs	r2, #0
 80085f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80085f4:	2300      	movs	r3, #0
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3710      	adds	r7, #16
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}

080085fe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80085fe:	b580      	push	{r7, lr}
 8008600:	b084      	sub	sp, #16
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
 8008606:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800860e:	2b01      	cmp	r3, #1
 8008610:	d101      	bne.n	8008616 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008612:	2302      	movs	r3, #2
 8008614:	e02d      	b.n	8008672 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2201      	movs	r2, #1
 800861a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2224      	movs	r2, #36	@ 0x24
 8008622:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	681a      	ldr	r2, [r3, #0]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f022 0201 	bic.w	r2, r2, #1
 800863c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	683a      	ldr	r2, [r7, #0]
 800864e:	430a      	orrs	r2, r1
 8008650:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f000 f812 	bl	800867c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	68fa      	ldr	r2, [r7, #12]
 800865e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2220      	movs	r2, #32
 8008664:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2200      	movs	r2, #0
 800866c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008670:	2300      	movs	r3, #0
}
 8008672:	4618      	mov	r0, r3
 8008674:	3710      	adds	r7, #16
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
	...

0800867c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800867c:	b480      	push	{r7}
 800867e:	b085      	sub	sp, #20
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008688:	2b00      	cmp	r3, #0
 800868a:	d108      	bne.n	800869e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2201      	movs	r2, #1
 8008690:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2201      	movs	r2, #1
 8008698:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800869c:	e031      	b.n	8008702 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800869e:	2308      	movs	r3, #8
 80086a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80086a2:	2308      	movs	r3, #8
 80086a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	689b      	ldr	r3, [r3, #8]
 80086ac:	0e5b      	lsrs	r3, r3, #25
 80086ae:	b2db      	uxtb	r3, r3
 80086b0:	f003 0307 	and.w	r3, r3, #7
 80086b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	0f5b      	lsrs	r3, r3, #29
 80086be:	b2db      	uxtb	r3, r3
 80086c0:	f003 0307 	and.w	r3, r3, #7
 80086c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80086c6:	7bbb      	ldrb	r3, [r7, #14]
 80086c8:	7b3a      	ldrb	r2, [r7, #12]
 80086ca:	4911      	ldr	r1, [pc, #68]	@ (8008710 <UARTEx_SetNbDataToProcess+0x94>)
 80086cc:	5c8a      	ldrb	r2, [r1, r2]
 80086ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80086d2:	7b3a      	ldrb	r2, [r7, #12]
 80086d4:	490f      	ldr	r1, [pc, #60]	@ (8008714 <UARTEx_SetNbDataToProcess+0x98>)
 80086d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80086d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80086dc:	b29a      	uxth	r2, r3
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80086e4:	7bfb      	ldrb	r3, [r7, #15]
 80086e6:	7b7a      	ldrb	r2, [r7, #13]
 80086e8:	4909      	ldr	r1, [pc, #36]	@ (8008710 <UARTEx_SetNbDataToProcess+0x94>)
 80086ea:	5c8a      	ldrb	r2, [r1, r2]
 80086ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80086f0:	7b7a      	ldrb	r2, [r7, #13]
 80086f2:	4908      	ldr	r1, [pc, #32]	@ (8008714 <UARTEx_SetNbDataToProcess+0x98>)
 80086f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80086f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80086fa:	b29a      	uxth	r2, r3
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008702:	bf00      	nop
 8008704:	3714      	adds	r7, #20
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr
 800870e:	bf00      	nop
 8008710:	0800d2cc 	.word	0x0800d2cc
 8008714:	0800d2d4 	.word	0x0800d2d4

08008718 <arm_sin_f32>:
 8008718:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8008798 <arm_sin_f32+0x80>
 800871c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008720:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008728:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800872c:	d504      	bpl.n	8008738 <arm_sin_f32+0x20>
 800872e:	ee17 3a90 	vmov	r3, s15
 8008732:	3b01      	subs	r3, #1
 8008734:	ee07 3a90 	vmov	s15, r3
 8008738:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800873c:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800879c <arm_sin_f32+0x84>
 8008740:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008744:	ee20 0a07 	vmul.f32	s0, s0, s14
 8008748:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800874c:	ee17 3a90 	vmov	r3, s15
 8008750:	b29b      	uxth	r3, r3
 8008752:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008756:	d21a      	bcs.n	800878e <arm_sin_f32+0x76>
 8008758:	ee07 3a90 	vmov	s15, r3
 800875c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008760:	1c59      	adds	r1, r3, #1
 8008762:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008766:	4a0e      	ldr	r2, [pc, #56]	@ (80087a0 <arm_sin_f32+0x88>)
 8008768:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800876c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008770:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8008774:	ed93 7a00 	vldr	s14, [r3]
 8008778:	edd2 6a00 	vldr	s13, [r2]
 800877c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008780:	ee20 0a26 	vmul.f32	s0, s0, s13
 8008784:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008788:	ee37 0a80 	vadd.f32	s0, s15, s0
 800878c:	4770      	bx	lr
 800878e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008792:	2101      	movs	r1, #1
 8008794:	2300      	movs	r3, #0
 8008796:	e7e6      	b.n	8008766 <arm_sin_f32+0x4e>
 8008798:	3e22f983 	.word	0x3e22f983
 800879c:	44000000 	.word	0x44000000
 80087a0:	0800d2dc 	.word	0x0800d2dc

080087a4 <__cvt>:
 80087a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087a8:	ec57 6b10 	vmov	r6, r7, d0
 80087ac:	2f00      	cmp	r7, #0
 80087ae:	460c      	mov	r4, r1
 80087b0:	4619      	mov	r1, r3
 80087b2:	463b      	mov	r3, r7
 80087b4:	bfbb      	ittet	lt
 80087b6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80087ba:	461f      	movlt	r7, r3
 80087bc:	2300      	movge	r3, #0
 80087be:	232d      	movlt	r3, #45	@ 0x2d
 80087c0:	700b      	strb	r3, [r1, #0]
 80087c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80087c4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80087c8:	4691      	mov	r9, r2
 80087ca:	f023 0820 	bic.w	r8, r3, #32
 80087ce:	bfbc      	itt	lt
 80087d0:	4632      	movlt	r2, r6
 80087d2:	4616      	movlt	r6, r2
 80087d4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80087d8:	d005      	beq.n	80087e6 <__cvt+0x42>
 80087da:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80087de:	d100      	bne.n	80087e2 <__cvt+0x3e>
 80087e0:	3401      	adds	r4, #1
 80087e2:	2102      	movs	r1, #2
 80087e4:	e000      	b.n	80087e8 <__cvt+0x44>
 80087e6:	2103      	movs	r1, #3
 80087e8:	ab03      	add	r3, sp, #12
 80087ea:	9301      	str	r3, [sp, #4]
 80087ec:	ab02      	add	r3, sp, #8
 80087ee:	9300      	str	r3, [sp, #0]
 80087f0:	ec47 6b10 	vmov	d0, r6, r7
 80087f4:	4653      	mov	r3, sl
 80087f6:	4622      	mov	r2, r4
 80087f8:	f001 feae 	bl	800a558 <_dtoa_r>
 80087fc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008800:	4605      	mov	r5, r0
 8008802:	d119      	bne.n	8008838 <__cvt+0x94>
 8008804:	f019 0f01 	tst.w	r9, #1
 8008808:	d00e      	beq.n	8008828 <__cvt+0x84>
 800880a:	eb00 0904 	add.w	r9, r0, r4
 800880e:	2200      	movs	r2, #0
 8008810:	2300      	movs	r3, #0
 8008812:	4630      	mov	r0, r6
 8008814:	4639      	mov	r1, r7
 8008816:	f7f8 f96f 	bl	8000af8 <__aeabi_dcmpeq>
 800881a:	b108      	cbz	r0, 8008820 <__cvt+0x7c>
 800881c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008820:	2230      	movs	r2, #48	@ 0x30
 8008822:	9b03      	ldr	r3, [sp, #12]
 8008824:	454b      	cmp	r3, r9
 8008826:	d31e      	bcc.n	8008866 <__cvt+0xc2>
 8008828:	9b03      	ldr	r3, [sp, #12]
 800882a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800882c:	1b5b      	subs	r3, r3, r5
 800882e:	4628      	mov	r0, r5
 8008830:	6013      	str	r3, [r2, #0]
 8008832:	b004      	add	sp, #16
 8008834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008838:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800883c:	eb00 0904 	add.w	r9, r0, r4
 8008840:	d1e5      	bne.n	800880e <__cvt+0x6a>
 8008842:	7803      	ldrb	r3, [r0, #0]
 8008844:	2b30      	cmp	r3, #48	@ 0x30
 8008846:	d10a      	bne.n	800885e <__cvt+0xba>
 8008848:	2200      	movs	r2, #0
 800884a:	2300      	movs	r3, #0
 800884c:	4630      	mov	r0, r6
 800884e:	4639      	mov	r1, r7
 8008850:	f7f8 f952 	bl	8000af8 <__aeabi_dcmpeq>
 8008854:	b918      	cbnz	r0, 800885e <__cvt+0xba>
 8008856:	f1c4 0401 	rsb	r4, r4, #1
 800885a:	f8ca 4000 	str.w	r4, [sl]
 800885e:	f8da 3000 	ldr.w	r3, [sl]
 8008862:	4499      	add	r9, r3
 8008864:	e7d3      	b.n	800880e <__cvt+0x6a>
 8008866:	1c59      	adds	r1, r3, #1
 8008868:	9103      	str	r1, [sp, #12]
 800886a:	701a      	strb	r2, [r3, #0]
 800886c:	e7d9      	b.n	8008822 <__cvt+0x7e>

0800886e <__exponent>:
 800886e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008870:	2900      	cmp	r1, #0
 8008872:	bfba      	itte	lt
 8008874:	4249      	neglt	r1, r1
 8008876:	232d      	movlt	r3, #45	@ 0x2d
 8008878:	232b      	movge	r3, #43	@ 0x2b
 800887a:	2909      	cmp	r1, #9
 800887c:	7002      	strb	r2, [r0, #0]
 800887e:	7043      	strb	r3, [r0, #1]
 8008880:	dd29      	ble.n	80088d6 <__exponent+0x68>
 8008882:	f10d 0307 	add.w	r3, sp, #7
 8008886:	461d      	mov	r5, r3
 8008888:	270a      	movs	r7, #10
 800888a:	461a      	mov	r2, r3
 800888c:	fbb1 f6f7 	udiv	r6, r1, r7
 8008890:	fb07 1416 	mls	r4, r7, r6, r1
 8008894:	3430      	adds	r4, #48	@ 0x30
 8008896:	f802 4c01 	strb.w	r4, [r2, #-1]
 800889a:	460c      	mov	r4, r1
 800889c:	2c63      	cmp	r4, #99	@ 0x63
 800889e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80088a2:	4631      	mov	r1, r6
 80088a4:	dcf1      	bgt.n	800888a <__exponent+0x1c>
 80088a6:	3130      	adds	r1, #48	@ 0x30
 80088a8:	1e94      	subs	r4, r2, #2
 80088aa:	f803 1c01 	strb.w	r1, [r3, #-1]
 80088ae:	1c41      	adds	r1, r0, #1
 80088b0:	4623      	mov	r3, r4
 80088b2:	42ab      	cmp	r3, r5
 80088b4:	d30a      	bcc.n	80088cc <__exponent+0x5e>
 80088b6:	f10d 0309 	add.w	r3, sp, #9
 80088ba:	1a9b      	subs	r3, r3, r2
 80088bc:	42ac      	cmp	r4, r5
 80088be:	bf88      	it	hi
 80088c0:	2300      	movhi	r3, #0
 80088c2:	3302      	adds	r3, #2
 80088c4:	4403      	add	r3, r0
 80088c6:	1a18      	subs	r0, r3, r0
 80088c8:	b003      	add	sp, #12
 80088ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088cc:	f813 6b01 	ldrb.w	r6, [r3], #1
 80088d0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80088d4:	e7ed      	b.n	80088b2 <__exponent+0x44>
 80088d6:	2330      	movs	r3, #48	@ 0x30
 80088d8:	3130      	adds	r1, #48	@ 0x30
 80088da:	7083      	strb	r3, [r0, #2]
 80088dc:	70c1      	strb	r1, [r0, #3]
 80088de:	1d03      	adds	r3, r0, #4
 80088e0:	e7f1      	b.n	80088c6 <__exponent+0x58>
	...

080088e4 <_printf_float>:
 80088e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088e8:	b08d      	sub	sp, #52	@ 0x34
 80088ea:	460c      	mov	r4, r1
 80088ec:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80088f0:	4616      	mov	r6, r2
 80088f2:	461f      	mov	r7, r3
 80088f4:	4605      	mov	r5, r0
 80088f6:	f001 fd57 	bl	800a3a8 <_localeconv_r>
 80088fa:	6803      	ldr	r3, [r0, #0]
 80088fc:	9304      	str	r3, [sp, #16]
 80088fe:	4618      	mov	r0, r3
 8008900:	f7f7 fcce 	bl	80002a0 <strlen>
 8008904:	2300      	movs	r3, #0
 8008906:	930a      	str	r3, [sp, #40]	@ 0x28
 8008908:	f8d8 3000 	ldr.w	r3, [r8]
 800890c:	9005      	str	r0, [sp, #20]
 800890e:	3307      	adds	r3, #7
 8008910:	f023 0307 	bic.w	r3, r3, #7
 8008914:	f103 0208 	add.w	r2, r3, #8
 8008918:	f894 a018 	ldrb.w	sl, [r4, #24]
 800891c:	f8d4 b000 	ldr.w	fp, [r4]
 8008920:	f8c8 2000 	str.w	r2, [r8]
 8008924:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008928:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800892c:	9307      	str	r3, [sp, #28]
 800892e:	f8cd 8018 	str.w	r8, [sp, #24]
 8008932:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008936:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800893a:	4b9c      	ldr	r3, [pc, #624]	@ (8008bac <_printf_float+0x2c8>)
 800893c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008940:	f7f8 f90c 	bl	8000b5c <__aeabi_dcmpun>
 8008944:	bb70      	cbnz	r0, 80089a4 <_printf_float+0xc0>
 8008946:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800894a:	4b98      	ldr	r3, [pc, #608]	@ (8008bac <_printf_float+0x2c8>)
 800894c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008950:	f7f8 f8e6 	bl	8000b20 <__aeabi_dcmple>
 8008954:	bb30      	cbnz	r0, 80089a4 <_printf_float+0xc0>
 8008956:	2200      	movs	r2, #0
 8008958:	2300      	movs	r3, #0
 800895a:	4640      	mov	r0, r8
 800895c:	4649      	mov	r1, r9
 800895e:	f7f8 f8d5 	bl	8000b0c <__aeabi_dcmplt>
 8008962:	b110      	cbz	r0, 800896a <_printf_float+0x86>
 8008964:	232d      	movs	r3, #45	@ 0x2d
 8008966:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800896a:	4a91      	ldr	r2, [pc, #580]	@ (8008bb0 <_printf_float+0x2cc>)
 800896c:	4b91      	ldr	r3, [pc, #580]	@ (8008bb4 <_printf_float+0x2d0>)
 800896e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008972:	bf94      	ite	ls
 8008974:	4690      	movls	r8, r2
 8008976:	4698      	movhi	r8, r3
 8008978:	2303      	movs	r3, #3
 800897a:	6123      	str	r3, [r4, #16]
 800897c:	f02b 0304 	bic.w	r3, fp, #4
 8008980:	6023      	str	r3, [r4, #0]
 8008982:	f04f 0900 	mov.w	r9, #0
 8008986:	9700      	str	r7, [sp, #0]
 8008988:	4633      	mov	r3, r6
 800898a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800898c:	4621      	mov	r1, r4
 800898e:	4628      	mov	r0, r5
 8008990:	f000 f9d2 	bl	8008d38 <_printf_common>
 8008994:	3001      	adds	r0, #1
 8008996:	f040 808d 	bne.w	8008ab4 <_printf_float+0x1d0>
 800899a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800899e:	b00d      	add	sp, #52	@ 0x34
 80089a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089a4:	4642      	mov	r2, r8
 80089a6:	464b      	mov	r3, r9
 80089a8:	4640      	mov	r0, r8
 80089aa:	4649      	mov	r1, r9
 80089ac:	f7f8 f8d6 	bl	8000b5c <__aeabi_dcmpun>
 80089b0:	b140      	cbz	r0, 80089c4 <_printf_float+0xe0>
 80089b2:	464b      	mov	r3, r9
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	bfbc      	itt	lt
 80089b8:	232d      	movlt	r3, #45	@ 0x2d
 80089ba:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80089be:	4a7e      	ldr	r2, [pc, #504]	@ (8008bb8 <_printf_float+0x2d4>)
 80089c0:	4b7e      	ldr	r3, [pc, #504]	@ (8008bbc <_printf_float+0x2d8>)
 80089c2:	e7d4      	b.n	800896e <_printf_float+0x8a>
 80089c4:	6863      	ldr	r3, [r4, #4]
 80089c6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80089ca:	9206      	str	r2, [sp, #24]
 80089cc:	1c5a      	adds	r2, r3, #1
 80089ce:	d13b      	bne.n	8008a48 <_printf_float+0x164>
 80089d0:	2306      	movs	r3, #6
 80089d2:	6063      	str	r3, [r4, #4]
 80089d4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80089d8:	2300      	movs	r3, #0
 80089da:	6022      	str	r2, [r4, #0]
 80089dc:	9303      	str	r3, [sp, #12]
 80089de:	ab0a      	add	r3, sp, #40	@ 0x28
 80089e0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80089e4:	ab09      	add	r3, sp, #36	@ 0x24
 80089e6:	9300      	str	r3, [sp, #0]
 80089e8:	6861      	ldr	r1, [r4, #4]
 80089ea:	ec49 8b10 	vmov	d0, r8, r9
 80089ee:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80089f2:	4628      	mov	r0, r5
 80089f4:	f7ff fed6 	bl	80087a4 <__cvt>
 80089f8:	9b06      	ldr	r3, [sp, #24]
 80089fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80089fc:	2b47      	cmp	r3, #71	@ 0x47
 80089fe:	4680      	mov	r8, r0
 8008a00:	d129      	bne.n	8008a56 <_printf_float+0x172>
 8008a02:	1cc8      	adds	r0, r1, #3
 8008a04:	db02      	blt.n	8008a0c <_printf_float+0x128>
 8008a06:	6863      	ldr	r3, [r4, #4]
 8008a08:	4299      	cmp	r1, r3
 8008a0a:	dd41      	ble.n	8008a90 <_printf_float+0x1ac>
 8008a0c:	f1aa 0a02 	sub.w	sl, sl, #2
 8008a10:	fa5f fa8a 	uxtb.w	sl, sl
 8008a14:	3901      	subs	r1, #1
 8008a16:	4652      	mov	r2, sl
 8008a18:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008a1c:	9109      	str	r1, [sp, #36]	@ 0x24
 8008a1e:	f7ff ff26 	bl	800886e <__exponent>
 8008a22:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008a24:	1813      	adds	r3, r2, r0
 8008a26:	2a01      	cmp	r2, #1
 8008a28:	4681      	mov	r9, r0
 8008a2a:	6123      	str	r3, [r4, #16]
 8008a2c:	dc02      	bgt.n	8008a34 <_printf_float+0x150>
 8008a2e:	6822      	ldr	r2, [r4, #0]
 8008a30:	07d2      	lsls	r2, r2, #31
 8008a32:	d501      	bpl.n	8008a38 <_printf_float+0x154>
 8008a34:	3301      	adds	r3, #1
 8008a36:	6123      	str	r3, [r4, #16]
 8008a38:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d0a2      	beq.n	8008986 <_printf_float+0xa2>
 8008a40:	232d      	movs	r3, #45	@ 0x2d
 8008a42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a46:	e79e      	b.n	8008986 <_printf_float+0xa2>
 8008a48:	9a06      	ldr	r2, [sp, #24]
 8008a4a:	2a47      	cmp	r2, #71	@ 0x47
 8008a4c:	d1c2      	bne.n	80089d4 <_printf_float+0xf0>
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d1c0      	bne.n	80089d4 <_printf_float+0xf0>
 8008a52:	2301      	movs	r3, #1
 8008a54:	e7bd      	b.n	80089d2 <_printf_float+0xee>
 8008a56:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008a5a:	d9db      	bls.n	8008a14 <_printf_float+0x130>
 8008a5c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008a60:	d118      	bne.n	8008a94 <_printf_float+0x1b0>
 8008a62:	2900      	cmp	r1, #0
 8008a64:	6863      	ldr	r3, [r4, #4]
 8008a66:	dd0b      	ble.n	8008a80 <_printf_float+0x19c>
 8008a68:	6121      	str	r1, [r4, #16]
 8008a6a:	b913      	cbnz	r3, 8008a72 <_printf_float+0x18e>
 8008a6c:	6822      	ldr	r2, [r4, #0]
 8008a6e:	07d0      	lsls	r0, r2, #31
 8008a70:	d502      	bpl.n	8008a78 <_printf_float+0x194>
 8008a72:	3301      	adds	r3, #1
 8008a74:	440b      	add	r3, r1
 8008a76:	6123      	str	r3, [r4, #16]
 8008a78:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008a7a:	f04f 0900 	mov.w	r9, #0
 8008a7e:	e7db      	b.n	8008a38 <_printf_float+0x154>
 8008a80:	b913      	cbnz	r3, 8008a88 <_printf_float+0x1a4>
 8008a82:	6822      	ldr	r2, [r4, #0]
 8008a84:	07d2      	lsls	r2, r2, #31
 8008a86:	d501      	bpl.n	8008a8c <_printf_float+0x1a8>
 8008a88:	3302      	adds	r3, #2
 8008a8a:	e7f4      	b.n	8008a76 <_printf_float+0x192>
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	e7f2      	b.n	8008a76 <_printf_float+0x192>
 8008a90:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008a94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a96:	4299      	cmp	r1, r3
 8008a98:	db05      	blt.n	8008aa6 <_printf_float+0x1c2>
 8008a9a:	6823      	ldr	r3, [r4, #0]
 8008a9c:	6121      	str	r1, [r4, #16]
 8008a9e:	07d8      	lsls	r0, r3, #31
 8008aa0:	d5ea      	bpl.n	8008a78 <_printf_float+0x194>
 8008aa2:	1c4b      	adds	r3, r1, #1
 8008aa4:	e7e7      	b.n	8008a76 <_printf_float+0x192>
 8008aa6:	2900      	cmp	r1, #0
 8008aa8:	bfd4      	ite	le
 8008aaa:	f1c1 0202 	rsble	r2, r1, #2
 8008aae:	2201      	movgt	r2, #1
 8008ab0:	4413      	add	r3, r2
 8008ab2:	e7e0      	b.n	8008a76 <_printf_float+0x192>
 8008ab4:	6823      	ldr	r3, [r4, #0]
 8008ab6:	055a      	lsls	r2, r3, #21
 8008ab8:	d407      	bmi.n	8008aca <_printf_float+0x1e6>
 8008aba:	6923      	ldr	r3, [r4, #16]
 8008abc:	4642      	mov	r2, r8
 8008abe:	4631      	mov	r1, r6
 8008ac0:	4628      	mov	r0, r5
 8008ac2:	47b8      	blx	r7
 8008ac4:	3001      	adds	r0, #1
 8008ac6:	d12b      	bne.n	8008b20 <_printf_float+0x23c>
 8008ac8:	e767      	b.n	800899a <_printf_float+0xb6>
 8008aca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008ace:	f240 80dd 	bls.w	8008c8c <_printf_float+0x3a8>
 8008ad2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	2300      	movs	r3, #0
 8008ada:	f7f8 f80d 	bl	8000af8 <__aeabi_dcmpeq>
 8008ade:	2800      	cmp	r0, #0
 8008ae0:	d033      	beq.n	8008b4a <_printf_float+0x266>
 8008ae2:	4a37      	ldr	r2, [pc, #220]	@ (8008bc0 <_printf_float+0x2dc>)
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	4631      	mov	r1, r6
 8008ae8:	4628      	mov	r0, r5
 8008aea:	47b8      	blx	r7
 8008aec:	3001      	adds	r0, #1
 8008aee:	f43f af54 	beq.w	800899a <_printf_float+0xb6>
 8008af2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008af6:	4543      	cmp	r3, r8
 8008af8:	db02      	blt.n	8008b00 <_printf_float+0x21c>
 8008afa:	6823      	ldr	r3, [r4, #0]
 8008afc:	07d8      	lsls	r0, r3, #31
 8008afe:	d50f      	bpl.n	8008b20 <_printf_float+0x23c>
 8008b00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b04:	4631      	mov	r1, r6
 8008b06:	4628      	mov	r0, r5
 8008b08:	47b8      	blx	r7
 8008b0a:	3001      	adds	r0, #1
 8008b0c:	f43f af45 	beq.w	800899a <_printf_float+0xb6>
 8008b10:	f04f 0900 	mov.w	r9, #0
 8008b14:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8008b18:	f104 0a1a 	add.w	sl, r4, #26
 8008b1c:	45c8      	cmp	r8, r9
 8008b1e:	dc09      	bgt.n	8008b34 <_printf_float+0x250>
 8008b20:	6823      	ldr	r3, [r4, #0]
 8008b22:	079b      	lsls	r3, r3, #30
 8008b24:	f100 8103 	bmi.w	8008d2e <_printf_float+0x44a>
 8008b28:	68e0      	ldr	r0, [r4, #12]
 8008b2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b2c:	4298      	cmp	r0, r3
 8008b2e:	bfb8      	it	lt
 8008b30:	4618      	movlt	r0, r3
 8008b32:	e734      	b.n	800899e <_printf_float+0xba>
 8008b34:	2301      	movs	r3, #1
 8008b36:	4652      	mov	r2, sl
 8008b38:	4631      	mov	r1, r6
 8008b3a:	4628      	mov	r0, r5
 8008b3c:	47b8      	blx	r7
 8008b3e:	3001      	adds	r0, #1
 8008b40:	f43f af2b 	beq.w	800899a <_printf_float+0xb6>
 8008b44:	f109 0901 	add.w	r9, r9, #1
 8008b48:	e7e8      	b.n	8008b1c <_printf_float+0x238>
 8008b4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	dc39      	bgt.n	8008bc4 <_printf_float+0x2e0>
 8008b50:	4a1b      	ldr	r2, [pc, #108]	@ (8008bc0 <_printf_float+0x2dc>)
 8008b52:	2301      	movs	r3, #1
 8008b54:	4631      	mov	r1, r6
 8008b56:	4628      	mov	r0, r5
 8008b58:	47b8      	blx	r7
 8008b5a:	3001      	adds	r0, #1
 8008b5c:	f43f af1d 	beq.w	800899a <_printf_float+0xb6>
 8008b60:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008b64:	ea59 0303 	orrs.w	r3, r9, r3
 8008b68:	d102      	bne.n	8008b70 <_printf_float+0x28c>
 8008b6a:	6823      	ldr	r3, [r4, #0]
 8008b6c:	07d9      	lsls	r1, r3, #31
 8008b6e:	d5d7      	bpl.n	8008b20 <_printf_float+0x23c>
 8008b70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b74:	4631      	mov	r1, r6
 8008b76:	4628      	mov	r0, r5
 8008b78:	47b8      	blx	r7
 8008b7a:	3001      	adds	r0, #1
 8008b7c:	f43f af0d 	beq.w	800899a <_printf_float+0xb6>
 8008b80:	f04f 0a00 	mov.w	sl, #0
 8008b84:	f104 0b1a 	add.w	fp, r4, #26
 8008b88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b8a:	425b      	negs	r3, r3
 8008b8c:	4553      	cmp	r3, sl
 8008b8e:	dc01      	bgt.n	8008b94 <_printf_float+0x2b0>
 8008b90:	464b      	mov	r3, r9
 8008b92:	e793      	b.n	8008abc <_printf_float+0x1d8>
 8008b94:	2301      	movs	r3, #1
 8008b96:	465a      	mov	r2, fp
 8008b98:	4631      	mov	r1, r6
 8008b9a:	4628      	mov	r0, r5
 8008b9c:	47b8      	blx	r7
 8008b9e:	3001      	adds	r0, #1
 8008ba0:	f43f aefb 	beq.w	800899a <_printf_float+0xb6>
 8008ba4:	f10a 0a01 	add.w	sl, sl, #1
 8008ba8:	e7ee      	b.n	8008b88 <_printf_float+0x2a4>
 8008baa:	bf00      	nop
 8008bac:	7fefffff 	.word	0x7fefffff
 8008bb0:	0800dae0 	.word	0x0800dae0
 8008bb4:	0800dae4 	.word	0x0800dae4
 8008bb8:	0800dae8 	.word	0x0800dae8
 8008bbc:	0800daec 	.word	0x0800daec
 8008bc0:	0800daf0 	.word	0x0800daf0
 8008bc4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008bc6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008bca:	4553      	cmp	r3, sl
 8008bcc:	bfa8      	it	ge
 8008bce:	4653      	movge	r3, sl
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	4699      	mov	r9, r3
 8008bd4:	dc36      	bgt.n	8008c44 <_printf_float+0x360>
 8008bd6:	f04f 0b00 	mov.w	fp, #0
 8008bda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008bde:	f104 021a 	add.w	r2, r4, #26
 8008be2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008be4:	9306      	str	r3, [sp, #24]
 8008be6:	eba3 0309 	sub.w	r3, r3, r9
 8008bea:	455b      	cmp	r3, fp
 8008bec:	dc31      	bgt.n	8008c52 <_printf_float+0x36e>
 8008bee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bf0:	459a      	cmp	sl, r3
 8008bf2:	dc3a      	bgt.n	8008c6a <_printf_float+0x386>
 8008bf4:	6823      	ldr	r3, [r4, #0]
 8008bf6:	07da      	lsls	r2, r3, #31
 8008bf8:	d437      	bmi.n	8008c6a <_printf_float+0x386>
 8008bfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bfc:	ebaa 0903 	sub.w	r9, sl, r3
 8008c00:	9b06      	ldr	r3, [sp, #24]
 8008c02:	ebaa 0303 	sub.w	r3, sl, r3
 8008c06:	4599      	cmp	r9, r3
 8008c08:	bfa8      	it	ge
 8008c0a:	4699      	movge	r9, r3
 8008c0c:	f1b9 0f00 	cmp.w	r9, #0
 8008c10:	dc33      	bgt.n	8008c7a <_printf_float+0x396>
 8008c12:	f04f 0800 	mov.w	r8, #0
 8008c16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c1a:	f104 0b1a 	add.w	fp, r4, #26
 8008c1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c20:	ebaa 0303 	sub.w	r3, sl, r3
 8008c24:	eba3 0309 	sub.w	r3, r3, r9
 8008c28:	4543      	cmp	r3, r8
 8008c2a:	f77f af79 	ble.w	8008b20 <_printf_float+0x23c>
 8008c2e:	2301      	movs	r3, #1
 8008c30:	465a      	mov	r2, fp
 8008c32:	4631      	mov	r1, r6
 8008c34:	4628      	mov	r0, r5
 8008c36:	47b8      	blx	r7
 8008c38:	3001      	adds	r0, #1
 8008c3a:	f43f aeae 	beq.w	800899a <_printf_float+0xb6>
 8008c3e:	f108 0801 	add.w	r8, r8, #1
 8008c42:	e7ec      	b.n	8008c1e <_printf_float+0x33a>
 8008c44:	4642      	mov	r2, r8
 8008c46:	4631      	mov	r1, r6
 8008c48:	4628      	mov	r0, r5
 8008c4a:	47b8      	blx	r7
 8008c4c:	3001      	adds	r0, #1
 8008c4e:	d1c2      	bne.n	8008bd6 <_printf_float+0x2f2>
 8008c50:	e6a3      	b.n	800899a <_printf_float+0xb6>
 8008c52:	2301      	movs	r3, #1
 8008c54:	4631      	mov	r1, r6
 8008c56:	4628      	mov	r0, r5
 8008c58:	9206      	str	r2, [sp, #24]
 8008c5a:	47b8      	blx	r7
 8008c5c:	3001      	adds	r0, #1
 8008c5e:	f43f ae9c 	beq.w	800899a <_printf_float+0xb6>
 8008c62:	9a06      	ldr	r2, [sp, #24]
 8008c64:	f10b 0b01 	add.w	fp, fp, #1
 8008c68:	e7bb      	b.n	8008be2 <_printf_float+0x2fe>
 8008c6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c6e:	4631      	mov	r1, r6
 8008c70:	4628      	mov	r0, r5
 8008c72:	47b8      	blx	r7
 8008c74:	3001      	adds	r0, #1
 8008c76:	d1c0      	bne.n	8008bfa <_printf_float+0x316>
 8008c78:	e68f      	b.n	800899a <_printf_float+0xb6>
 8008c7a:	9a06      	ldr	r2, [sp, #24]
 8008c7c:	464b      	mov	r3, r9
 8008c7e:	4442      	add	r2, r8
 8008c80:	4631      	mov	r1, r6
 8008c82:	4628      	mov	r0, r5
 8008c84:	47b8      	blx	r7
 8008c86:	3001      	adds	r0, #1
 8008c88:	d1c3      	bne.n	8008c12 <_printf_float+0x32e>
 8008c8a:	e686      	b.n	800899a <_printf_float+0xb6>
 8008c8c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008c90:	f1ba 0f01 	cmp.w	sl, #1
 8008c94:	dc01      	bgt.n	8008c9a <_printf_float+0x3b6>
 8008c96:	07db      	lsls	r3, r3, #31
 8008c98:	d536      	bpl.n	8008d08 <_printf_float+0x424>
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	4642      	mov	r2, r8
 8008c9e:	4631      	mov	r1, r6
 8008ca0:	4628      	mov	r0, r5
 8008ca2:	47b8      	blx	r7
 8008ca4:	3001      	adds	r0, #1
 8008ca6:	f43f ae78 	beq.w	800899a <_printf_float+0xb6>
 8008caa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cae:	4631      	mov	r1, r6
 8008cb0:	4628      	mov	r0, r5
 8008cb2:	47b8      	blx	r7
 8008cb4:	3001      	adds	r0, #1
 8008cb6:	f43f ae70 	beq.w	800899a <_printf_float+0xb6>
 8008cba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008cc6:	f7f7 ff17 	bl	8000af8 <__aeabi_dcmpeq>
 8008cca:	b9c0      	cbnz	r0, 8008cfe <_printf_float+0x41a>
 8008ccc:	4653      	mov	r3, sl
 8008cce:	f108 0201 	add.w	r2, r8, #1
 8008cd2:	4631      	mov	r1, r6
 8008cd4:	4628      	mov	r0, r5
 8008cd6:	47b8      	blx	r7
 8008cd8:	3001      	adds	r0, #1
 8008cda:	d10c      	bne.n	8008cf6 <_printf_float+0x412>
 8008cdc:	e65d      	b.n	800899a <_printf_float+0xb6>
 8008cde:	2301      	movs	r3, #1
 8008ce0:	465a      	mov	r2, fp
 8008ce2:	4631      	mov	r1, r6
 8008ce4:	4628      	mov	r0, r5
 8008ce6:	47b8      	blx	r7
 8008ce8:	3001      	adds	r0, #1
 8008cea:	f43f ae56 	beq.w	800899a <_printf_float+0xb6>
 8008cee:	f108 0801 	add.w	r8, r8, #1
 8008cf2:	45d0      	cmp	r8, sl
 8008cf4:	dbf3      	blt.n	8008cde <_printf_float+0x3fa>
 8008cf6:	464b      	mov	r3, r9
 8008cf8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008cfc:	e6df      	b.n	8008abe <_printf_float+0x1da>
 8008cfe:	f04f 0800 	mov.w	r8, #0
 8008d02:	f104 0b1a 	add.w	fp, r4, #26
 8008d06:	e7f4      	b.n	8008cf2 <_printf_float+0x40e>
 8008d08:	2301      	movs	r3, #1
 8008d0a:	4642      	mov	r2, r8
 8008d0c:	e7e1      	b.n	8008cd2 <_printf_float+0x3ee>
 8008d0e:	2301      	movs	r3, #1
 8008d10:	464a      	mov	r2, r9
 8008d12:	4631      	mov	r1, r6
 8008d14:	4628      	mov	r0, r5
 8008d16:	47b8      	blx	r7
 8008d18:	3001      	adds	r0, #1
 8008d1a:	f43f ae3e 	beq.w	800899a <_printf_float+0xb6>
 8008d1e:	f108 0801 	add.w	r8, r8, #1
 8008d22:	68e3      	ldr	r3, [r4, #12]
 8008d24:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008d26:	1a5b      	subs	r3, r3, r1
 8008d28:	4543      	cmp	r3, r8
 8008d2a:	dcf0      	bgt.n	8008d0e <_printf_float+0x42a>
 8008d2c:	e6fc      	b.n	8008b28 <_printf_float+0x244>
 8008d2e:	f04f 0800 	mov.w	r8, #0
 8008d32:	f104 0919 	add.w	r9, r4, #25
 8008d36:	e7f4      	b.n	8008d22 <_printf_float+0x43e>

08008d38 <_printf_common>:
 8008d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d3c:	4616      	mov	r6, r2
 8008d3e:	4698      	mov	r8, r3
 8008d40:	688a      	ldr	r2, [r1, #8]
 8008d42:	690b      	ldr	r3, [r1, #16]
 8008d44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	bfb8      	it	lt
 8008d4c:	4613      	movlt	r3, r2
 8008d4e:	6033      	str	r3, [r6, #0]
 8008d50:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008d54:	4607      	mov	r7, r0
 8008d56:	460c      	mov	r4, r1
 8008d58:	b10a      	cbz	r2, 8008d5e <_printf_common+0x26>
 8008d5a:	3301      	adds	r3, #1
 8008d5c:	6033      	str	r3, [r6, #0]
 8008d5e:	6823      	ldr	r3, [r4, #0]
 8008d60:	0699      	lsls	r1, r3, #26
 8008d62:	bf42      	ittt	mi
 8008d64:	6833      	ldrmi	r3, [r6, #0]
 8008d66:	3302      	addmi	r3, #2
 8008d68:	6033      	strmi	r3, [r6, #0]
 8008d6a:	6825      	ldr	r5, [r4, #0]
 8008d6c:	f015 0506 	ands.w	r5, r5, #6
 8008d70:	d106      	bne.n	8008d80 <_printf_common+0x48>
 8008d72:	f104 0a19 	add.w	sl, r4, #25
 8008d76:	68e3      	ldr	r3, [r4, #12]
 8008d78:	6832      	ldr	r2, [r6, #0]
 8008d7a:	1a9b      	subs	r3, r3, r2
 8008d7c:	42ab      	cmp	r3, r5
 8008d7e:	dc26      	bgt.n	8008dce <_printf_common+0x96>
 8008d80:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008d84:	6822      	ldr	r2, [r4, #0]
 8008d86:	3b00      	subs	r3, #0
 8008d88:	bf18      	it	ne
 8008d8a:	2301      	movne	r3, #1
 8008d8c:	0692      	lsls	r2, r2, #26
 8008d8e:	d42b      	bmi.n	8008de8 <_printf_common+0xb0>
 8008d90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008d94:	4641      	mov	r1, r8
 8008d96:	4638      	mov	r0, r7
 8008d98:	47c8      	blx	r9
 8008d9a:	3001      	adds	r0, #1
 8008d9c:	d01e      	beq.n	8008ddc <_printf_common+0xa4>
 8008d9e:	6823      	ldr	r3, [r4, #0]
 8008da0:	6922      	ldr	r2, [r4, #16]
 8008da2:	f003 0306 	and.w	r3, r3, #6
 8008da6:	2b04      	cmp	r3, #4
 8008da8:	bf02      	ittt	eq
 8008daa:	68e5      	ldreq	r5, [r4, #12]
 8008dac:	6833      	ldreq	r3, [r6, #0]
 8008dae:	1aed      	subeq	r5, r5, r3
 8008db0:	68a3      	ldr	r3, [r4, #8]
 8008db2:	bf0c      	ite	eq
 8008db4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008db8:	2500      	movne	r5, #0
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	bfc4      	itt	gt
 8008dbe:	1a9b      	subgt	r3, r3, r2
 8008dc0:	18ed      	addgt	r5, r5, r3
 8008dc2:	2600      	movs	r6, #0
 8008dc4:	341a      	adds	r4, #26
 8008dc6:	42b5      	cmp	r5, r6
 8008dc8:	d11a      	bne.n	8008e00 <_printf_common+0xc8>
 8008dca:	2000      	movs	r0, #0
 8008dcc:	e008      	b.n	8008de0 <_printf_common+0xa8>
 8008dce:	2301      	movs	r3, #1
 8008dd0:	4652      	mov	r2, sl
 8008dd2:	4641      	mov	r1, r8
 8008dd4:	4638      	mov	r0, r7
 8008dd6:	47c8      	blx	r9
 8008dd8:	3001      	adds	r0, #1
 8008dda:	d103      	bne.n	8008de4 <_printf_common+0xac>
 8008ddc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008de4:	3501      	adds	r5, #1
 8008de6:	e7c6      	b.n	8008d76 <_printf_common+0x3e>
 8008de8:	18e1      	adds	r1, r4, r3
 8008dea:	1c5a      	adds	r2, r3, #1
 8008dec:	2030      	movs	r0, #48	@ 0x30
 8008dee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008df2:	4422      	add	r2, r4
 8008df4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008df8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008dfc:	3302      	adds	r3, #2
 8008dfe:	e7c7      	b.n	8008d90 <_printf_common+0x58>
 8008e00:	2301      	movs	r3, #1
 8008e02:	4622      	mov	r2, r4
 8008e04:	4641      	mov	r1, r8
 8008e06:	4638      	mov	r0, r7
 8008e08:	47c8      	blx	r9
 8008e0a:	3001      	adds	r0, #1
 8008e0c:	d0e6      	beq.n	8008ddc <_printf_common+0xa4>
 8008e0e:	3601      	adds	r6, #1
 8008e10:	e7d9      	b.n	8008dc6 <_printf_common+0x8e>
	...

08008e14 <_printf_i>:
 8008e14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e18:	7e0f      	ldrb	r7, [r1, #24]
 8008e1a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008e1c:	2f78      	cmp	r7, #120	@ 0x78
 8008e1e:	4691      	mov	r9, r2
 8008e20:	4680      	mov	r8, r0
 8008e22:	460c      	mov	r4, r1
 8008e24:	469a      	mov	sl, r3
 8008e26:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008e2a:	d807      	bhi.n	8008e3c <_printf_i+0x28>
 8008e2c:	2f62      	cmp	r7, #98	@ 0x62
 8008e2e:	d80a      	bhi.n	8008e46 <_printf_i+0x32>
 8008e30:	2f00      	cmp	r7, #0
 8008e32:	f000 80d2 	beq.w	8008fda <_printf_i+0x1c6>
 8008e36:	2f58      	cmp	r7, #88	@ 0x58
 8008e38:	f000 80b9 	beq.w	8008fae <_printf_i+0x19a>
 8008e3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008e44:	e03a      	b.n	8008ebc <_printf_i+0xa8>
 8008e46:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008e4a:	2b15      	cmp	r3, #21
 8008e4c:	d8f6      	bhi.n	8008e3c <_printf_i+0x28>
 8008e4e:	a101      	add	r1, pc, #4	@ (adr r1, 8008e54 <_printf_i+0x40>)
 8008e50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e54:	08008ead 	.word	0x08008ead
 8008e58:	08008ec1 	.word	0x08008ec1
 8008e5c:	08008e3d 	.word	0x08008e3d
 8008e60:	08008e3d 	.word	0x08008e3d
 8008e64:	08008e3d 	.word	0x08008e3d
 8008e68:	08008e3d 	.word	0x08008e3d
 8008e6c:	08008ec1 	.word	0x08008ec1
 8008e70:	08008e3d 	.word	0x08008e3d
 8008e74:	08008e3d 	.word	0x08008e3d
 8008e78:	08008e3d 	.word	0x08008e3d
 8008e7c:	08008e3d 	.word	0x08008e3d
 8008e80:	08008fc1 	.word	0x08008fc1
 8008e84:	08008eeb 	.word	0x08008eeb
 8008e88:	08008f7b 	.word	0x08008f7b
 8008e8c:	08008e3d 	.word	0x08008e3d
 8008e90:	08008e3d 	.word	0x08008e3d
 8008e94:	08008fe3 	.word	0x08008fe3
 8008e98:	08008e3d 	.word	0x08008e3d
 8008e9c:	08008eeb 	.word	0x08008eeb
 8008ea0:	08008e3d 	.word	0x08008e3d
 8008ea4:	08008e3d 	.word	0x08008e3d
 8008ea8:	08008f83 	.word	0x08008f83
 8008eac:	6833      	ldr	r3, [r6, #0]
 8008eae:	1d1a      	adds	r2, r3, #4
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	6032      	str	r2, [r6, #0]
 8008eb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008eb8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	e09d      	b.n	8008ffc <_printf_i+0x1e8>
 8008ec0:	6833      	ldr	r3, [r6, #0]
 8008ec2:	6820      	ldr	r0, [r4, #0]
 8008ec4:	1d19      	adds	r1, r3, #4
 8008ec6:	6031      	str	r1, [r6, #0]
 8008ec8:	0606      	lsls	r6, r0, #24
 8008eca:	d501      	bpl.n	8008ed0 <_printf_i+0xbc>
 8008ecc:	681d      	ldr	r5, [r3, #0]
 8008ece:	e003      	b.n	8008ed8 <_printf_i+0xc4>
 8008ed0:	0645      	lsls	r5, r0, #25
 8008ed2:	d5fb      	bpl.n	8008ecc <_printf_i+0xb8>
 8008ed4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008ed8:	2d00      	cmp	r5, #0
 8008eda:	da03      	bge.n	8008ee4 <_printf_i+0xd0>
 8008edc:	232d      	movs	r3, #45	@ 0x2d
 8008ede:	426d      	negs	r5, r5
 8008ee0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ee4:	4859      	ldr	r0, [pc, #356]	@ (800904c <_printf_i+0x238>)
 8008ee6:	230a      	movs	r3, #10
 8008ee8:	e011      	b.n	8008f0e <_printf_i+0xfa>
 8008eea:	6821      	ldr	r1, [r4, #0]
 8008eec:	6833      	ldr	r3, [r6, #0]
 8008eee:	0608      	lsls	r0, r1, #24
 8008ef0:	f853 5b04 	ldr.w	r5, [r3], #4
 8008ef4:	d402      	bmi.n	8008efc <_printf_i+0xe8>
 8008ef6:	0649      	lsls	r1, r1, #25
 8008ef8:	bf48      	it	mi
 8008efa:	b2ad      	uxthmi	r5, r5
 8008efc:	2f6f      	cmp	r7, #111	@ 0x6f
 8008efe:	4853      	ldr	r0, [pc, #332]	@ (800904c <_printf_i+0x238>)
 8008f00:	6033      	str	r3, [r6, #0]
 8008f02:	bf14      	ite	ne
 8008f04:	230a      	movne	r3, #10
 8008f06:	2308      	moveq	r3, #8
 8008f08:	2100      	movs	r1, #0
 8008f0a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008f0e:	6866      	ldr	r6, [r4, #4]
 8008f10:	60a6      	str	r6, [r4, #8]
 8008f12:	2e00      	cmp	r6, #0
 8008f14:	bfa2      	ittt	ge
 8008f16:	6821      	ldrge	r1, [r4, #0]
 8008f18:	f021 0104 	bicge.w	r1, r1, #4
 8008f1c:	6021      	strge	r1, [r4, #0]
 8008f1e:	b90d      	cbnz	r5, 8008f24 <_printf_i+0x110>
 8008f20:	2e00      	cmp	r6, #0
 8008f22:	d04b      	beq.n	8008fbc <_printf_i+0x1a8>
 8008f24:	4616      	mov	r6, r2
 8008f26:	fbb5 f1f3 	udiv	r1, r5, r3
 8008f2a:	fb03 5711 	mls	r7, r3, r1, r5
 8008f2e:	5dc7      	ldrb	r7, [r0, r7]
 8008f30:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008f34:	462f      	mov	r7, r5
 8008f36:	42bb      	cmp	r3, r7
 8008f38:	460d      	mov	r5, r1
 8008f3a:	d9f4      	bls.n	8008f26 <_printf_i+0x112>
 8008f3c:	2b08      	cmp	r3, #8
 8008f3e:	d10b      	bne.n	8008f58 <_printf_i+0x144>
 8008f40:	6823      	ldr	r3, [r4, #0]
 8008f42:	07df      	lsls	r7, r3, #31
 8008f44:	d508      	bpl.n	8008f58 <_printf_i+0x144>
 8008f46:	6923      	ldr	r3, [r4, #16]
 8008f48:	6861      	ldr	r1, [r4, #4]
 8008f4a:	4299      	cmp	r1, r3
 8008f4c:	bfde      	ittt	le
 8008f4e:	2330      	movle	r3, #48	@ 0x30
 8008f50:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008f54:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008f58:	1b92      	subs	r2, r2, r6
 8008f5a:	6122      	str	r2, [r4, #16]
 8008f5c:	f8cd a000 	str.w	sl, [sp]
 8008f60:	464b      	mov	r3, r9
 8008f62:	aa03      	add	r2, sp, #12
 8008f64:	4621      	mov	r1, r4
 8008f66:	4640      	mov	r0, r8
 8008f68:	f7ff fee6 	bl	8008d38 <_printf_common>
 8008f6c:	3001      	adds	r0, #1
 8008f6e:	d14a      	bne.n	8009006 <_printf_i+0x1f2>
 8008f70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008f74:	b004      	add	sp, #16
 8008f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f7a:	6823      	ldr	r3, [r4, #0]
 8008f7c:	f043 0320 	orr.w	r3, r3, #32
 8008f80:	6023      	str	r3, [r4, #0]
 8008f82:	4833      	ldr	r0, [pc, #204]	@ (8009050 <_printf_i+0x23c>)
 8008f84:	2778      	movs	r7, #120	@ 0x78
 8008f86:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008f8a:	6823      	ldr	r3, [r4, #0]
 8008f8c:	6831      	ldr	r1, [r6, #0]
 8008f8e:	061f      	lsls	r7, r3, #24
 8008f90:	f851 5b04 	ldr.w	r5, [r1], #4
 8008f94:	d402      	bmi.n	8008f9c <_printf_i+0x188>
 8008f96:	065f      	lsls	r7, r3, #25
 8008f98:	bf48      	it	mi
 8008f9a:	b2ad      	uxthmi	r5, r5
 8008f9c:	6031      	str	r1, [r6, #0]
 8008f9e:	07d9      	lsls	r1, r3, #31
 8008fa0:	bf44      	itt	mi
 8008fa2:	f043 0320 	orrmi.w	r3, r3, #32
 8008fa6:	6023      	strmi	r3, [r4, #0]
 8008fa8:	b11d      	cbz	r5, 8008fb2 <_printf_i+0x19e>
 8008faa:	2310      	movs	r3, #16
 8008fac:	e7ac      	b.n	8008f08 <_printf_i+0xf4>
 8008fae:	4827      	ldr	r0, [pc, #156]	@ (800904c <_printf_i+0x238>)
 8008fb0:	e7e9      	b.n	8008f86 <_printf_i+0x172>
 8008fb2:	6823      	ldr	r3, [r4, #0]
 8008fb4:	f023 0320 	bic.w	r3, r3, #32
 8008fb8:	6023      	str	r3, [r4, #0]
 8008fba:	e7f6      	b.n	8008faa <_printf_i+0x196>
 8008fbc:	4616      	mov	r6, r2
 8008fbe:	e7bd      	b.n	8008f3c <_printf_i+0x128>
 8008fc0:	6833      	ldr	r3, [r6, #0]
 8008fc2:	6825      	ldr	r5, [r4, #0]
 8008fc4:	6961      	ldr	r1, [r4, #20]
 8008fc6:	1d18      	adds	r0, r3, #4
 8008fc8:	6030      	str	r0, [r6, #0]
 8008fca:	062e      	lsls	r6, r5, #24
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	d501      	bpl.n	8008fd4 <_printf_i+0x1c0>
 8008fd0:	6019      	str	r1, [r3, #0]
 8008fd2:	e002      	b.n	8008fda <_printf_i+0x1c6>
 8008fd4:	0668      	lsls	r0, r5, #25
 8008fd6:	d5fb      	bpl.n	8008fd0 <_printf_i+0x1bc>
 8008fd8:	8019      	strh	r1, [r3, #0]
 8008fda:	2300      	movs	r3, #0
 8008fdc:	6123      	str	r3, [r4, #16]
 8008fde:	4616      	mov	r6, r2
 8008fe0:	e7bc      	b.n	8008f5c <_printf_i+0x148>
 8008fe2:	6833      	ldr	r3, [r6, #0]
 8008fe4:	1d1a      	adds	r2, r3, #4
 8008fe6:	6032      	str	r2, [r6, #0]
 8008fe8:	681e      	ldr	r6, [r3, #0]
 8008fea:	6862      	ldr	r2, [r4, #4]
 8008fec:	2100      	movs	r1, #0
 8008fee:	4630      	mov	r0, r6
 8008ff0:	f7f7 f906 	bl	8000200 <memchr>
 8008ff4:	b108      	cbz	r0, 8008ffa <_printf_i+0x1e6>
 8008ff6:	1b80      	subs	r0, r0, r6
 8008ff8:	6060      	str	r0, [r4, #4]
 8008ffa:	6863      	ldr	r3, [r4, #4]
 8008ffc:	6123      	str	r3, [r4, #16]
 8008ffe:	2300      	movs	r3, #0
 8009000:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009004:	e7aa      	b.n	8008f5c <_printf_i+0x148>
 8009006:	6923      	ldr	r3, [r4, #16]
 8009008:	4632      	mov	r2, r6
 800900a:	4649      	mov	r1, r9
 800900c:	4640      	mov	r0, r8
 800900e:	47d0      	blx	sl
 8009010:	3001      	adds	r0, #1
 8009012:	d0ad      	beq.n	8008f70 <_printf_i+0x15c>
 8009014:	6823      	ldr	r3, [r4, #0]
 8009016:	079b      	lsls	r3, r3, #30
 8009018:	d413      	bmi.n	8009042 <_printf_i+0x22e>
 800901a:	68e0      	ldr	r0, [r4, #12]
 800901c:	9b03      	ldr	r3, [sp, #12]
 800901e:	4298      	cmp	r0, r3
 8009020:	bfb8      	it	lt
 8009022:	4618      	movlt	r0, r3
 8009024:	e7a6      	b.n	8008f74 <_printf_i+0x160>
 8009026:	2301      	movs	r3, #1
 8009028:	4632      	mov	r2, r6
 800902a:	4649      	mov	r1, r9
 800902c:	4640      	mov	r0, r8
 800902e:	47d0      	blx	sl
 8009030:	3001      	adds	r0, #1
 8009032:	d09d      	beq.n	8008f70 <_printf_i+0x15c>
 8009034:	3501      	adds	r5, #1
 8009036:	68e3      	ldr	r3, [r4, #12]
 8009038:	9903      	ldr	r1, [sp, #12]
 800903a:	1a5b      	subs	r3, r3, r1
 800903c:	42ab      	cmp	r3, r5
 800903e:	dcf2      	bgt.n	8009026 <_printf_i+0x212>
 8009040:	e7eb      	b.n	800901a <_printf_i+0x206>
 8009042:	2500      	movs	r5, #0
 8009044:	f104 0619 	add.w	r6, r4, #25
 8009048:	e7f5      	b.n	8009036 <_printf_i+0x222>
 800904a:	bf00      	nop
 800904c:	0800daf2 	.word	0x0800daf2
 8009050:	0800db03 	.word	0x0800db03

08009054 <_scanf_float>:
 8009054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009058:	b087      	sub	sp, #28
 800905a:	4617      	mov	r7, r2
 800905c:	9303      	str	r3, [sp, #12]
 800905e:	688b      	ldr	r3, [r1, #8]
 8009060:	1e5a      	subs	r2, r3, #1
 8009062:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009066:	bf81      	itttt	hi
 8009068:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800906c:	eb03 0b05 	addhi.w	fp, r3, r5
 8009070:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009074:	608b      	strhi	r3, [r1, #8]
 8009076:	680b      	ldr	r3, [r1, #0]
 8009078:	460a      	mov	r2, r1
 800907a:	f04f 0500 	mov.w	r5, #0
 800907e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8009082:	f842 3b1c 	str.w	r3, [r2], #28
 8009086:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800908a:	4680      	mov	r8, r0
 800908c:	460c      	mov	r4, r1
 800908e:	bf98      	it	ls
 8009090:	f04f 0b00 	movls.w	fp, #0
 8009094:	9201      	str	r2, [sp, #4]
 8009096:	4616      	mov	r6, r2
 8009098:	46aa      	mov	sl, r5
 800909a:	46a9      	mov	r9, r5
 800909c:	9502      	str	r5, [sp, #8]
 800909e:	68a2      	ldr	r2, [r4, #8]
 80090a0:	b152      	cbz	r2, 80090b8 <_scanf_float+0x64>
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	781b      	ldrb	r3, [r3, #0]
 80090a6:	2b4e      	cmp	r3, #78	@ 0x4e
 80090a8:	d864      	bhi.n	8009174 <_scanf_float+0x120>
 80090aa:	2b40      	cmp	r3, #64	@ 0x40
 80090ac:	d83c      	bhi.n	8009128 <_scanf_float+0xd4>
 80090ae:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80090b2:	b2c8      	uxtb	r0, r1
 80090b4:	280e      	cmp	r0, #14
 80090b6:	d93a      	bls.n	800912e <_scanf_float+0xda>
 80090b8:	f1b9 0f00 	cmp.w	r9, #0
 80090bc:	d003      	beq.n	80090c6 <_scanf_float+0x72>
 80090be:	6823      	ldr	r3, [r4, #0]
 80090c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80090c4:	6023      	str	r3, [r4, #0]
 80090c6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80090ca:	f1ba 0f01 	cmp.w	sl, #1
 80090ce:	f200 8117 	bhi.w	8009300 <_scanf_float+0x2ac>
 80090d2:	9b01      	ldr	r3, [sp, #4]
 80090d4:	429e      	cmp	r6, r3
 80090d6:	f200 8108 	bhi.w	80092ea <_scanf_float+0x296>
 80090da:	2001      	movs	r0, #1
 80090dc:	b007      	add	sp, #28
 80090de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090e2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80090e6:	2a0d      	cmp	r2, #13
 80090e8:	d8e6      	bhi.n	80090b8 <_scanf_float+0x64>
 80090ea:	a101      	add	r1, pc, #4	@ (adr r1, 80090f0 <_scanf_float+0x9c>)
 80090ec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80090f0:	08009237 	.word	0x08009237
 80090f4:	080090b9 	.word	0x080090b9
 80090f8:	080090b9 	.word	0x080090b9
 80090fc:	080090b9 	.word	0x080090b9
 8009100:	08009297 	.word	0x08009297
 8009104:	0800926f 	.word	0x0800926f
 8009108:	080090b9 	.word	0x080090b9
 800910c:	080090b9 	.word	0x080090b9
 8009110:	08009245 	.word	0x08009245
 8009114:	080090b9 	.word	0x080090b9
 8009118:	080090b9 	.word	0x080090b9
 800911c:	080090b9 	.word	0x080090b9
 8009120:	080090b9 	.word	0x080090b9
 8009124:	080091fd 	.word	0x080091fd
 8009128:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800912c:	e7db      	b.n	80090e6 <_scanf_float+0x92>
 800912e:	290e      	cmp	r1, #14
 8009130:	d8c2      	bhi.n	80090b8 <_scanf_float+0x64>
 8009132:	a001      	add	r0, pc, #4	@ (adr r0, 8009138 <_scanf_float+0xe4>)
 8009134:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009138:	080091ed 	.word	0x080091ed
 800913c:	080090b9 	.word	0x080090b9
 8009140:	080091ed 	.word	0x080091ed
 8009144:	08009283 	.word	0x08009283
 8009148:	080090b9 	.word	0x080090b9
 800914c:	08009195 	.word	0x08009195
 8009150:	080091d3 	.word	0x080091d3
 8009154:	080091d3 	.word	0x080091d3
 8009158:	080091d3 	.word	0x080091d3
 800915c:	080091d3 	.word	0x080091d3
 8009160:	080091d3 	.word	0x080091d3
 8009164:	080091d3 	.word	0x080091d3
 8009168:	080091d3 	.word	0x080091d3
 800916c:	080091d3 	.word	0x080091d3
 8009170:	080091d3 	.word	0x080091d3
 8009174:	2b6e      	cmp	r3, #110	@ 0x6e
 8009176:	d809      	bhi.n	800918c <_scanf_float+0x138>
 8009178:	2b60      	cmp	r3, #96	@ 0x60
 800917a:	d8b2      	bhi.n	80090e2 <_scanf_float+0x8e>
 800917c:	2b54      	cmp	r3, #84	@ 0x54
 800917e:	d07b      	beq.n	8009278 <_scanf_float+0x224>
 8009180:	2b59      	cmp	r3, #89	@ 0x59
 8009182:	d199      	bne.n	80090b8 <_scanf_float+0x64>
 8009184:	2d07      	cmp	r5, #7
 8009186:	d197      	bne.n	80090b8 <_scanf_float+0x64>
 8009188:	2508      	movs	r5, #8
 800918a:	e02c      	b.n	80091e6 <_scanf_float+0x192>
 800918c:	2b74      	cmp	r3, #116	@ 0x74
 800918e:	d073      	beq.n	8009278 <_scanf_float+0x224>
 8009190:	2b79      	cmp	r3, #121	@ 0x79
 8009192:	e7f6      	b.n	8009182 <_scanf_float+0x12e>
 8009194:	6821      	ldr	r1, [r4, #0]
 8009196:	05c8      	lsls	r0, r1, #23
 8009198:	d51b      	bpl.n	80091d2 <_scanf_float+0x17e>
 800919a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800919e:	6021      	str	r1, [r4, #0]
 80091a0:	f109 0901 	add.w	r9, r9, #1
 80091a4:	f1bb 0f00 	cmp.w	fp, #0
 80091a8:	d003      	beq.n	80091b2 <_scanf_float+0x15e>
 80091aa:	3201      	adds	r2, #1
 80091ac:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 80091b0:	60a2      	str	r2, [r4, #8]
 80091b2:	68a3      	ldr	r3, [r4, #8]
 80091b4:	3b01      	subs	r3, #1
 80091b6:	60a3      	str	r3, [r4, #8]
 80091b8:	6923      	ldr	r3, [r4, #16]
 80091ba:	3301      	adds	r3, #1
 80091bc:	6123      	str	r3, [r4, #16]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	3b01      	subs	r3, #1
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	607b      	str	r3, [r7, #4]
 80091c6:	f340 8087 	ble.w	80092d8 <_scanf_float+0x284>
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	3301      	adds	r3, #1
 80091ce:	603b      	str	r3, [r7, #0]
 80091d0:	e765      	b.n	800909e <_scanf_float+0x4a>
 80091d2:	eb1a 0105 	adds.w	r1, sl, r5
 80091d6:	f47f af6f 	bne.w	80090b8 <_scanf_float+0x64>
 80091da:	6822      	ldr	r2, [r4, #0]
 80091dc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80091e0:	6022      	str	r2, [r4, #0]
 80091e2:	460d      	mov	r5, r1
 80091e4:	468a      	mov	sl, r1
 80091e6:	f806 3b01 	strb.w	r3, [r6], #1
 80091ea:	e7e2      	b.n	80091b2 <_scanf_float+0x15e>
 80091ec:	6822      	ldr	r2, [r4, #0]
 80091ee:	0610      	lsls	r0, r2, #24
 80091f0:	f57f af62 	bpl.w	80090b8 <_scanf_float+0x64>
 80091f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80091f8:	6022      	str	r2, [r4, #0]
 80091fa:	e7f4      	b.n	80091e6 <_scanf_float+0x192>
 80091fc:	f1ba 0f00 	cmp.w	sl, #0
 8009200:	d10e      	bne.n	8009220 <_scanf_float+0x1cc>
 8009202:	f1b9 0f00 	cmp.w	r9, #0
 8009206:	d10e      	bne.n	8009226 <_scanf_float+0x1d2>
 8009208:	6822      	ldr	r2, [r4, #0]
 800920a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800920e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009212:	d108      	bne.n	8009226 <_scanf_float+0x1d2>
 8009214:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009218:	6022      	str	r2, [r4, #0]
 800921a:	f04f 0a01 	mov.w	sl, #1
 800921e:	e7e2      	b.n	80091e6 <_scanf_float+0x192>
 8009220:	f1ba 0f02 	cmp.w	sl, #2
 8009224:	d055      	beq.n	80092d2 <_scanf_float+0x27e>
 8009226:	2d01      	cmp	r5, #1
 8009228:	d002      	beq.n	8009230 <_scanf_float+0x1dc>
 800922a:	2d04      	cmp	r5, #4
 800922c:	f47f af44 	bne.w	80090b8 <_scanf_float+0x64>
 8009230:	3501      	adds	r5, #1
 8009232:	b2ed      	uxtb	r5, r5
 8009234:	e7d7      	b.n	80091e6 <_scanf_float+0x192>
 8009236:	f1ba 0f01 	cmp.w	sl, #1
 800923a:	f47f af3d 	bne.w	80090b8 <_scanf_float+0x64>
 800923e:	f04f 0a02 	mov.w	sl, #2
 8009242:	e7d0      	b.n	80091e6 <_scanf_float+0x192>
 8009244:	b97d      	cbnz	r5, 8009266 <_scanf_float+0x212>
 8009246:	f1b9 0f00 	cmp.w	r9, #0
 800924a:	f47f af38 	bne.w	80090be <_scanf_float+0x6a>
 800924e:	6822      	ldr	r2, [r4, #0]
 8009250:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009254:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009258:	f040 8108 	bne.w	800946c <_scanf_float+0x418>
 800925c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009260:	6022      	str	r2, [r4, #0]
 8009262:	2501      	movs	r5, #1
 8009264:	e7bf      	b.n	80091e6 <_scanf_float+0x192>
 8009266:	2d03      	cmp	r5, #3
 8009268:	d0e2      	beq.n	8009230 <_scanf_float+0x1dc>
 800926a:	2d05      	cmp	r5, #5
 800926c:	e7de      	b.n	800922c <_scanf_float+0x1d8>
 800926e:	2d02      	cmp	r5, #2
 8009270:	f47f af22 	bne.w	80090b8 <_scanf_float+0x64>
 8009274:	2503      	movs	r5, #3
 8009276:	e7b6      	b.n	80091e6 <_scanf_float+0x192>
 8009278:	2d06      	cmp	r5, #6
 800927a:	f47f af1d 	bne.w	80090b8 <_scanf_float+0x64>
 800927e:	2507      	movs	r5, #7
 8009280:	e7b1      	b.n	80091e6 <_scanf_float+0x192>
 8009282:	6822      	ldr	r2, [r4, #0]
 8009284:	0591      	lsls	r1, r2, #22
 8009286:	f57f af17 	bpl.w	80090b8 <_scanf_float+0x64>
 800928a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800928e:	6022      	str	r2, [r4, #0]
 8009290:	f8cd 9008 	str.w	r9, [sp, #8]
 8009294:	e7a7      	b.n	80091e6 <_scanf_float+0x192>
 8009296:	6822      	ldr	r2, [r4, #0]
 8009298:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800929c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80092a0:	d006      	beq.n	80092b0 <_scanf_float+0x25c>
 80092a2:	0550      	lsls	r0, r2, #21
 80092a4:	f57f af08 	bpl.w	80090b8 <_scanf_float+0x64>
 80092a8:	f1b9 0f00 	cmp.w	r9, #0
 80092ac:	f000 80de 	beq.w	800946c <_scanf_float+0x418>
 80092b0:	0591      	lsls	r1, r2, #22
 80092b2:	bf58      	it	pl
 80092b4:	9902      	ldrpl	r1, [sp, #8]
 80092b6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80092ba:	bf58      	it	pl
 80092bc:	eba9 0101 	subpl.w	r1, r9, r1
 80092c0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80092c4:	bf58      	it	pl
 80092c6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80092ca:	6022      	str	r2, [r4, #0]
 80092cc:	f04f 0900 	mov.w	r9, #0
 80092d0:	e789      	b.n	80091e6 <_scanf_float+0x192>
 80092d2:	f04f 0a03 	mov.w	sl, #3
 80092d6:	e786      	b.n	80091e6 <_scanf_float+0x192>
 80092d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80092dc:	4639      	mov	r1, r7
 80092de:	4640      	mov	r0, r8
 80092e0:	4798      	blx	r3
 80092e2:	2800      	cmp	r0, #0
 80092e4:	f43f aedb 	beq.w	800909e <_scanf_float+0x4a>
 80092e8:	e6e6      	b.n	80090b8 <_scanf_float+0x64>
 80092ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80092ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80092f2:	463a      	mov	r2, r7
 80092f4:	4640      	mov	r0, r8
 80092f6:	4798      	blx	r3
 80092f8:	6923      	ldr	r3, [r4, #16]
 80092fa:	3b01      	subs	r3, #1
 80092fc:	6123      	str	r3, [r4, #16]
 80092fe:	e6e8      	b.n	80090d2 <_scanf_float+0x7e>
 8009300:	1e6b      	subs	r3, r5, #1
 8009302:	2b06      	cmp	r3, #6
 8009304:	d824      	bhi.n	8009350 <_scanf_float+0x2fc>
 8009306:	2d02      	cmp	r5, #2
 8009308:	d836      	bhi.n	8009378 <_scanf_float+0x324>
 800930a:	9b01      	ldr	r3, [sp, #4]
 800930c:	429e      	cmp	r6, r3
 800930e:	f67f aee4 	bls.w	80090da <_scanf_float+0x86>
 8009312:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009316:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800931a:	463a      	mov	r2, r7
 800931c:	4640      	mov	r0, r8
 800931e:	4798      	blx	r3
 8009320:	6923      	ldr	r3, [r4, #16]
 8009322:	3b01      	subs	r3, #1
 8009324:	6123      	str	r3, [r4, #16]
 8009326:	e7f0      	b.n	800930a <_scanf_float+0x2b6>
 8009328:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800932c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009330:	463a      	mov	r2, r7
 8009332:	4640      	mov	r0, r8
 8009334:	4798      	blx	r3
 8009336:	6923      	ldr	r3, [r4, #16]
 8009338:	3b01      	subs	r3, #1
 800933a:	6123      	str	r3, [r4, #16]
 800933c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8009340:	fa5f fa8a 	uxtb.w	sl, sl
 8009344:	f1ba 0f02 	cmp.w	sl, #2
 8009348:	d1ee      	bne.n	8009328 <_scanf_float+0x2d4>
 800934a:	3d03      	subs	r5, #3
 800934c:	b2ed      	uxtb	r5, r5
 800934e:	1b76      	subs	r6, r6, r5
 8009350:	6823      	ldr	r3, [r4, #0]
 8009352:	05da      	lsls	r2, r3, #23
 8009354:	d530      	bpl.n	80093b8 <_scanf_float+0x364>
 8009356:	055b      	lsls	r3, r3, #21
 8009358:	d511      	bpl.n	800937e <_scanf_float+0x32a>
 800935a:	9b01      	ldr	r3, [sp, #4]
 800935c:	429e      	cmp	r6, r3
 800935e:	f67f aebc 	bls.w	80090da <_scanf_float+0x86>
 8009362:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009366:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800936a:	463a      	mov	r2, r7
 800936c:	4640      	mov	r0, r8
 800936e:	4798      	blx	r3
 8009370:	6923      	ldr	r3, [r4, #16]
 8009372:	3b01      	subs	r3, #1
 8009374:	6123      	str	r3, [r4, #16]
 8009376:	e7f0      	b.n	800935a <_scanf_float+0x306>
 8009378:	46aa      	mov	sl, r5
 800937a:	46b3      	mov	fp, r6
 800937c:	e7de      	b.n	800933c <_scanf_float+0x2e8>
 800937e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009382:	6923      	ldr	r3, [r4, #16]
 8009384:	2965      	cmp	r1, #101	@ 0x65
 8009386:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800938a:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800938e:	6123      	str	r3, [r4, #16]
 8009390:	d00c      	beq.n	80093ac <_scanf_float+0x358>
 8009392:	2945      	cmp	r1, #69	@ 0x45
 8009394:	d00a      	beq.n	80093ac <_scanf_float+0x358>
 8009396:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800939a:	463a      	mov	r2, r7
 800939c:	4640      	mov	r0, r8
 800939e:	4798      	blx	r3
 80093a0:	6923      	ldr	r3, [r4, #16]
 80093a2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80093a6:	3b01      	subs	r3, #1
 80093a8:	1eb5      	subs	r5, r6, #2
 80093aa:	6123      	str	r3, [r4, #16]
 80093ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80093b0:	463a      	mov	r2, r7
 80093b2:	4640      	mov	r0, r8
 80093b4:	4798      	blx	r3
 80093b6:	462e      	mov	r6, r5
 80093b8:	6822      	ldr	r2, [r4, #0]
 80093ba:	f012 0210 	ands.w	r2, r2, #16
 80093be:	d001      	beq.n	80093c4 <_scanf_float+0x370>
 80093c0:	2000      	movs	r0, #0
 80093c2:	e68b      	b.n	80090dc <_scanf_float+0x88>
 80093c4:	7032      	strb	r2, [r6, #0]
 80093c6:	6823      	ldr	r3, [r4, #0]
 80093c8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80093cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093d0:	d11c      	bne.n	800940c <_scanf_float+0x3b8>
 80093d2:	9b02      	ldr	r3, [sp, #8]
 80093d4:	454b      	cmp	r3, r9
 80093d6:	eba3 0209 	sub.w	r2, r3, r9
 80093da:	d123      	bne.n	8009424 <_scanf_float+0x3d0>
 80093dc:	9901      	ldr	r1, [sp, #4]
 80093de:	2200      	movs	r2, #0
 80093e0:	4640      	mov	r0, r8
 80093e2:	f000 ff11 	bl	800a208 <_strtod_r>
 80093e6:	9b03      	ldr	r3, [sp, #12]
 80093e8:	6821      	ldr	r1, [r4, #0]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f011 0f02 	tst.w	r1, #2
 80093f0:	ec57 6b10 	vmov	r6, r7, d0
 80093f4:	f103 0204 	add.w	r2, r3, #4
 80093f8:	d01f      	beq.n	800943a <_scanf_float+0x3e6>
 80093fa:	9903      	ldr	r1, [sp, #12]
 80093fc:	600a      	str	r2, [r1, #0]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	e9c3 6700 	strd	r6, r7, [r3]
 8009404:	68e3      	ldr	r3, [r4, #12]
 8009406:	3301      	adds	r3, #1
 8009408:	60e3      	str	r3, [r4, #12]
 800940a:	e7d9      	b.n	80093c0 <_scanf_float+0x36c>
 800940c:	9b04      	ldr	r3, [sp, #16]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d0e4      	beq.n	80093dc <_scanf_float+0x388>
 8009412:	9905      	ldr	r1, [sp, #20]
 8009414:	230a      	movs	r3, #10
 8009416:	3101      	adds	r1, #1
 8009418:	4640      	mov	r0, r8
 800941a:	f000 ff75 	bl	800a308 <_strtol_r>
 800941e:	9b04      	ldr	r3, [sp, #16]
 8009420:	9e05      	ldr	r6, [sp, #20]
 8009422:	1ac2      	subs	r2, r0, r3
 8009424:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009428:	429e      	cmp	r6, r3
 800942a:	bf28      	it	cs
 800942c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009430:	4910      	ldr	r1, [pc, #64]	@ (8009474 <_scanf_float+0x420>)
 8009432:	4630      	mov	r0, r6
 8009434:	f000 f822 	bl	800947c <siprintf>
 8009438:	e7d0      	b.n	80093dc <_scanf_float+0x388>
 800943a:	f011 0f04 	tst.w	r1, #4
 800943e:	9903      	ldr	r1, [sp, #12]
 8009440:	600a      	str	r2, [r1, #0]
 8009442:	d1dc      	bne.n	80093fe <_scanf_float+0x3aa>
 8009444:	681d      	ldr	r5, [r3, #0]
 8009446:	4632      	mov	r2, r6
 8009448:	463b      	mov	r3, r7
 800944a:	4630      	mov	r0, r6
 800944c:	4639      	mov	r1, r7
 800944e:	f7f7 fb85 	bl	8000b5c <__aeabi_dcmpun>
 8009452:	b128      	cbz	r0, 8009460 <_scanf_float+0x40c>
 8009454:	4808      	ldr	r0, [pc, #32]	@ (8009478 <_scanf_float+0x424>)
 8009456:	f000 ffef 	bl	800a438 <nanf>
 800945a:	ed85 0a00 	vstr	s0, [r5]
 800945e:	e7d1      	b.n	8009404 <_scanf_float+0x3b0>
 8009460:	4630      	mov	r0, r6
 8009462:	4639      	mov	r1, r7
 8009464:	f7f7 fbd8 	bl	8000c18 <__aeabi_d2f>
 8009468:	6028      	str	r0, [r5, #0]
 800946a:	e7cb      	b.n	8009404 <_scanf_float+0x3b0>
 800946c:	f04f 0900 	mov.w	r9, #0
 8009470:	e629      	b.n	80090c6 <_scanf_float+0x72>
 8009472:	bf00      	nop
 8009474:	0800db14 	.word	0x0800db14
 8009478:	0800df0b 	.word	0x0800df0b

0800947c <siprintf>:
 800947c:	b40e      	push	{r1, r2, r3}
 800947e:	b500      	push	{lr}
 8009480:	b09c      	sub	sp, #112	@ 0x70
 8009482:	ab1d      	add	r3, sp, #116	@ 0x74
 8009484:	9002      	str	r0, [sp, #8]
 8009486:	9006      	str	r0, [sp, #24]
 8009488:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800948c:	4809      	ldr	r0, [pc, #36]	@ (80094b4 <siprintf+0x38>)
 800948e:	9107      	str	r1, [sp, #28]
 8009490:	9104      	str	r1, [sp, #16]
 8009492:	4909      	ldr	r1, [pc, #36]	@ (80094b8 <siprintf+0x3c>)
 8009494:	f853 2b04 	ldr.w	r2, [r3], #4
 8009498:	9105      	str	r1, [sp, #20]
 800949a:	6800      	ldr	r0, [r0, #0]
 800949c:	9301      	str	r3, [sp, #4]
 800949e:	a902      	add	r1, sp, #8
 80094a0:	f002 f9b2 	bl	800b808 <_svfiprintf_r>
 80094a4:	9b02      	ldr	r3, [sp, #8]
 80094a6:	2200      	movs	r2, #0
 80094a8:	701a      	strb	r2, [r3, #0]
 80094aa:	b01c      	add	sp, #112	@ 0x70
 80094ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80094b0:	b003      	add	sp, #12
 80094b2:	4770      	bx	lr
 80094b4:	200001c4 	.word	0x200001c4
 80094b8:	ffff0208 	.word	0xffff0208

080094bc <std>:
 80094bc:	2300      	movs	r3, #0
 80094be:	b510      	push	{r4, lr}
 80094c0:	4604      	mov	r4, r0
 80094c2:	e9c0 3300 	strd	r3, r3, [r0]
 80094c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80094ca:	6083      	str	r3, [r0, #8]
 80094cc:	8181      	strh	r1, [r0, #12]
 80094ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80094d0:	81c2      	strh	r2, [r0, #14]
 80094d2:	6183      	str	r3, [r0, #24]
 80094d4:	4619      	mov	r1, r3
 80094d6:	2208      	movs	r2, #8
 80094d8:	305c      	adds	r0, #92	@ 0x5c
 80094da:	f000 ff5d 	bl	800a398 <memset>
 80094de:	4b0d      	ldr	r3, [pc, #52]	@ (8009514 <std+0x58>)
 80094e0:	6263      	str	r3, [r4, #36]	@ 0x24
 80094e2:	4b0d      	ldr	r3, [pc, #52]	@ (8009518 <std+0x5c>)
 80094e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80094e6:	4b0d      	ldr	r3, [pc, #52]	@ (800951c <std+0x60>)
 80094e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80094ea:	4b0d      	ldr	r3, [pc, #52]	@ (8009520 <std+0x64>)
 80094ec:	6323      	str	r3, [r4, #48]	@ 0x30
 80094ee:	4b0d      	ldr	r3, [pc, #52]	@ (8009524 <std+0x68>)
 80094f0:	6224      	str	r4, [r4, #32]
 80094f2:	429c      	cmp	r4, r3
 80094f4:	d006      	beq.n	8009504 <std+0x48>
 80094f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80094fa:	4294      	cmp	r4, r2
 80094fc:	d002      	beq.n	8009504 <std+0x48>
 80094fe:	33d0      	adds	r3, #208	@ 0xd0
 8009500:	429c      	cmp	r4, r3
 8009502:	d105      	bne.n	8009510 <std+0x54>
 8009504:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800950c:	f000 bf7a 	b.w	800a404 <__retarget_lock_init_recursive>
 8009510:	bd10      	pop	{r4, pc}
 8009512:	bf00      	nop
 8009514:	0800c64d 	.word	0x0800c64d
 8009518:	0800c66f 	.word	0x0800c66f
 800951c:	0800c6a7 	.word	0x0800c6a7
 8009520:	0800c6cb 	.word	0x0800c6cb
 8009524:	2000078c 	.word	0x2000078c

08009528 <stdio_exit_handler>:
 8009528:	4a02      	ldr	r2, [pc, #8]	@ (8009534 <stdio_exit_handler+0xc>)
 800952a:	4903      	ldr	r1, [pc, #12]	@ (8009538 <stdio_exit_handler+0x10>)
 800952c:	4803      	ldr	r0, [pc, #12]	@ (800953c <stdio_exit_handler+0x14>)
 800952e:	f000 beed 	b.w	800a30c <_fwalk_sglue>
 8009532:	bf00      	nop
 8009534:	2000004c 	.word	0x2000004c
 8009538:	0800bc81 	.word	0x0800bc81
 800953c:	200001c8 	.word	0x200001c8

08009540 <cleanup_stdio>:
 8009540:	6841      	ldr	r1, [r0, #4]
 8009542:	4b0c      	ldr	r3, [pc, #48]	@ (8009574 <cleanup_stdio+0x34>)
 8009544:	4299      	cmp	r1, r3
 8009546:	b510      	push	{r4, lr}
 8009548:	4604      	mov	r4, r0
 800954a:	d001      	beq.n	8009550 <cleanup_stdio+0x10>
 800954c:	f002 fb98 	bl	800bc80 <_fflush_r>
 8009550:	68a1      	ldr	r1, [r4, #8]
 8009552:	4b09      	ldr	r3, [pc, #36]	@ (8009578 <cleanup_stdio+0x38>)
 8009554:	4299      	cmp	r1, r3
 8009556:	d002      	beq.n	800955e <cleanup_stdio+0x1e>
 8009558:	4620      	mov	r0, r4
 800955a:	f002 fb91 	bl	800bc80 <_fflush_r>
 800955e:	68e1      	ldr	r1, [r4, #12]
 8009560:	4b06      	ldr	r3, [pc, #24]	@ (800957c <cleanup_stdio+0x3c>)
 8009562:	4299      	cmp	r1, r3
 8009564:	d004      	beq.n	8009570 <cleanup_stdio+0x30>
 8009566:	4620      	mov	r0, r4
 8009568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800956c:	f002 bb88 	b.w	800bc80 <_fflush_r>
 8009570:	bd10      	pop	{r4, pc}
 8009572:	bf00      	nop
 8009574:	2000078c 	.word	0x2000078c
 8009578:	200007f4 	.word	0x200007f4
 800957c:	2000085c 	.word	0x2000085c

08009580 <global_stdio_init.part.0>:
 8009580:	b510      	push	{r4, lr}
 8009582:	4b0b      	ldr	r3, [pc, #44]	@ (80095b0 <global_stdio_init.part.0+0x30>)
 8009584:	4c0b      	ldr	r4, [pc, #44]	@ (80095b4 <global_stdio_init.part.0+0x34>)
 8009586:	4a0c      	ldr	r2, [pc, #48]	@ (80095b8 <global_stdio_init.part.0+0x38>)
 8009588:	601a      	str	r2, [r3, #0]
 800958a:	4620      	mov	r0, r4
 800958c:	2200      	movs	r2, #0
 800958e:	2104      	movs	r1, #4
 8009590:	f7ff ff94 	bl	80094bc <std>
 8009594:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009598:	2201      	movs	r2, #1
 800959a:	2109      	movs	r1, #9
 800959c:	f7ff ff8e 	bl	80094bc <std>
 80095a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80095a4:	2202      	movs	r2, #2
 80095a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095aa:	2112      	movs	r1, #18
 80095ac:	f7ff bf86 	b.w	80094bc <std>
 80095b0:	200008c4 	.word	0x200008c4
 80095b4:	2000078c 	.word	0x2000078c
 80095b8:	08009529 	.word	0x08009529

080095bc <__sfp_lock_acquire>:
 80095bc:	4801      	ldr	r0, [pc, #4]	@ (80095c4 <__sfp_lock_acquire+0x8>)
 80095be:	f000 bf22 	b.w	800a406 <__retarget_lock_acquire_recursive>
 80095c2:	bf00      	nop
 80095c4:	200008c9 	.word	0x200008c9

080095c8 <__sfp_lock_release>:
 80095c8:	4801      	ldr	r0, [pc, #4]	@ (80095d0 <__sfp_lock_release+0x8>)
 80095ca:	f000 bf1d 	b.w	800a408 <__retarget_lock_release_recursive>
 80095ce:	bf00      	nop
 80095d0:	200008c9 	.word	0x200008c9

080095d4 <__sinit>:
 80095d4:	b510      	push	{r4, lr}
 80095d6:	4604      	mov	r4, r0
 80095d8:	f7ff fff0 	bl	80095bc <__sfp_lock_acquire>
 80095dc:	6a23      	ldr	r3, [r4, #32]
 80095de:	b11b      	cbz	r3, 80095e8 <__sinit+0x14>
 80095e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095e4:	f7ff bff0 	b.w	80095c8 <__sfp_lock_release>
 80095e8:	4b04      	ldr	r3, [pc, #16]	@ (80095fc <__sinit+0x28>)
 80095ea:	6223      	str	r3, [r4, #32]
 80095ec:	4b04      	ldr	r3, [pc, #16]	@ (8009600 <__sinit+0x2c>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d1f5      	bne.n	80095e0 <__sinit+0xc>
 80095f4:	f7ff ffc4 	bl	8009580 <global_stdio_init.part.0>
 80095f8:	e7f2      	b.n	80095e0 <__sinit+0xc>
 80095fa:	bf00      	nop
 80095fc:	08009541 	.word	0x08009541
 8009600:	200008c4 	.word	0x200008c4

08009604 <sulp>:
 8009604:	b570      	push	{r4, r5, r6, lr}
 8009606:	4604      	mov	r4, r0
 8009608:	460d      	mov	r5, r1
 800960a:	ec45 4b10 	vmov	d0, r4, r5
 800960e:	4616      	mov	r6, r2
 8009610:	f002 fede 	bl	800c3d0 <__ulp>
 8009614:	ec51 0b10 	vmov	r0, r1, d0
 8009618:	b17e      	cbz	r6, 800963a <sulp+0x36>
 800961a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800961e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009622:	2b00      	cmp	r3, #0
 8009624:	dd09      	ble.n	800963a <sulp+0x36>
 8009626:	051b      	lsls	r3, r3, #20
 8009628:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800962c:	2400      	movs	r4, #0
 800962e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009632:	4622      	mov	r2, r4
 8009634:	462b      	mov	r3, r5
 8009636:	f7f6 fff7 	bl	8000628 <__aeabi_dmul>
 800963a:	ec41 0b10 	vmov	d0, r0, r1
 800963e:	bd70      	pop	{r4, r5, r6, pc}

08009640 <_strtod_l>:
 8009640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009644:	b09f      	sub	sp, #124	@ 0x7c
 8009646:	460c      	mov	r4, r1
 8009648:	9217      	str	r2, [sp, #92]	@ 0x5c
 800964a:	2200      	movs	r2, #0
 800964c:	921a      	str	r2, [sp, #104]	@ 0x68
 800964e:	9005      	str	r0, [sp, #20]
 8009650:	f04f 0a00 	mov.w	sl, #0
 8009654:	f04f 0b00 	mov.w	fp, #0
 8009658:	460a      	mov	r2, r1
 800965a:	9219      	str	r2, [sp, #100]	@ 0x64
 800965c:	7811      	ldrb	r1, [r2, #0]
 800965e:	292b      	cmp	r1, #43	@ 0x2b
 8009660:	d04a      	beq.n	80096f8 <_strtod_l+0xb8>
 8009662:	d838      	bhi.n	80096d6 <_strtod_l+0x96>
 8009664:	290d      	cmp	r1, #13
 8009666:	d832      	bhi.n	80096ce <_strtod_l+0x8e>
 8009668:	2908      	cmp	r1, #8
 800966a:	d832      	bhi.n	80096d2 <_strtod_l+0x92>
 800966c:	2900      	cmp	r1, #0
 800966e:	d03b      	beq.n	80096e8 <_strtod_l+0xa8>
 8009670:	2200      	movs	r2, #0
 8009672:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009674:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009676:	782a      	ldrb	r2, [r5, #0]
 8009678:	2a30      	cmp	r2, #48	@ 0x30
 800967a:	f040 80b3 	bne.w	80097e4 <_strtod_l+0x1a4>
 800967e:	786a      	ldrb	r2, [r5, #1]
 8009680:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009684:	2a58      	cmp	r2, #88	@ 0x58
 8009686:	d16e      	bne.n	8009766 <_strtod_l+0x126>
 8009688:	9302      	str	r3, [sp, #8]
 800968a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800968c:	9301      	str	r3, [sp, #4]
 800968e:	ab1a      	add	r3, sp, #104	@ 0x68
 8009690:	9300      	str	r3, [sp, #0]
 8009692:	4a8e      	ldr	r2, [pc, #568]	@ (80098cc <_strtod_l+0x28c>)
 8009694:	9805      	ldr	r0, [sp, #20]
 8009696:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009698:	a919      	add	r1, sp, #100	@ 0x64
 800969a:	f001 fd89 	bl	800b1b0 <__gethex>
 800969e:	f010 060f 	ands.w	r6, r0, #15
 80096a2:	4604      	mov	r4, r0
 80096a4:	d005      	beq.n	80096b2 <_strtod_l+0x72>
 80096a6:	2e06      	cmp	r6, #6
 80096a8:	d128      	bne.n	80096fc <_strtod_l+0xbc>
 80096aa:	3501      	adds	r5, #1
 80096ac:	2300      	movs	r3, #0
 80096ae:	9519      	str	r5, [sp, #100]	@ 0x64
 80096b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80096b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	f040 858e 	bne.w	800a1d6 <_strtod_l+0xb96>
 80096ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80096bc:	b1cb      	cbz	r3, 80096f2 <_strtod_l+0xb2>
 80096be:	4652      	mov	r2, sl
 80096c0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80096c4:	ec43 2b10 	vmov	d0, r2, r3
 80096c8:	b01f      	add	sp, #124	@ 0x7c
 80096ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096ce:	2920      	cmp	r1, #32
 80096d0:	d1ce      	bne.n	8009670 <_strtod_l+0x30>
 80096d2:	3201      	adds	r2, #1
 80096d4:	e7c1      	b.n	800965a <_strtod_l+0x1a>
 80096d6:	292d      	cmp	r1, #45	@ 0x2d
 80096d8:	d1ca      	bne.n	8009670 <_strtod_l+0x30>
 80096da:	2101      	movs	r1, #1
 80096dc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80096de:	1c51      	adds	r1, r2, #1
 80096e0:	9119      	str	r1, [sp, #100]	@ 0x64
 80096e2:	7852      	ldrb	r2, [r2, #1]
 80096e4:	2a00      	cmp	r2, #0
 80096e6:	d1c5      	bne.n	8009674 <_strtod_l+0x34>
 80096e8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80096ea:	9419      	str	r4, [sp, #100]	@ 0x64
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	f040 8570 	bne.w	800a1d2 <_strtod_l+0xb92>
 80096f2:	4652      	mov	r2, sl
 80096f4:	465b      	mov	r3, fp
 80096f6:	e7e5      	b.n	80096c4 <_strtod_l+0x84>
 80096f8:	2100      	movs	r1, #0
 80096fa:	e7ef      	b.n	80096dc <_strtod_l+0x9c>
 80096fc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80096fe:	b13a      	cbz	r2, 8009710 <_strtod_l+0xd0>
 8009700:	2135      	movs	r1, #53	@ 0x35
 8009702:	a81c      	add	r0, sp, #112	@ 0x70
 8009704:	f002 ff5e 	bl	800c5c4 <__copybits>
 8009708:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800970a:	9805      	ldr	r0, [sp, #20]
 800970c:	f002 fb2c 	bl	800bd68 <_Bfree>
 8009710:	3e01      	subs	r6, #1
 8009712:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009714:	2e04      	cmp	r6, #4
 8009716:	d806      	bhi.n	8009726 <_strtod_l+0xe6>
 8009718:	e8df f006 	tbb	[pc, r6]
 800971c:	201d0314 	.word	0x201d0314
 8009720:	14          	.byte	0x14
 8009721:	00          	.byte	0x00
 8009722:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009726:	05e1      	lsls	r1, r4, #23
 8009728:	bf48      	it	mi
 800972a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800972e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009732:	0d1b      	lsrs	r3, r3, #20
 8009734:	051b      	lsls	r3, r3, #20
 8009736:	2b00      	cmp	r3, #0
 8009738:	d1bb      	bne.n	80096b2 <_strtod_l+0x72>
 800973a:	f000 fe39 	bl	800a3b0 <__errno>
 800973e:	2322      	movs	r3, #34	@ 0x22
 8009740:	6003      	str	r3, [r0, #0]
 8009742:	e7b6      	b.n	80096b2 <_strtod_l+0x72>
 8009744:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009748:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800974c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009750:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009754:	e7e7      	b.n	8009726 <_strtod_l+0xe6>
 8009756:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80098d4 <_strtod_l+0x294>
 800975a:	e7e4      	b.n	8009726 <_strtod_l+0xe6>
 800975c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009760:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009764:	e7df      	b.n	8009726 <_strtod_l+0xe6>
 8009766:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009768:	1c5a      	adds	r2, r3, #1
 800976a:	9219      	str	r2, [sp, #100]	@ 0x64
 800976c:	785b      	ldrb	r3, [r3, #1]
 800976e:	2b30      	cmp	r3, #48	@ 0x30
 8009770:	d0f9      	beq.n	8009766 <_strtod_l+0x126>
 8009772:	2b00      	cmp	r3, #0
 8009774:	d09d      	beq.n	80096b2 <_strtod_l+0x72>
 8009776:	2301      	movs	r3, #1
 8009778:	9309      	str	r3, [sp, #36]	@ 0x24
 800977a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800977c:	930c      	str	r3, [sp, #48]	@ 0x30
 800977e:	2300      	movs	r3, #0
 8009780:	9308      	str	r3, [sp, #32]
 8009782:	930a      	str	r3, [sp, #40]	@ 0x28
 8009784:	461f      	mov	r7, r3
 8009786:	220a      	movs	r2, #10
 8009788:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800978a:	7805      	ldrb	r5, [r0, #0]
 800978c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009790:	b2d9      	uxtb	r1, r3
 8009792:	2909      	cmp	r1, #9
 8009794:	d928      	bls.n	80097e8 <_strtod_l+0x1a8>
 8009796:	494e      	ldr	r1, [pc, #312]	@ (80098d0 <_strtod_l+0x290>)
 8009798:	2201      	movs	r2, #1
 800979a:	f000 fdd5 	bl	800a348 <strncmp>
 800979e:	2800      	cmp	r0, #0
 80097a0:	d032      	beq.n	8009808 <_strtod_l+0x1c8>
 80097a2:	2000      	movs	r0, #0
 80097a4:	462a      	mov	r2, r5
 80097a6:	4681      	mov	r9, r0
 80097a8:	463d      	mov	r5, r7
 80097aa:	4603      	mov	r3, r0
 80097ac:	2a65      	cmp	r2, #101	@ 0x65
 80097ae:	d001      	beq.n	80097b4 <_strtod_l+0x174>
 80097b0:	2a45      	cmp	r2, #69	@ 0x45
 80097b2:	d114      	bne.n	80097de <_strtod_l+0x19e>
 80097b4:	b91d      	cbnz	r5, 80097be <_strtod_l+0x17e>
 80097b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80097b8:	4302      	orrs	r2, r0
 80097ba:	d095      	beq.n	80096e8 <_strtod_l+0xa8>
 80097bc:	2500      	movs	r5, #0
 80097be:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80097c0:	1c62      	adds	r2, r4, #1
 80097c2:	9219      	str	r2, [sp, #100]	@ 0x64
 80097c4:	7862      	ldrb	r2, [r4, #1]
 80097c6:	2a2b      	cmp	r2, #43	@ 0x2b
 80097c8:	d077      	beq.n	80098ba <_strtod_l+0x27a>
 80097ca:	2a2d      	cmp	r2, #45	@ 0x2d
 80097cc:	d07b      	beq.n	80098c6 <_strtod_l+0x286>
 80097ce:	f04f 0c00 	mov.w	ip, #0
 80097d2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80097d6:	2909      	cmp	r1, #9
 80097d8:	f240 8082 	bls.w	80098e0 <_strtod_l+0x2a0>
 80097dc:	9419      	str	r4, [sp, #100]	@ 0x64
 80097de:	f04f 0800 	mov.w	r8, #0
 80097e2:	e0a2      	b.n	800992a <_strtod_l+0x2ea>
 80097e4:	2300      	movs	r3, #0
 80097e6:	e7c7      	b.n	8009778 <_strtod_l+0x138>
 80097e8:	2f08      	cmp	r7, #8
 80097ea:	bfd5      	itete	le
 80097ec:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80097ee:	9908      	ldrgt	r1, [sp, #32]
 80097f0:	fb02 3301 	mlale	r3, r2, r1, r3
 80097f4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80097f8:	f100 0001 	add.w	r0, r0, #1
 80097fc:	bfd4      	ite	le
 80097fe:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009800:	9308      	strgt	r3, [sp, #32]
 8009802:	3701      	adds	r7, #1
 8009804:	9019      	str	r0, [sp, #100]	@ 0x64
 8009806:	e7bf      	b.n	8009788 <_strtod_l+0x148>
 8009808:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800980a:	1c5a      	adds	r2, r3, #1
 800980c:	9219      	str	r2, [sp, #100]	@ 0x64
 800980e:	785a      	ldrb	r2, [r3, #1]
 8009810:	b37f      	cbz	r7, 8009872 <_strtod_l+0x232>
 8009812:	4681      	mov	r9, r0
 8009814:	463d      	mov	r5, r7
 8009816:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800981a:	2b09      	cmp	r3, #9
 800981c:	d912      	bls.n	8009844 <_strtod_l+0x204>
 800981e:	2301      	movs	r3, #1
 8009820:	e7c4      	b.n	80097ac <_strtod_l+0x16c>
 8009822:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009824:	1c5a      	adds	r2, r3, #1
 8009826:	9219      	str	r2, [sp, #100]	@ 0x64
 8009828:	785a      	ldrb	r2, [r3, #1]
 800982a:	3001      	adds	r0, #1
 800982c:	2a30      	cmp	r2, #48	@ 0x30
 800982e:	d0f8      	beq.n	8009822 <_strtod_l+0x1e2>
 8009830:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009834:	2b08      	cmp	r3, #8
 8009836:	f200 84d3 	bhi.w	800a1e0 <_strtod_l+0xba0>
 800983a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800983c:	930c      	str	r3, [sp, #48]	@ 0x30
 800983e:	4681      	mov	r9, r0
 8009840:	2000      	movs	r0, #0
 8009842:	4605      	mov	r5, r0
 8009844:	3a30      	subs	r2, #48	@ 0x30
 8009846:	f100 0301 	add.w	r3, r0, #1
 800984a:	d02a      	beq.n	80098a2 <_strtod_l+0x262>
 800984c:	4499      	add	r9, r3
 800984e:	eb00 0c05 	add.w	ip, r0, r5
 8009852:	462b      	mov	r3, r5
 8009854:	210a      	movs	r1, #10
 8009856:	4563      	cmp	r3, ip
 8009858:	d10d      	bne.n	8009876 <_strtod_l+0x236>
 800985a:	1c69      	adds	r1, r5, #1
 800985c:	4401      	add	r1, r0
 800985e:	4428      	add	r0, r5
 8009860:	2808      	cmp	r0, #8
 8009862:	dc16      	bgt.n	8009892 <_strtod_l+0x252>
 8009864:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009866:	230a      	movs	r3, #10
 8009868:	fb03 2300 	mla	r3, r3, r0, r2
 800986c:	930a      	str	r3, [sp, #40]	@ 0x28
 800986e:	2300      	movs	r3, #0
 8009870:	e018      	b.n	80098a4 <_strtod_l+0x264>
 8009872:	4638      	mov	r0, r7
 8009874:	e7da      	b.n	800982c <_strtod_l+0x1ec>
 8009876:	2b08      	cmp	r3, #8
 8009878:	f103 0301 	add.w	r3, r3, #1
 800987c:	dc03      	bgt.n	8009886 <_strtod_l+0x246>
 800987e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009880:	434e      	muls	r6, r1
 8009882:	960a      	str	r6, [sp, #40]	@ 0x28
 8009884:	e7e7      	b.n	8009856 <_strtod_l+0x216>
 8009886:	2b10      	cmp	r3, #16
 8009888:	bfde      	ittt	le
 800988a:	9e08      	ldrle	r6, [sp, #32]
 800988c:	434e      	mulle	r6, r1
 800988e:	9608      	strle	r6, [sp, #32]
 8009890:	e7e1      	b.n	8009856 <_strtod_l+0x216>
 8009892:	280f      	cmp	r0, #15
 8009894:	dceb      	bgt.n	800986e <_strtod_l+0x22e>
 8009896:	9808      	ldr	r0, [sp, #32]
 8009898:	230a      	movs	r3, #10
 800989a:	fb03 2300 	mla	r3, r3, r0, r2
 800989e:	9308      	str	r3, [sp, #32]
 80098a0:	e7e5      	b.n	800986e <_strtod_l+0x22e>
 80098a2:	4629      	mov	r1, r5
 80098a4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80098a6:	1c50      	adds	r0, r2, #1
 80098a8:	9019      	str	r0, [sp, #100]	@ 0x64
 80098aa:	7852      	ldrb	r2, [r2, #1]
 80098ac:	4618      	mov	r0, r3
 80098ae:	460d      	mov	r5, r1
 80098b0:	e7b1      	b.n	8009816 <_strtod_l+0x1d6>
 80098b2:	f04f 0900 	mov.w	r9, #0
 80098b6:	2301      	movs	r3, #1
 80098b8:	e77d      	b.n	80097b6 <_strtod_l+0x176>
 80098ba:	f04f 0c00 	mov.w	ip, #0
 80098be:	1ca2      	adds	r2, r4, #2
 80098c0:	9219      	str	r2, [sp, #100]	@ 0x64
 80098c2:	78a2      	ldrb	r2, [r4, #2]
 80098c4:	e785      	b.n	80097d2 <_strtod_l+0x192>
 80098c6:	f04f 0c01 	mov.w	ip, #1
 80098ca:	e7f8      	b.n	80098be <_strtod_l+0x27e>
 80098cc:	0800db30 	.word	0x0800db30
 80098d0:	0800db19 	.word	0x0800db19
 80098d4:	7ff00000 	.word	0x7ff00000
 80098d8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80098da:	1c51      	adds	r1, r2, #1
 80098dc:	9119      	str	r1, [sp, #100]	@ 0x64
 80098de:	7852      	ldrb	r2, [r2, #1]
 80098e0:	2a30      	cmp	r2, #48	@ 0x30
 80098e2:	d0f9      	beq.n	80098d8 <_strtod_l+0x298>
 80098e4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80098e8:	2908      	cmp	r1, #8
 80098ea:	f63f af78 	bhi.w	80097de <_strtod_l+0x19e>
 80098ee:	3a30      	subs	r2, #48	@ 0x30
 80098f0:	920e      	str	r2, [sp, #56]	@ 0x38
 80098f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80098f4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80098f6:	f04f 080a 	mov.w	r8, #10
 80098fa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80098fc:	1c56      	adds	r6, r2, #1
 80098fe:	9619      	str	r6, [sp, #100]	@ 0x64
 8009900:	7852      	ldrb	r2, [r2, #1]
 8009902:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009906:	f1be 0f09 	cmp.w	lr, #9
 800990a:	d939      	bls.n	8009980 <_strtod_l+0x340>
 800990c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800990e:	1a76      	subs	r6, r6, r1
 8009910:	2e08      	cmp	r6, #8
 8009912:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009916:	dc03      	bgt.n	8009920 <_strtod_l+0x2e0>
 8009918:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800991a:	4588      	cmp	r8, r1
 800991c:	bfa8      	it	ge
 800991e:	4688      	movge	r8, r1
 8009920:	f1bc 0f00 	cmp.w	ip, #0
 8009924:	d001      	beq.n	800992a <_strtod_l+0x2ea>
 8009926:	f1c8 0800 	rsb	r8, r8, #0
 800992a:	2d00      	cmp	r5, #0
 800992c:	d14e      	bne.n	80099cc <_strtod_l+0x38c>
 800992e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009930:	4308      	orrs	r0, r1
 8009932:	f47f aebe 	bne.w	80096b2 <_strtod_l+0x72>
 8009936:	2b00      	cmp	r3, #0
 8009938:	f47f aed6 	bne.w	80096e8 <_strtod_l+0xa8>
 800993c:	2a69      	cmp	r2, #105	@ 0x69
 800993e:	d028      	beq.n	8009992 <_strtod_l+0x352>
 8009940:	dc25      	bgt.n	800998e <_strtod_l+0x34e>
 8009942:	2a49      	cmp	r2, #73	@ 0x49
 8009944:	d025      	beq.n	8009992 <_strtod_l+0x352>
 8009946:	2a4e      	cmp	r2, #78	@ 0x4e
 8009948:	f47f aece 	bne.w	80096e8 <_strtod_l+0xa8>
 800994c:	499b      	ldr	r1, [pc, #620]	@ (8009bbc <_strtod_l+0x57c>)
 800994e:	a819      	add	r0, sp, #100	@ 0x64
 8009950:	f001 fe50 	bl	800b5f4 <__match>
 8009954:	2800      	cmp	r0, #0
 8009956:	f43f aec7 	beq.w	80096e8 <_strtod_l+0xa8>
 800995a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800995c:	781b      	ldrb	r3, [r3, #0]
 800995e:	2b28      	cmp	r3, #40	@ 0x28
 8009960:	d12e      	bne.n	80099c0 <_strtod_l+0x380>
 8009962:	4997      	ldr	r1, [pc, #604]	@ (8009bc0 <_strtod_l+0x580>)
 8009964:	aa1c      	add	r2, sp, #112	@ 0x70
 8009966:	a819      	add	r0, sp, #100	@ 0x64
 8009968:	f001 fe58 	bl	800b61c <__hexnan>
 800996c:	2805      	cmp	r0, #5
 800996e:	d127      	bne.n	80099c0 <_strtod_l+0x380>
 8009970:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009972:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009976:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800997a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800997e:	e698      	b.n	80096b2 <_strtod_l+0x72>
 8009980:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009982:	fb08 2101 	mla	r1, r8, r1, r2
 8009986:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800998a:	920e      	str	r2, [sp, #56]	@ 0x38
 800998c:	e7b5      	b.n	80098fa <_strtod_l+0x2ba>
 800998e:	2a6e      	cmp	r2, #110	@ 0x6e
 8009990:	e7da      	b.n	8009948 <_strtod_l+0x308>
 8009992:	498c      	ldr	r1, [pc, #560]	@ (8009bc4 <_strtod_l+0x584>)
 8009994:	a819      	add	r0, sp, #100	@ 0x64
 8009996:	f001 fe2d 	bl	800b5f4 <__match>
 800999a:	2800      	cmp	r0, #0
 800999c:	f43f aea4 	beq.w	80096e8 <_strtod_l+0xa8>
 80099a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80099a2:	4989      	ldr	r1, [pc, #548]	@ (8009bc8 <_strtod_l+0x588>)
 80099a4:	3b01      	subs	r3, #1
 80099a6:	a819      	add	r0, sp, #100	@ 0x64
 80099a8:	9319      	str	r3, [sp, #100]	@ 0x64
 80099aa:	f001 fe23 	bl	800b5f4 <__match>
 80099ae:	b910      	cbnz	r0, 80099b6 <_strtod_l+0x376>
 80099b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80099b2:	3301      	adds	r3, #1
 80099b4:	9319      	str	r3, [sp, #100]	@ 0x64
 80099b6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009bd8 <_strtod_l+0x598>
 80099ba:	f04f 0a00 	mov.w	sl, #0
 80099be:	e678      	b.n	80096b2 <_strtod_l+0x72>
 80099c0:	4882      	ldr	r0, [pc, #520]	@ (8009bcc <_strtod_l+0x58c>)
 80099c2:	f000 fd31 	bl	800a428 <nan>
 80099c6:	ec5b ab10 	vmov	sl, fp, d0
 80099ca:	e672      	b.n	80096b2 <_strtod_l+0x72>
 80099cc:	eba8 0309 	sub.w	r3, r8, r9
 80099d0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80099d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80099d4:	2f00      	cmp	r7, #0
 80099d6:	bf08      	it	eq
 80099d8:	462f      	moveq	r7, r5
 80099da:	2d10      	cmp	r5, #16
 80099dc:	462c      	mov	r4, r5
 80099de:	bfa8      	it	ge
 80099e0:	2410      	movge	r4, #16
 80099e2:	f7f6 fda7 	bl	8000534 <__aeabi_ui2d>
 80099e6:	2d09      	cmp	r5, #9
 80099e8:	4682      	mov	sl, r0
 80099ea:	468b      	mov	fp, r1
 80099ec:	dc13      	bgt.n	8009a16 <_strtod_l+0x3d6>
 80099ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	f43f ae5e 	beq.w	80096b2 <_strtod_l+0x72>
 80099f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099f8:	dd78      	ble.n	8009aec <_strtod_l+0x4ac>
 80099fa:	2b16      	cmp	r3, #22
 80099fc:	dc5f      	bgt.n	8009abe <_strtod_l+0x47e>
 80099fe:	4974      	ldr	r1, [pc, #464]	@ (8009bd0 <_strtod_l+0x590>)
 8009a00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009a04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a08:	4652      	mov	r2, sl
 8009a0a:	465b      	mov	r3, fp
 8009a0c:	f7f6 fe0c 	bl	8000628 <__aeabi_dmul>
 8009a10:	4682      	mov	sl, r0
 8009a12:	468b      	mov	fp, r1
 8009a14:	e64d      	b.n	80096b2 <_strtod_l+0x72>
 8009a16:	4b6e      	ldr	r3, [pc, #440]	@ (8009bd0 <_strtod_l+0x590>)
 8009a18:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009a1c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009a20:	f7f6 fe02 	bl	8000628 <__aeabi_dmul>
 8009a24:	4682      	mov	sl, r0
 8009a26:	9808      	ldr	r0, [sp, #32]
 8009a28:	468b      	mov	fp, r1
 8009a2a:	f7f6 fd83 	bl	8000534 <__aeabi_ui2d>
 8009a2e:	4602      	mov	r2, r0
 8009a30:	460b      	mov	r3, r1
 8009a32:	4650      	mov	r0, sl
 8009a34:	4659      	mov	r1, fp
 8009a36:	f7f6 fc41 	bl	80002bc <__adddf3>
 8009a3a:	2d0f      	cmp	r5, #15
 8009a3c:	4682      	mov	sl, r0
 8009a3e:	468b      	mov	fp, r1
 8009a40:	ddd5      	ble.n	80099ee <_strtod_l+0x3ae>
 8009a42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a44:	1b2c      	subs	r4, r5, r4
 8009a46:	441c      	add	r4, r3
 8009a48:	2c00      	cmp	r4, #0
 8009a4a:	f340 8096 	ble.w	8009b7a <_strtod_l+0x53a>
 8009a4e:	f014 030f 	ands.w	r3, r4, #15
 8009a52:	d00a      	beq.n	8009a6a <_strtod_l+0x42a>
 8009a54:	495e      	ldr	r1, [pc, #376]	@ (8009bd0 <_strtod_l+0x590>)
 8009a56:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009a5a:	4652      	mov	r2, sl
 8009a5c:	465b      	mov	r3, fp
 8009a5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a62:	f7f6 fde1 	bl	8000628 <__aeabi_dmul>
 8009a66:	4682      	mov	sl, r0
 8009a68:	468b      	mov	fp, r1
 8009a6a:	f034 040f 	bics.w	r4, r4, #15
 8009a6e:	d073      	beq.n	8009b58 <_strtod_l+0x518>
 8009a70:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009a74:	dd48      	ble.n	8009b08 <_strtod_l+0x4c8>
 8009a76:	2400      	movs	r4, #0
 8009a78:	46a0      	mov	r8, r4
 8009a7a:	940a      	str	r4, [sp, #40]	@ 0x28
 8009a7c:	46a1      	mov	r9, r4
 8009a7e:	9a05      	ldr	r2, [sp, #20]
 8009a80:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009bd8 <_strtod_l+0x598>
 8009a84:	2322      	movs	r3, #34	@ 0x22
 8009a86:	6013      	str	r3, [r2, #0]
 8009a88:	f04f 0a00 	mov.w	sl, #0
 8009a8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	f43f ae0f 	beq.w	80096b2 <_strtod_l+0x72>
 8009a94:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009a96:	9805      	ldr	r0, [sp, #20]
 8009a98:	f002 f966 	bl	800bd68 <_Bfree>
 8009a9c:	9805      	ldr	r0, [sp, #20]
 8009a9e:	4649      	mov	r1, r9
 8009aa0:	f002 f962 	bl	800bd68 <_Bfree>
 8009aa4:	9805      	ldr	r0, [sp, #20]
 8009aa6:	4641      	mov	r1, r8
 8009aa8:	f002 f95e 	bl	800bd68 <_Bfree>
 8009aac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009aae:	9805      	ldr	r0, [sp, #20]
 8009ab0:	f002 f95a 	bl	800bd68 <_Bfree>
 8009ab4:	9805      	ldr	r0, [sp, #20]
 8009ab6:	4621      	mov	r1, r4
 8009ab8:	f002 f956 	bl	800bd68 <_Bfree>
 8009abc:	e5f9      	b.n	80096b2 <_strtod_l+0x72>
 8009abe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ac0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	dbbc      	blt.n	8009a42 <_strtod_l+0x402>
 8009ac8:	4c41      	ldr	r4, [pc, #260]	@ (8009bd0 <_strtod_l+0x590>)
 8009aca:	f1c5 050f 	rsb	r5, r5, #15
 8009ace:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009ad2:	4652      	mov	r2, sl
 8009ad4:	465b      	mov	r3, fp
 8009ad6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ada:	f7f6 fda5 	bl	8000628 <__aeabi_dmul>
 8009ade:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ae0:	1b5d      	subs	r5, r3, r5
 8009ae2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009ae6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009aea:	e78f      	b.n	8009a0c <_strtod_l+0x3cc>
 8009aec:	3316      	adds	r3, #22
 8009aee:	dba8      	blt.n	8009a42 <_strtod_l+0x402>
 8009af0:	4b37      	ldr	r3, [pc, #220]	@ (8009bd0 <_strtod_l+0x590>)
 8009af2:	eba9 0808 	sub.w	r8, r9, r8
 8009af6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009afa:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009afe:	4650      	mov	r0, sl
 8009b00:	4659      	mov	r1, fp
 8009b02:	f7f6 febb 	bl	800087c <__aeabi_ddiv>
 8009b06:	e783      	b.n	8009a10 <_strtod_l+0x3d0>
 8009b08:	4b32      	ldr	r3, [pc, #200]	@ (8009bd4 <_strtod_l+0x594>)
 8009b0a:	9308      	str	r3, [sp, #32]
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	1124      	asrs	r4, r4, #4
 8009b10:	4650      	mov	r0, sl
 8009b12:	4659      	mov	r1, fp
 8009b14:	461e      	mov	r6, r3
 8009b16:	2c01      	cmp	r4, #1
 8009b18:	dc21      	bgt.n	8009b5e <_strtod_l+0x51e>
 8009b1a:	b10b      	cbz	r3, 8009b20 <_strtod_l+0x4e0>
 8009b1c:	4682      	mov	sl, r0
 8009b1e:	468b      	mov	fp, r1
 8009b20:	492c      	ldr	r1, [pc, #176]	@ (8009bd4 <_strtod_l+0x594>)
 8009b22:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009b26:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009b2a:	4652      	mov	r2, sl
 8009b2c:	465b      	mov	r3, fp
 8009b2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b32:	f7f6 fd79 	bl	8000628 <__aeabi_dmul>
 8009b36:	4b28      	ldr	r3, [pc, #160]	@ (8009bd8 <_strtod_l+0x598>)
 8009b38:	460a      	mov	r2, r1
 8009b3a:	400b      	ands	r3, r1
 8009b3c:	4927      	ldr	r1, [pc, #156]	@ (8009bdc <_strtod_l+0x59c>)
 8009b3e:	428b      	cmp	r3, r1
 8009b40:	4682      	mov	sl, r0
 8009b42:	d898      	bhi.n	8009a76 <_strtod_l+0x436>
 8009b44:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009b48:	428b      	cmp	r3, r1
 8009b4a:	bf86      	itte	hi
 8009b4c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009be0 <_strtod_l+0x5a0>
 8009b50:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8009b54:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009b58:	2300      	movs	r3, #0
 8009b5a:	9308      	str	r3, [sp, #32]
 8009b5c:	e07a      	b.n	8009c54 <_strtod_l+0x614>
 8009b5e:	07e2      	lsls	r2, r4, #31
 8009b60:	d505      	bpl.n	8009b6e <_strtod_l+0x52e>
 8009b62:	9b08      	ldr	r3, [sp, #32]
 8009b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b68:	f7f6 fd5e 	bl	8000628 <__aeabi_dmul>
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	9a08      	ldr	r2, [sp, #32]
 8009b70:	3208      	adds	r2, #8
 8009b72:	3601      	adds	r6, #1
 8009b74:	1064      	asrs	r4, r4, #1
 8009b76:	9208      	str	r2, [sp, #32]
 8009b78:	e7cd      	b.n	8009b16 <_strtod_l+0x4d6>
 8009b7a:	d0ed      	beq.n	8009b58 <_strtod_l+0x518>
 8009b7c:	4264      	negs	r4, r4
 8009b7e:	f014 020f 	ands.w	r2, r4, #15
 8009b82:	d00a      	beq.n	8009b9a <_strtod_l+0x55a>
 8009b84:	4b12      	ldr	r3, [pc, #72]	@ (8009bd0 <_strtod_l+0x590>)
 8009b86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b8a:	4650      	mov	r0, sl
 8009b8c:	4659      	mov	r1, fp
 8009b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b92:	f7f6 fe73 	bl	800087c <__aeabi_ddiv>
 8009b96:	4682      	mov	sl, r0
 8009b98:	468b      	mov	fp, r1
 8009b9a:	1124      	asrs	r4, r4, #4
 8009b9c:	d0dc      	beq.n	8009b58 <_strtod_l+0x518>
 8009b9e:	2c1f      	cmp	r4, #31
 8009ba0:	dd20      	ble.n	8009be4 <_strtod_l+0x5a4>
 8009ba2:	2400      	movs	r4, #0
 8009ba4:	46a0      	mov	r8, r4
 8009ba6:	940a      	str	r4, [sp, #40]	@ 0x28
 8009ba8:	46a1      	mov	r9, r4
 8009baa:	9a05      	ldr	r2, [sp, #20]
 8009bac:	2322      	movs	r3, #34	@ 0x22
 8009bae:	f04f 0a00 	mov.w	sl, #0
 8009bb2:	f04f 0b00 	mov.w	fp, #0
 8009bb6:	6013      	str	r3, [r2, #0]
 8009bb8:	e768      	b.n	8009a8c <_strtod_l+0x44c>
 8009bba:	bf00      	nop
 8009bbc:	0800daed 	.word	0x0800daed
 8009bc0:	0800db1c 	.word	0x0800db1c
 8009bc4:	0800dae5 	.word	0x0800dae5
 8009bc8:	0800dc7c 	.word	0x0800dc7c
 8009bcc:	0800df0b 	.word	0x0800df0b
 8009bd0:	0800de08 	.word	0x0800de08
 8009bd4:	0800dde0 	.word	0x0800dde0
 8009bd8:	7ff00000 	.word	0x7ff00000
 8009bdc:	7ca00000 	.word	0x7ca00000
 8009be0:	7fefffff 	.word	0x7fefffff
 8009be4:	f014 0310 	ands.w	r3, r4, #16
 8009be8:	bf18      	it	ne
 8009bea:	236a      	movne	r3, #106	@ 0x6a
 8009bec:	4ea9      	ldr	r6, [pc, #676]	@ (8009e94 <_strtod_l+0x854>)
 8009bee:	9308      	str	r3, [sp, #32]
 8009bf0:	4650      	mov	r0, sl
 8009bf2:	4659      	mov	r1, fp
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	07e2      	lsls	r2, r4, #31
 8009bf8:	d504      	bpl.n	8009c04 <_strtod_l+0x5c4>
 8009bfa:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009bfe:	f7f6 fd13 	bl	8000628 <__aeabi_dmul>
 8009c02:	2301      	movs	r3, #1
 8009c04:	1064      	asrs	r4, r4, #1
 8009c06:	f106 0608 	add.w	r6, r6, #8
 8009c0a:	d1f4      	bne.n	8009bf6 <_strtod_l+0x5b6>
 8009c0c:	b10b      	cbz	r3, 8009c12 <_strtod_l+0x5d2>
 8009c0e:	4682      	mov	sl, r0
 8009c10:	468b      	mov	fp, r1
 8009c12:	9b08      	ldr	r3, [sp, #32]
 8009c14:	b1b3      	cbz	r3, 8009c44 <_strtod_l+0x604>
 8009c16:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009c1a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	4659      	mov	r1, fp
 8009c22:	dd0f      	ble.n	8009c44 <_strtod_l+0x604>
 8009c24:	2b1f      	cmp	r3, #31
 8009c26:	dd55      	ble.n	8009cd4 <_strtod_l+0x694>
 8009c28:	2b34      	cmp	r3, #52	@ 0x34
 8009c2a:	bfde      	ittt	le
 8009c2c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8009c30:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009c34:	4093      	lslle	r3, r2
 8009c36:	f04f 0a00 	mov.w	sl, #0
 8009c3a:	bfcc      	ite	gt
 8009c3c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009c40:	ea03 0b01 	andle.w	fp, r3, r1
 8009c44:	2200      	movs	r2, #0
 8009c46:	2300      	movs	r3, #0
 8009c48:	4650      	mov	r0, sl
 8009c4a:	4659      	mov	r1, fp
 8009c4c:	f7f6 ff54 	bl	8000af8 <__aeabi_dcmpeq>
 8009c50:	2800      	cmp	r0, #0
 8009c52:	d1a6      	bne.n	8009ba2 <_strtod_l+0x562>
 8009c54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c56:	9300      	str	r3, [sp, #0]
 8009c58:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009c5a:	9805      	ldr	r0, [sp, #20]
 8009c5c:	462b      	mov	r3, r5
 8009c5e:	463a      	mov	r2, r7
 8009c60:	f002 f8ea 	bl	800be38 <__s2b>
 8009c64:	900a      	str	r0, [sp, #40]	@ 0x28
 8009c66:	2800      	cmp	r0, #0
 8009c68:	f43f af05 	beq.w	8009a76 <_strtod_l+0x436>
 8009c6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c6e:	2a00      	cmp	r2, #0
 8009c70:	eba9 0308 	sub.w	r3, r9, r8
 8009c74:	bfa8      	it	ge
 8009c76:	2300      	movge	r3, #0
 8009c78:	9312      	str	r3, [sp, #72]	@ 0x48
 8009c7a:	2400      	movs	r4, #0
 8009c7c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009c80:	9316      	str	r3, [sp, #88]	@ 0x58
 8009c82:	46a0      	mov	r8, r4
 8009c84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c86:	9805      	ldr	r0, [sp, #20]
 8009c88:	6859      	ldr	r1, [r3, #4]
 8009c8a:	f002 f82d 	bl	800bce8 <_Balloc>
 8009c8e:	4681      	mov	r9, r0
 8009c90:	2800      	cmp	r0, #0
 8009c92:	f43f aef4 	beq.w	8009a7e <_strtod_l+0x43e>
 8009c96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c98:	691a      	ldr	r2, [r3, #16]
 8009c9a:	3202      	adds	r2, #2
 8009c9c:	f103 010c 	add.w	r1, r3, #12
 8009ca0:	0092      	lsls	r2, r2, #2
 8009ca2:	300c      	adds	r0, #12
 8009ca4:	f000 fbb1 	bl	800a40a <memcpy>
 8009ca8:	ec4b ab10 	vmov	d0, sl, fp
 8009cac:	9805      	ldr	r0, [sp, #20]
 8009cae:	aa1c      	add	r2, sp, #112	@ 0x70
 8009cb0:	a91b      	add	r1, sp, #108	@ 0x6c
 8009cb2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009cb6:	f002 fbfb 	bl	800c4b0 <__d2b>
 8009cba:	901a      	str	r0, [sp, #104]	@ 0x68
 8009cbc:	2800      	cmp	r0, #0
 8009cbe:	f43f aede 	beq.w	8009a7e <_strtod_l+0x43e>
 8009cc2:	9805      	ldr	r0, [sp, #20]
 8009cc4:	2101      	movs	r1, #1
 8009cc6:	f002 f94d 	bl	800bf64 <__i2b>
 8009cca:	4680      	mov	r8, r0
 8009ccc:	b948      	cbnz	r0, 8009ce2 <_strtod_l+0x6a2>
 8009cce:	f04f 0800 	mov.w	r8, #0
 8009cd2:	e6d4      	b.n	8009a7e <_strtod_l+0x43e>
 8009cd4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8009cdc:	ea03 0a0a 	and.w	sl, r3, sl
 8009ce0:	e7b0      	b.n	8009c44 <_strtod_l+0x604>
 8009ce2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009ce4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009ce6:	2d00      	cmp	r5, #0
 8009ce8:	bfab      	itete	ge
 8009cea:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009cec:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009cee:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009cf0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009cf2:	bfac      	ite	ge
 8009cf4:	18ef      	addge	r7, r5, r3
 8009cf6:	1b5e      	sublt	r6, r3, r5
 8009cf8:	9b08      	ldr	r3, [sp, #32]
 8009cfa:	1aed      	subs	r5, r5, r3
 8009cfc:	4415      	add	r5, r2
 8009cfe:	4b66      	ldr	r3, [pc, #408]	@ (8009e98 <_strtod_l+0x858>)
 8009d00:	3d01      	subs	r5, #1
 8009d02:	429d      	cmp	r5, r3
 8009d04:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009d08:	da50      	bge.n	8009dac <_strtod_l+0x76c>
 8009d0a:	1b5b      	subs	r3, r3, r5
 8009d0c:	2b1f      	cmp	r3, #31
 8009d0e:	eba2 0203 	sub.w	r2, r2, r3
 8009d12:	f04f 0101 	mov.w	r1, #1
 8009d16:	dc3d      	bgt.n	8009d94 <_strtod_l+0x754>
 8009d18:	fa01 f303 	lsl.w	r3, r1, r3
 8009d1c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009d1e:	2300      	movs	r3, #0
 8009d20:	9310      	str	r3, [sp, #64]	@ 0x40
 8009d22:	18bd      	adds	r5, r7, r2
 8009d24:	9b08      	ldr	r3, [sp, #32]
 8009d26:	42af      	cmp	r7, r5
 8009d28:	4416      	add	r6, r2
 8009d2a:	441e      	add	r6, r3
 8009d2c:	463b      	mov	r3, r7
 8009d2e:	bfa8      	it	ge
 8009d30:	462b      	movge	r3, r5
 8009d32:	42b3      	cmp	r3, r6
 8009d34:	bfa8      	it	ge
 8009d36:	4633      	movge	r3, r6
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	bfc2      	ittt	gt
 8009d3c:	1aed      	subgt	r5, r5, r3
 8009d3e:	1af6      	subgt	r6, r6, r3
 8009d40:	1aff      	subgt	r7, r7, r3
 8009d42:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	dd16      	ble.n	8009d76 <_strtod_l+0x736>
 8009d48:	4641      	mov	r1, r8
 8009d4a:	9805      	ldr	r0, [sp, #20]
 8009d4c:	461a      	mov	r2, r3
 8009d4e:	f002 f9c9 	bl	800c0e4 <__pow5mult>
 8009d52:	4680      	mov	r8, r0
 8009d54:	2800      	cmp	r0, #0
 8009d56:	d0ba      	beq.n	8009cce <_strtod_l+0x68e>
 8009d58:	4601      	mov	r1, r0
 8009d5a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009d5c:	9805      	ldr	r0, [sp, #20]
 8009d5e:	f002 f917 	bl	800bf90 <__multiply>
 8009d62:	900e      	str	r0, [sp, #56]	@ 0x38
 8009d64:	2800      	cmp	r0, #0
 8009d66:	f43f ae8a 	beq.w	8009a7e <_strtod_l+0x43e>
 8009d6a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009d6c:	9805      	ldr	r0, [sp, #20]
 8009d6e:	f001 fffb 	bl	800bd68 <_Bfree>
 8009d72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d74:	931a      	str	r3, [sp, #104]	@ 0x68
 8009d76:	2d00      	cmp	r5, #0
 8009d78:	dc1d      	bgt.n	8009db6 <_strtod_l+0x776>
 8009d7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	dd23      	ble.n	8009dc8 <_strtod_l+0x788>
 8009d80:	4649      	mov	r1, r9
 8009d82:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009d84:	9805      	ldr	r0, [sp, #20]
 8009d86:	f002 f9ad 	bl	800c0e4 <__pow5mult>
 8009d8a:	4681      	mov	r9, r0
 8009d8c:	b9e0      	cbnz	r0, 8009dc8 <_strtod_l+0x788>
 8009d8e:	f04f 0900 	mov.w	r9, #0
 8009d92:	e674      	b.n	8009a7e <_strtod_l+0x43e>
 8009d94:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009d98:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009d9c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009da0:	35e2      	adds	r5, #226	@ 0xe2
 8009da2:	fa01 f305 	lsl.w	r3, r1, r5
 8009da6:	9310      	str	r3, [sp, #64]	@ 0x40
 8009da8:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009daa:	e7ba      	b.n	8009d22 <_strtod_l+0x6e2>
 8009dac:	2300      	movs	r3, #0
 8009dae:	9310      	str	r3, [sp, #64]	@ 0x40
 8009db0:	2301      	movs	r3, #1
 8009db2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009db4:	e7b5      	b.n	8009d22 <_strtod_l+0x6e2>
 8009db6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009db8:	9805      	ldr	r0, [sp, #20]
 8009dba:	462a      	mov	r2, r5
 8009dbc:	f002 f9ec 	bl	800c198 <__lshift>
 8009dc0:	901a      	str	r0, [sp, #104]	@ 0x68
 8009dc2:	2800      	cmp	r0, #0
 8009dc4:	d1d9      	bne.n	8009d7a <_strtod_l+0x73a>
 8009dc6:	e65a      	b.n	8009a7e <_strtod_l+0x43e>
 8009dc8:	2e00      	cmp	r6, #0
 8009dca:	dd07      	ble.n	8009ddc <_strtod_l+0x79c>
 8009dcc:	4649      	mov	r1, r9
 8009dce:	9805      	ldr	r0, [sp, #20]
 8009dd0:	4632      	mov	r2, r6
 8009dd2:	f002 f9e1 	bl	800c198 <__lshift>
 8009dd6:	4681      	mov	r9, r0
 8009dd8:	2800      	cmp	r0, #0
 8009dda:	d0d8      	beq.n	8009d8e <_strtod_l+0x74e>
 8009ddc:	2f00      	cmp	r7, #0
 8009dde:	dd08      	ble.n	8009df2 <_strtod_l+0x7b2>
 8009de0:	4641      	mov	r1, r8
 8009de2:	9805      	ldr	r0, [sp, #20]
 8009de4:	463a      	mov	r2, r7
 8009de6:	f002 f9d7 	bl	800c198 <__lshift>
 8009dea:	4680      	mov	r8, r0
 8009dec:	2800      	cmp	r0, #0
 8009dee:	f43f ae46 	beq.w	8009a7e <_strtod_l+0x43e>
 8009df2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009df4:	9805      	ldr	r0, [sp, #20]
 8009df6:	464a      	mov	r2, r9
 8009df8:	f002 fa56 	bl	800c2a8 <__mdiff>
 8009dfc:	4604      	mov	r4, r0
 8009dfe:	2800      	cmp	r0, #0
 8009e00:	f43f ae3d 	beq.w	8009a7e <_strtod_l+0x43e>
 8009e04:	68c3      	ldr	r3, [r0, #12]
 8009e06:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009e08:	2300      	movs	r3, #0
 8009e0a:	60c3      	str	r3, [r0, #12]
 8009e0c:	4641      	mov	r1, r8
 8009e0e:	f002 fa2f 	bl	800c270 <__mcmp>
 8009e12:	2800      	cmp	r0, #0
 8009e14:	da46      	bge.n	8009ea4 <_strtod_l+0x864>
 8009e16:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e18:	ea53 030a 	orrs.w	r3, r3, sl
 8009e1c:	d16c      	bne.n	8009ef8 <_strtod_l+0x8b8>
 8009e1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d168      	bne.n	8009ef8 <_strtod_l+0x8b8>
 8009e26:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009e2a:	0d1b      	lsrs	r3, r3, #20
 8009e2c:	051b      	lsls	r3, r3, #20
 8009e2e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009e32:	d961      	bls.n	8009ef8 <_strtod_l+0x8b8>
 8009e34:	6963      	ldr	r3, [r4, #20]
 8009e36:	b913      	cbnz	r3, 8009e3e <_strtod_l+0x7fe>
 8009e38:	6923      	ldr	r3, [r4, #16]
 8009e3a:	2b01      	cmp	r3, #1
 8009e3c:	dd5c      	ble.n	8009ef8 <_strtod_l+0x8b8>
 8009e3e:	4621      	mov	r1, r4
 8009e40:	2201      	movs	r2, #1
 8009e42:	9805      	ldr	r0, [sp, #20]
 8009e44:	f002 f9a8 	bl	800c198 <__lshift>
 8009e48:	4641      	mov	r1, r8
 8009e4a:	4604      	mov	r4, r0
 8009e4c:	f002 fa10 	bl	800c270 <__mcmp>
 8009e50:	2800      	cmp	r0, #0
 8009e52:	dd51      	ble.n	8009ef8 <_strtod_l+0x8b8>
 8009e54:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009e58:	9a08      	ldr	r2, [sp, #32]
 8009e5a:	0d1b      	lsrs	r3, r3, #20
 8009e5c:	051b      	lsls	r3, r3, #20
 8009e5e:	2a00      	cmp	r2, #0
 8009e60:	d06b      	beq.n	8009f3a <_strtod_l+0x8fa>
 8009e62:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009e66:	d868      	bhi.n	8009f3a <_strtod_l+0x8fa>
 8009e68:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009e6c:	f67f ae9d 	bls.w	8009baa <_strtod_l+0x56a>
 8009e70:	4b0a      	ldr	r3, [pc, #40]	@ (8009e9c <_strtod_l+0x85c>)
 8009e72:	4650      	mov	r0, sl
 8009e74:	4659      	mov	r1, fp
 8009e76:	2200      	movs	r2, #0
 8009e78:	f7f6 fbd6 	bl	8000628 <__aeabi_dmul>
 8009e7c:	4b08      	ldr	r3, [pc, #32]	@ (8009ea0 <_strtod_l+0x860>)
 8009e7e:	400b      	ands	r3, r1
 8009e80:	4682      	mov	sl, r0
 8009e82:	468b      	mov	fp, r1
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	f47f ae05 	bne.w	8009a94 <_strtod_l+0x454>
 8009e8a:	9a05      	ldr	r2, [sp, #20]
 8009e8c:	2322      	movs	r3, #34	@ 0x22
 8009e8e:	6013      	str	r3, [r2, #0]
 8009e90:	e600      	b.n	8009a94 <_strtod_l+0x454>
 8009e92:	bf00      	nop
 8009e94:	0800db48 	.word	0x0800db48
 8009e98:	fffffc02 	.word	0xfffffc02
 8009e9c:	39500000 	.word	0x39500000
 8009ea0:	7ff00000 	.word	0x7ff00000
 8009ea4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009ea8:	d165      	bne.n	8009f76 <_strtod_l+0x936>
 8009eaa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009eac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009eb0:	b35a      	cbz	r2, 8009f0a <_strtod_l+0x8ca>
 8009eb2:	4a9f      	ldr	r2, [pc, #636]	@ (800a130 <_strtod_l+0xaf0>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d12b      	bne.n	8009f10 <_strtod_l+0x8d0>
 8009eb8:	9b08      	ldr	r3, [sp, #32]
 8009eba:	4651      	mov	r1, sl
 8009ebc:	b303      	cbz	r3, 8009f00 <_strtod_l+0x8c0>
 8009ebe:	4b9d      	ldr	r3, [pc, #628]	@ (800a134 <_strtod_l+0xaf4>)
 8009ec0:	465a      	mov	r2, fp
 8009ec2:	4013      	ands	r3, r2
 8009ec4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009ec8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009ecc:	d81b      	bhi.n	8009f06 <_strtod_l+0x8c6>
 8009ece:	0d1b      	lsrs	r3, r3, #20
 8009ed0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ed8:	4299      	cmp	r1, r3
 8009eda:	d119      	bne.n	8009f10 <_strtod_l+0x8d0>
 8009edc:	4b96      	ldr	r3, [pc, #600]	@ (800a138 <_strtod_l+0xaf8>)
 8009ede:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	d102      	bne.n	8009eea <_strtod_l+0x8aa>
 8009ee4:	3101      	adds	r1, #1
 8009ee6:	f43f adca 	beq.w	8009a7e <_strtod_l+0x43e>
 8009eea:	4b92      	ldr	r3, [pc, #584]	@ (800a134 <_strtod_l+0xaf4>)
 8009eec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009eee:	401a      	ands	r2, r3
 8009ef0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009ef4:	f04f 0a00 	mov.w	sl, #0
 8009ef8:	9b08      	ldr	r3, [sp, #32]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d1b8      	bne.n	8009e70 <_strtod_l+0x830>
 8009efe:	e5c9      	b.n	8009a94 <_strtod_l+0x454>
 8009f00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009f04:	e7e8      	b.n	8009ed8 <_strtod_l+0x898>
 8009f06:	4613      	mov	r3, r2
 8009f08:	e7e6      	b.n	8009ed8 <_strtod_l+0x898>
 8009f0a:	ea53 030a 	orrs.w	r3, r3, sl
 8009f0e:	d0a1      	beq.n	8009e54 <_strtod_l+0x814>
 8009f10:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009f12:	b1db      	cbz	r3, 8009f4c <_strtod_l+0x90c>
 8009f14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f16:	4213      	tst	r3, r2
 8009f18:	d0ee      	beq.n	8009ef8 <_strtod_l+0x8b8>
 8009f1a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f1c:	9a08      	ldr	r2, [sp, #32]
 8009f1e:	4650      	mov	r0, sl
 8009f20:	4659      	mov	r1, fp
 8009f22:	b1bb      	cbz	r3, 8009f54 <_strtod_l+0x914>
 8009f24:	f7ff fb6e 	bl	8009604 <sulp>
 8009f28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009f2c:	ec53 2b10 	vmov	r2, r3, d0
 8009f30:	f7f6 f9c4 	bl	80002bc <__adddf3>
 8009f34:	4682      	mov	sl, r0
 8009f36:	468b      	mov	fp, r1
 8009f38:	e7de      	b.n	8009ef8 <_strtod_l+0x8b8>
 8009f3a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009f3e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009f42:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009f46:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009f4a:	e7d5      	b.n	8009ef8 <_strtod_l+0x8b8>
 8009f4c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009f4e:	ea13 0f0a 	tst.w	r3, sl
 8009f52:	e7e1      	b.n	8009f18 <_strtod_l+0x8d8>
 8009f54:	f7ff fb56 	bl	8009604 <sulp>
 8009f58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009f5c:	ec53 2b10 	vmov	r2, r3, d0
 8009f60:	f7f6 f9aa 	bl	80002b8 <__aeabi_dsub>
 8009f64:	2200      	movs	r2, #0
 8009f66:	2300      	movs	r3, #0
 8009f68:	4682      	mov	sl, r0
 8009f6a:	468b      	mov	fp, r1
 8009f6c:	f7f6 fdc4 	bl	8000af8 <__aeabi_dcmpeq>
 8009f70:	2800      	cmp	r0, #0
 8009f72:	d0c1      	beq.n	8009ef8 <_strtod_l+0x8b8>
 8009f74:	e619      	b.n	8009baa <_strtod_l+0x56a>
 8009f76:	4641      	mov	r1, r8
 8009f78:	4620      	mov	r0, r4
 8009f7a:	f002 faf1 	bl	800c560 <__ratio>
 8009f7e:	ec57 6b10 	vmov	r6, r7, d0
 8009f82:	2200      	movs	r2, #0
 8009f84:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009f88:	4630      	mov	r0, r6
 8009f8a:	4639      	mov	r1, r7
 8009f8c:	f7f6 fdc8 	bl	8000b20 <__aeabi_dcmple>
 8009f90:	2800      	cmp	r0, #0
 8009f92:	d06f      	beq.n	800a074 <_strtod_l+0xa34>
 8009f94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d17a      	bne.n	800a090 <_strtod_l+0xa50>
 8009f9a:	f1ba 0f00 	cmp.w	sl, #0
 8009f9e:	d158      	bne.n	800a052 <_strtod_l+0xa12>
 8009fa0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009fa2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d15a      	bne.n	800a060 <_strtod_l+0xa20>
 8009faa:	4b64      	ldr	r3, [pc, #400]	@ (800a13c <_strtod_l+0xafc>)
 8009fac:	2200      	movs	r2, #0
 8009fae:	4630      	mov	r0, r6
 8009fb0:	4639      	mov	r1, r7
 8009fb2:	f7f6 fdab 	bl	8000b0c <__aeabi_dcmplt>
 8009fb6:	2800      	cmp	r0, #0
 8009fb8:	d159      	bne.n	800a06e <_strtod_l+0xa2e>
 8009fba:	4630      	mov	r0, r6
 8009fbc:	4639      	mov	r1, r7
 8009fbe:	4b60      	ldr	r3, [pc, #384]	@ (800a140 <_strtod_l+0xb00>)
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	f7f6 fb31 	bl	8000628 <__aeabi_dmul>
 8009fc6:	4606      	mov	r6, r0
 8009fc8:	460f      	mov	r7, r1
 8009fca:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009fce:	9606      	str	r6, [sp, #24]
 8009fd0:	9307      	str	r3, [sp, #28]
 8009fd2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009fd6:	4d57      	ldr	r5, [pc, #348]	@ (800a134 <_strtod_l+0xaf4>)
 8009fd8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009fdc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009fde:	401d      	ands	r5, r3
 8009fe0:	4b58      	ldr	r3, [pc, #352]	@ (800a144 <_strtod_l+0xb04>)
 8009fe2:	429d      	cmp	r5, r3
 8009fe4:	f040 80b2 	bne.w	800a14c <_strtod_l+0xb0c>
 8009fe8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009fea:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009fee:	ec4b ab10 	vmov	d0, sl, fp
 8009ff2:	f002 f9ed 	bl	800c3d0 <__ulp>
 8009ff6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009ffa:	ec51 0b10 	vmov	r0, r1, d0
 8009ffe:	f7f6 fb13 	bl	8000628 <__aeabi_dmul>
 800a002:	4652      	mov	r2, sl
 800a004:	465b      	mov	r3, fp
 800a006:	f7f6 f959 	bl	80002bc <__adddf3>
 800a00a:	460b      	mov	r3, r1
 800a00c:	4949      	ldr	r1, [pc, #292]	@ (800a134 <_strtod_l+0xaf4>)
 800a00e:	4a4e      	ldr	r2, [pc, #312]	@ (800a148 <_strtod_l+0xb08>)
 800a010:	4019      	ands	r1, r3
 800a012:	4291      	cmp	r1, r2
 800a014:	4682      	mov	sl, r0
 800a016:	d942      	bls.n	800a09e <_strtod_l+0xa5e>
 800a018:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a01a:	4b47      	ldr	r3, [pc, #284]	@ (800a138 <_strtod_l+0xaf8>)
 800a01c:	429a      	cmp	r2, r3
 800a01e:	d103      	bne.n	800a028 <_strtod_l+0x9e8>
 800a020:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a022:	3301      	adds	r3, #1
 800a024:	f43f ad2b 	beq.w	8009a7e <_strtod_l+0x43e>
 800a028:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a138 <_strtod_l+0xaf8>
 800a02c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800a030:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a032:	9805      	ldr	r0, [sp, #20]
 800a034:	f001 fe98 	bl	800bd68 <_Bfree>
 800a038:	9805      	ldr	r0, [sp, #20]
 800a03a:	4649      	mov	r1, r9
 800a03c:	f001 fe94 	bl	800bd68 <_Bfree>
 800a040:	9805      	ldr	r0, [sp, #20]
 800a042:	4641      	mov	r1, r8
 800a044:	f001 fe90 	bl	800bd68 <_Bfree>
 800a048:	9805      	ldr	r0, [sp, #20]
 800a04a:	4621      	mov	r1, r4
 800a04c:	f001 fe8c 	bl	800bd68 <_Bfree>
 800a050:	e618      	b.n	8009c84 <_strtod_l+0x644>
 800a052:	f1ba 0f01 	cmp.w	sl, #1
 800a056:	d103      	bne.n	800a060 <_strtod_l+0xa20>
 800a058:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	f43f ada5 	beq.w	8009baa <_strtod_l+0x56a>
 800a060:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a110 <_strtod_l+0xad0>
 800a064:	4f35      	ldr	r7, [pc, #212]	@ (800a13c <_strtod_l+0xafc>)
 800a066:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a06a:	2600      	movs	r6, #0
 800a06c:	e7b1      	b.n	8009fd2 <_strtod_l+0x992>
 800a06e:	4f34      	ldr	r7, [pc, #208]	@ (800a140 <_strtod_l+0xb00>)
 800a070:	2600      	movs	r6, #0
 800a072:	e7aa      	b.n	8009fca <_strtod_l+0x98a>
 800a074:	4b32      	ldr	r3, [pc, #200]	@ (800a140 <_strtod_l+0xb00>)
 800a076:	4630      	mov	r0, r6
 800a078:	4639      	mov	r1, r7
 800a07a:	2200      	movs	r2, #0
 800a07c:	f7f6 fad4 	bl	8000628 <__aeabi_dmul>
 800a080:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a082:	4606      	mov	r6, r0
 800a084:	460f      	mov	r7, r1
 800a086:	2b00      	cmp	r3, #0
 800a088:	d09f      	beq.n	8009fca <_strtod_l+0x98a>
 800a08a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a08e:	e7a0      	b.n	8009fd2 <_strtod_l+0x992>
 800a090:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a118 <_strtod_l+0xad8>
 800a094:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a098:	ec57 6b17 	vmov	r6, r7, d7
 800a09c:	e799      	b.n	8009fd2 <_strtod_l+0x992>
 800a09e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a0a2:	9b08      	ldr	r3, [sp, #32]
 800a0a4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d1c1      	bne.n	800a030 <_strtod_l+0x9f0>
 800a0ac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a0b0:	0d1b      	lsrs	r3, r3, #20
 800a0b2:	051b      	lsls	r3, r3, #20
 800a0b4:	429d      	cmp	r5, r3
 800a0b6:	d1bb      	bne.n	800a030 <_strtod_l+0x9f0>
 800a0b8:	4630      	mov	r0, r6
 800a0ba:	4639      	mov	r1, r7
 800a0bc:	f7f6 fe14 	bl	8000ce8 <__aeabi_d2lz>
 800a0c0:	f7f6 fa84 	bl	80005cc <__aeabi_l2d>
 800a0c4:	4602      	mov	r2, r0
 800a0c6:	460b      	mov	r3, r1
 800a0c8:	4630      	mov	r0, r6
 800a0ca:	4639      	mov	r1, r7
 800a0cc:	f7f6 f8f4 	bl	80002b8 <__aeabi_dsub>
 800a0d0:	460b      	mov	r3, r1
 800a0d2:	4602      	mov	r2, r0
 800a0d4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a0d8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a0dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0de:	ea46 060a 	orr.w	r6, r6, sl
 800a0e2:	431e      	orrs	r6, r3
 800a0e4:	d06f      	beq.n	800a1c6 <_strtod_l+0xb86>
 800a0e6:	a30e      	add	r3, pc, #56	@ (adr r3, 800a120 <_strtod_l+0xae0>)
 800a0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ec:	f7f6 fd0e 	bl	8000b0c <__aeabi_dcmplt>
 800a0f0:	2800      	cmp	r0, #0
 800a0f2:	f47f accf 	bne.w	8009a94 <_strtod_l+0x454>
 800a0f6:	a30c      	add	r3, pc, #48	@ (adr r3, 800a128 <_strtod_l+0xae8>)
 800a0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a100:	f7f6 fd22 	bl	8000b48 <__aeabi_dcmpgt>
 800a104:	2800      	cmp	r0, #0
 800a106:	d093      	beq.n	800a030 <_strtod_l+0x9f0>
 800a108:	e4c4      	b.n	8009a94 <_strtod_l+0x454>
 800a10a:	bf00      	nop
 800a10c:	f3af 8000 	nop.w
 800a110:	00000000 	.word	0x00000000
 800a114:	bff00000 	.word	0xbff00000
 800a118:	00000000 	.word	0x00000000
 800a11c:	3ff00000 	.word	0x3ff00000
 800a120:	94a03595 	.word	0x94a03595
 800a124:	3fdfffff 	.word	0x3fdfffff
 800a128:	35afe535 	.word	0x35afe535
 800a12c:	3fe00000 	.word	0x3fe00000
 800a130:	000fffff 	.word	0x000fffff
 800a134:	7ff00000 	.word	0x7ff00000
 800a138:	7fefffff 	.word	0x7fefffff
 800a13c:	3ff00000 	.word	0x3ff00000
 800a140:	3fe00000 	.word	0x3fe00000
 800a144:	7fe00000 	.word	0x7fe00000
 800a148:	7c9fffff 	.word	0x7c9fffff
 800a14c:	9b08      	ldr	r3, [sp, #32]
 800a14e:	b323      	cbz	r3, 800a19a <_strtod_l+0xb5a>
 800a150:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a154:	d821      	bhi.n	800a19a <_strtod_l+0xb5a>
 800a156:	a328      	add	r3, pc, #160	@ (adr r3, 800a1f8 <_strtod_l+0xbb8>)
 800a158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a15c:	4630      	mov	r0, r6
 800a15e:	4639      	mov	r1, r7
 800a160:	f7f6 fcde 	bl	8000b20 <__aeabi_dcmple>
 800a164:	b1a0      	cbz	r0, 800a190 <_strtod_l+0xb50>
 800a166:	4639      	mov	r1, r7
 800a168:	4630      	mov	r0, r6
 800a16a:	f7f6 fd35 	bl	8000bd8 <__aeabi_d2uiz>
 800a16e:	2801      	cmp	r0, #1
 800a170:	bf38      	it	cc
 800a172:	2001      	movcc	r0, #1
 800a174:	f7f6 f9de 	bl	8000534 <__aeabi_ui2d>
 800a178:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a17a:	4606      	mov	r6, r0
 800a17c:	460f      	mov	r7, r1
 800a17e:	b9fb      	cbnz	r3, 800a1c0 <_strtod_l+0xb80>
 800a180:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a184:	9014      	str	r0, [sp, #80]	@ 0x50
 800a186:	9315      	str	r3, [sp, #84]	@ 0x54
 800a188:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a18c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a190:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a192:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a196:	1b5b      	subs	r3, r3, r5
 800a198:	9311      	str	r3, [sp, #68]	@ 0x44
 800a19a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a19e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a1a2:	f002 f915 	bl	800c3d0 <__ulp>
 800a1a6:	4650      	mov	r0, sl
 800a1a8:	ec53 2b10 	vmov	r2, r3, d0
 800a1ac:	4659      	mov	r1, fp
 800a1ae:	f7f6 fa3b 	bl	8000628 <__aeabi_dmul>
 800a1b2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a1b6:	f7f6 f881 	bl	80002bc <__adddf3>
 800a1ba:	4682      	mov	sl, r0
 800a1bc:	468b      	mov	fp, r1
 800a1be:	e770      	b.n	800a0a2 <_strtod_l+0xa62>
 800a1c0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a1c4:	e7e0      	b.n	800a188 <_strtod_l+0xb48>
 800a1c6:	a30e      	add	r3, pc, #56	@ (adr r3, 800a200 <_strtod_l+0xbc0>)
 800a1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1cc:	f7f6 fc9e 	bl	8000b0c <__aeabi_dcmplt>
 800a1d0:	e798      	b.n	800a104 <_strtod_l+0xac4>
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a1d6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a1d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a1da:	6013      	str	r3, [r2, #0]
 800a1dc:	f7ff ba6d 	b.w	80096ba <_strtod_l+0x7a>
 800a1e0:	2a65      	cmp	r2, #101	@ 0x65
 800a1e2:	f43f ab66 	beq.w	80098b2 <_strtod_l+0x272>
 800a1e6:	2a45      	cmp	r2, #69	@ 0x45
 800a1e8:	f43f ab63 	beq.w	80098b2 <_strtod_l+0x272>
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	f7ff bb9e 	b.w	800992e <_strtod_l+0x2ee>
 800a1f2:	bf00      	nop
 800a1f4:	f3af 8000 	nop.w
 800a1f8:	ffc00000 	.word	0xffc00000
 800a1fc:	41dfffff 	.word	0x41dfffff
 800a200:	94a03595 	.word	0x94a03595
 800a204:	3fcfffff 	.word	0x3fcfffff

0800a208 <_strtod_r>:
 800a208:	4b01      	ldr	r3, [pc, #4]	@ (800a210 <_strtod_r+0x8>)
 800a20a:	f7ff ba19 	b.w	8009640 <_strtod_l>
 800a20e:	bf00      	nop
 800a210:	20000058 	.word	0x20000058

0800a214 <_strtol_l.constprop.0>:
 800a214:	2b24      	cmp	r3, #36	@ 0x24
 800a216:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a21a:	4686      	mov	lr, r0
 800a21c:	4690      	mov	r8, r2
 800a21e:	d801      	bhi.n	800a224 <_strtol_l.constprop.0+0x10>
 800a220:	2b01      	cmp	r3, #1
 800a222:	d106      	bne.n	800a232 <_strtol_l.constprop.0+0x1e>
 800a224:	f000 f8c4 	bl	800a3b0 <__errno>
 800a228:	2316      	movs	r3, #22
 800a22a:	6003      	str	r3, [r0, #0]
 800a22c:	2000      	movs	r0, #0
 800a22e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a232:	4834      	ldr	r0, [pc, #208]	@ (800a304 <_strtol_l.constprop.0+0xf0>)
 800a234:	460d      	mov	r5, r1
 800a236:	462a      	mov	r2, r5
 800a238:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a23c:	5d06      	ldrb	r6, [r0, r4]
 800a23e:	f016 0608 	ands.w	r6, r6, #8
 800a242:	d1f8      	bne.n	800a236 <_strtol_l.constprop.0+0x22>
 800a244:	2c2d      	cmp	r4, #45	@ 0x2d
 800a246:	d12d      	bne.n	800a2a4 <_strtol_l.constprop.0+0x90>
 800a248:	782c      	ldrb	r4, [r5, #0]
 800a24a:	2601      	movs	r6, #1
 800a24c:	1c95      	adds	r5, r2, #2
 800a24e:	f033 0210 	bics.w	r2, r3, #16
 800a252:	d109      	bne.n	800a268 <_strtol_l.constprop.0+0x54>
 800a254:	2c30      	cmp	r4, #48	@ 0x30
 800a256:	d12a      	bne.n	800a2ae <_strtol_l.constprop.0+0x9a>
 800a258:	782a      	ldrb	r2, [r5, #0]
 800a25a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a25e:	2a58      	cmp	r2, #88	@ 0x58
 800a260:	d125      	bne.n	800a2ae <_strtol_l.constprop.0+0x9a>
 800a262:	786c      	ldrb	r4, [r5, #1]
 800a264:	2310      	movs	r3, #16
 800a266:	3502      	adds	r5, #2
 800a268:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a26c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800a270:	2200      	movs	r2, #0
 800a272:	fbbc f9f3 	udiv	r9, ip, r3
 800a276:	4610      	mov	r0, r2
 800a278:	fb03 ca19 	mls	sl, r3, r9, ip
 800a27c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a280:	2f09      	cmp	r7, #9
 800a282:	d81b      	bhi.n	800a2bc <_strtol_l.constprop.0+0xa8>
 800a284:	463c      	mov	r4, r7
 800a286:	42a3      	cmp	r3, r4
 800a288:	dd27      	ble.n	800a2da <_strtol_l.constprop.0+0xc6>
 800a28a:	1c57      	adds	r7, r2, #1
 800a28c:	d007      	beq.n	800a29e <_strtol_l.constprop.0+0x8a>
 800a28e:	4581      	cmp	r9, r0
 800a290:	d320      	bcc.n	800a2d4 <_strtol_l.constprop.0+0xc0>
 800a292:	d101      	bne.n	800a298 <_strtol_l.constprop.0+0x84>
 800a294:	45a2      	cmp	sl, r4
 800a296:	db1d      	blt.n	800a2d4 <_strtol_l.constprop.0+0xc0>
 800a298:	fb00 4003 	mla	r0, r0, r3, r4
 800a29c:	2201      	movs	r2, #1
 800a29e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a2a2:	e7eb      	b.n	800a27c <_strtol_l.constprop.0+0x68>
 800a2a4:	2c2b      	cmp	r4, #43	@ 0x2b
 800a2a6:	bf04      	itt	eq
 800a2a8:	782c      	ldrbeq	r4, [r5, #0]
 800a2aa:	1c95      	addeq	r5, r2, #2
 800a2ac:	e7cf      	b.n	800a24e <_strtol_l.constprop.0+0x3a>
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d1da      	bne.n	800a268 <_strtol_l.constprop.0+0x54>
 800a2b2:	2c30      	cmp	r4, #48	@ 0x30
 800a2b4:	bf0c      	ite	eq
 800a2b6:	2308      	moveq	r3, #8
 800a2b8:	230a      	movne	r3, #10
 800a2ba:	e7d5      	b.n	800a268 <_strtol_l.constprop.0+0x54>
 800a2bc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a2c0:	2f19      	cmp	r7, #25
 800a2c2:	d801      	bhi.n	800a2c8 <_strtol_l.constprop.0+0xb4>
 800a2c4:	3c37      	subs	r4, #55	@ 0x37
 800a2c6:	e7de      	b.n	800a286 <_strtol_l.constprop.0+0x72>
 800a2c8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a2cc:	2f19      	cmp	r7, #25
 800a2ce:	d804      	bhi.n	800a2da <_strtol_l.constprop.0+0xc6>
 800a2d0:	3c57      	subs	r4, #87	@ 0x57
 800a2d2:	e7d8      	b.n	800a286 <_strtol_l.constprop.0+0x72>
 800a2d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a2d8:	e7e1      	b.n	800a29e <_strtol_l.constprop.0+0x8a>
 800a2da:	1c53      	adds	r3, r2, #1
 800a2dc:	d108      	bne.n	800a2f0 <_strtol_l.constprop.0+0xdc>
 800a2de:	2322      	movs	r3, #34	@ 0x22
 800a2e0:	f8ce 3000 	str.w	r3, [lr]
 800a2e4:	4660      	mov	r0, ip
 800a2e6:	f1b8 0f00 	cmp.w	r8, #0
 800a2ea:	d0a0      	beq.n	800a22e <_strtol_l.constprop.0+0x1a>
 800a2ec:	1e69      	subs	r1, r5, #1
 800a2ee:	e006      	b.n	800a2fe <_strtol_l.constprop.0+0xea>
 800a2f0:	b106      	cbz	r6, 800a2f4 <_strtol_l.constprop.0+0xe0>
 800a2f2:	4240      	negs	r0, r0
 800a2f4:	f1b8 0f00 	cmp.w	r8, #0
 800a2f8:	d099      	beq.n	800a22e <_strtol_l.constprop.0+0x1a>
 800a2fa:	2a00      	cmp	r2, #0
 800a2fc:	d1f6      	bne.n	800a2ec <_strtol_l.constprop.0+0xd8>
 800a2fe:	f8c8 1000 	str.w	r1, [r8]
 800a302:	e794      	b.n	800a22e <_strtol_l.constprop.0+0x1a>
 800a304:	0800db79 	.word	0x0800db79

0800a308 <_strtol_r>:
 800a308:	f7ff bf84 	b.w	800a214 <_strtol_l.constprop.0>

0800a30c <_fwalk_sglue>:
 800a30c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a310:	4607      	mov	r7, r0
 800a312:	4688      	mov	r8, r1
 800a314:	4614      	mov	r4, r2
 800a316:	2600      	movs	r6, #0
 800a318:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a31c:	f1b9 0901 	subs.w	r9, r9, #1
 800a320:	d505      	bpl.n	800a32e <_fwalk_sglue+0x22>
 800a322:	6824      	ldr	r4, [r4, #0]
 800a324:	2c00      	cmp	r4, #0
 800a326:	d1f7      	bne.n	800a318 <_fwalk_sglue+0xc>
 800a328:	4630      	mov	r0, r6
 800a32a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a32e:	89ab      	ldrh	r3, [r5, #12]
 800a330:	2b01      	cmp	r3, #1
 800a332:	d907      	bls.n	800a344 <_fwalk_sglue+0x38>
 800a334:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a338:	3301      	adds	r3, #1
 800a33a:	d003      	beq.n	800a344 <_fwalk_sglue+0x38>
 800a33c:	4629      	mov	r1, r5
 800a33e:	4638      	mov	r0, r7
 800a340:	47c0      	blx	r8
 800a342:	4306      	orrs	r6, r0
 800a344:	3568      	adds	r5, #104	@ 0x68
 800a346:	e7e9      	b.n	800a31c <_fwalk_sglue+0x10>

0800a348 <strncmp>:
 800a348:	b510      	push	{r4, lr}
 800a34a:	b16a      	cbz	r2, 800a368 <strncmp+0x20>
 800a34c:	3901      	subs	r1, #1
 800a34e:	1884      	adds	r4, r0, r2
 800a350:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a354:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a358:	429a      	cmp	r2, r3
 800a35a:	d103      	bne.n	800a364 <strncmp+0x1c>
 800a35c:	42a0      	cmp	r0, r4
 800a35e:	d001      	beq.n	800a364 <strncmp+0x1c>
 800a360:	2a00      	cmp	r2, #0
 800a362:	d1f5      	bne.n	800a350 <strncmp+0x8>
 800a364:	1ad0      	subs	r0, r2, r3
 800a366:	bd10      	pop	{r4, pc}
 800a368:	4610      	mov	r0, r2
 800a36a:	e7fc      	b.n	800a366 <strncmp+0x1e>

0800a36c <strstr>:
 800a36c:	780a      	ldrb	r2, [r1, #0]
 800a36e:	b570      	push	{r4, r5, r6, lr}
 800a370:	b96a      	cbnz	r2, 800a38e <strstr+0x22>
 800a372:	bd70      	pop	{r4, r5, r6, pc}
 800a374:	429a      	cmp	r2, r3
 800a376:	d109      	bne.n	800a38c <strstr+0x20>
 800a378:	460c      	mov	r4, r1
 800a37a:	4605      	mov	r5, r0
 800a37c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800a380:	2b00      	cmp	r3, #0
 800a382:	d0f6      	beq.n	800a372 <strstr+0x6>
 800a384:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800a388:	429e      	cmp	r6, r3
 800a38a:	d0f7      	beq.n	800a37c <strstr+0x10>
 800a38c:	3001      	adds	r0, #1
 800a38e:	7803      	ldrb	r3, [r0, #0]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d1ef      	bne.n	800a374 <strstr+0x8>
 800a394:	4618      	mov	r0, r3
 800a396:	e7ec      	b.n	800a372 <strstr+0x6>

0800a398 <memset>:
 800a398:	4402      	add	r2, r0
 800a39a:	4603      	mov	r3, r0
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d100      	bne.n	800a3a2 <memset+0xa>
 800a3a0:	4770      	bx	lr
 800a3a2:	f803 1b01 	strb.w	r1, [r3], #1
 800a3a6:	e7f9      	b.n	800a39c <memset+0x4>

0800a3a8 <_localeconv_r>:
 800a3a8:	4800      	ldr	r0, [pc, #0]	@ (800a3ac <_localeconv_r+0x4>)
 800a3aa:	4770      	bx	lr
 800a3ac:	20000148 	.word	0x20000148

0800a3b0 <__errno>:
 800a3b0:	4b01      	ldr	r3, [pc, #4]	@ (800a3b8 <__errno+0x8>)
 800a3b2:	6818      	ldr	r0, [r3, #0]
 800a3b4:	4770      	bx	lr
 800a3b6:	bf00      	nop
 800a3b8:	200001c4 	.word	0x200001c4

0800a3bc <__libc_init_array>:
 800a3bc:	b570      	push	{r4, r5, r6, lr}
 800a3be:	4d0d      	ldr	r5, [pc, #52]	@ (800a3f4 <__libc_init_array+0x38>)
 800a3c0:	4c0d      	ldr	r4, [pc, #52]	@ (800a3f8 <__libc_init_array+0x3c>)
 800a3c2:	1b64      	subs	r4, r4, r5
 800a3c4:	10a4      	asrs	r4, r4, #2
 800a3c6:	2600      	movs	r6, #0
 800a3c8:	42a6      	cmp	r6, r4
 800a3ca:	d109      	bne.n	800a3e0 <__libc_init_array+0x24>
 800a3cc:	4d0b      	ldr	r5, [pc, #44]	@ (800a3fc <__libc_init_array+0x40>)
 800a3ce:	4c0c      	ldr	r4, [pc, #48]	@ (800a400 <__libc_init_array+0x44>)
 800a3d0:	f002 ff04 	bl	800d1dc <_init>
 800a3d4:	1b64      	subs	r4, r4, r5
 800a3d6:	10a4      	asrs	r4, r4, #2
 800a3d8:	2600      	movs	r6, #0
 800a3da:	42a6      	cmp	r6, r4
 800a3dc:	d105      	bne.n	800a3ea <__libc_init_array+0x2e>
 800a3de:	bd70      	pop	{r4, r5, r6, pc}
 800a3e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3e4:	4798      	blx	r3
 800a3e6:	3601      	adds	r6, #1
 800a3e8:	e7ee      	b.n	800a3c8 <__libc_init_array+0xc>
 800a3ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3ee:	4798      	blx	r3
 800a3f0:	3601      	adds	r6, #1
 800a3f2:	e7f2      	b.n	800a3da <__libc_init_array+0x1e>
 800a3f4:	0800df4c 	.word	0x0800df4c
 800a3f8:	0800df4c 	.word	0x0800df4c
 800a3fc:	0800df4c 	.word	0x0800df4c
 800a400:	0800df50 	.word	0x0800df50

0800a404 <__retarget_lock_init_recursive>:
 800a404:	4770      	bx	lr

0800a406 <__retarget_lock_acquire_recursive>:
 800a406:	4770      	bx	lr

0800a408 <__retarget_lock_release_recursive>:
 800a408:	4770      	bx	lr

0800a40a <memcpy>:
 800a40a:	440a      	add	r2, r1
 800a40c:	4291      	cmp	r1, r2
 800a40e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800a412:	d100      	bne.n	800a416 <memcpy+0xc>
 800a414:	4770      	bx	lr
 800a416:	b510      	push	{r4, lr}
 800a418:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a41c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a420:	4291      	cmp	r1, r2
 800a422:	d1f9      	bne.n	800a418 <memcpy+0xe>
 800a424:	bd10      	pop	{r4, pc}
	...

0800a428 <nan>:
 800a428:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a430 <nan+0x8>
 800a42c:	4770      	bx	lr
 800a42e:	bf00      	nop
 800a430:	00000000 	.word	0x00000000
 800a434:	7ff80000 	.word	0x7ff80000

0800a438 <nanf>:
 800a438:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a440 <nanf+0x8>
 800a43c:	4770      	bx	lr
 800a43e:	bf00      	nop
 800a440:	7fc00000 	.word	0x7fc00000

0800a444 <quorem>:
 800a444:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a448:	6903      	ldr	r3, [r0, #16]
 800a44a:	690c      	ldr	r4, [r1, #16]
 800a44c:	42a3      	cmp	r3, r4
 800a44e:	4607      	mov	r7, r0
 800a450:	db7e      	blt.n	800a550 <quorem+0x10c>
 800a452:	3c01      	subs	r4, #1
 800a454:	f101 0814 	add.w	r8, r1, #20
 800a458:	00a3      	lsls	r3, r4, #2
 800a45a:	f100 0514 	add.w	r5, r0, #20
 800a45e:	9300      	str	r3, [sp, #0]
 800a460:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a464:	9301      	str	r3, [sp, #4]
 800a466:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a46a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a46e:	3301      	adds	r3, #1
 800a470:	429a      	cmp	r2, r3
 800a472:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a476:	fbb2 f6f3 	udiv	r6, r2, r3
 800a47a:	d32e      	bcc.n	800a4da <quorem+0x96>
 800a47c:	f04f 0a00 	mov.w	sl, #0
 800a480:	46c4      	mov	ip, r8
 800a482:	46ae      	mov	lr, r5
 800a484:	46d3      	mov	fp, sl
 800a486:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a48a:	b298      	uxth	r0, r3
 800a48c:	fb06 a000 	mla	r0, r6, r0, sl
 800a490:	0c02      	lsrs	r2, r0, #16
 800a492:	0c1b      	lsrs	r3, r3, #16
 800a494:	fb06 2303 	mla	r3, r6, r3, r2
 800a498:	f8de 2000 	ldr.w	r2, [lr]
 800a49c:	b280      	uxth	r0, r0
 800a49e:	b292      	uxth	r2, r2
 800a4a0:	1a12      	subs	r2, r2, r0
 800a4a2:	445a      	add	r2, fp
 800a4a4:	f8de 0000 	ldr.w	r0, [lr]
 800a4a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a4ac:	b29b      	uxth	r3, r3
 800a4ae:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a4b2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a4b6:	b292      	uxth	r2, r2
 800a4b8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a4bc:	45e1      	cmp	r9, ip
 800a4be:	f84e 2b04 	str.w	r2, [lr], #4
 800a4c2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a4c6:	d2de      	bcs.n	800a486 <quorem+0x42>
 800a4c8:	9b00      	ldr	r3, [sp, #0]
 800a4ca:	58eb      	ldr	r3, [r5, r3]
 800a4cc:	b92b      	cbnz	r3, 800a4da <quorem+0x96>
 800a4ce:	9b01      	ldr	r3, [sp, #4]
 800a4d0:	3b04      	subs	r3, #4
 800a4d2:	429d      	cmp	r5, r3
 800a4d4:	461a      	mov	r2, r3
 800a4d6:	d32f      	bcc.n	800a538 <quorem+0xf4>
 800a4d8:	613c      	str	r4, [r7, #16]
 800a4da:	4638      	mov	r0, r7
 800a4dc:	f001 fec8 	bl	800c270 <__mcmp>
 800a4e0:	2800      	cmp	r0, #0
 800a4e2:	db25      	blt.n	800a530 <quorem+0xec>
 800a4e4:	4629      	mov	r1, r5
 800a4e6:	2000      	movs	r0, #0
 800a4e8:	f858 2b04 	ldr.w	r2, [r8], #4
 800a4ec:	f8d1 c000 	ldr.w	ip, [r1]
 800a4f0:	fa1f fe82 	uxth.w	lr, r2
 800a4f4:	fa1f f38c 	uxth.w	r3, ip
 800a4f8:	eba3 030e 	sub.w	r3, r3, lr
 800a4fc:	4403      	add	r3, r0
 800a4fe:	0c12      	lsrs	r2, r2, #16
 800a500:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a504:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a508:	b29b      	uxth	r3, r3
 800a50a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a50e:	45c1      	cmp	r9, r8
 800a510:	f841 3b04 	str.w	r3, [r1], #4
 800a514:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a518:	d2e6      	bcs.n	800a4e8 <quorem+0xa4>
 800a51a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a51e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a522:	b922      	cbnz	r2, 800a52e <quorem+0xea>
 800a524:	3b04      	subs	r3, #4
 800a526:	429d      	cmp	r5, r3
 800a528:	461a      	mov	r2, r3
 800a52a:	d30b      	bcc.n	800a544 <quorem+0x100>
 800a52c:	613c      	str	r4, [r7, #16]
 800a52e:	3601      	adds	r6, #1
 800a530:	4630      	mov	r0, r6
 800a532:	b003      	add	sp, #12
 800a534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a538:	6812      	ldr	r2, [r2, #0]
 800a53a:	3b04      	subs	r3, #4
 800a53c:	2a00      	cmp	r2, #0
 800a53e:	d1cb      	bne.n	800a4d8 <quorem+0x94>
 800a540:	3c01      	subs	r4, #1
 800a542:	e7c6      	b.n	800a4d2 <quorem+0x8e>
 800a544:	6812      	ldr	r2, [r2, #0]
 800a546:	3b04      	subs	r3, #4
 800a548:	2a00      	cmp	r2, #0
 800a54a:	d1ef      	bne.n	800a52c <quorem+0xe8>
 800a54c:	3c01      	subs	r4, #1
 800a54e:	e7ea      	b.n	800a526 <quorem+0xe2>
 800a550:	2000      	movs	r0, #0
 800a552:	e7ee      	b.n	800a532 <quorem+0xee>
 800a554:	0000      	movs	r0, r0
	...

0800a558 <_dtoa_r>:
 800a558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a55c:	69c7      	ldr	r7, [r0, #28]
 800a55e:	b099      	sub	sp, #100	@ 0x64
 800a560:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a564:	ec55 4b10 	vmov	r4, r5, d0
 800a568:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a56a:	9109      	str	r1, [sp, #36]	@ 0x24
 800a56c:	4683      	mov	fp, r0
 800a56e:	920e      	str	r2, [sp, #56]	@ 0x38
 800a570:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a572:	b97f      	cbnz	r7, 800a594 <_dtoa_r+0x3c>
 800a574:	2010      	movs	r0, #16
 800a576:	f001 fa43 	bl	800ba00 <malloc>
 800a57a:	4602      	mov	r2, r0
 800a57c:	f8cb 001c 	str.w	r0, [fp, #28]
 800a580:	b920      	cbnz	r0, 800a58c <_dtoa_r+0x34>
 800a582:	4ba7      	ldr	r3, [pc, #668]	@ (800a820 <_dtoa_r+0x2c8>)
 800a584:	21ef      	movs	r1, #239	@ 0xef
 800a586:	48a7      	ldr	r0, [pc, #668]	@ (800a824 <_dtoa_r+0x2cc>)
 800a588:	f002 f94e 	bl	800c828 <__assert_func>
 800a58c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a590:	6007      	str	r7, [r0, #0]
 800a592:	60c7      	str	r7, [r0, #12]
 800a594:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a598:	6819      	ldr	r1, [r3, #0]
 800a59a:	b159      	cbz	r1, 800a5b4 <_dtoa_r+0x5c>
 800a59c:	685a      	ldr	r2, [r3, #4]
 800a59e:	604a      	str	r2, [r1, #4]
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	4093      	lsls	r3, r2
 800a5a4:	608b      	str	r3, [r1, #8]
 800a5a6:	4658      	mov	r0, fp
 800a5a8:	f001 fbde 	bl	800bd68 <_Bfree>
 800a5ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	601a      	str	r2, [r3, #0]
 800a5b4:	1e2b      	subs	r3, r5, #0
 800a5b6:	bfb9      	ittee	lt
 800a5b8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a5bc:	9303      	strlt	r3, [sp, #12]
 800a5be:	2300      	movge	r3, #0
 800a5c0:	6033      	strge	r3, [r6, #0]
 800a5c2:	9f03      	ldr	r7, [sp, #12]
 800a5c4:	4b98      	ldr	r3, [pc, #608]	@ (800a828 <_dtoa_r+0x2d0>)
 800a5c6:	bfbc      	itt	lt
 800a5c8:	2201      	movlt	r2, #1
 800a5ca:	6032      	strlt	r2, [r6, #0]
 800a5cc:	43bb      	bics	r3, r7
 800a5ce:	d112      	bne.n	800a5f6 <_dtoa_r+0x9e>
 800a5d0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a5d2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a5d6:	6013      	str	r3, [r2, #0]
 800a5d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a5dc:	4323      	orrs	r3, r4
 800a5de:	f000 854d 	beq.w	800b07c <_dtoa_r+0xb24>
 800a5e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a5e4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a83c <_dtoa_r+0x2e4>
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	f000 854f 	beq.w	800b08c <_dtoa_r+0xb34>
 800a5ee:	f10a 0303 	add.w	r3, sl, #3
 800a5f2:	f000 bd49 	b.w	800b088 <_dtoa_r+0xb30>
 800a5f6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	ec51 0b17 	vmov	r0, r1, d7
 800a600:	2300      	movs	r3, #0
 800a602:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a606:	f7f6 fa77 	bl	8000af8 <__aeabi_dcmpeq>
 800a60a:	4680      	mov	r8, r0
 800a60c:	b158      	cbz	r0, 800a626 <_dtoa_r+0xce>
 800a60e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a610:	2301      	movs	r3, #1
 800a612:	6013      	str	r3, [r2, #0]
 800a614:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a616:	b113      	cbz	r3, 800a61e <_dtoa_r+0xc6>
 800a618:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a61a:	4b84      	ldr	r3, [pc, #528]	@ (800a82c <_dtoa_r+0x2d4>)
 800a61c:	6013      	str	r3, [r2, #0]
 800a61e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a840 <_dtoa_r+0x2e8>
 800a622:	f000 bd33 	b.w	800b08c <_dtoa_r+0xb34>
 800a626:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a62a:	aa16      	add	r2, sp, #88	@ 0x58
 800a62c:	a917      	add	r1, sp, #92	@ 0x5c
 800a62e:	4658      	mov	r0, fp
 800a630:	f001 ff3e 	bl	800c4b0 <__d2b>
 800a634:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a638:	4681      	mov	r9, r0
 800a63a:	2e00      	cmp	r6, #0
 800a63c:	d077      	beq.n	800a72e <_dtoa_r+0x1d6>
 800a63e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a640:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a644:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a648:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a64c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a650:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a654:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a658:	4619      	mov	r1, r3
 800a65a:	2200      	movs	r2, #0
 800a65c:	4b74      	ldr	r3, [pc, #464]	@ (800a830 <_dtoa_r+0x2d8>)
 800a65e:	f7f5 fe2b 	bl	80002b8 <__aeabi_dsub>
 800a662:	a369      	add	r3, pc, #420	@ (adr r3, 800a808 <_dtoa_r+0x2b0>)
 800a664:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a668:	f7f5 ffde 	bl	8000628 <__aeabi_dmul>
 800a66c:	a368      	add	r3, pc, #416	@ (adr r3, 800a810 <_dtoa_r+0x2b8>)
 800a66e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a672:	f7f5 fe23 	bl	80002bc <__adddf3>
 800a676:	4604      	mov	r4, r0
 800a678:	4630      	mov	r0, r6
 800a67a:	460d      	mov	r5, r1
 800a67c:	f7f5 ff6a 	bl	8000554 <__aeabi_i2d>
 800a680:	a365      	add	r3, pc, #404	@ (adr r3, 800a818 <_dtoa_r+0x2c0>)
 800a682:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a686:	f7f5 ffcf 	bl	8000628 <__aeabi_dmul>
 800a68a:	4602      	mov	r2, r0
 800a68c:	460b      	mov	r3, r1
 800a68e:	4620      	mov	r0, r4
 800a690:	4629      	mov	r1, r5
 800a692:	f7f5 fe13 	bl	80002bc <__adddf3>
 800a696:	4604      	mov	r4, r0
 800a698:	460d      	mov	r5, r1
 800a69a:	f7f6 fa75 	bl	8000b88 <__aeabi_d2iz>
 800a69e:	2200      	movs	r2, #0
 800a6a0:	4607      	mov	r7, r0
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	4620      	mov	r0, r4
 800a6a6:	4629      	mov	r1, r5
 800a6a8:	f7f6 fa30 	bl	8000b0c <__aeabi_dcmplt>
 800a6ac:	b140      	cbz	r0, 800a6c0 <_dtoa_r+0x168>
 800a6ae:	4638      	mov	r0, r7
 800a6b0:	f7f5 ff50 	bl	8000554 <__aeabi_i2d>
 800a6b4:	4622      	mov	r2, r4
 800a6b6:	462b      	mov	r3, r5
 800a6b8:	f7f6 fa1e 	bl	8000af8 <__aeabi_dcmpeq>
 800a6bc:	b900      	cbnz	r0, 800a6c0 <_dtoa_r+0x168>
 800a6be:	3f01      	subs	r7, #1
 800a6c0:	2f16      	cmp	r7, #22
 800a6c2:	d851      	bhi.n	800a768 <_dtoa_r+0x210>
 800a6c4:	4b5b      	ldr	r3, [pc, #364]	@ (800a834 <_dtoa_r+0x2dc>)
 800a6c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a6d2:	f7f6 fa1b 	bl	8000b0c <__aeabi_dcmplt>
 800a6d6:	2800      	cmp	r0, #0
 800a6d8:	d048      	beq.n	800a76c <_dtoa_r+0x214>
 800a6da:	3f01      	subs	r7, #1
 800a6dc:	2300      	movs	r3, #0
 800a6de:	9312      	str	r3, [sp, #72]	@ 0x48
 800a6e0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a6e2:	1b9b      	subs	r3, r3, r6
 800a6e4:	1e5a      	subs	r2, r3, #1
 800a6e6:	bf44      	itt	mi
 800a6e8:	f1c3 0801 	rsbmi	r8, r3, #1
 800a6ec:	2300      	movmi	r3, #0
 800a6ee:	9208      	str	r2, [sp, #32]
 800a6f0:	bf54      	ite	pl
 800a6f2:	f04f 0800 	movpl.w	r8, #0
 800a6f6:	9308      	strmi	r3, [sp, #32]
 800a6f8:	2f00      	cmp	r7, #0
 800a6fa:	db39      	blt.n	800a770 <_dtoa_r+0x218>
 800a6fc:	9b08      	ldr	r3, [sp, #32]
 800a6fe:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a700:	443b      	add	r3, r7
 800a702:	9308      	str	r3, [sp, #32]
 800a704:	2300      	movs	r3, #0
 800a706:	930a      	str	r3, [sp, #40]	@ 0x28
 800a708:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a70a:	2b09      	cmp	r3, #9
 800a70c:	d864      	bhi.n	800a7d8 <_dtoa_r+0x280>
 800a70e:	2b05      	cmp	r3, #5
 800a710:	bfc4      	itt	gt
 800a712:	3b04      	subgt	r3, #4
 800a714:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a716:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a718:	f1a3 0302 	sub.w	r3, r3, #2
 800a71c:	bfcc      	ite	gt
 800a71e:	2400      	movgt	r4, #0
 800a720:	2401      	movle	r4, #1
 800a722:	2b03      	cmp	r3, #3
 800a724:	d863      	bhi.n	800a7ee <_dtoa_r+0x296>
 800a726:	e8df f003 	tbb	[pc, r3]
 800a72a:	372a      	.short	0x372a
 800a72c:	5535      	.short	0x5535
 800a72e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a732:	441e      	add	r6, r3
 800a734:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a738:	2b20      	cmp	r3, #32
 800a73a:	bfc1      	itttt	gt
 800a73c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a740:	409f      	lslgt	r7, r3
 800a742:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a746:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a74a:	bfd6      	itet	le
 800a74c:	f1c3 0320 	rsble	r3, r3, #32
 800a750:	ea47 0003 	orrgt.w	r0, r7, r3
 800a754:	fa04 f003 	lslle.w	r0, r4, r3
 800a758:	f7f5 feec 	bl	8000534 <__aeabi_ui2d>
 800a75c:	2201      	movs	r2, #1
 800a75e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a762:	3e01      	subs	r6, #1
 800a764:	9214      	str	r2, [sp, #80]	@ 0x50
 800a766:	e777      	b.n	800a658 <_dtoa_r+0x100>
 800a768:	2301      	movs	r3, #1
 800a76a:	e7b8      	b.n	800a6de <_dtoa_r+0x186>
 800a76c:	9012      	str	r0, [sp, #72]	@ 0x48
 800a76e:	e7b7      	b.n	800a6e0 <_dtoa_r+0x188>
 800a770:	427b      	negs	r3, r7
 800a772:	930a      	str	r3, [sp, #40]	@ 0x28
 800a774:	2300      	movs	r3, #0
 800a776:	eba8 0807 	sub.w	r8, r8, r7
 800a77a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a77c:	e7c4      	b.n	800a708 <_dtoa_r+0x1b0>
 800a77e:	2300      	movs	r3, #0
 800a780:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a782:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a784:	2b00      	cmp	r3, #0
 800a786:	dc35      	bgt.n	800a7f4 <_dtoa_r+0x29c>
 800a788:	2301      	movs	r3, #1
 800a78a:	9300      	str	r3, [sp, #0]
 800a78c:	9307      	str	r3, [sp, #28]
 800a78e:	461a      	mov	r2, r3
 800a790:	920e      	str	r2, [sp, #56]	@ 0x38
 800a792:	e00b      	b.n	800a7ac <_dtoa_r+0x254>
 800a794:	2301      	movs	r3, #1
 800a796:	e7f3      	b.n	800a780 <_dtoa_r+0x228>
 800a798:	2300      	movs	r3, #0
 800a79a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a79c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a79e:	18fb      	adds	r3, r7, r3
 800a7a0:	9300      	str	r3, [sp, #0]
 800a7a2:	3301      	adds	r3, #1
 800a7a4:	2b01      	cmp	r3, #1
 800a7a6:	9307      	str	r3, [sp, #28]
 800a7a8:	bfb8      	it	lt
 800a7aa:	2301      	movlt	r3, #1
 800a7ac:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a7b0:	2100      	movs	r1, #0
 800a7b2:	2204      	movs	r2, #4
 800a7b4:	f102 0514 	add.w	r5, r2, #20
 800a7b8:	429d      	cmp	r5, r3
 800a7ba:	d91f      	bls.n	800a7fc <_dtoa_r+0x2a4>
 800a7bc:	6041      	str	r1, [r0, #4]
 800a7be:	4658      	mov	r0, fp
 800a7c0:	f001 fa92 	bl	800bce8 <_Balloc>
 800a7c4:	4682      	mov	sl, r0
 800a7c6:	2800      	cmp	r0, #0
 800a7c8:	d13c      	bne.n	800a844 <_dtoa_r+0x2ec>
 800a7ca:	4b1b      	ldr	r3, [pc, #108]	@ (800a838 <_dtoa_r+0x2e0>)
 800a7cc:	4602      	mov	r2, r0
 800a7ce:	f240 11af 	movw	r1, #431	@ 0x1af
 800a7d2:	e6d8      	b.n	800a586 <_dtoa_r+0x2e>
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	e7e0      	b.n	800a79a <_dtoa_r+0x242>
 800a7d8:	2401      	movs	r4, #1
 800a7da:	2300      	movs	r3, #0
 800a7dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7de:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a7e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a7e4:	9300      	str	r3, [sp, #0]
 800a7e6:	9307      	str	r3, [sp, #28]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	2312      	movs	r3, #18
 800a7ec:	e7d0      	b.n	800a790 <_dtoa_r+0x238>
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a7f2:	e7f5      	b.n	800a7e0 <_dtoa_r+0x288>
 800a7f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a7f6:	9300      	str	r3, [sp, #0]
 800a7f8:	9307      	str	r3, [sp, #28]
 800a7fa:	e7d7      	b.n	800a7ac <_dtoa_r+0x254>
 800a7fc:	3101      	adds	r1, #1
 800a7fe:	0052      	lsls	r2, r2, #1
 800a800:	e7d8      	b.n	800a7b4 <_dtoa_r+0x25c>
 800a802:	bf00      	nop
 800a804:	f3af 8000 	nop.w
 800a808:	636f4361 	.word	0x636f4361
 800a80c:	3fd287a7 	.word	0x3fd287a7
 800a810:	8b60c8b3 	.word	0x8b60c8b3
 800a814:	3fc68a28 	.word	0x3fc68a28
 800a818:	509f79fb 	.word	0x509f79fb
 800a81c:	3fd34413 	.word	0x3fd34413
 800a820:	0800dc86 	.word	0x0800dc86
 800a824:	0800dc9d 	.word	0x0800dc9d
 800a828:	7ff00000 	.word	0x7ff00000
 800a82c:	0800daf1 	.word	0x0800daf1
 800a830:	3ff80000 	.word	0x3ff80000
 800a834:	0800de08 	.word	0x0800de08
 800a838:	0800dcf5 	.word	0x0800dcf5
 800a83c:	0800dc82 	.word	0x0800dc82
 800a840:	0800daf0 	.word	0x0800daf0
 800a844:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a848:	6018      	str	r0, [r3, #0]
 800a84a:	9b07      	ldr	r3, [sp, #28]
 800a84c:	2b0e      	cmp	r3, #14
 800a84e:	f200 80a4 	bhi.w	800a99a <_dtoa_r+0x442>
 800a852:	2c00      	cmp	r4, #0
 800a854:	f000 80a1 	beq.w	800a99a <_dtoa_r+0x442>
 800a858:	2f00      	cmp	r7, #0
 800a85a:	dd33      	ble.n	800a8c4 <_dtoa_r+0x36c>
 800a85c:	4bad      	ldr	r3, [pc, #692]	@ (800ab14 <_dtoa_r+0x5bc>)
 800a85e:	f007 020f 	and.w	r2, r7, #15
 800a862:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a866:	ed93 7b00 	vldr	d7, [r3]
 800a86a:	05f8      	lsls	r0, r7, #23
 800a86c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a870:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a874:	d516      	bpl.n	800a8a4 <_dtoa_r+0x34c>
 800a876:	4ba8      	ldr	r3, [pc, #672]	@ (800ab18 <_dtoa_r+0x5c0>)
 800a878:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a87c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a880:	f7f5 fffc 	bl	800087c <__aeabi_ddiv>
 800a884:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a888:	f004 040f 	and.w	r4, r4, #15
 800a88c:	2603      	movs	r6, #3
 800a88e:	4da2      	ldr	r5, [pc, #648]	@ (800ab18 <_dtoa_r+0x5c0>)
 800a890:	b954      	cbnz	r4, 800a8a8 <_dtoa_r+0x350>
 800a892:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a896:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a89a:	f7f5 ffef 	bl	800087c <__aeabi_ddiv>
 800a89e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a8a2:	e028      	b.n	800a8f6 <_dtoa_r+0x39e>
 800a8a4:	2602      	movs	r6, #2
 800a8a6:	e7f2      	b.n	800a88e <_dtoa_r+0x336>
 800a8a8:	07e1      	lsls	r1, r4, #31
 800a8aa:	d508      	bpl.n	800a8be <_dtoa_r+0x366>
 800a8ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a8b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a8b4:	f7f5 feb8 	bl	8000628 <__aeabi_dmul>
 800a8b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a8bc:	3601      	adds	r6, #1
 800a8be:	1064      	asrs	r4, r4, #1
 800a8c0:	3508      	adds	r5, #8
 800a8c2:	e7e5      	b.n	800a890 <_dtoa_r+0x338>
 800a8c4:	f000 80d2 	beq.w	800aa6c <_dtoa_r+0x514>
 800a8c8:	427c      	negs	r4, r7
 800a8ca:	4b92      	ldr	r3, [pc, #584]	@ (800ab14 <_dtoa_r+0x5bc>)
 800a8cc:	4d92      	ldr	r5, [pc, #584]	@ (800ab18 <_dtoa_r+0x5c0>)
 800a8ce:	f004 020f 	and.w	r2, r4, #15
 800a8d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a8de:	f7f5 fea3 	bl	8000628 <__aeabi_dmul>
 800a8e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a8e6:	1124      	asrs	r4, r4, #4
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	2602      	movs	r6, #2
 800a8ec:	2c00      	cmp	r4, #0
 800a8ee:	f040 80b2 	bne.w	800aa56 <_dtoa_r+0x4fe>
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d1d3      	bne.n	800a89e <_dtoa_r+0x346>
 800a8f6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a8f8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	f000 80b7 	beq.w	800aa70 <_dtoa_r+0x518>
 800a902:	4b86      	ldr	r3, [pc, #536]	@ (800ab1c <_dtoa_r+0x5c4>)
 800a904:	2200      	movs	r2, #0
 800a906:	4620      	mov	r0, r4
 800a908:	4629      	mov	r1, r5
 800a90a:	f7f6 f8ff 	bl	8000b0c <__aeabi_dcmplt>
 800a90e:	2800      	cmp	r0, #0
 800a910:	f000 80ae 	beq.w	800aa70 <_dtoa_r+0x518>
 800a914:	9b07      	ldr	r3, [sp, #28]
 800a916:	2b00      	cmp	r3, #0
 800a918:	f000 80aa 	beq.w	800aa70 <_dtoa_r+0x518>
 800a91c:	9b00      	ldr	r3, [sp, #0]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	dd37      	ble.n	800a992 <_dtoa_r+0x43a>
 800a922:	1e7b      	subs	r3, r7, #1
 800a924:	9304      	str	r3, [sp, #16]
 800a926:	4620      	mov	r0, r4
 800a928:	4b7d      	ldr	r3, [pc, #500]	@ (800ab20 <_dtoa_r+0x5c8>)
 800a92a:	2200      	movs	r2, #0
 800a92c:	4629      	mov	r1, r5
 800a92e:	f7f5 fe7b 	bl	8000628 <__aeabi_dmul>
 800a932:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a936:	9c00      	ldr	r4, [sp, #0]
 800a938:	3601      	adds	r6, #1
 800a93a:	4630      	mov	r0, r6
 800a93c:	f7f5 fe0a 	bl	8000554 <__aeabi_i2d>
 800a940:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a944:	f7f5 fe70 	bl	8000628 <__aeabi_dmul>
 800a948:	4b76      	ldr	r3, [pc, #472]	@ (800ab24 <_dtoa_r+0x5cc>)
 800a94a:	2200      	movs	r2, #0
 800a94c:	f7f5 fcb6 	bl	80002bc <__adddf3>
 800a950:	4605      	mov	r5, r0
 800a952:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a956:	2c00      	cmp	r4, #0
 800a958:	f040 808d 	bne.w	800aa76 <_dtoa_r+0x51e>
 800a95c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a960:	4b71      	ldr	r3, [pc, #452]	@ (800ab28 <_dtoa_r+0x5d0>)
 800a962:	2200      	movs	r2, #0
 800a964:	f7f5 fca8 	bl	80002b8 <__aeabi_dsub>
 800a968:	4602      	mov	r2, r0
 800a96a:	460b      	mov	r3, r1
 800a96c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a970:	462a      	mov	r2, r5
 800a972:	4633      	mov	r3, r6
 800a974:	f7f6 f8e8 	bl	8000b48 <__aeabi_dcmpgt>
 800a978:	2800      	cmp	r0, #0
 800a97a:	f040 828b 	bne.w	800ae94 <_dtoa_r+0x93c>
 800a97e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a982:	462a      	mov	r2, r5
 800a984:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a988:	f7f6 f8c0 	bl	8000b0c <__aeabi_dcmplt>
 800a98c:	2800      	cmp	r0, #0
 800a98e:	f040 8128 	bne.w	800abe2 <_dtoa_r+0x68a>
 800a992:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a996:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a99a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	f2c0 815a 	blt.w	800ac56 <_dtoa_r+0x6fe>
 800a9a2:	2f0e      	cmp	r7, #14
 800a9a4:	f300 8157 	bgt.w	800ac56 <_dtoa_r+0x6fe>
 800a9a8:	4b5a      	ldr	r3, [pc, #360]	@ (800ab14 <_dtoa_r+0x5bc>)
 800a9aa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a9ae:	ed93 7b00 	vldr	d7, [r3]
 800a9b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	ed8d 7b00 	vstr	d7, [sp]
 800a9ba:	da03      	bge.n	800a9c4 <_dtoa_r+0x46c>
 800a9bc:	9b07      	ldr	r3, [sp, #28]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	f340 8101 	ble.w	800abc6 <_dtoa_r+0x66e>
 800a9c4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a9c8:	4656      	mov	r6, sl
 800a9ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a9ce:	4620      	mov	r0, r4
 800a9d0:	4629      	mov	r1, r5
 800a9d2:	f7f5 ff53 	bl	800087c <__aeabi_ddiv>
 800a9d6:	f7f6 f8d7 	bl	8000b88 <__aeabi_d2iz>
 800a9da:	4680      	mov	r8, r0
 800a9dc:	f7f5 fdba 	bl	8000554 <__aeabi_i2d>
 800a9e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a9e4:	f7f5 fe20 	bl	8000628 <__aeabi_dmul>
 800a9e8:	4602      	mov	r2, r0
 800a9ea:	460b      	mov	r3, r1
 800a9ec:	4620      	mov	r0, r4
 800a9ee:	4629      	mov	r1, r5
 800a9f0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a9f4:	f7f5 fc60 	bl	80002b8 <__aeabi_dsub>
 800a9f8:	f806 4b01 	strb.w	r4, [r6], #1
 800a9fc:	9d07      	ldr	r5, [sp, #28]
 800a9fe:	eba6 040a 	sub.w	r4, r6, sl
 800aa02:	42a5      	cmp	r5, r4
 800aa04:	4602      	mov	r2, r0
 800aa06:	460b      	mov	r3, r1
 800aa08:	f040 8117 	bne.w	800ac3a <_dtoa_r+0x6e2>
 800aa0c:	f7f5 fc56 	bl	80002bc <__adddf3>
 800aa10:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa14:	4604      	mov	r4, r0
 800aa16:	460d      	mov	r5, r1
 800aa18:	f7f6 f896 	bl	8000b48 <__aeabi_dcmpgt>
 800aa1c:	2800      	cmp	r0, #0
 800aa1e:	f040 80f9 	bne.w	800ac14 <_dtoa_r+0x6bc>
 800aa22:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa26:	4620      	mov	r0, r4
 800aa28:	4629      	mov	r1, r5
 800aa2a:	f7f6 f865 	bl	8000af8 <__aeabi_dcmpeq>
 800aa2e:	b118      	cbz	r0, 800aa38 <_dtoa_r+0x4e0>
 800aa30:	f018 0f01 	tst.w	r8, #1
 800aa34:	f040 80ee 	bne.w	800ac14 <_dtoa_r+0x6bc>
 800aa38:	4649      	mov	r1, r9
 800aa3a:	4658      	mov	r0, fp
 800aa3c:	f001 f994 	bl	800bd68 <_Bfree>
 800aa40:	2300      	movs	r3, #0
 800aa42:	7033      	strb	r3, [r6, #0]
 800aa44:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800aa46:	3701      	adds	r7, #1
 800aa48:	601f      	str	r7, [r3, #0]
 800aa4a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	f000 831d 	beq.w	800b08c <_dtoa_r+0xb34>
 800aa52:	601e      	str	r6, [r3, #0]
 800aa54:	e31a      	b.n	800b08c <_dtoa_r+0xb34>
 800aa56:	07e2      	lsls	r2, r4, #31
 800aa58:	d505      	bpl.n	800aa66 <_dtoa_r+0x50e>
 800aa5a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aa5e:	f7f5 fde3 	bl	8000628 <__aeabi_dmul>
 800aa62:	3601      	adds	r6, #1
 800aa64:	2301      	movs	r3, #1
 800aa66:	1064      	asrs	r4, r4, #1
 800aa68:	3508      	adds	r5, #8
 800aa6a:	e73f      	b.n	800a8ec <_dtoa_r+0x394>
 800aa6c:	2602      	movs	r6, #2
 800aa6e:	e742      	b.n	800a8f6 <_dtoa_r+0x39e>
 800aa70:	9c07      	ldr	r4, [sp, #28]
 800aa72:	9704      	str	r7, [sp, #16]
 800aa74:	e761      	b.n	800a93a <_dtoa_r+0x3e2>
 800aa76:	4b27      	ldr	r3, [pc, #156]	@ (800ab14 <_dtoa_r+0x5bc>)
 800aa78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800aa7a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aa7e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aa82:	4454      	add	r4, sl
 800aa84:	2900      	cmp	r1, #0
 800aa86:	d053      	beq.n	800ab30 <_dtoa_r+0x5d8>
 800aa88:	4928      	ldr	r1, [pc, #160]	@ (800ab2c <_dtoa_r+0x5d4>)
 800aa8a:	2000      	movs	r0, #0
 800aa8c:	f7f5 fef6 	bl	800087c <__aeabi_ddiv>
 800aa90:	4633      	mov	r3, r6
 800aa92:	462a      	mov	r2, r5
 800aa94:	f7f5 fc10 	bl	80002b8 <__aeabi_dsub>
 800aa98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800aa9c:	4656      	mov	r6, sl
 800aa9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aaa2:	f7f6 f871 	bl	8000b88 <__aeabi_d2iz>
 800aaa6:	4605      	mov	r5, r0
 800aaa8:	f7f5 fd54 	bl	8000554 <__aeabi_i2d>
 800aaac:	4602      	mov	r2, r0
 800aaae:	460b      	mov	r3, r1
 800aab0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aab4:	f7f5 fc00 	bl	80002b8 <__aeabi_dsub>
 800aab8:	3530      	adds	r5, #48	@ 0x30
 800aaba:	4602      	mov	r2, r0
 800aabc:	460b      	mov	r3, r1
 800aabe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aac2:	f806 5b01 	strb.w	r5, [r6], #1
 800aac6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800aaca:	f7f6 f81f 	bl	8000b0c <__aeabi_dcmplt>
 800aace:	2800      	cmp	r0, #0
 800aad0:	d171      	bne.n	800abb6 <_dtoa_r+0x65e>
 800aad2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aad6:	4911      	ldr	r1, [pc, #68]	@ (800ab1c <_dtoa_r+0x5c4>)
 800aad8:	2000      	movs	r0, #0
 800aada:	f7f5 fbed 	bl	80002b8 <__aeabi_dsub>
 800aade:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800aae2:	f7f6 f813 	bl	8000b0c <__aeabi_dcmplt>
 800aae6:	2800      	cmp	r0, #0
 800aae8:	f040 8095 	bne.w	800ac16 <_dtoa_r+0x6be>
 800aaec:	42a6      	cmp	r6, r4
 800aaee:	f43f af50 	beq.w	800a992 <_dtoa_r+0x43a>
 800aaf2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800aaf6:	4b0a      	ldr	r3, [pc, #40]	@ (800ab20 <_dtoa_r+0x5c8>)
 800aaf8:	2200      	movs	r2, #0
 800aafa:	f7f5 fd95 	bl	8000628 <__aeabi_dmul>
 800aafe:	4b08      	ldr	r3, [pc, #32]	@ (800ab20 <_dtoa_r+0x5c8>)
 800ab00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ab04:	2200      	movs	r2, #0
 800ab06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab0a:	f7f5 fd8d 	bl	8000628 <__aeabi_dmul>
 800ab0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab12:	e7c4      	b.n	800aa9e <_dtoa_r+0x546>
 800ab14:	0800de08 	.word	0x0800de08
 800ab18:	0800dde0 	.word	0x0800dde0
 800ab1c:	3ff00000 	.word	0x3ff00000
 800ab20:	40240000 	.word	0x40240000
 800ab24:	401c0000 	.word	0x401c0000
 800ab28:	40140000 	.word	0x40140000
 800ab2c:	3fe00000 	.word	0x3fe00000
 800ab30:	4631      	mov	r1, r6
 800ab32:	4628      	mov	r0, r5
 800ab34:	f7f5 fd78 	bl	8000628 <__aeabi_dmul>
 800ab38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ab3c:	9415      	str	r4, [sp, #84]	@ 0x54
 800ab3e:	4656      	mov	r6, sl
 800ab40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab44:	f7f6 f820 	bl	8000b88 <__aeabi_d2iz>
 800ab48:	4605      	mov	r5, r0
 800ab4a:	f7f5 fd03 	bl	8000554 <__aeabi_i2d>
 800ab4e:	4602      	mov	r2, r0
 800ab50:	460b      	mov	r3, r1
 800ab52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab56:	f7f5 fbaf 	bl	80002b8 <__aeabi_dsub>
 800ab5a:	3530      	adds	r5, #48	@ 0x30
 800ab5c:	f806 5b01 	strb.w	r5, [r6], #1
 800ab60:	4602      	mov	r2, r0
 800ab62:	460b      	mov	r3, r1
 800ab64:	42a6      	cmp	r6, r4
 800ab66:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ab6a:	f04f 0200 	mov.w	r2, #0
 800ab6e:	d124      	bne.n	800abba <_dtoa_r+0x662>
 800ab70:	4bac      	ldr	r3, [pc, #688]	@ (800ae24 <_dtoa_r+0x8cc>)
 800ab72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ab76:	f7f5 fba1 	bl	80002bc <__adddf3>
 800ab7a:	4602      	mov	r2, r0
 800ab7c:	460b      	mov	r3, r1
 800ab7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab82:	f7f5 ffe1 	bl	8000b48 <__aeabi_dcmpgt>
 800ab86:	2800      	cmp	r0, #0
 800ab88:	d145      	bne.n	800ac16 <_dtoa_r+0x6be>
 800ab8a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ab8e:	49a5      	ldr	r1, [pc, #660]	@ (800ae24 <_dtoa_r+0x8cc>)
 800ab90:	2000      	movs	r0, #0
 800ab92:	f7f5 fb91 	bl	80002b8 <__aeabi_dsub>
 800ab96:	4602      	mov	r2, r0
 800ab98:	460b      	mov	r3, r1
 800ab9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab9e:	f7f5 ffb5 	bl	8000b0c <__aeabi_dcmplt>
 800aba2:	2800      	cmp	r0, #0
 800aba4:	f43f aef5 	beq.w	800a992 <_dtoa_r+0x43a>
 800aba8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800abaa:	1e73      	subs	r3, r6, #1
 800abac:	9315      	str	r3, [sp, #84]	@ 0x54
 800abae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800abb2:	2b30      	cmp	r3, #48	@ 0x30
 800abb4:	d0f8      	beq.n	800aba8 <_dtoa_r+0x650>
 800abb6:	9f04      	ldr	r7, [sp, #16]
 800abb8:	e73e      	b.n	800aa38 <_dtoa_r+0x4e0>
 800abba:	4b9b      	ldr	r3, [pc, #620]	@ (800ae28 <_dtoa_r+0x8d0>)
 800abbc:	f7f5 fd34 	bl	8000628 <__aeabi_dmul>
 800abc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800abc4:	e7bc      	b.n	800ab40 <_dtoa_r+0x5e8>
 800abc6:	d10c      	bne.n	800abe2 <_dtoa_r+0x68a>
 800abc8:	4b98      	ldr	r3, [pc, #608]	@ (800ae2c <_dtoa_r+0x8d4>)
 800abca:	2200      	movs	r2, #0
 800abcc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800abd0:	f7f5 fd2a 	bl	8000628 <__aeabi_dmul>
 800abd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800abd8:	f7f5 ffac 	bl	8000b34 <__aeabi_dcmpge>
 800abdc:	2800      	cmp	r0, #0
 800abde:	f000 8157 	beq.w	800ae90 <_dtoa_r+0x938>
 800abe2:	2400      	movs	r4, #0
 800abe4:	4625      	mov	r5, r4
 800abe6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800abe8:	43db      	mvns	r3, r3
 800abea:	9304      	str	r3, [sp, #16]
 800abec:	4656      	mov	r6, sl
 800abee:	2700      	movs	r7, #0
 800abf0:	4621      	mov	r1, r4
 800abf2:	4658      	mov	r0, fp
 800abf4:	f001 f8b8 	bl	800bd68 <_Bfree>
 800abf8:	2d00      	cmp	r5, #0
 800abfa:	d0dc      	beq.n	800abb6 <_dtoa_r+0x65e>
 800abfc:	b12f      	cbz	r7, 800ac0a <_dtoa_r+0x6b2>
 800abfe:	42af      	cmp	r7, r5
 800ac00:	d003      	beq.n	800ac0a <_dtoa_r+0x6b2>
 800ac02:	4639      	mov	r1, r7
 800ac04:	4658      	mov	r0, fp
 800ac06:	f001 f8af 	bl	800bd68 <_Bfree>
 800ac0a:	4629      	mov	r1, r5
 800ac0c:	4658      	mov	r0, fp
 800ac0e:	f001 f8ab 	bl	800bd68 <_Bfree>
 800ac12:	e7d0      	b.n	800abb6 <_dtoa_r+0x65e>
 800ac14:	9704      	str	r7, [sp, #16]
 800ac16:	4633      	mov	r3, r6
 800ac18:	461e      	mov	r6, r3
 800ac1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac1e:	2a39      	cmp	r2, #57	@ 0x39
 800ac20:	d107      	bne.n	800ac32 <_dtoa_r+0x6da>
 800ac22:	459a      	cmp	sl, r3
 800ac24:	d1f8      	bne.n	800ac18 <_dtoa_r+0x6c0>
 800ac26:	9a04      	ldr	r2, [sp, #16]
 800ac28:	3201      	adds	r2, #1
 800ac2a:	9204      	str	r2, [sp, #16]
 800ac2c:	2230      	movs	r2, #48	@ 0x30
 800ac2e:	f88a 2000 	strb.w	r2, [sl]
 800ac32:	781a      	ldrb	r2, [r3, #0]
 800ac34:	3201      	adds	r2, #1
 800ac36:	701a      	strb	r2, [r3, #0]
 800ac38:	e7bd      	b.n	800abb6 <_dtoa_r+0x65e>
 800ac3a:	4b7b      	ldr	r3, [pc, #492]	@ (800ae28 <_dtoa_r+0x8d0>)
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	f7f5 fcf3 	bl	8000628 <__aeabi_dmul>
 800ac42:	2200      	movs	r2, #0
 800ac44:	2300      	movs	r3, #0
 800ac46:	4604      	mov	r4, r0
 800ac48:	460d      	mov	r5, r1
 800ac4a:	f7f5 ff55 	bl	8000af8 <__aeabi_dcmpeq>
 800ac4e:	2800      	cmp	r0, #0
 800ac50:	f43f aebb 	beq.w	800a9ca <_dtoa_r+0x472>
 800ac54:	e6f0      	b.n	800aa38 <_dtoa_r+0x4e0>
 800ac56:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ac58:	2a00      	cmp	r2, #0
 800ac5a:	f000 80db 	beq.w	800ae14 <_dtoa_r+0x8bc>
 800ac5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac60:	2a01      	cmp	r2, #1
 800ac62:	f300 80bf 	bgt.w	800ade4 <_dtoa_r+0x88c>
 800ac66:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ac68:	2a00      	cmp	r2, #0
 800ac6a:	f000 80b7 	beq.w	800addc <_dtoa_r+0x884>
 800ac6e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ac72:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ac74:	4646      	mov	r6, r8
 800ac76:	9a08      	ldr	r2, [sp, #32]
 800ac78:	2101      	movs	r1, #1
 800ac7a:	441a      	add	r2, r3
 800ac7c:	4658      	mov	r0, fp
 800ac7e:	4498      	add	r8, r3
 800ac80:	9208      	str	r2, [sp, #32]
 800ac82:	f001 f96f 	bl	800bf64 <__i2b>
 800ac86:	4605      	mov	r5, r0
 800ac88:	b15e      	cbz	r6, 800aca2 <_dtoa_r+0x74a>
 800ac8a:	9b08      	ldr	r3, [sp, #32]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	dd08      	ble.n	800aca2 <_dtoa_r+0x74a>
 800ac90:	42b3      	cmp	r3, r6
 800ac92:	9a08      	ldr	r2, [sp, #32]
 800ac94:	bfa8      	it	ge
 800ac96:	4633      	movge	r3, r6
 800ac98:	eba8 0803 	sub.w	r8, r8, r3
 800ac9c:	1af6      	subs	r6, r6, r3
 800ac9e:	1ad3      	subs	r3, r2, r3
 800aca0:	9308      	str	r3, [sp, #32]
 800aca2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aca4:	b1f3      	cbz	r3, 800ace4 <_dtoa_r+0x78c>
 800aca6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	f000 80b7 	beq.w	800ae1c <_dtoa_r+0x8c4>
 800acae:	b18c      	cbz	r4, 800acd4 <_dtoa_r+0x77c>
 800acb0:	4629      	mov	r1, r5
 800acb2:	4622      	mov	r2, r4
 800acb4:	4658      	mov	r0, fp
 800acb6:	f001 fa15 	bl	800c0e4 <__pow5mult>
 800acba:	464a      	mov	r2, r9
 800acbc:	4601      	mov	r1, r0
 800acbe:	4605      	mov	r5, r0
 800acc0:	4658      	mov	r0, fp
 800acc2:	f001 f965 	bl	800bf90 <__multiply>
 800acc6:	4649      	mov	r1, r9
 800acc8:	9004      	str	r0, [sp, #16]
 800acca:	4658      	mov	r0, fp
 800accc:	f001 f84c 	bl	800bd68 <_Bfree>
 800acd0:	9b04      	ldr	r3, [sp, #16]
 800acd2:	4699      	mov	r9, r3
 800acd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800acd6:	1b1a      	subs	r2, r3, r4
 800acd8:	d004      	beq.n	800ace4 <_dtoa_r+0x78c>
 800acda:	4649      	mov	r1, r9
 800acdc:	4658      	mov	r0, fp
 800acde:	f001 fa01 	bl	800c0e4 <__pow5mult>
 800ace2:	4681      	mov	r9, r0
 800ace4:	2101      	movs	r1, #1
 800ace6:	4658      	mov	r0, fp
 800ace8:	f001 f93c 	bl	800bf64 <__i2b>
 800acec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800acee:	4604      	mov	r4, r0
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	f000 81cf 	beq.w	800b094 <_dtoa_r+0xb3c>
 800acf6:	461a      	mov	r2, r3
 800acf8:	4601      	mov	r1, r0
 800acfa:	4658      	mov	r0, fp
 800acfc:	f001 f9f2 	bl	800c0e4 <__pow5mult>
 800ad00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad02:	2b01      	cmp	r3, #1
 800ad04:	4604      	mov	r4, r0
 800ad06:	f300 8095 	bgt.w	800ae34 <_dtoa_r+0x8dc>
 800ad0a:	9b02      	ldr	r3, [sp, #8]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	f040 8087 	bne.w	800ae20 <_dtoa_r+0x8c8>
 800ad12:	9b03      	ldr	r3, [sp, #12]
 800ad14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	f040 8089 	bne.w	800ae30 <_dtoa_r+0x8d8>
 800ad1e:	9b03      	ldr	r3, [sp, #12]
 800ad20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ad24:	0d1b      	lsrs	r3, r3, #20
 800ad26:	051b      	lsls	r3, r3, #20
 800ad28:	b12b      	cbz	r3, 800ad36 <_dtoa_r+0x7de>
 800ad2a:	9b08      	ldr	r3, [sp, #32]
 800ad2c:	3301      	adds	r3, #1
 800ad2e:	9308      	str	r3, [sp, #32]
 800ad30:	f108 0801 	add.w	r8, r8, #1
 800ad34:	2301      	movs	r3, #1
 800ad36:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	f000 81b0 	beq.w	800b0a0 <_dtoa_r+0xb48>
 800ad40:	6923      	ldr	r3, [r4, #16]
 800ad42:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ad46:	6918      	ldr	r0, [r3, #16]
 800ad48:	f001 f8c0 	bl	800becc <__hi0bits>
 800ad4c:	f1c0 0020 	rsb	r0, r0, #32
 800ad50:	9b08      	ldr	r3, [sp, #32]
 800ad52:	4418      	add	r0, r3
 800ad54:	f010 001f 	ands.w	r0, r0, #31
 800ad58:	d077      	beq.n	800ae4a <_dtoa_r+0x8f2>
 800ad5a:	f1c0 0320 	rsb	r3, r0, #32
 800ad5e:	2b04      	cmp	r3, #4
 800ad60:	dd6b      	ble.n	800ae3a <_dtoa_r+0x8e2>
 800ad62:	9b08      	ldr	r3, [sp, #32]
 800ad64:	f1c0 001c 	rsb	r0, r0, #28
 800ad68:	4403      	add	r3, r0
 800ad6a:	4480      	add	r8, r0
 800ad6c:	4406      	add	r6, r0
 800ad6e:	9308      	str	r3, [sp, #32]
 800ad70:	f1b8 0f00 	cmp.w	r8, #0
 800ad74:	dd05      	ble.n	800ad82 <_dtoa_r+0x82a>
 800ad76:	4649      	mov	r1, r9
 800ad78:	4642      	mov	r2, r8
 800ad7a:	4658      	mov	r0, fp
 800ad7c:	f001 fa0c 	bl	800c198 <__lshift>
 800ad80:	4681      	mov	r9, r0
 800ad82:	9b08      	ldr	r3, [sp, #32]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	dd05      	ble.n	800ad94 <_dtoa_r+0x83c>
 800ad88:	4621      	mov	r1, r4
 800ad8a:	461a      	mov	r2, r3
 800ad8c:	4658      	mov	r0, fp
 800ad8e:	f001 fa03 	bl	800c198 <__lshift>
 800ad92:	4604      	mov	r4, r0
 800ad94:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d059      	beq.n	800ae4e <_dtoa_r+0x8f6>
 800ad9a:	4621      	mov	r1, r4
 800ad9c:	4648      	mov	r0, r9
 800ad9e:	f001 fa67 	bl	800c270 <__mcmp>
 800ada2:	2800      	cmp	r0, #0
 800ada4:	da53      	bge.n	800ae4e <_dtoa_r+0x8f6>
 800ada6:	1e7b      	subs	r3, r7, #1
 800ada8:	9304      	str	r3, [sp, #16]
 800adaa:	4649      	mov	r1, r9
 800adac:	2300      	movs	r3, #0
 800adae:	220a      	movs	r2, #10
 800adb0:	4658      	mov	r0, fp
 800adb2:	f000 fffb 	bl	800bdac <__multadd>
 800adb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800adb8:	4681      	mov	r9, r0
 800adba:	2b00      	cmp	r3, #0
 800adbc:	f000 8172 	beq.w	800b0a4 <_dtoa_r+0xb4c>
 800adc0:	2300      	movs	r3, #0
 800adc2:	4629      	mov	r1, r5
 800adc4:	220a      	movs	r2, #10
 800adc6:	4658      	mov	r0, fp
 800adc8:	f000 fff0 	bl	800bdac <__multadd>
 800adcc:	9b00      	ldr	r3, [sp, #0]
 800adce:	2b00      	cmp	r3, #0
 800add0:	4605      	mov	r5, r0
 800add2:	dc67      	bgt.n	800aea4 <_dtoa_r+0x94c>
 800add4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800add6:	2b02      	cmp	r3, #2
 800add8:	dc41      	bgt.n	800ae5e <_dtoa_r+0x906>
 800adda:	e063      	b.n	800aea4 <_dtoa_r+0x94c>
 800addc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800adde:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ade2:	e746      	b.n	800ac72 <_dtoa_r+0x71a>
 800ade4:	9b07      	ldr	r3, [sp, #28]
 800ade6:	1e5c      	subs	r4, r3, #1
 800ade8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800adea:	42a3      	cmp	r3, r4
 800adec:	bfbf      	itttt	lt
 800adee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800adf0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800adf2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800adf4:	1ae3      	sublt	r3, r4, r3
 800adf6:	bfb4      	ite	lt
 800adf8:	18d2      	addlt	r2, r2, r3
 800adfa:	1b1c      	subge	r4, r3, r4
 800adfc:	9b07      	ldr	r3, [sp, #28]
 800adfe:	bfbc      	itt	lt
 800ae00:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ae02:	2400      	movlt	r4, #0
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	bfb5      	itete	lt
 800ae08:	eba8 0603 	sublt.w	r6, r8, r3
 800ae0c:	9b07      	ldrge	r3, [sp, #28]
 800ae0e:	2300      	movlt	r3, #0
 800ae10:	4646      	movge	r6, r8
 800ae12:	e730      	b.n	800ac76 <_dtoa_r+0x71e>
 800ae14:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ae16:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ae18:	4646      	mov	r6, r8
 800ae1a:	e735      	b.n	800ac88 <_dtoa_r+0x730>
 800ae1c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ae1e:	e75c      	b.n	800acda <_dtoa_r+0x782>
 800ae20:	2300      	movs	r3, #0
 800ae22:	e788      	b.n	800ad36 <_dtoa_r+0x7de>
 800ae24:	3fe00000 	.word	0x3fe00000
 800ae28:	40240000 	.word	0x40240000
 800ae2c:	40140000 	.word	0x40140000
 800ae30:	9b02      	ldr	r3, [sp, #8]
 800ae32:	e780      	b.n	800ad36 <_dtoa_r+0x7de>
 800ae34:	2300      	movs	r3, #0
 800ae36:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae38:	e782      	b.n	800ad40 <_dtoa_r+0x7e8>
 800ae3a:	d099      	beq.n	800ad70 <_dtoa_r+0x818>
 800ae3c:	9a08      	ldr	r2, [sp, #32]
 800ae3e:	331c      	adds	r3, #28
 800ae40:	441a      	add	r2, r3
 800ae42:	4498      	add	r8, r3
 800ae44:	441e      	add	r6, r3
 800ae46:	9208      	str	r2, [sp, #32]
 800ae48:	e792      	b.n	800ad70 <_dtoa_r+0x818>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	e7f6      	b.n	800ae3c <_dtoa_r+0x8e4>
 800ae4e:	9b07      	ldr	r3, [sp, #28]
 800ae50:	9704      	str	r7, [sp, #16]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	dc20      	bgt.n	800ae98 <_dtoa_r+0x940>
 800ae56:	9300      	str	r3, [sp, #0]
 800ae58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae5a:	2b02      	cmp	r3, #2
 800ae5c:	dd1e      	ble.n	800ae9c <_dtoa_r+0x944>
 800ae5e:	9b00      	ldr	r3, [sp, #0]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	f47f aec0 	bne.w	800abe6 <_dtoa_r+0x68e>
 800ae66:	4621      	mov	r1, r4
 800ae68:	2205      	movs	r2, #5
 800ae6a:	4658      	mov	r0, fp
 800ae6c:	f000 ff9e 	bl	800bdac <__multadd>
 800ae70:	4601      	mov	r1, r0
 800ae72:	4604      	mov	r4, r0
 800ae74:	4648      	mov	r0, r9
 800ae76:	f001 f9fb 	bl	800c270 <__mcmp>
 800ae7a:	2800      	cmp	r0, #0
 800ae7c:	f77f aeb3 	ble.w	800abe6 <_dtoa_r+0x68e>
 800ae80:	4656      	mov	r6, sl
 800ae82:	2331      	movs	r3, #49	@ 0x31
 800ae84:	f806 3b01 	strb.w	r3, [r6], #1
 800ae88:	9b04      	ldr	r3, [sp, #16]
 800ae8a:	3301      	adds	r3, #1
 800ae8c:	9304      	str	r3, [sp, #16]
 800ae8e:	e6ae      	b.n	800abee <_dtoa_r+0x696>
 800ae90:	9c07      	ldr	r4, [sp, #28]
 800ae92:	9704      	str	r7, [sp, #16]
 800ae94:	4625      	mov	r5, r4
 800ae96:	e7f3      	b.n	800ae80 <_dtoa_r+0x928>
 800ae98:	9b07      	ldr	r3, [sp, #28]
 800ae9a:	9300      	str	r3, [sp, #0]
 800ae9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	f000 8104 	beq.w	800b0ac <_dtoa_r+0xb54>
 800aea4:	2e00      	cmp	r6, #0
 800aea6:	dd05      	ble.n	800aeb4 <_dtoa_r+0x95c>
 800aea8:	4629      	mov	r1, r5
 800aeaa:	4632      	mov	r2, r6
 800aeac:	4658      	mov	r0, fp
 800aeae:	f001 f973 	bl	800c198 <__lshift>
 800aeb2:	4605      	mov	r5, r0
 800aeb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d05a      	beq.n	800af70 <_dtoa_r+0xa18>
 800aeba:	6869      	ldr	r1, [r5, #4]
 800aebc:	4658      	mov	r0, fp
 800aebe:	f000 ff13 	bl	800bce8 <_Balloc>
 800aec2:	4606      	mov	r6, r0
 800aec4:	b928      	cbnz	r0, 800aed2 <_dtoa_r+0x97a>
 800aec6:	4b84      	ldr	r3, [pc, #528]	@ (800b0d8 <_dtoa_r+0xb80>)
 800aec8:	4602      	mov	r2, r0
 800aeca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800aece:	f7ff bb5a 	b.w	800a586 <_dtoa_r+0x2e>
 800aed2:	692a      	ldr	r2, [r5, #16]
 800aed4:	3202      	adds	r2, #2
 800aed6:	0092      	lsls	r2, r2, #2
 800aed8:	f105 010c 	add.w	r1, r5, #12
 800aedc:	300c      	adds	r0, #12
 800aede:	f7ff fa94 	bl	800a40a <memcpy>
 800aee2:	2201      	movs	r2, #1
 800aee4:	4631      	mov	r1, r6
 800aee6:	4658      	mov	r0, fp
 800aee8:	f001 f956 	bl	800c198 <__lshift>
 800aeec:	f10a 0301 	add.w	r3, sl, #1
 800aef0:	9307      	str	r3, [sp, #28]
 800aef2:	9b00      	ldr	r3, [sp, #0]
 800aef4:	4453      	add	r3, sl
 800aef6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aef8:	9b02      	ldr	r3, [sp, #8]
 800aefa:	f003 0301 	and.w	r3, r3, #1
 800aefe:	462f      	mov	r7, r5
 800af00:	930a      	str	r3, [sp, #40]	@ 0x28
 800af02:	4605      	mov	r5, r0
 800af04:	9b07      	ldr	r3, [sp, #28]
 800af06:	4621      	mov	r1, r4
 800af08:	3b01      	subs	r3, #1
 800af0a:	4648      	mov	r0, r9
 800af0c:	9300      	str	r3, [sp, #0]
 800af0e:	f7ff fa99 	bl	800a444 <quorem>
 800af12:	4639      	mov	r1, r7
 800af14:	9002      	str	r0, [sp, #8]
 800af16:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800af1a:	4648      	mov	r0, r9
 800af1c:	f001 f9a8 	bl	800c270 <__mcmp>
 800af20:	462a      	mov	r2, r5
 800af22:	9008      	str	r0, [sp, #32]
 800af24:	4621      	mov	r1, r4
 800af26:	4658      	mov	r0, fp
 800af28:	f001 f9be 	bl	800c2a8 <__mdiff>
 800af2c:	68c2      	ldr	r2, [r0, #12]
 800af2e:	4606      	mov	r6, r0
 800af30:	bb02      	cbnz	r2, 800af74 <_dtoa_r+0xa1c>
 800af32:	4601      	mov	r1, r0
 800af34:	4648      	mov	r0, r9
 800af36:	f001 f99b 	bl	800c270 <__mcmp>
 800af3a:	4602      	mov	r2, r0
 800af3c:	4631      	mov	r1, r6
 800af3e:	4658      	mov	r0, fp
 800af40:	920e      	str	r2, [sp, #56]	@ 0x38
 800af42:	f000 ff11 	bl	800bd68 <_Bfree>
 800af46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af48:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800af4a:	9e07      	ldr	r6, [sp, #28]
 800af4c:	ea43 0102 	orr.w	r1, r3, r2
 800af50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af52:	4319      	orrs	r1, r3
 800af54:	d110      	bne.n	800af78 <_dtoa_r+0xa20>
 800af56:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800af5a:	d029      	beq.n	800afb0 <_dtoa_r+0xa58>
 800af5c:	9b08      	ldr	r3, [sp, #32]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	dd02      	ble.n	800af68 <_dtoa_r+0xa10>
 800af62:	9b02      	ldr	r3, [sp, #8]
 800af64:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800af68:	9b00      	ldr	r3, [sp, #0]
 800af6a:	f883 8000 	strb.w	r8, [r3]
 800af6e:	e63f      	b.n	800abf0 <_dtoa_r+0x698>
 800af70:	4628      	mov	r0, r5
 800af72:	e7bb      	b.n	800aeec <_dtoa_r+0x994>
 800af74:	2201      	movs	r2, #1
 800af76:	e7e1      	b.n	800af3c <_dtoa_r+0x9e4>
 800af78:	9b08      	ldr	r3, [sp, #32]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	db04      	blt.n	800af88 <_dtoa_r+0xa30>
 800af7e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800af80:	430b      	orrs	r3, r1
 800af82:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800af84:	430b      	orrs	r3, r1
 800af86:	d120      	bne.n	800afca <_dtoa_r+0xa72>
 800af88:	2a00      	cmp	r2, #0
 800af8a:	dded      	ble.n	800af68 <_dtoa_r+0xa10>
 800af8c:	4649      	mov	r1, r9
 800af8e:	2201      	movs	r2, #1
 800af90:	4658      	mov	r0, fp
 800af92:	f001 f901 	bl	800c198 <__lshift>
 800af96:	4621      	mov	r1, r4
 800af98:	4681      	mov	r9, r0
 800af9a:	f001 f969 	bl	800c270 <__mcmp>
 800af9e:	2800      	cmp	r0, #0
 800afa0:	dc03      	bgt.n	800afaa <_dtoa_r+0xa52>
 800afa2:	d1e1      	bne.n	800af68 <_dtoa_r+0xa10>
 800afa4:	f018 0f01 	tst.w	r8, #1
 800afa8:	d0de      	beq.n	800af68 <_dtoa_r+0xa10>
 800afaa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800afae:	d1d8      	bne.n	800af62 <_dtoa_r+0xa0a>
 800afb0:	9a00      	ldr	r2, [sp, #0]
 800afb2:	2339      	movs	r3, #57	@ 0x39
 800afb4:	7013      	strb	r3, [r2, #0]
 800afb6:	4633      	mov	r3, r6
 800afb8:	461e      	mov	r6, r3
 800afba:	3b01      	subs	r3, #1
 800afbc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800afc0:	2a39      	cmp	r2, #57	@ 0x39
 800afc2:	d052      	beq.n	800b06a <_dtoa_r+0xb12>
 800afc4:	3201      	adds	r2, #1
 800afc6:	701a      	strb	r2, [r3, #0]
 800afc8:	e612      	b.n	800abf0 <_dtoa_r+0x698>
 800afca:	2a00      	cmp	r2, #0
 800afcc:	dd07      	ble.n	800afde <_dtoa_r+0xa86>
 800afce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800afd2:	d0ed      	beq.n	800afb0 <_dtoa_r+0xa58>
 800afd4:	9a00      	ldr	r2, [sp, #0]
 800afd6:	f108 0301 	add.w	r3, r8, #1
 800afda:	7013      	strb	r3, [r2, #0]
 800afdc:	e608      	b.n	800abf0 <_dtoa_r+0x698>
 800afde:	9b07      	ldr	r3, [sp, #28]
 800afe0:	9a07      	ldr	r2, [sp, #28]
 800afe2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800afe6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800afe8:	4293      	cmp	r3, r2
 800afea:	d028      	beq.n	800b03e <_dtoa_r+0xae6>
 800afec:	4649      	mov	r1, r9
 800afee:	2300      	movs	r3, #0
 800aff0:	220a      	movs	r2, #10
 800aff2:	4658      	mov	r0, fp
 800aff4:	f000 feda 	bl	800bdac <__multadd>
 800aff8:	42af      	cmp	r7, r5
 800affa:	4681      	mov	r9, r0
 800affc:	f04f 0300 	mov.w	r3, #0
 800b000:	f04f 020a 	mov.w	r2, #10
 800b004:	4639      	mov	r1, r7
 800b006:	4658      	mov	r0, fp
 800b008:	d107      	bne.n	800b01a <_dtoa_r+0xac2>
 800b00a:	f000 fecf 	bl	800bdac <__multadd>
 800b00e:	4607      	mov	r7, r0
 800b010:	4605      	mov	r5, r0
 800b012:	9b07      	ldr	r3, [sp, #28]
 800b014:	3301      	adds	r3, #1
 800b016:	9307      	str	r3, [sp, #28]
 800b018:	e774      	b.n	800af04 <_dtoa_r+0x9ac>
 800b01a:	f000 fec7 	bl	800bdac <__multadd>
 800b01e:	4629      	mov	r1, r5
 800b020:	4607      	mov	r7, r0
 800b022:	2300      	movs	r3, #0
 800b024:	220a      	movs	r2, #10
 800b026:	4658      	mov	r0, fp
 800b028:	f000 fec0 	bl	800bdac <__multadd>
 800b02c:	4605      	mov	r5, r0
 800b02e:	e7f0      	b.n	800b012 <_dtoa_r+0xaba>
 800b030:	9b00      	ldr	r3, [sp, #0]
 800b032:	2b00      	cmp	r3, #0
 800b034:	bfcc      	ite	gt
 800b036:	461e      	movgt	r6, r3
 800b038:	2601      	movle	r6, #1
 800b03a:	4456      	add	r6, sl
 800b03c:	2700      	movs	r7, #0
 800b03e:	4649      	mov	r1, r9
 800b040:	2201      	movs	r2, #1
 800b042:	4658      	mov	r0, fp
 800b044:	f001 f8a8 	bl	800c198 <__lshift>
 800b048:	4621      	mov	r1, r4
 800b04a:	4681      	mov	r9, r0
 800b04c:	f001 f910 	bl	800c270 <__mcmp>
 800b050:	2800      	cmp	r0, #0
 800b052:	dcb0      	bgt.n	800afb6 <_dtoa_r+0xa5e>
 800b054:	d102      	bne.n	800b05c <_dtoa_r+0xb04>
 800b056:	f018 0f01 	tst.w	r8, #1
 800b05a:	d1ac      	bne.n	800afb6 <_dtoa_r+0xa5e>
 800b05c:	4633      	mov	r3, r6
 800b05e:	461e      	mov	r6, r3
 800b060:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b064:	2a30      	cmp	r2, #48	@ 0x30
 800b066:	d0fa      	beq.n	800b05e <_dtoa_r+0xb06>
 800b068:	e5c2      	b.n	800abf0 <_dtoa_r+0x698>
 800b06a:	459a      	cmp	sl, r3
 800b06c:	d1a4      	bne.n	800afb8 <_dtoa_r+0xa60>
 800b06e:	9b04      	ldr	r3, [sp, #16]
 800b070:	3301      	adds	r3, #1
 800b072:	9304      	str	r3, [sp, #16]
 800b074:	2331      	movs	r3, #49	@ 0x31
 800b076:	f88a 3000 	strb.w	r3, [sl]
 800b07a:	e5b9      	b.n	800abf0 <_dtoa_r+0x698>
 800b07c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b07e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b0dc <_dtoa_r+0xb84>
 800b082:	b11b      	cbz	r3, 800b08c <_dtoa_r+0xb34>
 800b084:	f10a 0308 	add.w	r3, sl, #8
 800b088:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b08a:	6013      	str	r3, [r2, #0]
 800b08c:	4650      	mov	r0, sl
 800b08e:	b019      	add	sp, #100	@ 0x64
 800b090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b094:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b096:	2b01      	cmp	r3, #1
 800b098:	f77f ae37 	ble.w	800ad0a <_dtoa_r+0x7b2>
 800b09c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b09e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b0a0:	2001      	movs	r0, #1
 800b0a2:	e655      	b.n	800ad50 <_dtoa_r+0x7f8>
 800b0a4:	9b00      	ldr	r3, [sp, #0]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	f77f aed6 	ble.w	800ae58 <_dtoa_r+0x900>
 800b0ac:	4656      	mov	r6, sl
 800b0ae:	4621      	mov	r1, r4
 800b0b0:	4648      	mov	r0, r9
 800b0b2:	f7ff f9c7 	bl	800a444 <quorem>
 800b0b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b0ba:	f806 8b01 	strb.w	r8, [r6], #1
 800b0be:	9b00      	ldr	r3, [sp, #0]
 800b0c0:	eba6 020a 	sub.w	r2, r6, sl
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	ddb3      	ble.n	800b030 <_dtoa_r+0xad8>
 800b0c8:	4649      	mov	r1, r9
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	220a      	movs	r2, #10
 800b0ce:	4658      	mov	r0, fp
 800b0d0:	f000 fe6c 	bl	800bdac <__multadd>
 800b0d4:	4681      	mov	r9, r0
 800b0d6:	e7ea      	b.n	800b0ae <_dtoa_r+0xb56>
 800b0d8:	0800dcf5 	.word	0x0800dcf5
 800b0dc:	0800dc79 	.word	0x0800dc79

0800b0e0 <rshift>:
 800b0e0:	6903      	ldr	r3, [r0, #16]
 800b0e2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b0e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b0ea:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b0ee:	f100 0414 	add.w	r4, r0, #20
 800b0f2:	dd45      	ble.n	800b180 <rshift+0xa0>
 800b0f4:	f011 011f 	ands.w	r1, r1, #31
 800b0f8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b0fc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b100:	d10c      	bne.n	800b11c <rshift+0x3c>
 800b102:	f100 0710 	add.w	r7, r0, #16
 800b106:	4629      	mov	r1, r5
 800b108:	42b1      	cmp	r1, r6
 800b10a:	d334      	bcc.n	800b176 <rshift+0x96>
 800b10c:	1a9b      	subs	r3, r3, r2
 800b10e:	009b      	lsls	r3, r3, #2
 800b110:	1eea      	subs	r2, r5, #3
 800b112:	4296      	cmp	r6, r2
 800b114:	bf38      	it	cc
 800b116:	2300      	movcc	r3, #0
 800b118:	4423      	add	r3, r4
 800b11a:	e015      	b.n	800b148 <rshift+0x68>
 800b11c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b120:	f1c1 0820 	rsb	r8, r1, #32
 800b124:	40cf      	lsrs	r7, r1
 800b126:	f105 0e04 	add.w	lr, r5, #4
 800b12a:	46a1      	mov	r9, r4
 800b12c:	4576      	cmp	r6, lr
 800b12e:	46f4      	mov	ip, lr
 800b130:	d815      	bhi.n	800b15e <rshift+0x7e>
 800b132:	1a9a      	subs	r2, r3, r2
 800b134:	0092      	lsls	r2, r2, #2
 800b136:	3a04      	subs	r2, #4
 800b138:	3501      	adds	r5, #1
 800b13a:	42ae      	cmp	r6, r5
 800b13c:	bf38      	it	cc
 800b13e:	2200      	movcc	r2, #0
 800b140:	18a3      	adds	r3, r4, r2
 800b142:	50a7      	str	r7, [r4, r2]
 800b144:	b107      	cbz	r7, 800b148 <rshift+0x68>
 800b146:	3304      	adds	r3, #4
 800b148:	1b1a      	subs	r2, r3, r4
 800b14a:	42a3      	cmp	r3, r4
 800b14c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b150:	bf08      	it	eq
 800b152:	2300      	moveq	r3, #0
 800b154:	6102      	str	r2, [r0, #16]
 800b156:	bf08      	it	eq
 800b158:	6143      	streq	r3, [r0, #20]
 800b15a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b15e:	f8dc c000 	ldr.w	ip, [ip]
 800b162:	fa0c fc08 	lsl.w	ip, ip, r8
 800b166:	ea4c 0707 	orr.w	r7, ip, r7
 800b16a:	f849 7b04 	str.w	r7, [r9], #4
 800b16e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b172:	40cf      	lsrs	r7, r1
 800b174:	e7da      	b.n	800b12c <rshift+0x4c>
 800b176:	f851 cb04 	ldr.w	ip, [r1], #4
 800b17a:	f847 cf04 	str.w	ip, [r7, #4]!
 800b17e:	e7c3      	b.n	800b108 <rshift+0x28>
 800b180:	4623      	mov	r3, r4
 800b182:	e7e1      	b.n	800b148 <rshift+0x68>

0800b184 <__hexdig_fun>:
 800b184:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b188:	2b09      	cmp	r3, #9
 800b18a:	d802      	bhi.n	800b192 <__hexdig_fun+0xe>
 800b18c:	3820      	subs	r0, #32
 800b18e:	b2c0      	uxtb	r0, r0
 800b190:	4770      	bx	lr
 800b192:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b196:	2b05      	cmp	r3, #5
 800b198:	d801      	bhi.n	800b19e <__hexdig_fun+0x1a>
 800b19a:	3847      	subs	r0, #71	@ 0x47
 800b19c:	e7f7      	b.n	800b18e <__hexdig_fun+0xa>
 800b19e:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b1a2:	2b05      	cmp	r3, #5
 800b1a4:	d801      	bhi.n	800b1aa <__hexdig_fun+0x26>
 800b1a6:	3827      	subs	r0, #39	@ 0x27
 800b1a8:	e7f1      	b.n	800b18e <__hexdig_fun+0xa>
 800b1aa:	2000      	movs	r0, #0
 800b1ac:	4770      	bx	lr
	...

0800b1b0 <__gethex>:
 800b1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1b4:	b085      	sub	sp, #20
 800b1b6:	468a      	mov	sl, r1
 800b1b8:	9302      	str	r3, [sp, #8]
 800b1ba:	680b      	ldr	r3, [r1, #0]
 800b1bc:	9001      	str	r0, [sp, #4]
 800b1be:	4690      	mov	r8, r2
 800b1c0:	1c9c      	adds	r4, r3, #2
 800b1c2:	46a1      	mov	r9, r4
 800b1c4:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b1c8:	2830      	cmp	r0, #48	@ 0x30
 800b1ca:	d0fa      	beq.n	800b1c2 <__gethex+0x12>
 800b1cc:	eba9 0303 	sub.w	r3, r9, r3
 800b1d0:	f1a3 0b02 	sub.w	fp, r3, #2
 800b1d4:	f7ff ffd6 	bl	800b184 <__hexdig_fun>
 800b1d8:	4605      	mov	r5, r0
 800b1da:	2800      	cmp	r0, #0
 800b1dc:	d168      	bne.n	800b2b0 <__gethex+0x100>
 800b1de:	49a0      	ldr	r1, [pc, #640]	@ (800b460 <__gethex+0x2b0>)
 800b1e0:	2201      	movs	r2, #1
 800b1e2:	4648      	mov	r0, r9
 800b1e4:	f7ff f8b0 	bl	800a348 <strncmp>
 800b1e8:	4607      	mov	r7, r0
 800b1ea:	2800      	cmp	r0, #0
 800b1ec:	d167      	bne.n	800b2be <__gethex+0x10e>
 800b1ee:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b1f2:	4626      	mov	r6, r4
 800b1f4:	f7ff ffc6 	bl	800b184 <__hexdig_fun>
 800b1f8:	2800      	cmp	r0, #0
 800b1fa:	d062      	beq.n	800b2c2 <__gethex+0x112>
 800b1fc:	4623      	mov	r3, r4
 800b1fe:	7818      	ldrb	r0, [r3, #0]
 800b200:	2830      	cmp	r0, #48	@ 0x30
 800b202:	4699      	mov	r9, r3
 800b204:	f103 0301 	add.w	r3, r3, #1
 800b208:	d0f9      	beq.n	800b1fe <__gethex+0x4e>
 800b20a:	f7ff ffbb 	bl	800b184 <__hexdig_fun>
 800b20e:	fab0 f580 	clz	r5, r0
 800b212:	096d      	lsrs	r5, r5, #5
 800b214:	f04f 0b01 	mov.w	fp, #1
 800b218:	464a      	mov	r2, r9
 800b21a:	4616      	mov	r6, r2
 800b21c:	3201      	adds	r2, #1
 800b21e:	7830      	ldrb	r0, [r6, #0]
 800b220:	f7ff ffb0 	bl	800b184 <__hexdig_fun>
 800b224:	2800      	cmp	r0, #0
 800b226:	d1f8      	bne.n	800b21a <__gethex+0x6a>
 800b228:	498d      	ldr	r1, [pc, #564]	@ (800b460 <__gethex+0x2b0>)
 800b22a:	2201      	movs	r2, #1
 800b22c:	4630      	mov	r0, r6
 800b22e:	f7ff f88b 	bl	800a348 <strncmp>
 800b232:	2800      	cmp	r0, #0
 800b234:	d13f      	bne.n	800b2b6 <__gethex+0x106>
 800b236:	b944      	cbnz	r4, 800b24a <__gethex+0x9a>
 800b238:	1c74      	adds	r4, r6, #1
 800b23a:	4622      	mov	r2, r4
 800b23c:	4616      	mov	r6, r2
 800b23e:	3201      	adds	r2, #1
 800b240:	7830      	ldrb	r0, [r6, #0]
 800b242:	f7ff ff9f 	bl	800b184 <__hexdig_fun>
 800b246:	2800      	cmp	r0, #0
 800b248:	d1f8      	bne.n	800b23c <__gethex+0x8c>
 800b24a:	1ba4      	subs	r4, r4, r6
 800b24c:	00a7      	lsls	r7, r4, #2
 800b24e:	7833      	ldrb	r3, [r6, #0]
 800b250:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b254:	2b50      	cmp	r3, #80	@ 0x50
 800b256:	d13e      	bne.n	800b2d6 <__gethex+0x126>
 800b258:	7873      	ldrb	r3, [r6, #1]
 800b25a:	2b2b      	cmp	r3, #43	@ 0x2b
 800b25c:	d033      	beq.n	800b2c6 <__gethex+0x116>
 800b25e:	2b2d      	cmp	r3, #45	@ 0x2d
 800b260:	d034      	beq.n	800b2cc <__gethex+0x11c>
 800b262:	1c71      	adds	r1, r6, #1
 800b264:	2400      	movs	r4, #0
 800b266:	7808      	ldrb	r0, [r1, #0]
 800b268:	f7ff ff8c 	bl	800b184 <__hexdig_fun>
 800b26c:	1e43      	subs	r3, r0, #1
 800b26e:	b2db      	uxtb	r3, r3
 800b270:	2b18      	cmp	r3, #24
 800b272:	d830      	bhi.n	800b2d6 <__gethex+0x126>
 800b274:	f1a0 0210 	sub.w	r2, r0, #16
 800b278:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b27c:	f7ff ff82 	bl	800b184 <__hexdig_fun>
 800b280:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800b284:	fa5f fc8c 	uxtb.w	ip, ip
 800b288:	f1bc 0f18 	cmp.w	ip, #24
 800b28c:	f04f 030a 	mov.w	r3, #10
 800b290:	d91e      	bls.n	800b2d0 <__gethex+0x120>
 800b292:	b104      	cbz	r4, 800b296 <__gethex+0xe6>
 800b294:	4252      	negs	r2, r2
 800b296:	4417      	add	r7, r2
 800b298:	f8ca 1000 	str.w	r1, [sl]
 800b29c:	b1ed      	cbz	r5, 800b2da <__gethex+0x12a>
 800b29e:	f1bb 0f00 	cmp.w	fp, #0
 800b2a2:	bf0c      	ite	eq
 800b2a4:	2506      	moveq	r5, #6
 800b2a6:	2500      	movne	r5, #0
 800b2a8:	4628      	mov	r0, r5
 800b2aa:	b005      	add	sp, #20
 800b2ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2b0:	2500      	movs	r5, #0
 800b2b2:	462c      	mov	r4, r5
 800b2b4:	e7b0      	b.n	800b218 <__gethex+0x68>
 800b2b6:	2c00      	cmp	r4, #0
 800b2b8:	d1c7      	bne.n	800b24a <__gethex+0x9a>
 800b2ba:	4627      	mov	r7, r4
 800b2bc:	e7c7      	b.n	800b24e <__gethex+0x9e>
 800b2be:	464e      	mov	r6, r9
 800b2c0:	462f      	mov	r7, r5
 800b2c2:	2501      	movs	r5, #1
 800b2c4:	e7c3      	b.n	800b24e <__gethex+0x9e>
 800b2c6:	2400      	movs	r4, #0
 800b2c8:	1cb1      	adds	r1, r6, #2
 800b2ca:	e7cc      	b.n	800b266 <__gethex+0xb6>
 800b2cc:	2401      	movs	r4, #1
 800b2ce:	e7fb      	b.n	800b2c8 <__gethex+0x118>
 800b2d0:	fb03 0002 	mla	r0, r3, r2, r0
 800b2d4:	e7ce      	b.n	800b274 <__gethex+0xc4>
 800b2d6:	4631      	mov	r1, r6
 800b2d8:	e7de      	b.n	800b298 <__gethex+0xe8>
 800b2da:	eba6 0309 	sub.w	r3, r6, r9
 800b2de:	3b01      	subs	r3, #1
 800b2e0:	4629      	mov	r1, r5
 800b2e2:	2b07      	cmp	r3, #7
 800b2e4:	dc0a      	bgt.n	800b2fc <__gethex+0x14c>
 800b2e6:	9801      	ldr	r0, [sp, #4]
 800b2e8:	f000 fcfe 	bl	800bce8 <_Balloc>
 800b2ec:	4604      	mov	r4, r0
 800b2ee:	b940      	cbnz	r0, 800b302 <__gethex+0x152>
 800b2f0:	4b5c      	ldr	r3, [pc, #368]	@ (800b464 <__gethex+0x2b4>)
 800b2f2:	4602      	mov	r2, r0
 800b2f4:	21e4      	movs	r1, #228	@ 0xe4
 800b2f6:	485c      	ldr	r0, [pc, #368]	@ (800b468 <__gethex+0x2b8>)
 800b2f8:	f001 fa96 	bl	800c828 <__assert_func>
 800b2fc:	3101      	adds	r1, #1
 800b2fe:	105b      	asrs	r3, r3, #1
 800b300:	e7ef      	b.n	800b2e2 <__gethex+0x132>
 800b302:	f100 0a14 	add.w	sl, r0, #20
 800b306:	2300      	movs	r3, #0
 800b308:	4655      	mov	r5, sl
 800b30a:	469b      	mov	fp, r3
 800b30c:	45b1      	cmp	r9, r6
 800b30e:	d337      	bcc.n	800b380 <__gethex+0x1d0>
 800b310:	f845 bb04 	str.w	fp, [r5], #4
 800b314:	eba5 050a 	sub.w	r5, r5, sl
 800b318:	10ad      	asrs	r5, r5, #2
 800b31a:	6125      	str	r5, [r4, #16]
 800b31c:	4658      	mov	r0, fp
 800b31e:	f000 fdd5 	bl	800becc <__hi0bits>
 800b322:	016d      	lsls	r5, r5, #5
 800b324:	f8d8 6000 	ldr.w	r6, [r8]
 800b328:	1a2d      	subs	r5, r5, r0
 800b32a:	42b5      	cmp	r5, r6
 800b32c:	dd54      	ble.n	800b3d8 <__gethex+0x228>
 800b32e:	1bad      	subs	r5, r5, r6
 800b330:	4629      	mov	r1, r5
 800b332:	4620      	mov	r0, r4
 800b334:	f001 f969 	bl	800c60a <__any_on>
 800b338:	4681      	mov	r9, r0
 800b33a:	b178      	cbz	r0, 800b35c <__gethex+0x1ac>
 800b33c:	1e6b      	subs	r3, r5, #1
 800b33e:	1159      	asrs	r1, r3, #5
 800b340:	f003 021f 	and.w	r2, r3, #31
 800b344:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b348:	f04f 0901 	mov.w	r9, #1
 800b34c:	fa09 f202 	lsl.w	r2, r9, r2
 800b350:	420a      	tst	r2, r1
 800b352:	d003      	beq.n	800b35c <__gethex+0x1ac>
 800b354:	454b      	cmp	r3, r9
 800b356:	dc36      	bgt.n	800b3c6 <__gethex+0x216>
 800b358:	f04f 0902 	mov.w	r9, #2
 800b35c:	4629      	mov	r1, r5
 800b35e:	4620      	mov	r0, r4
 800b360:	f7ff febe 	bl	800b0e0 <rshift>
 800b364:	442f      	add	r7, r5
 800b366:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b36a:	42bb      	cmp	r3, r7
 800b36c:	da42      	bge.n	800b3f4 <__gethex+0x244>
 800b36e:	9801      	ldr	r0, [sp, #4]
 800b370:	4621      	mov	r1, r4
 800b372:	f000 fcf9 	bl	800bd68 <_Bfree>
 800b376:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b378:	2300      	movs	r3, #0
 800b37a:	6013      	str	r3, [r2, #0]
 800b37c:	25a3      	movs	r5, #163	@ 0xa3
 800b37e:	e793      	b.n	800b2a8 <__gethex+0xf8>
 800b380:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b384:	2a2e      	cmp	r2, #46	@ 0x2e
 800b386:	d012      	beq.n	800b3ae <__gethex+0x1fe>
 800b388:	2b20      	cmp	r3, #32
 800b38a:	d104      	bne.n	800b396 <__gethex+0x1e6>
 800b38c:	f845 bb04 	str.w	fp, [r5], #4
 800b390:	f04f 0b00 	mov.w	fp, #0
 800b394:	465b      	mov	r3, fp
 800b396:	7830      	ldrb	r0, [r6, #0]
 800b398:	9303      	str	r3, [sp, #12]
 800b39a:	f7ff fef3 	bl	800b184 <__hexdig_fun>
 800b39e:	9b03      	ldr	r3, [sp, #12]
 800b3a0:	f000 000f 	and.w	r0, r0, #15
 800b3a4:	4098      	lsls	r0, r3
 800b3a6:	ea4b 0b00 	orr.w	fp, fp, r0
 800b3aa:	3304      	adds	r3, #4
 800b3ac:	e7ae      	b.n	800b30c <__gethex+0x15c>
 800b3ae:	45b1      	cmp	r9, r6
 800b3b0:	d8ea      	bhi.n	800b388 <__gethex+0x1d8>
 800b3b2:	492b      	ldr	r1, [pc, #172]	@ (800b460 <__gethex+0x2b0>)
 800b3b4:	9303      	str	r3, [sp, #12]
 800b3b6:	2201      	movs	r2, #1
 800b3b8:	4630      	mov	r0, r6
 800b3ba:	f7fe ffc5 	bl	800a348 <strncmp>
 800b3be:	9b03      	ldr	r3, [sp, #12]
 800b3c0:	2800      	cmp	r0, #0
 800b3c2:	d1e1      	bne.n	800b388 <__gethex+0x1d8>
 800b3c4:	e7a2      	b.n	800b30c <__gethex+0x15c>
 800b3c6:	1ea9      	subs	r1, r5, #2
 800b3c8:	4620      	mov	r0, r4
 800b3ca:	f001 f91e 	bl	800c60a <__any_on>
 800b3ce:	2800      	cmp	r0, #0
 800b3d0:	d0c2      	beq.n	800b358 <__gethex+0x1a8>
 800b3d2:	f04f 0903 	mov.w	r9, #3
 800b3d6:	e7c1      	b.n	800b35c <__gethex+0x1ac>
 800b3d8:	da09      	bge.n	800b3ee <__gethex+0x23e>
 800b3da:	1b75      	subs	r5, r6, r5
 800b3dc:	4621      	mov	r1, r4
 800b3de:	9801      	ldr	r0, [sp, #4]
 800b3e0:	462a      	mov	r2, r5
 800b3e2:	f000 fed9 	bl	800c198 <__lshift>
 800b3e6:	1b7f      	subs	r7, r7, r5
 800b3e8:	4604      	mov	r4, r0
 800b3ea:	f100 0a14 	add.w	sl, r0, #20
 800b3ee:	f04f 0900 	mov.w	r9, #0
 800b3f2:	e7b8      	b.n	800b366 <__gethex+0x1b6>
 800b3f4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b3f8:	42bd      	cmp	r5, r7
 800b3fa:	dd6f      	ble.n	800b4dc <__gethex+0x32c>
 800b3fc:	1bed      	subs	r5, r5, r7
 800b3fe:	42ae      	cmp	r6, r5
 800b400:	dc34      	bgt.n	800b46c <__gethex+0x2bc>
 800b402:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b406:	2b02      	cmp	r3, #2
 800b408:	d022      	beq.n	800b450 <__gethex+0x2a0>
 800b40a:	2b03      	cmp	r3, #3
 800b40c:	d024      	beq.n	800b458 <__gethex+0x2a8>
 800b40e:	2b01      	cmp	r3, #1
 800b410:	d115      	bne.n	800b43e <__gethex+0x28e>
 800b412:	42ae      	cmp	r6, r5
 800b414:	d113      	bne.n	800b43e <__gethex+0x28e>
 800b416:	2e01      	cmp	r6, #1
 800b418:	d10b      	bne.n	800b432 <__gethex+0x282>
 800b41a:	9a02      	ldr	r2, [sp, #8]
 800b41c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b420:	6013      	str	r3, [r2, #0]
 800b422:	2301      	movs	r3, #1
 800b424:	6123      	str	r3, [r4, #16]
 800b426:	f8ca 3000 	str.w	r3, [sl]
 800b42a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b42c:	2562      	movs	r5, #98	@ 0x62
 800b42e:	601c      	str	r4, [r3, #0]
 800b430:	e73a      	b.n	800b2a8 <__gethex+0xf8>
 800b432:	1e71      	subs	r1, r6, #1
 800b434:	4620      	mov	r0, r4
 800b436:	f001 f8e8 	bl	800c60a <__any_on>
 800b43a:	2800      	cmp	r0, #0
 800b43c:	d1ed      	bne.n	800b41a <__gethex+0x26a>
 800b43e:	9801      	ldr	r0, [sp, #4]
 800b440:	4621      	mov	r1, r4
 800b442:	f000 fc91 	bl	800bd68 <_Bfree>
 800b446:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b448:	2300      	movs	r3, #0
 800b44a:	6013      	str	r3, [r2, #0]
 800b44c:	2550      	movs	r5, #80	@ 0x50
 800b44e:	e72b      	b.n	800b2a8 <__gethex+0xf8>
 800b450:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b452:	2b00      	cmp	r3, #0
 800b454:	d1f3      	bne.n	800b43e <__gethex+0x28e>
 800b456:	e7e0      	b.n	800b41a <__gethex+0x26a>
 800b458:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d1dd      	bne.n	800b41a <__gethex+0x26a>
 800b45e:	e7ee      	b.n	800b43e <__gethex+0x28e>
 800b460:	0800db19 	.word	0x0800db19
 800b464:	0800dcf5 	.word	0x0800dcf5
 800b468:	0800dd06 	.word	0x0800dd06
 800b46c:	1e6f      	subs	r7, r5, #1
 800b46e:	f1b9 0f00 	cmp.w	r9, #0
 800b472:	d130      	bne.n	800b4d6 <__gethex+0x326>
 800b474:	b127      	cbz	r7, 800b480 <__gethex+0x2d0>
 800b476:	4639      	mov	r1, r7
 800b478:	4620      	mov	r0, r4
 800b47a:	f001 f8c6 	bl	800c60a <__any_on>
 800b47e:	4681      	mov	r9, r0
 800b480:	117a      	asrs	r2, r7, #5
 800b482:	2301      	movs	r3, #1
 800b484:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b488:	f007 071f 	and.w	r7, r7, #31
 800b48c:	40bb      	lsls	r3, r7
 800b48e:	4213      	tst	r3, r2
 800b490:	4629      	mov	r1, r5
 800b492:	4620      	mov	r0, r4
 800b494:	bf18      	it	ne
 800b496:	f049 0902 	orrne.w	r9, r9, #2
 800b49a:	f7ff fe21 	bl	800b0e0 <rshift>
 800b49e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b4a2:	1b76      	subs	r6, r6, r5
 800b4a4:	2502      	movs	r5, #2
 800b4a6:	f1b9 0f00 	cmp.w	r9, #0
 800b4aa:	d047      	beq.n	800b53c <__gethex+0x38c>
 800b4ac:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b4b0:	2b02      	cmp	r3, #2
 800b4b2:	d015      	beq.n	800b4e0 <__gethex+0x330>
 800b4b4:	2b03      	cmp	r3, #3
 800b4b6:	d017      	beq.n	800b4e8 <__gethex+0x338>
 800b4b8:	2b01      	cmp	r3, #1
 800b4ba:	d109      	bne.n	800b4d0 <__gethex+0x320>
 800b4bc:	f019 0f02 	tst.w	r9, #2
 800b4c0:	d006      	beq.n	800b4d0 <__gethex+0x320>
 800b4c2:	f8da 3000 	ldr.w	r3, [sl]
 800b4c6:	ea49 0903 	orr.w	r9, r9, r3
 800b4ca:	f019 0f01 	tst.w	r9, #1
 800b4ce:	d10e      	bne.n	800b4ee <__gethex+0x33e>
 800b4d0:	f045 0510 	orr.w	r5, r5, #16
 800b4d4:	e032      	b.n	800b53c <__gethex+0x38c>
 800b4d6:	f04f 0901 	mov.w	r9, #1
 800b4da:	e7d1      	b.n	800b480 <__gethex+0x2d0>
 800b4dc:	2501      	movs	r5, #1
 800b4de:	e7e2      	b.n	800b4a6 <__gethex+0x2f6>
 800b4e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4e2:	f1c3 0301 	rsb	r3, r3, #1
 800b4e6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b4e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d0f0      	beq.n	800b4d0 <__gethex+0x320>
 800b4ee:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b4f2:	f104 0314 	add.w	r3, r4, #20
 800b4f6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b4fa:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b4fe:	f04f 0c00 	mov.w	ip, #0
 800b502:	4618      	mov	r0, r3
 800b504:	f853 2b04 	ldr.w	r2, [r3], #4
 800b508:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800b50c:	d01b      	beq.n	800b546 <__gethex+0x396>
 800b50e:	3201      	adds	r2, #1
 800b510:	6002      	str	r2, [r0, #0]
 800b512:	2d02      	cmp	r5, #2
 800b514:	f104 0314 	add.w	r3, r4, #20
 800b518:	d13c      	bne.n	800b594 <__gethex+0x3e4>
 800b51a:	f8d8 2000 	ldr.w	r2, [r8]
 800b51e:	3a01      	subs	r2, #1
 800b520:	42b2      	cmp	r2, r6
 800b522:	d109      	bne.n	800b538 <__gethex+0x388>
 800b524:	1171      	asrs	r1, r6, #5
 800b526:	2201      	movs	r2, #1
 800b528:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b52c:	f006 061f 	and.w	r6, r6, #31
 800b530:	fa02 f606 	lsl.w	r6, r2, r6
 800b534:	421e      	tst	r6, r3
 800b536:	d13a      	bne.n	800b5ae <__gethex+0x3fe>
 800b538:	f045 0520 	orr.w	r5, r5, #32
 800b53c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b53e:	601c      	str	r4, [r3, #0]
 800b540:	9b02      	ldr	r3, [sp, #8]
 800b542:	601f      	str	r7, [r3, #0]
 800b544:	e6b0      	b.n	800b2a8 <__gethex+0xf8>
 800b546:	4299      	cmp	r1, r3
 800b548:	f843 cc04 	str.w	ip, [r3, #-4]
 800b54c:	d8d9      	bhi.n	800b502 <__gethex+0x352>
 800b54e:	68a3      	ldr	r3, [r4, #8]
 800b550:	459b      	cmp	fp, r3
 800b552:	db17      	blt.n	800b584 <__gethex+0x3d4>
 800b554:	6861      	ldr	r1, [r4, #4]
 800b556:	9801      	ldr	r0, [sp, #4]
 800b558:	3101      	adds	r1, #1
 800b55a:	f000 fbc5 	bl	800bce8 <_Balloc>
 800b55e:	4681      	mov	r9, r0
 800b560:	b918      	cbnz	r0, 800b56a <__gethex+0x3ba>
 800b562:	4b1a      	ldr	r3, [pc, #104]	@ (800b5cc <__gethex+0x41c>)
 800b564:	4602      	mov	r2, r0
 800b566:	2184      	movs	r1, #132	@ 0x84
 800b568:	e6c5      	b.n	800b2f6 <__gethex+0x146>
 800b56a:	6922      	ldr	r2, [r4, #16]
 800b56c:	3202      	adds	r2, #2
 800b56e:	f104 010c 	add.w	r1, r4, #12
 800b572:	0092      	lsls	r2, r2, #2
 800b574:	300c      	adds	r0, #12
 800b576:	f7fe ff48 	bl	800a40a <memcpy>
 800b57a:	4621      	mov	r1, r4
 800b57c:	9801      	ldr	r0, [sp, #4]
 800b57e:	f000 fbf3 	bl	800bd68 <_Bfree>
 800b582:	464c      	mov	r4, r9
 800b584:	6923      	ldr	r3, [r4, #16]
 800b586:	1c5a      	adds	r2, r3, #1
 800b588:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b58c:	6122      	str	r2, [r4, #16]
 800b58e:	2201      	movs	r2, #1
 800b590:	615a      	str	r2, [r3, #20]
 800b592:	e7be      	b.n	800b512 <__gethex+0x362>
 800b594:	6922      	ldr	r2, [r4, #16]
 800b596:	455a      	cmp	r2, fp
 800b598:	dd0b      	ble.n	800b5b2 <__gethex+0x402>
 800b59a:	2101      	movs	r1, #1
 800b59c:	4620      	mov	r0, r4
 800b59e:	f7ff fd9f 	bl	800b0e0 <rshift>
 800b5a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b5a6:	3701      	adds	r7, #1
 800b5a8:	42bb      	cmp	r3, r7
 800b5aa:	f6ff aee0 	blt.w	800b36e <__gethex+0x1be>
 800b5ae:	2501      	movs	r5, #1
 800b5b0:	e7c2      	b.n	800b538 <__gethex+0x388>
 800b5b2:	f016 061f 	ands.w	r6, r6, #31
 800b5b6:	d0fa      	beq.n	800b5ae <__gethex+0x3fe>
 800b5b8:	4453      	add	r3, sl
 800b5ba:	f1c6 0620 	rsb	r6, r6, #32
 800b5be:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b5c2:	f000 fc83 	bl	800becc <__hi0bits>
 800b5c6:	42b0      	cmp	r0, r6
 800b5c8:	dbe7      	blt.n	800b59a <__gethex+0x3ea>
 800b5ca:	e7f0      	b.n	800b5ae <__gethex+0x3fe>
 800b5cc:	0800dcf5 	.word	0x0800dcf5

0800b5d0 <L_shift>:
 800b5d0:	f1c2 0208 	rsb	r2, r2, #8
 800b5d4:	0092      	lsls	r2, r2, #2
 800b5d6:	b570      	push	{r4, r5, r6, lr}
 800b5d8:	f1c2 0620 	rsb	r6, r2, #32
 800b5dc:	6843      	ldr	r3, [r0, #4]
 800b5de:	6804      	ldr	r4, [r0, #0]
 800b5e0:	fa03 f506 	lsl.w	r5, r3, r6
 800b5e4:	432c      	orrs	r4, r5
 800b5e6:	40d3      	lsrs	r3, r2
 800b5e8:	6004      	str	r4, [r0, #0]
 800b5ea:	f840 3f04 	str.w	r3, [r0, #4]!
 800b5ee:	4288      	cmp	r0, r1
 800b5f0:	d3f4      	bcc.n	800b5dc <L_shift+0xc>
 800b5f2:	bd70      	pop	{r4, r5, r6, pc}

0800b5f4 <__match>:
 800b5f4:	b530      	push	{r4, r5, lr}
 800b5f6:	6803      	ldr	r3, [r0, #0]
 800b5f8:	3301      	adds	r3, #1
 800b5fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5fe:	b914      	cbnz	r4, 800b606 <__match+0x12>
 800b600:	6003      	str	r3, [r0, #0]
 800b602:	2001      	movs	r0, #1
 800b604:	bd30      	pop	{r4, r5, pc}
 800b606:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b60a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b60e:	2d19      	cmp	r5, #25
 800b610:	bf98      	it	ls
 800b612:	3220      	addls	r2, #32
 800b614:	42a2      	cmp	r2, r4
 800b616:	d0f0      	beq.n	800b5fa <__match+0x6>
 800b618:	2000      	movs	r0, #0
 800b61a:	e7f3      	b.n	800b604 <__match+0x10>

0800b61c <__hexnan>:
 800b61c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b620:	680b      	ldr	r3, [r1, #0]
 800b622:	6801      	ldr	r1, [r0, #0]
 800b624:	115e      	asrs	r6, r3, #5
 800b626:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b62a:	f013 031f 	ands.w	r3, r3, #31
 800b62e:	b087      	sub	sp, #28
 800b630:	bf18      	it	ne
 800b632:	3604      	addne	r6, #4
 800b634:	2500      	movs	r5, #0
 800b636:	1f37      	subs	r7, r6, #4
 800b638:	4682      	mov	sl, r0
 800b63a:	4690      	mov	r8, r2
 800b63c:	9301      	str	r3, [sp, #4]
 800b63e:	f846 5c04 	str.w	r5, [r6, #-4]
 800b642:	46b9      	mov	r9, r7
 800b644:	463c      	mov	r4, r7
 800b646:	9502      	str	r5, [sp, #8]
 800b648:	46ab      	mov	fp, r5
 800b64a:	784a      	ldrb	r2, [r1, #1]
 800b64c:	1c4b      	adds	r3, r1, #1
 800b64e:	9303      	str	r3, [sp, #12]
 800b650:	b342      	cbz	r2, 800b6a4 <__hexnan+0x88>
 800b652:	4610      	mov	r0, r2
 800b654:	9105      	str	r1, [sp, #20]
 800b656:	9204      	str	r2, [sp, #16]
 800b658:	f7ff fd94 	bl	800b184 <__hexdig_fun>
 800b65c:	2800      	cmp	r0, #0
 800b65e:	d151      	bne.n	800b704 <__hexnan+0xe8>
 800b660:	9a04      	ldr	r2, [sp, #16]
 800b662:	9905      	ldr	r1, [sp, #20]
 800b664:	2a20      	cmp	r2, #32
 800b666:	d818      	bhi.n	800b69a <__hexnan+0x7e>
 800b668:	9b02      	ldr	r3, [sp, #8]
 800b66a:	459b      	cmp	fp, r3
 800b66c:	dd13      	ble.n	800b696 <__hexnan+0x7a>
 800b66e:	454c      	cmp	r4, r9
 800b670:	d206      	bcs.n	800b680 <__hexnan+0x64>
 800b672:	2d07      	cmp	r5, #7
 800b674:	dc04      	bgt.n	800b680 <__hexnan+0x64>
 800b676:	462a      	mov	r2, r5
 800b678:	4649      	mov	r1, r9
 800b67a:	4620      	mov	r0, r4
 800b67c:	f7ff ffa8 	bl	800b5d0 <L_shift>
 800b680:	4544      	cmp	r4, r8
 800b682:	d952      	bls.n	800b72a <__hexnan+0x10e>
 800b684:	2300      	movs	r3, #0
 800b686:	f1a4 0904 	sub.w	r9, r4, #4
 800b68a:	f844 3c04 	str.w	r3, [r4, #-4]
 800b68e:	f8cd b008 	str.w	fp, [sp, #8]
 800b692:	464c      	mov	r4, r9
 800b694:	461d      	mov	r5, r3
 800b696:	9903      	ldr	r1, [sp, #12]
 800b698:	e7d7      	b.n	800b64a <__hexnan+0x2e>
 800b69a:	2a29      	cmp	r2, #41	@ 0x29
 800b69c:	d157      	bne.n	800b74e <__hexnan+0x132>
 800b69e:	3102      	adds	r1, #2
 800b6a0:	f8ca 1000 	str.w	r1, [sl]
 800b6a4:	f1bb 0f00 	cmp.w	fp, #0
 800b6a8:	d051      	beq.n	800b74e <__hexnan+0x132>
 800b6aa:	454c      	cmp	r4, r9
 800b6ac:	d206      	bcs.n	800b6bc <__hexnan+0xa0>
 800b6ae:	2d07      	cmp	r5, #7
 800b6b0:	dc04      	bgt.n	800b6bc <__hexnan+0xa0>
 800b6b2:	462a      	mov	r2, r5
 800b6b4:	4649      	mov	r1, r9
 800b6b6:	4620      	mov	r0, r4
 800b6b8:	f7ff ff8a 	bl	800b5d0 <L_shift>
 800b6bc:	4544      	cmp	r4, r8
 800b6be:	d936      	bls.n	800b72e <__hexnan+0x112>
 800b6c0:	f1a8 0204 	sub.w	r2, r8, #4
 800b6c4:	4623      	mov	r3, r4
 800b6c6:	f853 1b04 	ldr.w	r1, [r3], #4
 800b6ca:	f842 1f04 	str.w	r1, [r2, #4]!
 800b6ce:	429f      	cmp	r7, r3
 800b6d0:	d2f9      	bcs.n	800b6c6 <__hexnan+0xaa>
 800b6d2:	1b3b      	subs	r3, r7, r4
 800b6d4:	f023 0303 	bic.w	r3, r3, #3
 800b6d8:	3304      	adds	r3, #4
 800b6da:	3401      	adds	r4, #1
 800b6dc:	3e03      	subs	r6, #3
 800b6de:	42b4      	cmp	r4, r6
 800b6e0:	bf88      	it	hi
 800b6e2:	2304      	movhi	r3, #4
 800b6e4:	4443      	add	r3, r8
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	f843 2b04 	str.w	r2, [r3], #4
 800b6ec:	429f      	cmp	r7, r3
 800b6ee:	d2fb      	bcs.n	800b6e8 <__hexnan+0xcc>
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	b91b      	cbnz	r3, 800b6fc <__hexnan+0xe0>
 800b6f4:	4547      	cmp	r7, r8
 800b6f6:	d128      	bne.n	800b74a <__hexnan+0x12e>
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	603b      	str	r3, [r7, #0]
 800b6fc:	2005      	movs	r0, #5
 800b6fe:	b007      	add	sp, #28
 800b700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b704:	3501      	adds	r5, #1
 800b706:	2d08      	cmp	r5, #8
 800b708:	f10b 0b01 	add.w	fp, fp, #1
 800b70c:	dd06      	ble.n	800b71c <__hexnan+0x100>
 800b70e:	4544      	cmp	r4, r8
 800b710:	d9c1      	bls.n	800b696 <__hexnan+0x7a>
 800b712:	2300      	movs	r3, #0
 800b714:	f844 3c04 	str.w	r3, [r4, #-4]
 800b718:	2501      	movs	r5, #1
 800b71a:	3c04      	subs	r4, #4
 800b71c:	6822      	ldr	r2, [r4, #0]
 800b71e:	f000 000f 	and.w	r0, r0, #15
 800b722:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b726:	6020      	str	r0, [r4, #0]
 800b728:	e7b5      	b.n	800b696 <__hexnan+0x7a>
 800b72a:	2508      	movs	r5, #8
 800b72c:	e7b3      	b.n	800b696 <__hexnan+0x7a>
 800b72e:	9b01      	ldr	r3, [sp, #4]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d0dd      	beq.n	800b6f0 <__hexnan+0xd4>
 800b734:	f1c3 0320 	rsb	r3, r3, #32
 800b738:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b73c:	40da      	lsrs	r2, r3
 800b73e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b742:	4013      	ands	r3, r2
 800b744:	f846 3c04 	str.w	r3, [r6, #-4]
 800b748:	e7d2      	b.n	800b6f0 <__hexnan+0xd4>
 800b74a:	3f04      	subs	r7, #4
 800b74c:	e7d0      	b.n	800b6f0 <__hexnan+0xd4>
 800b74e:	2004      	movs	r0, #4
 800b750:	e7d5      	b.n	800b6fe <__hexnan+0xe2>

0800b752 <__ssputs_r>:
 800b752:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b756:	688e      	ldr	r6, [r1, #8]
 800b758:	461f      	mov	r7, r3
 800b75a:	42be      	cmp	r6, r7
 800b75c:	680b      	ldr	r3, [r1, #0]
 800b75e:	4682      	mov	sl, r0
 800b760:	460c      	mov	r4, r1
 800b762:	4690      	mov	r8, r2
 800b764:	d82d      	bhi.n	800b7c2 <__ssputs_r+0x70>
 800b766:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b76a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b76e:	d026      	beq.n	800b7be <__ssputs_r+0x6c>
 800b770:	6965      	ldr	r5, [r4, #20]
 800b772:	6909      	ldr	r1, [r1, #16]
 800b774:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b778:	eba3 0901 	sub.w	r9, r3, r1
 800b77c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b780:	1c7b      	adds	r3, r7, #1
 800b782:	444b      	add	r3, r9
 800b784:	106d      	asrs	r5, r5, #1
 800b786:	429d      	cmp	r5, r3
 800b788:	bf38      	it	cc
 800b78a:	461d      	movcc	r5, r3
 800b78c:	0553      	lsls	r3, r2, #21
 800b78e:	d527      	bpl.n	800b7e0 <__ssputs_r+0x8e>
 800b790:	4629      	mov	r1, r5
 800b792:	f000 f95f 	bl	800ba54 <_malloc_r>
 800b796:	4606      	mov	r6, r0
 800b798:	b360      	cbz	r0, 800b7f4 <__ssputs_r+0xa2>
 800b79a:	6921      	ldr	r1, [r4, #16]
 800b79c:	464a      	mov	r2, r9
 800b79e:	f7fe fe34 	bl	800a40a <memcpy>
 800b7a2:	89a3      	ldrh	r3, [r4, #12]
 800b7a4:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b7a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b7ac:	81a3      	strh	r3, [r4, #12]
 800b7ae:	6126      	str	r6, [r4, #16]
 800b7b0:	6165      	str	r5, [r4, #20]
 800b7b2:	444e      	add	r6, r9
 800b7b4:	eba5 0509 	sub.w	r5, r5, r9
 800b7b8:	6026      	str	r6, [r4, #0]
 800b7ba:	60a5      	str	r5, [r4, #8]
 800b7bc:	463e      	mov	r6, r7
 800b7be:	42be      	cmp	r6, r7
 800b7c0:	d900      	bls.n	800b7c4 <__ssputs_r+0x72>
 800b7c2:	463e      	mov	r6, r7
 800b7c4:	6820      	ldr	r0, [r4, #0]
 800b7c6:	4632      	mov	r2, r6
 800b7c8:	4641      	mov	r1, r8
 800b7ca:	f000 ffbd 	bl	800c748 <memmove>
 800b7ce:	68a3      	ldr	r3, [r4, #8]
 800b7d0:	1b9b      	subs	r3, r3, r6
 800b7d2:	60a3      	str	r3, [r4, #8]
 800b7d4:	6823      	ldr	r3, [r4, #0]
 800b7d6:	4433      	add	r3, r6
 800b7d8:	6023      	str	r3, [r4, #0]
 800b7da:	2000      	movs	r0, #0
 800b7dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7e0:	462a      	mov	r2, r5
 800b7e2:	f000 ff76 	bl	800c6d2 <_realloc_r>
 800b7e6:	4606      	mov	r6, r0
 800b7e8:	2800      	cmp	r0, #0
 800b7ea:	d1e0      	bne.n	800b7ae <__ssputs_r+0x5c>
 800b7ec:	6921      	ldr	r1, [r4, #16]
 800b7ee:	4650      	mov	r0, sl
 800b7f0:	f001 f84c 	bl	800c88c <_free_r>
 800b7f4:	230c      	movs	r3, #12
 800b7f6:	f8ca 3000 	str.w	r3, [sl]
 800b7fa:	89a3      	ldrh	r3, [r4, #12]
 800b7fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b800:	81a3      	strh	r3, [r4, #12]
 800b802:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b806:	e7e9      	b.n	800b7dc <__ssputs_r+0x8a>

0800b808 <_svfiprintf_r>:
 800b808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b80c:	4698      	mov	r8, r3
 800b80e:	898b      	ldrh	r3, [r1, #12]
 800b810:	061b      	lsls	r3, r3, #24
 800b812:	b09d      	sub	sp, #116	@ 0x74
 800b814:	4607      	mov	r7, r0
 800b816:	460d      	mov	r5, r1
 800b818:	4614      	mov	r4, r2
 800b81a:	d510      	bpl.n	800b83e <_svfiprintf_r+0x36>
 800b81c:	690b      	ldr	r3, [r1, #16]
 800b81e:	b973      	cbnz	r3, 800b83e <_svfiprintf_r+0x36>
 800b820:	2140      	movs	r1, #64	@ 0x40
 800b822:	f000 f917 	bl	800ba54 <_malloc_r>
 800b826:	6028      	str	r0, [r5, #0]
 800b828:	6128      	str	r0, [r5, #16]
 800b82a:	b930      	cbnz	r0, 800b83a <_svfiprintf_r+0x32>
 800b82c:	230c      	movs	r3, #12
 800b82e:	603b      	str	r3, [r7, #0]
 800b830:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b834:	b01d      	add	sp, #116	@ 0x74
 800b836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b83a:	2340      	movs	r3, #64	@ 0x40
 800b83c:	616b      	str	r3, [r5, #20]
 800b83e:	2300      	movs	r3, #0
 800b840:	9309      	str	r3, [sp, #36]	@ 0x24
 800b842:	2320      	movs	r3, #32
 800b844:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b848:	f8cd 800c 	str.w	r8, [sp, #12]
 800b84c:	2330      	movs	r3, #48	@ 0x30
 800b84e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b9ec <_svfiprintf_r+0x1e4>
 800b852:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b856:	f04f 0901 	mov.w	r9, #1
 800b85a:	4623      	mov	r3, r4
 800b85c:	469a      	mov	sl, r3
 800b85e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b862:	b10a      	cbz	r2, 800b868 <_svfiprintf_r+0x60>
 800b864:	2a25      	cmp	r2, #37	@ 0x25
 800b866:	d1f9      	bne.n	800b85c <_svfiprintf_r+0x54>
 800b868:	ebba 0b04 	subs.w	fp, sl, r4
 800b86c:	d00b      	beq.n	800b886 <_svfiprintf_r+0x7e>
 800b86e:	465b      	mov	r3, fp
 800b870:	4622      	mov	r2, r4
 800b872:	4629      	mov	r1, r5
 800b874:	4638      	mov	r0, r7
 800b876:	f7ff ff6c 	bl	800b752 <__ssputs_r>
 800b87a:	3001      	adds	r0, #1
 800b87c:	f000 80a7 	beq.w	800b9ce <_svfiprintf_r+0x1c6>
 800b880:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b882:	445a      	add	r2, fp
 800b884:	9209      	str	r2, [sp, #36]	@ 0x24
 800b886:	f89a 3000 	ldrb.w	r3, [sl]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	f000 809f 	beq.w	800b9ce <_svfiprintf_r+0x1c6>
 800b890:	2300      	movs	r3, #0
 800b892:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b896:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b89a:	f10a 0a01 	add.w	sl, sl, #1
 800b89e:	9304      	str	r3, [sp, #16]
 800b8a0:	9307      	str	r3, [sp, #28]
 800b8a2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b8a6:	931a      	str	r3, [sp, #104]	@ 0x68
 800b8a8:	4654      	mov	r4, sl
 800b8aa:	2205      	movs	r2, #5
 800b8ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8b0:	484e      	ldr	r0, [pc, #312]	@ (800b9ec <_svfiprintf_r+0x1e4>)
 800b8b2:	f7f4 fca5 	bl	8000200 <memchr>
 800b8b6:	9a04      	ldr	r2, [sp, #16]
 800b8b8:	b9d8      	cbnz	r0, 800b8f2 <_svfiprintf_r+0xea>
 800b8ba:	06d0      	lsls	r0, r2, #27
 800b8bc:	bf44      	itt	mi
 800b8be:	2320      	movmi	r3, #32
 800b8c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b8c4:	0711      	lsls	r1, r2, #28
 800b8c6:	bf44      	itt	mi
 800b8c8:	232b      	movmi	r3, #43	@ 0x2b
 800b8ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b8ce:	f89a 3000 	ldrb.w	r3, [sl]
 800b8d2:	2b2a      	cmp	r3, #42	@ 0x2a
 800b8d4:	d015      	beq.n	800b902 <_svfiprintf_r+0xfa>
 800b8d6:	9a07      	ldr	r2, [sp, #28]
 800b8d8:	4654      	mov	r4, sl
 800b8da:	2000      	movs	r0, #0
 800b8dc:	f04f 0c0a 	mov.w	ip, #10
 800b8e0:	4621      	mov	r1, r4
 800b8e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8e6:	3b30      	subs	r3, #48	@ 0x30
 800b8e8:	2b09      	cmp	r3, #9
 800b8ea:	d94b      	bls.n	800b984 <_svfiprintf_r+0x17c>
 800b8ec:	b1b0      	cbz	r0, 800b91c <_svfiprintf_r+0x114>
 800b8ee:	9207      	str	r2, [sp, #28]
 800b8f0:	e014      	b.n	800b91c <_svfiprintf_r+0x114>
 800b8f2:	eba0 0308 	sub.w	r3, r0, r8
 800b8f6:	fa09 f303 	lsl.w	r3, r9, r3
 800b8fa:	4313      	orrs	r3, r2
 800b8fc:	9304      	str	r3, [sp, #16]
 800b8fe:	46a2      	mov	sl, r4
 800b900:	e7d2      	b.n	800b8a8 <_svfiprintf_r+0xa0>
 800b902:	9b03      	ldr	r3, [sp, #12]
 800b904:	1d19      	adds	r1, r3, #4
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	9103      	str	r1, [sp, #12]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	bfbb      	ittet	lt
 800b90e:	425b      	neglt	r3, r3
 800b910:	f042 0202 	orrlt.w	r2, r2, #2
 800b914:	9307      	strge	r3, [sp, #28]
 800b916:	9307      	strlt	r3, [sp, #28]
 800b918:	bfb8      	it	lt
 800b91a:	9204      	strlt	r2, [sp, #16]
 800b91c:	7823      	ldrb	r3, [r4, #0]
 800b91e:	2b2e      	cmp	r3, #46	@ 0x2e
 800b920:	d10a      	bne.n	800b938 <_svfiprintf_r+0x130>
 800b922:	7863      	ldrb	r3, [r4, #1]
 800b924:	2b2a      	cmp	r3, #42	@ 0x2a
 800b926:	d132      	bne.n	800b98e <_svfiprintf_r+0x186>
 800b928:	9b03      	ldr	r3, [sp, #12]
 800b92a:	1d1a      	adds	r2, r3, #4
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	9203      	str	r2, [sp, #12]
 800b930:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b934:	3402      	adds	r4, #2
 800b936:	9305      	str	r3, [sp, #20]
 800b938:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b9fc <_svfiprintf_r+0x1f4>
 800b93c:	7821      	ldrb	r1, [r4, #0]
 800b93e:	2203      	movs	r2, #3
 800b940:	4650      	mov	r0, sl
 800b942:	f7f4 fc5d 	bl	8000200 <memchr>
 800b946:	b138      	cbz	r0, 800b958 <_svfiprintf_r+0x150>
 800b948:	9b04      	ldr	r3, [sp, #16]
 800b94a:	eba0 000a 	sub.w	r0, r0, sl
 800b94e:	2240      	movs	r2, #64	@ 0x40
 800b950:	4082      	lsls	r2, r0
 800b952:	4313      	orrs	r3, r2
 800b954:	3401      	adds	r4, #1
 800b956:	9304      	str	r3, [sp, #16]
 800b958:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b95c:	4824      	ldr	r0, [pc, #144]	@ (800b9f0 <_svfiprintf_r+0x1e8>)
 800b95e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b962:	2206      	movs	r2, #6
 800b964:	f7f4 fc4c 	bl	8000200 <memchr>
 800b968:	2800      	cmp	r0, #0
 800b96a:	d036      	beq.n	800b9da <_svfiprintf_r+0x1d2>
 800b96c:	4b21      	ldr	r3, [pc, #132]	@ (800b9f4 <_svfiprintf_r+0x1ec>)
 800b96e:	bb1b      	cbnz	r3, 800b9b8 <_svfiprintf_r+0x1b0>
 800b970:	9b03      	ldr	r3, [sp, #12]
 800b972:	3307      	adds	r3, #7
 800b974:	f023 0307 	bic.w	r3, r3, #7
 800b978:	3308      	adds	r3, #8
 800b97a:	9303      	str	r3, [sp, #12]
 800b97c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b97e:	4433      	add	r3, r6
 800b980:	9309      	str	r3, [sp, #36]	@ 0x24
 800b982:	e76a      	b.n	800b85a <_svfiprintf_r+0x52>
 800b984:	fb0c 3202 	mla	r2, ip, r2, r3
 800b988:	460c      	mov	r4, r1
 800b98a:	2001      	movs	r0, #1
 800b98c:	e7a8      	b.n	800b8e0 <_svfiprintf_r+0xd8>
 800b98e:	2300      	movs	r3, #0
 800b990:	3401      	adds	r4, #1
 800b992:	9305      	str	r3, [sp, #20]
 800b994:	4619      	mov	r1, r3
 800b996:	f04f 0c0a 	mov.w	ip, #10
 800b99a:	4620      	mov	r0, r4
 800b99c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b9a0:	3a30      	subs	r2, #48	@ 0x30
 800b9a2:	2a09      	cmp	r2, #9
 800b9a4:	d903      	bls.n	800b9ae <_svfiprintf_r+0x1a6>
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d0c6      	beq.n	800b938 <_svfiprintf_r+0x130>
 800b9aa:	9105      	str	r1, [sp, #20]
 800b9ac:	e7c4      	b.n	800b938 <_svfiprintf_r+0x130>
 800b9ae:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9b2:	4604      	mov	r4, r0
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	e7f0      	b.n	800b99a <_svfiprintf_r+0x192>
 800b9b8:	ab03      	add	r3, sp, #12
 800b9ba:	9300      	str	r3, [sp, #0]
 800b9bc:	462a      	mov	r2, r5
 800b9be:	4b0e      	ldr	r3, [pc, #56]	@ (800b9f8 <_svfiprintf_r+0x1f0>)
 800b9c0:	a904      	add	r1, sp, #16
 800b9c2:	4638      	mov	r0, r7
 800b9c4:	f7fc ff8e 	bl	80088e4 <_printf_float>
 800b9c8:	1c42      	adds	r2, r0, #1
 800b9ca:	4606      	mov	r6, r0
 800b9cc:	d1d6      	bne.n	800b97c <_svfiprintf_r+0x174>
 800b9ce:	89ab      	ldrh	r3, [r5, #12]
 800b9d0:	065b      	lsls	r3, r3, #25
 800b9d2:	f53f af2d 	bmi.w	800b830 <_svfiprintf_r+0x28>
 800b9d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b9d8:	e72c      	b.n	800b834 <_svfiprintf_r+0x2c>
 800b9da:	ab03      	add	r3, sp, #12
 800b9dc:	9300      	str	r3, [sp, #0]
 800b9de:	462a      	mov	r2, r5
 800b9e0:	4b05      	ldr	r3, [pc, #20]	@ (800b9f8 <_svfiprintf_r+0x1f0>)
 800b9e2:	a904      	add	r1, sp, #16
 800b9e4:	4638      	mov	r0, r7
 800b9e6:	f7fd fa15 	bl	8008e14 <_printf_i>
 800b9ea:	e7ed      	b.n	800b9c8 <_svfiprintf_r+0x1c0>
 800b9ec:	0800dd66 	.word	0x0800dd66
 800b9f0:	0800dd70 	.word	0x0800dd70
 800b9f4:	080088e5 	.word	0x080088e5
 800b9f8:	0800b753 	.word	0x0800b753
 800b9fc:	0800dd6c 	.word	0x0800dd6c

0800ba00 <malloc>:
 800ba00:	4b02      	ldr	r3, [pc, #8]	@ (800ba0c <malloc+0xc>)
 800ba02:	4601      	mov	r1, r0
 800ba04:	6818      	ldr	r0, [r3, #0]
 800ba06:	f000 b825 	b.w	800ba54 <_malloc_r>
 800ba0a:	bf00      	nop
 800ba0c:	200001c4 	.word	0x200001c4

0800ba10 <sbrk_aligned>:
 800ba10:	b570      	push	{r4, r5, r6, lr}
 800ba12:	4e0f      	ldr	r6, [pc, #60]	@ (800ba50 <sbrk_aligned+0x40>)
 800ba14:	460c      	mov	r4, r1
 800ba16:	6831      	ldr	r1, [r6, #0]
 800ba18:	4605      	mov	r5, r0
 800ba1a:	b911      	cbnz	r1, 800ba22 <sbrk_aligned+0x12>
 800ba1c:	f000 fee2 	bl	800c7e4 <_sbrk_r>
 800ba20:	6030      	str	r0, [r6, #0]
 800ba22:	4621      	mov	r1, r4
 800ba24:	4628      	mov	r0, r5
 800ba26:	f000 fedd 	bl	800c7e4 <_sbrk_r>
 800ba2a:	1c43      	adds	r3, r0, #1
 800ba2c:	d103      	bne.n	800ba36 <sbrk_aligned+0x26>
 800ba2e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800ba32:	4620      	mov	r0, r4
 800ba34:	bd70      	pop	{r4, r5, r6, pc}
 800ba36:	1cc4      	adds	r4, r0, #3
 800ba38:	f024 0403 	bic.w	r4, r4, #3
 800ba3c:	42a0      	cmp	r0, r4
 800ba3e:	d0f8      	beq.n	800ba32 <sbrk_aligned+0x22>
 800ba40:	1a21      	subs	r1, r4, r0
 800ba42:	4628      	mov	r0, r5
 800ba44:	f000 fece 	bl	800c7e4 <_sbrk_r>
 800ba48:	3001      	adds	r0, #1
 800ba4a:	d1f2      	bne.n	800ba32 <sbrk_aligned+0x22>
 800ba4c:	e7ef      	b.n	800ba2e <sbrk_aligned+0x1e>
 800ba4e:	bf00      	nop
 800ba50:	200008cc 	.word	0x200008cc

0800ba54 <_malloc_r>:
 800ba54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba58:	1ccd      	adds	r5, r1, #3
 800ba5a:	f025 0503 	bic.w	r5, r5, #3
 800ba5e:	3508      	adds	r5, #8
 800ba60:	2d0c      	cmp	r5, #12
 800ba62:	bf38      	it	cc
 800ba64:	250c      	movcc	r5, #12
 800ba66:	2d00      	cmp	r5, #0
 800ba68:	4606      	mov	r6, r0
 800ba6a:	db01      	blt.n	800ba70 <_malloc_r+0x1c>
 800ba6c:	42a9      	cmp	r1, r5
 800ba6e:	d904      	bls.n	800ba7a <_malloc_r+0x26>
 800ba70:	230c      	movs	r3, #12
 800ba72:	6033      	str	r3, [r6, #0]
 800ba74:	2000      	movs	r0, #0
 800ba76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bb50 <_malloc_r+0xfc>
 800ba7e:	f000 f927 	bl	800bcd0 <__malloc_lock>
 800ba82:	f8d8 3000 	ldr.w	r3, [r8]
 800ba86:	461c      	mov	r4, r3
 800ba88:	bb44      	cbnz	r4, 800badc <_malloc_r+0x88>
 800ba8a:	4629      	mov	r1, r5
 800ba8c:	4630      	mov	r0, r6
 800ba8e:	f7ff ffbf 	bl	800ba10 <sbrk_aligned>
 800ba92:	1c43      	adds	r3, r0, #1
 800ba94:	4604      	mov	r4, r0
 800ba96:	d158      	bne.n	800bb4a <_malloc_r+0xf6>
 800ba98:	f8d8 4000 	ldr.w	r4, [r8]
 800ba9c:	4627      	mov	r7, r4
 800ba9e:	2f00      	cmp	r7, #0
 800baa0:	d143      	bne.n	800bb2a <_malloc_r+0xd6>
 800baa2:	2c00      	cmp	r4, #0
 800baa4:	d04b      	beq.n	800bb3e <_malloc_r+0xea>
 800baa6:	6823      	ldr	r3, [r4, #0]
 800baa8:	4639      	mov	r1, r7
 800baaa:	4630      	mov	r0, r6
 800baac:	eb04 0903 	add.w	r9, r4, r3
 800bab0:	f000 fe98 	bl	800c7e4 <_sbrk_r>
 800bab4:	4581      	cmp	r9, r0
 800bab6:	d142      	bne.n	800bb3e <_malloc_r+0xea>
 800bab8:	6821      	ldr	r1, [r4, #0]
 800baba:	1a6d      	subs	r5, r5, r1
 800babc:	4629      	mov	r1, r5
 800babe:	4630      	mov	r0, r6
 800bac0:	f7ff ffa6 	bl	800ba10 <sbrk_aligned>
 800bac4:	3001      	adds	r0, #1
 800bac6:	d03a      	beq.n	800bb3e <_malloc_r+0xea>
 800bac8:	6823      	ldr	r3, [r4, #0]
 800baca:	442b      	add	r3, r5
 800bacc:	6023      	str	r3, [r4, #0]
 800bace:	f8d8 3000 	ldr.w	r3, [r8]
 800bad2:	685a      	ldr	r2, [r3, #4]
 800bad4:	bb62      	cbnz	r2, 800bb30 <_malloc_r+0xdc>
 800bad6:	f8c8 7000 	str.w	r7, [r8]
 800bada:	e00f      	b.n	800bafc <_malloc_r+0xa8>
 800badc:	6822      	ldr	r2, [r4, #0]
 800bade:	1b52      	subs	r2, r2, r5
 800bae0:	d420      	bmi.n	800bb24 <_malloc_r+0xd0>
 800bae2:	2a0b      	cmp	r2, #11
 800bae4:	d917      	bls.n	800bb16 <_malloc_r+0xc2>
 800bae6:	1961      	adds	r1, r4, r5
 800bae8:	42a3      	cmp	r3, r4
 800baea:	6025      	str	r5, [r4, #0]
 800baec:	bf18      	it	ne
 800baee:	6059      	strne	r1, [r3, #4]
 800baf0:	6863      	ldr	r3, [r4, #4]
 800baf2:	bf08      	it	eq
 800baf4:	f8c8 1000 	streq.w	r1, [r8]
 800baf8:	5162      	str	r2, [r4, r5]
 800bafa:	604b      	str	r3, [r1, #4]
 800bafc:	4630      	mov	r0, r6
 800bafe:	f000 f8ed 	bl	800bcdc <__malloc_unlock>
 800bb02:	f104 000b 	add.w	r0, r4, #11
 800bb06:	1d23      	adds	r3, r4, #4
 800bb08:	f020 0007 	bic.w	r0, r0, #7
 800bb0c:	1ac2      	subs	r2, r0, r3
 800bb0e:	bf1c      	itt	ne
 800bb10:	1a1b      	subne	r3, r3, r0
 800bb12:	50a3      	strne	r3, [r4, r2]
 800bb14:	e7af      	b.n	800ba76 <_malloc_r+0x22>
 800bb16:	6862      	ldr	r2, [r4, #4]
 800bb18:	42a3      	cmp	r3, r4
 800bb1a:	bf0c      	ite	eq
 800bb1c:	f8c8 2000 	streq.w	r2, [r8]
 800bb20:	605a      	strne	r2, [r3, #4]
 800bb22:	e7eb      	b.n	800bafc <_malloc_r+0xa8>
 800bb24:	4623      	mov	r3, r4
 800bb26:	6864      	ldr	r4, [r4, #4]
 800bb28:	e7ae      	b.n	800ba88 <_malloc_r+0x34>
 800bb2a:	463c      	mov	r4, r7
 800bb2c:	687f      	ldr	r7, [r7, #4]
 800bb2e:	e7b6      	b.n	800ba9e <_malloc_r+0x4a>
 800bb30:	461a      	mov	r2, r3
 800bb32:	685b      	ldr	r3, [r3, #4]
 800bb34:	42a3      	cmp	r3, r4
 800bb36:	d1fb      	bne.n	800bb30 <_malloc_r+0xdc>
 800bb38:	2300      	movs	r3, #0
 800bb3a:	6053      	str	r3, [r2, #4]
 800bb3c:	e7de      	b.n	800bafc <_malloc_r+0xa8>
 800bb3e:	230c      	movs	r3, #12
 800bb40:	6033      	str	r3, [r6, #0]
 800bb42:	4630      	mov	r0, r6
 800bb44:	f000 f8ca 	bl	800bcdc <__malloc_unlock>
 800bb48:	e794      	b.n	800ba74 <_malloc_r+0x20>
 800bb4a:	6005      	str	r5, [r0, #0]
 800bb4c:	e7d6      	b.n	800bafc <_malloc_r+0xa8>
 800bb4e:	bf00      	nop
 800bb50:	200008d0 	.word	0x200008d0

0800bb54 <__ascii_mbtowc>:
 800bb54:	b082      	sub	sp, #8
 800bb56:	b901      	cbnz	r1, 800bb5a <__ascii_mbtowc+0x6>
 800bb58:	a901      	add	r1, sp, #4
 800bb5a:	b142      	cbz	r2, 800bb6e <__ascii_mbtowc+0x1a>
 800bb5c:	b14b      	cbz	r3, 800bb72 <__ascii_mbtowc+0x1e>
 800bb5e:	7813      	ldrb	r3, [r2, #0]
 800bb60:	600b      	str	r3, [r1, #0]
 800bb62:	7812      	ldrb	r2, [r2, #0]
 800bb64:	1e10      	subs	r0, r2, #0
 800bb66:	bf18      	it	ne
 800bb68:	2001      	movne	r0, #1
 800bb6a:	b002      	add	sp, #8
 800bb6c:	4770      	bx	lr
 800bb6e:	4610      	mov	r0, r2
 800bb70:	e7fb      	b.n	800bb6a <__ascii_mbtowc+0x16>
 800bb72:	f06f 0001 	mvn.w	r0, #1
 800bb76:	e7f8      	b.n	800bb6a <__ascii_mbtowc+0x16>

0800bb78 <__sflush_r>:
 800bb78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bb7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb80:	0716      	lsls	r6, r2, #28
 800bb82:	4605      	mov	r5, r0
 800bb84:	460c      	mov	r4, r1
 800bb86:	d454      	bmi.n	800bc32 <__sflush_r+0xba>
 800bb88:	684b      	ldr	r3, [r1, #4]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	dc02      	bgt.n	800bb94 <__sflush_r+0x1c>
 800bb8e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	dd48      	ble.n	800bc26 <__sflush_r+0xae>
 800bb94:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bb96:	2e00      	cmp	r6, #0
 800bb98:	d045      	beq.n	800bc26 <__sflush_r+0xae>
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bba0:	682f      	ldr	r7, [r5, #0]
 800bba2:	6a21      	ldr	r1, [r4, #32]
 800bba4:	602b      	str	r3, [r5, #0]
 800bba6:	d030      	beq.n	800bc0a <__sflush_r+0x92>
 800bba8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bbaa:	89a3      	ldrh	r3, [r4, #12]
 800bbac:	0759      	lsls	r1, r3, #29
 800bbae:	d505      	bpl.n	800bbbc <__sflush_r+0x44>
 800bbb0:	6863      	ldr	r3, [r4, #4]
 800bbb2:	1ad2      	subs	r2, r2, r3
 800bbb4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bbb6:	b10b      	cbz	r3, 800bbbc <__sflush_r+0x44>
 800bbb8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bbba:	1ad2      	subs	r2, r2, r3
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bbc0:	6a21      	ldr	r1, [r4, #32]
 800bbc2:	4628      	mov	r0, r5
 800bbc4:	47b0      	blx	r6
 800bbc6:	1c43      	adds	r3, r0, #1
 800bbc8:	89a3      	ldrh	r3, [r4, #12]
 800bbca:	d106      	bne.n	800bbda <__sflush_r+0x62>
 800bbcc:	6829      	ldr	r1, [r5, #0]
 800bbce:	291d      	cmp	r1, #29
 800bbd0:	d82b      	bhi.n	800bc2a <__sflush_r+0xb2>
 800bbd2:	4a2a      	ldr	r2, [pc, #168]	@ (800bc7c <__sflush_r+0x104>)
 800bbd4:	410a      	asrs	r2, r1
 800bbd6:	07d6      	lsls	r6, r2, #31
 800bbd8:	d427      	bmi.n	800bc2a <__sflush_r+0xb2>
 800bbda:	2200      	movs	r2, #0
 800bbdc:	6062      	str	r2, [r4, #4]
 800bbde:	04d9      	lsls	r1, r3, #19
 800bbe0:	6922      	ldr	r2, [r4, #16]
 800bbe2:	6022      	str	r2, [r4, #0]
 800bbe4:	d504      	bpl.n	800bbf0 <__sflush_r+0x78>
 800bbe6:	1c42      	adds	r2, r0, #1
 800bbe8:	d101      	bne.n	800bbee <__sflush_r+0x76>
 800bbea:	682b      	ldr	r3, [r5, #0]
 800bbec:	b903      	cbnz	r3, 800bbf0 <__sflush_r+0x78>
 800bbee:	6560      	str	r0, [r4, #84]	@ 0x54
 800bbf0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bbf2:	602f      	str	r7, [r5, #0]
 800bbf4:	b1b9      	cbz	r1, 800bc26 <__sflush_r+0xae>
 800bbf6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bbfa:	4299      	cmp	r1, r3
 800bbfc:	d002      	beq.n	800bc04 <__sflush_r+0x8c>
 800bbfe:	4628      	mov	r0, r5
 800bc00:	f000 fe44 	bl	800c88c <_free_r>
 800bc04:	2300      	movs	r3, #0
 800bc06:	6363      	str	r3, [r4, #52]	@ 0x34
 800bc08:	e00d      	b.n	800bc26 <__sflush_r+0xae>
 800bc0a:	2301      	movs	r3, #1
 800bc0c:	4628      	mov	r0, r5
 800bc0e:	47b0      	blx	r6
 800bc10:	4602      	mov	r2, r0
 800bc12:	1c50      	adds	r0, r2, #1
 800bc14:	d1c9      	bne.n	800bbaa <__sflush_r+0x32>
 800bc16:	682b      	ldr	r3, [r5, #0]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d0c6      	beq.n	800bbaa <__sflush_r+0x32>
 800bc1c:	2b1d      	cmp	r3, #29
 800bc1e:	d001      	beq.n	800bc24 <__sflush_r+0xac>
 800bc20:	2b16      	cmp	r3, #22
 800bc22:	d11e      	bne.n	800bc62 <__sflush_r+0xea>
 800bc24:	602f      	str	r7, [r5, #0]
 800bc26:	2000      	movs	r0, #0
 800bc28:	e022      	b.n	800bc70 <__sflush_r+0xf8>
 800bc2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc2e:	b21b      	sxth	r3, r3
 800bc30:	e01b      	b.n	800bc6a <__sflush_r+0xf2>
 800bc32:	690f      	ldr	r7, [r1, #16]
 800bc34:	2f00      	cmp	r7, #0
 800bc36:	d0f6      	beq.n	800bc26 <__sflush_r+0xae>
 800bc38:	0793      	lsls	r3, r2, #30
 800bc3a:	680e      	ldr	r6, [r1, #0]
 800bc3c:	bf08      	it	eq
 800bc3e:	694b      	ldreq	r3, [r1, #20]
 800bc40:	600f      	str	r7, [r1, #0]
 800bc42:	bf18      	it	ne
 800bc44:	2300      	movne	r3, #0
 800bc46:	eba6 0807 	sub.w	r8, r6, r7
 800bc4a:	608b      	str	r3, [r1, #8]
 800bc4c:	f1b8 0f00 	cmp.w	r8, #0
 800bc50:	dde9      	ble.n	800bc26 <__sflush_r+0xae>
 800bc52:	6a21      	ldr	r1, [r4, #32]
 800bc54:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bc56:	4643      	mov	r3, r8
 800bc58:	463a      	mov	r2, r7
 800bc5a:	4628      	mov	r0, r5
 800bc5c:	47b0      	blx	r6
 800bc5e:	2800      	cmp	r0, #0
 800bc60:	dc08      	bgt.n	800bc74 <__sflush_r+0xfc>
 800bc62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc6a:	81a3      	strh	r3, [r4, #12]
 800bc6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bc70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc74:	4407      	add	r7, r0
 800bc76:	eba8 0800 	sub.w	r8, r8, r0
 800bc7a:	e7e7      	b.n	800bc4c <__sflush_r+0xd4>
 800bc7c:	dfbffffe 	.word	0xdfbffffe

0800bc80 <_fflush_r>:
 800bc80:	b538      	push	{r3, r4, r5, lr}
 800bc82:	690b      	ldr	r3, [r1, #16]
 800bc84:	4605      	mov	r5, r0
 800bc86:	460c      	mov	r4, r1
 800bc88:	b913      	cbnz	r3, 800bc90 <_fflush_r+0x10>
 800bc8a:	2500      	movs	r5, #0
 800bc8c:	4628      	mov	r0, r5
 800bc8e:	bd38      	pop	{r3, r4, r5, pc}
 800bc90:	b118      	cbz	r0, 800bc9a <_fflush_r+0x1a>
 800bc92:	6a03      	ldr	r3, [r0, #32]
 800bc94:	b90b      	cbnz	r3, 800bc9a <_fflush_r+0x1a>
 800bc96:	f7fd fc9d 	bl	80095d4 <__sinit>
 800bc9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d0f3      	beq.n	800bc8a <_fflush_r+0xa>
 800bca2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bca4:	07d0      	lsls	r0, r2, #31
 800bca6:	d404      	bmi.n	800bcb2 <_fflush_r+0x32>
 800bca8:	0599      	lsls	r1, r3, #22
 800bcaa:	d402      	bmi.n	800bcb2 <_fflush_r+0x32>
 800bcac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bcae:	f7fe fbaa 	bl	800a406 <__retarget_lock_acquire_recursive>
 800bcb2:	4628      	mov	r0, r5
 800bcb4:	4621      	mov	r1, r4
 800bcb6:	f7ff ff5f 	bl	800bb78 <__sflush_r>
 800bcba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bcbc:	07da      	lsls	r2, r3, #31
 800bcbe:	4605      	mov	r5, r0
 800bcc0:	d4e4      	bmi.n	800bc8c <_fflush_r+0xc>
 800bcc2:	89a3      	ldrh	r3, [r4, #12]
 800bcc4:	059b      	lsls	r3, r3, #22
 800bcc6:	d4e1      	bmi.n	800bc8c <_fflush_r+0xc>
 800bcc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bcca:	f7fe fb9d 	bl	800a408 <__retarget_lock_release_recursive>
 800bcce:	e7dd      	b.n	800bc8c <_fflush_r+0xc>

0800bcd0 <__malloc_lock>:
 800bcd0:	4801      	ldr	r0, [pc, #4]	@ (800bcd8 <__malloc_lock+0x8>)
 800bcd2:	f7fe bb98 	b.w	800a406 <__retarget_lock_acquire_recursive>
 800bcd6:	bf00      	nop
 800bcd8:	200008c8 	.word	0x200008c8

0800bcdc <__malloc_unlock>:
 800bcdc:	4801      	ldr	r0, [pc, #4]	@ (800bce4 <__malloc_unlock+0x8>)
 800bcde:	f7fe bb93 	b.w	800a408 <__retarget_lock_release_recursive>
 800bce2:	bf00      	nop
 800bce4:	200008c8 	.word	0x200008c8

0800bce8 <_Balloc>:
 800bce8:	b570      	push	{r4, r5, r6, lr}
 800bcea:	69c6      	ldr	r6, [r0, #28]
 800bcec:	4604      	mov	r4, r0
 800bcee:	460d      	mov	r5, r1
 800bcf0:	b976      	cbnz	r6, 800bd10 <_Balloc+0x28>
 800bcf2:	2010      	movs	r0, #16
 800bcf4:	f7ff fe84 	bl	800ba00 <malloc>
 800bcf8:	4602      	mov	r2, r0
 800bcfa:	61e0      	str	r0, [r4, #28]
 800bcfc:	b920      	cbnz	r0, 800bd08 <_Balloc+0x20>
 800bcfe:	4b18      	ldr	r3, [pc, #96]	@ (800bd60 <_Balloc+0x78>)
 800bd00:	4818      	ldr	r0, [pc, #96]	@ (800bd64 <_Balloc+0x7c>)
 800bd02:	216b      	movs	r1, #107	@ 0x6b
 800bd04:	f000 fd90 	bl	800c828 <__assert_func>
 800bd08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd0c:	6006      	str	r6, [r0, #0]
 800bd0e:	60c6      	str	r6, [r0, #12]
 800bd10:	69e6      	ldr	r6, [r4, #28]
 800bd12:	68f3      	ldr	r3, [r6, #12]
 800bd14:	b183      	cbz	r3, 800bd38 <_Balloc+0x50>
 800bd16:	69e3      	ldr	r3, [r4, #28]
 800bd18:	68db      	ldr	r3, [r3, #12]
 800bd1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bd1e:	b9b8      	cbnz	r0, 800bd50 <_Balloc+0x68>
 800bd20:	2101      	movs	r1, #1
 800bd22:	fa01 f605 	lsl.w	r6, r1, r5
 800bd26:	1d72      	adds	r2, r6, #5
 800bd28:	0092      	lsls	r2, r2, #2
 800bd2a:	4620      	mov	r0, r4
 800bd2c:	f000 fd9a 	bl	800c864 <_calloc_r>
 800bd30:	b160      	cbz	r0, 800bd4c <_Balloc+0x64>
 800bd32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bd36:	e00e      	b.n	800bd56 <_Balloc+0x6e>
 800bd38:	2221      	movs	r2, #33	@ 0x21
 800bd3a:	2104      	movs	r1, #4
 800bd3c:	4620      	mov	r0, r4
 800bd3e:	f000 fd91 	bl	800c864 <_calloc_r>
 800bd42:	69e3      	ldr	r3, [r4, #28]
 800bd44:	60f0      	str	r0, [r6, #12]
 800bd46:	68db      	ldr	r3, [r3, #12]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d1e4      	bne.n	800bd16 <_Balloc+0x2e>
 800bd4c:	2000      	movs	r0, #0
 800bd4e:	bd70      	pop	{r4, r5, r6, pc}
 800bd50:	6802      	ldr	r2, [r0, #0]
 800bd52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bd56:	2300      	movs	r3, #0
 800bd58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bd5c:	e7f7      	b.n	800bd4e <_Balloc+0x66>
 800bd5e:	bf00      	nop
 800bd60:	0800dc86 	.word	0x0800dc86
 800bd64:	0800dd77 	.word	0x0800dd77

0800bd68 <_Bfree>:
 800bd68:	b570      	push	{r4, r5, r6, lr}
 800bd6a:	69c6      	ldr	r6, [r0, #28]
 800bd6c:	4605      	mov	r5, r0
 800bd6e:	460c      	mov	r4, r1
 800bd70:	b976      	cbnz	r6, 800bd90 <_Bfree+0x28>
 800bd72:	2010      	movs	r0, #16
 800bd74:	f7ff fe44 	bl	800ba00 <malloc>
 800bd78:	4602      	mov	r2, r0
 800bd7a:	61e8      	str	r0, [r5, #28]
 800bd7c:	b920      	cbnz	r0, 800bd88 <_Bfree+0x20>
 800bd7e:	4b09      	ldr	r3, [pc, #36]	@ (800bda4 <_Bfree+0x3c>)
 800bd80:	4809      	ldr	r0, [pc, #36]	@ (800bda8 <_Bfree+0x40>)
 800bd82:	218f      	movs	r1, #143	@ 0x8f
 800bd84:	f000 fd50 	bl	800c828 <__assert_func>
 800bd88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd8c:	6006      	str	r6, [r0, #0]
 800bd8e:	60c6      	str	r6, [r0, #12]
 800bd90:	b13c      	cbz	r4, 800bda2 <_Bfree+0x3a>
 800bd92:	69eb      	ldr	r3, [r5, #28]
 800bd94:	6862      	ldr	r2, [r4, #4]
 800bd96:	68db      	ldr	r3, [r3, #12]
 800bd98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bd9c:	6021      	str	r1, [r4, #0]
 800bd9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bda2:	bd70      	pop	{r4, r5, r6, pc}
 800bda4:	0800dc86 	.word	0x0800dc86
 800bda8:	0800dd77 	.word	0x0800dd77

0800bdac <__multadd>:
 800bdac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdb0:	690d      	ldr	r5, [r1, #16]
 800bdb2:	4607      	mov	r7, r0
 800bdb4:	460c      	mov	r4, r1
 800bdb6:	461e      	mov	r6, r3
 800bdb8:	f101 0c14 	add.w	ip, r1, #20
 800bdbc:	2000      	movs	r0, #0
 800bdbe:	f8dc 3000 	ldr.w	r3, [ip]
 800bdc2:	b299      	uxth	r1, r3
 800bdc4:	fb02 6101 	mla	r1, r2, r1, r6
 800bdc8:	0c1e      	lsrs	r6, r3, #16
 800bdca:	0c0b      	lsrs	r3, r1, #16
 800bdcc:	fb02 3306 	mla	r3, r2, r6, r3
 800bdd0:	b289      	uxth	r1, r1
 800bdd2:	3001      	adds	r0, #1
 800bdd4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bdd8:	4285      	cmp	r5, r0
 800bdda:	f84c 1b04 	str.w	r1, [ip], #4
 800bdde:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bde2:	dcec      	bgt.n	800bdbe <__multadd+0x12>
 800bde4:	b30e      	cbz	r6, 800be2a <__multadd+0x7e>
 800bde6:	68a3      	ldr	r3, [r4, #8]
 800bde8:	42ab      	cmp	r3, r5
 800bdea:	dc19      	bgt.n	800be20 <__multadd+0x74>
 800bdec:	6861      	ldr	r1, [r4, #4]
 800bdee:	4638      	mov	r0, r7
 800bdf0:	3101      	adds	r1, #1
 800bdf2:	f7ff ff79 	bl	800bce8 <_Balloc>
 800bdf6:	4680      	mov	r8, r0
 800bdf8:	b928      	cbnz	r0, 800be06 <__multadd+0x5a>
 800bdfa:	4602      	mov	r2, r0
 800bdfc:	4b0c      	ldr	r3, [pc, #48]	@ (800be30 <__multadd+0x84>)
 800bdfe:	480d      	ldr	r0, [pc, #52]	@ (800be34 <__multadd+0x88>)
 800be00:	21ba      	movs	r1, #186	@ 0xba
 800be02:	f000 fd11 	bl	800c828 <__assert_func>
 800be06:	6922      	ldr	r2, [r4, #16]
 800be08:	3202      	adds	r2, #2
 800be0a:	f104 010c 	add.w	r1, r4, #12
 800be0e:	0092      	lsls	r2, r2, #2
 800be10:	300c      	adds	r0, #12
 800be12:	f7fe fafa 	bl	800a40a <memcpy>
 800be16:	4621      	mov	r1, r4
 800be18:	4638      	mov	r0, r7
 800be1a:	f7ff ffa5 	bl	800bd68 <_Bfree>
 800be1e:	4644      	mov	r4, r8
 800be20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800be24:	3501      	adds	r5, #1
 800be26:	615e      	str	r6, [r3, #20]
 800be28:	6125      	str	r5, [r4, #16]
 800be2a:	4620      	mov	r0, r4
 800be2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be30:	0800dcf5 	.word	0x0800dcf5
 800be34:	0800dd77 	.word	0x0800dd77

0800be38 <__s2b>:
 800be38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be3c:	460c      	mov	r4, r1
 800be3e:	4615      	mov	r5, r2
 800be40:	461f      	mov	r7, r3
 800be42:	2209      	movs	r2, #9
 800be44:	3308      	adds	r3, #8
 800be46:	4606      	mov	r6, r0
 800be48:	fb93 f3f2 	sdiv	r3, r3, r2
 800be4c:	2100      	movs	r1, #0
 800be4e:	2201      	movs	r2, #1
 800be50:	429a      	cmp	r2, r3
 800be52:	db09      	blt.n	800be68 <__s2b+0x30>
 800be54:	4630      	mov	r0, r6
 800be56:	f7ff ff47 	bl	800bce8 <_Balloc>
 800be5a:	b940      	cbnz	r0, 800be6e <__s2b+0x36>
 800be5c:	4602      	mov	r2, r0
 800be5e:	4b19      	ldr	r3, [pc, #100]	@ (800bec4 <__s2b+0x8c>)
 800be60:	4819      	ldr	r0, [pc, #100]	@ (800bec8 <__s2b+0x90>)
 800be62:	21d3      	movs	r1, #211	@ 0xd3
 800be64:	f000 fce0 	bl	800c828 <__assert_func>
 800be68:	0052      	lsls	r2, r2, #1
 800be6a:	3101      	adds	r1, #1
 800be6c:	e7f0      	b.n	800be50 <__s2b+0x18>
 800be6e:	9b08      	ldr	r3, [sp, #32]
 800be70:	6143      	str	r3, [r0, #20]
 800be72:	2d09      	cmp	r5, #9
 800be74:	f04f 0301 	mov.w	r3, #1
 800be78:	6103      	str	r3, [r0, #16]
 800be7a:	dd16      	ble.n	800beaa <__s2b+0x72>
 800be7c:	f104 0909 	add.w	r9, r4, #9
 800be80:	46c8      	mov	r8, r9
 800be82:	442c      	add	r4, r5
 800be84:	f818 3b01 	ldrb.w	r3, [r8], #1
 800be88:	4601      	mov	r1, r0
 800be8a:	3b30      	subs	r3, #48	@ 0x30
 800be8c:	220a      	movs	r2, #10
 800be8e:	4630      	mov	r0, r6
 800be90:	f7ff ff8c 	bl	800bdac <__multadd>
 800be94:	45a0      	cmp	r8, r4
 800be96:	d1f5      	bne.n	800be84 <__s2b+0x4c>
 800be98:	f1a5 0408 	sub.w	r4, r5, #8
 800be9c:	444c      	add	r4, r9
 800be9e:	1b2d      	subs	r5, r5, r4
 800bea0:	1963      	adds	r3, r4, r5
 800bea2:	42bb      	cmp	r3, r7
 800bea4:	db04      	blt.n	800beb0 <__s2b+0x78>
 800bea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800beaa:	340a      	adds	r4, #10
 800beac:	2509      	movs	r5, #9
 800beae:	e7f6      	b.n	800be9e <__s2b+0x66>
 800beb0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800beb4:	4601      	mov	r1, r0
 800beb6:	3b30      	subs	r3, #48	@ 0x30
 800beb8:	220a      	movs	r2, #10
 800beba:	4630      	mov	r0, r6
 800bebc:	f7ff ff76 	bl	800bdac <__multadd>
 800bec0:	e7ee      	b.n	800bea0 <__s2b+0x68>
 800bec2:	bf00      	nop
 800bec4:	0800dcf5 	.word	0x0800dcf5
 800bec8:	0800dd77 	.word	0x0800dd77

0800becc <__hi0bits>:
 800becc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bed0:	4603      	mov	r3, r0
 800bed2:	bf36      	itet	cc
 800bed4:	0403      	lslcc	r3, r0, #16
 800bed6:	2000      	movcs	r0, #0
 800bed8:	2010      	movcc	r0, #16
 800beda:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bede:	bf3c      	itt	cc
 800bee0:	021b      	lslcc	r3, r3, #8
 800bee2:	3008      	addcc	r0, #8
 800bee4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bee8:	bf3c      	itt	cc
 800beea:	011b      	lslcc	r3, r3, #4
 800beec:	3004      	addcc	r0, #4
 800beee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bef2:	bf3c      	itt	cc
 800bef4:	009b      	lslcc	r3, r3, #2
 800bef6:	3002      	addcc	r0, #2
 800bef8:	2b00      	cmp	r3, #0
 800befa:	db05      	blt.n	800bf08 <__hi0bits+0x3c>
 800befc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bf00:	f100 0001 	add.w	r0, r0, #1
 800bf04:	bf08      	it	eq
 800bf06:	2020      	moveq	r0, #32
 800bf08:	4770      	bx	lr

0800bf0a <__lo0bits>:
 800bf0a:	6803      	ldr	r3, [r0, #0]
 800bf0c:	4602      	mov	r2, r0
 800bf0e:	f013 0007 	ands.w	r0, r3, #7
 800bf12:	d00b      	beq.n	800bf2c <__lo0bits+0x22>
 800bf14:	07d9      	lsls	r1, r3, #31
 800bf16:	d421      	bmi.n	800bf5c <__lo0bits+0x52>
 800bf18:	0798      	lsls	r0, r3, #30
 800bf1a:	bf49      	itett	mi
 800bf1c:	085b      	lsrmi	r3, r3, #1
 800bf1e:	089b      	lsrpl	r3, r3, #2
 800bf20:	2001      	movmi	r0, #1
 800bf22:	6013      	strmi	r3, [r2, #0]
 800bf24:	bf5c      	itt	pl
 800bf26:	6013      	strpl	r3, [r2, #0]
 800bf28:	2002      	movpl	r0, #2
 800bf2a:	4770      	bx	lr
 800bf2c:	b299      	uxth	r1, r3
 800bf2e:	b909      	cbnz	r1, 800bf34 <__lo0bits+0x2a>
 800bf30:	0c1b      	lsrs	r3, r3, #16
 800bf32:	2010      	movs	r0, #16
 800bf34:	b2d9      	uxtb	r1, r3
 800bf36:	b909      	cbnz	r1, 800bf3c <__lo0bits+0x32>
 800bf38:	3008      	adds	r0, #8
 800bf3a:	0a1b      	lsrs	r3, r3, #8
 800bf3c:	0719      	lsls	r1, r3, #28
 800bf3e:	bf04      	itt	eq
 800bf40:	091b      	lsreq	r3, r3, #4
 800bf42:	3004      	addeq	r0, #4
 800bf44:	0799      	lsls	r1, r3, #30
 800bf46:	bf04      	itt	eq
 800bf48:	089b      	lsreq	r3, r3, #2
 800bf4a:	3002      	addeq	r0, #2
 800bf4c:	07d9      	lsls	r1, r3, #31
 800bf4e:	d403      	bmi.n	800bf58 <__lo0bits+0x4e>
 800bf50:	085b      	lsrs	r3, r3, #1
 800bf52:	f100 0001 	add.w	r0, r0, #1
 800bf56:	d003      	beq.n	800bf60 <__lo0bits+0x56>
 800bf58:	6013      	str	r3, [r2, #0]
 800bf5a:	4770      	bx	lr
 800bf5c:	2000      	movs	r0, #0
 800bf5e:	4770      	bx	lr
 800bf60:	2020      	movs	r0, #32
 800bf62:	4770      	bx	lr

0800bf64 <__i2b>:
 800bf64:	b510      	push	{r4, lr}
 800bf66:	460c      	mov	r4, r1
 800bf68:	2101      	movs	r1, #1
 800bf6a:	f7ff febd 	bl	800bce8 <_Balloc>
 800bf6e:	4602      	mov	r2, r0
 800bf70:	b928      	cbnz	r0, 800bf7e <__i2b+0x1a>
 800bf72:	4b05      	ldr	r3, [pc, #20]	@ (800bf88 <__i2b+0x24>)
 800bf74:	4805      	ldr	r0, [pc, #20]	@ (800bf8c <__i2b+0x28>)
 800bf76:	f240 1145 	movw	r1, #325	@ 0x145
 800bf7a:	f000 fc55 	bl	800c828 <__assert_func>
 800bf7e:	2301      	movs	r3, #1
 800bf80:	6144      	str	r4, [r0, #20]
 800bf82:	6103      	str	r3, [r0, #16]
 800bf84:	bd10      	pop	{r4, pc}
 800bf86:	bf00      	nop
 800bf88:	0800dcf5 	.word	0x0800dcf5
 800bf8c:	0800dd77 	.word	0x0800dd77

0800bf90 <__multiply>:
 800bf90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf94:	4614      	mov	r4, r2
 800bf96:	690a      	ldr	r2, [r1, #16]
 800bf98:	6923      	ldr	r3, [r4, #16]
 800bf9a:	429a      	cmp	r2, r3
 800bf9c:	bfa8      	it	ge
 800bf9e:	4623      	movge	r3, r4
 800bfa0:	460f      	mov	r7, r1
 800bfa2:	bfa4      	itt	ge
 800bfa4:	460c      	movge	r4, r1
 800bfa6:	461f      	movge	r7, r3
 800bfa8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800bfac:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800bfb0:	68a3      	ldr	r3, [r4, #8]
 800bfb2:	6861      	ldr	r1, [r4, #4]
 800bfb4:	eb0a 0609 	add.w	r6, sl, r9
 800bfb8:	42b3      	cmp	r3, r6
 800bfba:	b085      	sub	sp, #20
 800bfbc:	bfb8      	it	lt
 800bfbe:	3101      	addlt	r1, #1
 800bfc0:	f7ff fe92 	bl	800bce8 <_Balloc>
 800bfc4:	b930      	cbnz	r0, 800bfd4 <__multiply+0x44>
 800bfc6:	4602      	mov	r2, r0
 800bfc8:	4b44      	ldr	r3, [pc, #272]	@ (800c0dc <__multiply+0x14c>)
 800bfca:	4845      	ldr	r0, [pc, #276]	@ (800c0e0 <__multiply+0x150>)
 800bfcc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bfd0:	f000 fc2a 	bl	800c828 <__assert_func>
 800bfd4:	f100 0514 	add.w	r5, r0, #20
 800bfd8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bfdc:	462b      	mov	r3, r5
 800bfde:	2200      	movs	r2, #0
 800bfe0:	4543      	cmp	r3, r8
 800bfe2:	d321      	bcc.n	800c028 <__multiply+0x98>
 800bfe4:	f107 0114 	add.w	r1, r7, #20
 800bfe8:	f104 0214 	add.w	r2, r4, #20
 800bfec:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800bff0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800bff4:	9302      	str	r3, [sp, #8]
 800bff6:	1b13      	subs	r3, r2, r4
 800bff8:	3b15      	subs	r3, #21
 800bffa:	f023 0303 	bic.w	r3, r3, #3
 800bffe:	3304      	adds	r3, #4
 800c000:	f104 0715 	add.w	r7, r4, #21
 800c004:	42ba      	cmp	r2, r7
 800c006:	bf38      	it	cc
 800c008:	2304      	movcc	r3, #4
 800c00a:	9301      	str	r3, [sp, #4]
 800c00c:	9b02      	ldr	r3, [sp, #8]
 800c00e:	9103      	str	r1, [sp, #12]
 800c010:	428b      	cmp	r3, r1
 800c012:	d80c      	bhi.n	800c02e <__multiply+0x9e>
 800c014:	2e00      	cmp	r6, #0
 800c016:	dd03      	ble.n	800c020 <__multiply+0x90>
 800c018:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d05b      	beq.n	800c0d8 <__multiply+0x148>
 800c020:	6106      	str	r6, [r0, #16]
 800c022:	b005      	add	sp, #20
 800c024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c028:	f843 2b04 	str.w	r2, [r3], #4
 800c02c:	e7d8      	b.n	800bfe0 <__multiply+0x50>
 800c02e:	f8b1 a000 	ldrh.w	sl, [r1]
 800c032:	f1ba 0f00 	cmp.w	sl, #0
 800c036:	d024      	beq.n	800c082 <__multiply+0xf2>
 800c038:	f104 0e14 	add.w	lr, r4, #20
 800c03c:	46a9      	mov	r9, r5
 800c03e:	f04f 0c00 	mov.w	ip, #0
 800c042:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c046:	f8d9 3000 	ldr.w	r3, [r9]
 800c04a:	fa1f fb87 	uxth.w	fp, r7
 800c04e:	b29b      	uxth	r3, r3
 800c050:	fb0a 330b 	mla	r3, sl, fp, r3
 800c054:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c058:	f8d9 7000 	ldr.w	r7, [r9]
 800c05c:	4463      	add	r3, ip
 800c05e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c062:	fb0a c70b 	mla	r7, sl, fp, ip
 800c066:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c06a:	b29b      	uxth	r3, r3
 800c06c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c070:	4572      	cmp	r2, lr
 800c072:	f849 3b04 	str.w	r3, [r9], #4
 800c076:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c07a:	d8e2      	bhi.n	800c042 <__multiply+0xb2>
 800c07c:	9b01      	ldr	r3, [sp, #4]
 800c07e:	f845 c003 	str.w	ip, [r5, r3]
 800c082:	9b03      	ldr	r3, [sp, #12]
 800c084:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c088:	3104      	adds	r1, #4
 800c08a:	f1b9 0f00 	cmp.w	r9, #0
 800c08e:	d021      	beq.n	800c0d4 <__multiply+0x144>
 800c090:	682b      	ldr	r3, [r5, #0]
 800c092:	f104 0c14 	add.w	ip, r4, #20
 800c096:	46ae      	mov	lr, r5
 800c098:	f04f 0a00 	mov.w	sl, #0
 800c09c:	f8bc b000 	ldrh.w	fp, [ip]
 800c0a0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c0a4:	fb09 770b 	mla	r7, r9, fp, r7
 800c0a8:	4457      	add	r7, sl
 800c0aa:	b29b      	uxth	r3, r3
 800c0ac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c0b0:	f84e 3b04 	str.w	r3, [lr], #4
 800c0b4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c0b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c0bc:	f8be 3000 	ldrh.w	r3, [lr]
 800c0c0:	fb09 330a 	mla	r3, r9, sl, r3
 800c0c4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c0c8:	4562      	cmp	r2, ip
 800c0ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c0ce:	d8e5      	bhi.n	800c09c <__multiply+0x10c>
 800c0d0:	9f01      	ldr	r7, [sp, #4]
 800c0d2:	51eb      	str	r3, [r5, r7]
 800c0d4:	3504      	adds	r5, #4
 800c0d6:	e799      	b.n	800c00c <__multiply+0x7c>
 800c0d8:	3e01      	subs	r6, #1
 800c0da:	e79b      	b.n	800c014 <__multiply+0x84>
 800c0dc:	0800dcf5 	.word	0x0800dcf5
 800c0e0:	0800dd77 	.word	0x0800dd77

0800c0e4 <__pow5mult>:
 800c0e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0e8:	4615      	mov	r5, r2
 800c0ea:	f012 0203 	ands.w	r2, r2, #3
 800c0ee:	4607      	mov	r7, r0
 800c0f0:	460e      	mov	r6, r1
 800c0f2:	d007      	beq.n	800c104 <__pow5mult+0x20>
 800c0f4:	4c25      	ldr	r4, [pc, #148]	@ (800c18c <__pow5mult+0xa8>)
 800c0f6:	3a01      	subs	r2, #1
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c0fe:	f7ff fe55 	bl	800bdac <__multadd>
 800c102:	4606      	mov	r6, r0
 800c104:	10ad      	asrs	r5, r5, #2
 800c106:	d03d      	beq.n	800c184 <__pow5mult+0xa0>
 800c108:	69fc      	ldr	r4, [r7, #28]
 800c10a:	b97c      	cbnz	r4, 800c12c <__pow5mult+0x48>
 800c10c:	2010      	movs	r0, #16
 800c10e:	f7ff fc77 	bl	800ba00 <malloc>
 800c112:	4602      	mov	r2, r0
 800c114:	61f8      	str	r0, [r7, #28]
 800c116:	b928      	cbnz	r0, 800c124 <__pow5mult+0x40>
 800c118:	4b1d      	ldr	r3, [pc, #116]	@ (800c190 <__pow5mult+0xac>)
 800c11a:	481e      	ldr	r0, [pc, #120]	@ (800c194 <__pow5mult+0xb0>)
 800c11c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c120:	f000 fb82 	bl	800c828 <__assert_func>
 800c124:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c128:	6004      	str	r4, [r0, #0]
 800c12a:	60c4      	str	r4, [r0, #12]
 800c12c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c130:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c134:	b94c      	cbnz	r4, 800c14a <__pow5mult+0x66>
 800c136:	f240 2171 	movw	r1, #625	@ 0x271
 800c13a:	4638      	mov	r0, r7
 800c13c:	f7ff ff12 	bl	800bf64 <__i2b>
 800c140:	2300      	movs	r3, #0
 800c142:	f8c8 0008 	str.w	r0, [r8, #8]
 800c146:	4604      	mov	r4, r0
 800c148:	6003      	str	r3, [r0, #0]
 800c14a:	f04f 0900 	mov.w	r9, #0
 800c14e:	07eb      	lsls	r3, r5, #31
 800c150:	d50a      	bpl.n	800c168 <__pow5mult+0x84>
 800c152:	4631      	mov	r1, r6
 800c154:	4622      	mov	r2, r4
 800c156:	4638      	mov	r0, r7
 800c158:	f7ff ff1a 	bl	800bf90 <__multiply>
 800c15c:	4631      	mov	r1, r6
 800c15e:	4680      	mov	r8, r0
 800c160:	4638      	mov	r0, r7
 800c162:	f7ff fe01 	bl	800bd68 <_Bfree>
 800c166:	4646      	mov	r6, r8
 800c168:	106d      	asrs	r5, r5, #1
 800c16a:	d00b      	beq.n	800c184 <__pow5mult+0xa0>
 800c16c:	6820      	ldr	r0, [r4, #0]
 800c16e:	b938      	cbnz	r0, 800c180 <__pow5mult+0x9c>
 800c170:	4622      	mov	r2, r4
 800c172:	4621      	mov	r1, r4
 800c174:	4638      	mov	r0, r7
 800c176:	f7ff ff0b 	bl	800bf90 <__multiply>
 800c17a:	6020      	str	r0, [r4, #0]
 800c17c:	f8c0 9000 	str.w	r9, [r0]
 800c180:	4604      	mov	r4, r0
 800c182:	e7e4      	b.n	800c14e <__pow5mult+0x6a>
 800c184:	4630      	mov	r0, r6
 800c186:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c18a:	bf00      	nop
 800c18c:	0800ddd0 	.word	0x0800ddd0
 800c190:	0800dc86 	.word	0x0800dc86
 800c194:	0800dd77 	.word	0x0800dd77

0800c198 <__lshift>:
 800c198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c19c:	460c      	mov	r4, r1
 800c19e:	6849      	ldr	r1, [r1, #4]
 800c1a0:	6923      	ldr	r3, [r4, #16]
 800c1a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c1a6:	68a3      	ldr	r3, [r4, #8]
 800c1a8:	4607      	mov	r7, r0
 800c1aa:	4691      	mov	r9, r2
 800c1ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c1b0:	f108 0601 	add.w	r6, r8, #1
 800c1b4:	42b3      	cmp	r3, r6
 800c1b6:	db0b      	blt.n	800c1d0 <__lshift+0x38>
 800c1b8:	4638      	mov	r0, r7
 800c1ba:	f7ff fd95 	bl	800bce8 <_Balloc>
 800c1be:	4605      	mov	r5, r0
 800c1c0:	b948      	cbnz	r0, 800c1d6 <__lshift+0x3e>
 800c1c2:	4602      	mov	r2, r0
 800c1c4:	4b28      	ldr	r3, [pc, #160]	@ (800c268 <__lshift+0xd0>)
 800c1c6:	4829      	ldr	r0, [pc, #164]	@ (800c26c <__lshift+0xd4>)
 800c1c8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c1cc:	f000 fb2c 	bl	800c828 <__assert_func>
 800c1d0:	3101      	adds	r1, #1
 800c1d2:	005b      	lsls	r3, r3, #1
 800c1d4:	e7ee      	b.n	800c1b4 <__lshift+0x1c>
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	f100 0114 	add.w	r1, r0, #20
 800c1dc:	f100 0210 	add.w	r2, r0, #16
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	4553      	cmp	r3, sl
 800c1e4:	db33      	blt.n	800c24e <__lshift+0xb6>
 800c1e6:	6920      	ldr	r0, [r4, #16]
 800c1e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c1ec:	f104 0314 	add.w	r3, r4, #20
 800c1f0:	f019 091f 	ands.w	r9, r9, #31
 800c1f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c1f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c1fc:	d02b      	beq.n	800c256 <__lshift+0xbe>
 800c1fe:	f1c9 0e20 	rsb	lr, r9, #32
 800c202:	468a      	mov	sl, r1
 800c204:	2200      	movs	r2, #0
 800c206:	6818      	ldr	r0, [r3, #0]
 800c208:	fa00 f009 	lsl.w	r0, r0, r9
 800c20c:	4310      	orrs	r0, r2
 800c20e:	f84a 0b04 	str.w	r0, [sl], #4
 800c212:	f853 2b04 	ldr.w	r2, [r3], #4
 800c216:	459c      	cmp	ip, r3
 800c218:	fa22 f20e 	lsr.w	r2, r2, lr
 800c21c:	d8f3      	bhi.n	800c206 <__lshift+0x6e>
 800c21e:	ebac 0304 	sub.w	r3, ip, r4
 800c222:	3b15      	subs	r3, #21
 800c224:	f023 0303 	bic.w	r3, r3, #3
 800c228:	3304      	adds	r3, #4
 800c22a:	f104 0015 	add.w	r0, r4, #21
 800c22e:	4584      	cmp	ip, r0
 800c230:	bf38      	it	cc
 800c232:	2304      	movcc	r3, #4
 800c234:	50ca      	str	r2, [r1, r3]
 800c236:	b10a      	cbz	r2, 800c23c <__lshift+0xa4>
 800c238:	f108 0602 	add.w	r6, r8, #2
 800c23c:	3e01      	subs	r6, #1
 800c23e:	4638      	mov	r0, r7
 800c240:	612e      	str	r6, [r5, #16]
 800c242:	4621      	mov	r1, r4
 800c244:	f7ff fd90 	bl	800bd68 <_Bfree>
 800c248:	4628      	mov	r0, r5
 800c24a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c24e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c252:	3301      	adds	r3, #1
 800c254:	e7c5      	b.n	800c1e2 <__lshift+0x4a>
 800c256:	3904      	subs	r1, #4
 800c258:	f853 2b04 	ldr.w	r2, [r3], #4
 800c25c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c260:	459c      	cmp	ip, r3
 800c262:	d8f9      	bhi.n	800c258 <__lshift+0xc0>
 800c264:	e7ea      	b.n	800c23c <__lshift+0xa4>
 800c266:	bf00      	nop
 800c268:	0800dcf5 	.word	0x0800dcf5
 800c26c:	0800dd77 	.word	0x0800dd77

0800c270 <__mcmp>:
 800c270:	690a      	ldr	r2, [r1, #16]
 800c272:	4603      	mov	r3, r0
 800c274:	6900      	ldr	r0, [r0, #16]
 800c276:	1a80      	subs	r0, r0, r2
 800c278:	b530      	push	{r4, r5, lr}
 800c27a:	d10e      	bne.n	800c29a <__mcmp+0x2a>
 800c27c:	3314      	adds	r3, #20
 800c27e:	3114      	adds	r1, #20
 800c280:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c284:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c288:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c28c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c290:	4295      	cmp	r5, r2
 800c292:	d003      	beq.n	800c29c <__mcmp+0x2c>
 800c294:	d205      	bcs.n	800c2a2 <__mcmp+0x32>
 800c296:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c29a:	bd30      	pop	{r4, r5, pc}
 800c29c:	42a3      	cmp	r3, r4
 800c29e:	d3f3      	bcc.n	800c288 <__mcmp+0x18>
 800c2a0:	e7fb      	b.n	800c29a <__mcmp+0x2a>
 800c2a2:	2001      	movs	r0, #1
 800c2a4:	e7f9      	b.n	800c29a <__mcmp+0x2a>
	...

0800c2a8 <__mdiff>:
 800c2a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2ac:	4689      	mov	r9, r1
 800c2ae:	4606      	mov	r6, r0
 800c2b0:	4611      	mov	r1, r2
 800c2b2:	4648      	mov	r0, r9
 800c2b4:	4614      	mov	r4, r2
 800c2b6:	f7ff ffdb 	bl	800c270 <__mcmp>
 800c2ba:	1e05      	subs	r5, r0, #0
 800c2bc:	d112      	bne.n	800c2e4 <__mdiff+0x3c>
 800c2be:	4629      	mov	r1, r5
 800c2c0:	4630      	mov	r0, r6
 800c2c2:	f7ff fd11 	bl	800bce8 <_Balloc>
 800c2c6:	4602      	mov	r2, r0
 800c2c8:	b928      	cbnz	r0, 800c2d6 <__mdiff+0x2e>
 800c2ca:	4b3f      	ldr	r3, [pc, #252]	@ (800c3c8 <__mdiff+0x120>)
 800c2cc:	f240 2137 	movw	r1, #567	@ 0x237
 800c2d0:	483e      	ldr	r0, [pc, #248]	@ (800c3cc <__mdiff+0x124>)
 800c2d2:	f000 faa9 	bl	800c828 <__assert_func>
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c2dc:	4610      	mov	r0, r2
 800c2de:	b003      	add	sp, #12
 800c2e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2e4:	bfbc      	itt	lt
 800c2e6:	464b      	movlt	r3, r9
 800c2e8:	46a1      	movlt	r9, r4
 800c2ea:	4630      	mov	r0, r6
 800c2ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c2f0:	bfba      	itte	lt
 800c2f2:	461c      	movlt	r4, r3
 800c2f4:	2501      	movlt	r5, #1
 800c2f6:	2500      	movge	r5, #0
 800c2f8:	f7ff fcf6 	bl	800bce8 <_Balloc>
 800c2fc:	4602      	mov	r2, r0
 800c2fe:	b918      	cbnz	r0, 800c308 <__mdiff+0x60>
 800c300:	4b31      	ldr	r3, [pc, #196]	@ (800c3c8 <__mdiff+0x120>)
 800c302:	f240 2145 	movw	r1, #581	@ 0x245
 800c306:	e7e3      	b.n	800c2d0 <__mdiff+0x28>
 800c308:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c30c:	6926      	ldr	r6, [r4, #16]
 800c30e:	60c5      	str	r5, [r0, #12]
 800c310:	f109 0310 	add.w	r3, r9, #16
 800c314:	f109 0514 	add.w	r5, r9, #20
 800c318:	f104 0e14 	add.w	lr, r4, #20
 800c31c:	f100 0b14 	add.w	fp, r0, #20
 800c320:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c324:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c328:	9301      	str	r3, [sp, #4]
 800c32a:	46d9      	mov	r9, fp
 800c32c:	f04f 0c00 	mov.w	ip, #0
 800c330:	9b01      	ldr	r3, [sp, #4]
 800c332:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c336:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c33a:	9301      	str	r3, [sp, #4]
 800c33c:	fa1f f38a 	uxth.w	r3, sl
 800c340:	4619      	mov	r1, r3
 800c342:	b283      	uxth	r3, r0
 800c344:	1acb      	subs	r3, r1, r3
 800c346:	0c00      	lsrs	r0, r0, #16
 800c348:	4463      	add	r3, ip
 800c34a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c34e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c352:	b29b      	uxth	r3, r3
 800c354:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c358:	4576      	cmp	r6, lr
 800c35a:	f849 3b04 	str.w	r3, [r9], #4
 800c35e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c362:	d8e5      	bhi.n	800c330 <__mdiff+0x88>
 800c364:	1b33      	subs	r3, r6, r4
 800c366:	3b15      	subs	r3, #21
 800c368:	f023 0303 	bic.w	r3, r3, #3
 800c36c:	3415      	adds	r4, #21
 800c36e:	3304      	adds	r3, #4
 800c370:	42a6      	cmp	r6, r4
 800c372:	bf38      	it	cc
 800c374:	2304      	movcc	r3, #4
 800c376:	441d      	add	r5, r3
 800c378:	445b      	add	r3, fp
 800c37a:	461e      	mov	r6, r3
 800c37c:	462c      	mov	r4, r5
 800c37e:	4544      	cmp	r4, r8
 800c380:	d30e      	bcc.n	800c3a0 <__mdiff+0xf8>
 800c382:	f108 0103 	add.w	r1, r8, #3
 800c386:	1b49      	subs	r1, r1, r5
 800c388:	f021 0103 	bic.w	r1, r1, #3
 800c38c:	3d03      	subs	r5, #3
 800c38e:	45a8      	cmp	r8, r5
 800c390:	bf38      	it	cc
 800c392:	2100      	movcc	r1, #0
 800c394:	440b      	add	r3, r1
 800c396:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c39a:	b191      	cbz	r1, 800c3c2 <__mdiff+0x11a>
 800c39c:	6117      	str	r7, [r2, #16]
 800c39e:	e79d      	b.n	800c2dc <__mdiff+0x34>
 800c3a0:	f854 1b04 	ldr.w	r1, [r4], #4
 800c3a4:	46e6      	mov	lr, ip
 800c3a6:	0c08      	lsrs	r0, r1, #16
 800c3a8:	fa1c fc81 	uxtah	ip, ip, r1
 800c3ac:	4471      	add	r1, lr
 800c3ae:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c3b2:	b289      	uxth	r1, r1
 800c3b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c3b8:	f846 1b04 	str.w	r1, [r6], #4
 800c3bc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c3c0:	e7dd      	b.n	800c37e <__mdiff+0xd6>
 800c3c2:	3f01      	subs	r7, #1
 800c3c4:	e7e7      	b.n	800c396 <__mdiff+0xee>
 800c3c6:	bf00      	nop
 800c3c8:	0800dcf5 	.word	0x0800dcf5
 800c3cc:	0800dd77 	.word	0x0800dd77

0800c3d0 <__ulp>:
 800c3d0:	b082      	sub	sp, #8
 800c3d2:	ed8d 0b00 	vstr	d0, [sp]
 800c3d6:	9a01      	ldr	r2, [sp, #4]
 800c3d8:	4b0f      	ldr	r3, [pc, #60]	@ (800c418 <__ulp+0x48>)
 800c3da:	4013      	ands	r3, r2
 800c3dc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	dc08      	bgt.n	800c3f6 <__ulp+0x26>
 800c3e4:	425b      	negs	r3, r3
 800c3e6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c3ea:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c3ee:	da04      	bge.n	800c3fa <__ulp+0x2a>
 800c3f0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c3f4:	4113      	asrs	r3, r2
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	e008      	b.n	800c40c <__ulp+0x3c>
 800c3fa:	f1a2 0314 	sub.w	r3, r2, #20
 800c3fe:	2b1e      	cmp	r3, #30
 800c400:	bfda      	itte	le
 800c402:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c406:	40da      	lsrle	r2, r3
 800c408:	2201      	movgt	r2, #1
 800c40a:	2300      	movs	r3, #0
 800c40c:	4619      	mov	r1, r3
 800c40e:	4610      	mov	r0, r2
 800c410:	ec41 0b10 	vmov	d0, r0, r1
 800c414:	b002      	add	sp, #8
 800c416:	4770      	bx	lr
 800c418:	7ff00000 	.word	0x7ff00000

0800c41c <__b2d>:
 800c41c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c420:	6906      	ldr	r6, [r0, #16]
 800c422:	f100 0814 	add.w	r8, r0, #20
 800c426:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c42a:	1f37      	subs	r7, r6, #4
 800c42c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c430:	4610      	mov	r0, r2
 800c432:	f7ff fd4b 	bl	800becc <__hi0bits>
 800c436:	f1c0 0320 	rsb	r3, r0, #32
 800c43a:	280a      	cmp	r0, #10
 800c43c:	600b      	str	r3, [r1, #0]
 800c43e:	491b      	ldr	r1, [pc, #108]	@ (800c4ac <__b2d+0x90>)
 800c440:	dc15      	bgt.n	800c46e <__b2d+0x52>
 800c442:	f1c0 0c0b 	rsb	ip, r0, #11
 800c446:	fa22 f30c 	lsr.w	r3, r2, ip
 800c44a:	45b8      	cmp	r8, r7
 800c44c:	ea43 0501 	orr.w	r5, r3, r1
 800c450:	bf34      	ite	cc
 800c452:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c456:	2300      	movcs	r3, #0
 800c458:	3015      	adds	r0, #21
 800c45a:	fa02 f000 	lsl.w	r0, r2, r0
 800c45e:	fa23 f30c 	lsr.w	r3, r3, ip
 800c462:	4303      	orrs	r3, r0
 800c464:	461c      	mov	r4, r3
 800c466:	ec45 4b10 	vmov	d0, r4, r5
 800c46a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c46e:	45b8      	cmp	r8, r7
 800c470:	bf3a      	itte	cc
 800c472:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c476:	f1a6 0708 	subcc.w	r7, r6, #8
 800c47a:	2300      	movcs	r3, #0
 800c47c:	380b      	subs	r0, #11
 800c47e:	d012      	beq.n	800c4a6 <__b2d+0x8a>
 800c480:	f1c0 0120 	rsb	r1, r0, #32
 800c484:	fa23 f401 	lsr.w	r4, r3, r1
 800c488:	4082      	lsls	r2, r0
 800c48a:	4322      	orrs	r2, r4
 800c48c:	4547      	cmp	r7, r8
 800c48e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c492:	bf8c      	ite	hi
 800c494:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c498:	2200      	movls	r2, #0
 800c49a:	4083      	lsls	r3, r0
 800c49c:	40ca      	lsrs	r2, r1
 800c49e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c4a2:	4313      	orrs	r3, r2
 800c4a4:	e7de      	b.n	800c464 <__b2d+0x48>
 800c4a6:	ea42 0501 	orr.w	r5, r2, r1
 800c4aa:	e7db      	b.n	800c464 <__b2d+0x48>
 800c4ac:	3ff00000 	.word	0x3ff00000

0800c4b0 <__d2b>:
 800c4b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c4b4:	460f      	mov	r7, r1
 800c4b6:	2101      	movs	r1, #1
 800c4b8:	ec59 8b10 	vmov	r8, r9, d0
 800c4bc:	4616      	mov	r6, r2
 800c4be:	f7ff fc13 	bl	800bce8 <_Balloc>
 800c4c2:	4604      	mov	r4, r0
 800c4c4:	b930      	cbnz	r0, 800c4d4 <__d2b+0x24>
 800c4c6:	4602      	mov	r2, r0
 800c4c8:	4b23      	ldr	r3, [pc, #140]	@ (800c558 <__d2b+0xa8>)
 800c4ca:	4824      	ldr	r0, [pc, #144]	@ (800c55c <__d2b+0xac>)
 800c4cc:	f240 310f 	movw	r1, #783	@ 0x30f
 800c4d0:	f000 f9aa 	bl	800c828 <__assert_func>
 800c4d4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c4d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c4dc:	b10d      	cbz	r5, 800c4e2 <__d2b+0x32>
 800c4de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c4e2:	9301      	str	r3, [sp, #4]
 800c4e4:	f1b8 0300 	subs.w	r3, r8, #0
 800c4e8:	d023      	beq.n	800c532 <__d2b+0x82>
 800c4ea:	4668      	mov	r0, sp
 800c4ec:	9300      	str	r3, [sp, #0]
 800c4ee:	f7ff fd0c 	bl	800bf0a <__lo0bits>
 800c4f2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c4f6:	b1d0      	cbz	r0, 800c52e <__d2b+0x7e>
 800c4f8:	f1c0 0320 	rsb	r3, r0, #32
 800c4fc:	fa02 f303 	lsl.w	r3, r2, r3
 800c500:	430b      	orrs	r3, r1
 800c502:	40c2      	lsrs	r2, r0
 800c504:	6163      	str	r3, [r4, #20]
 800c506:	9201      	str	r2, [sp, #4]
 800c508:	9b01      	ldr	r3, [sp, #4]
 800c50a:	61a3      	str	r3, [r4, #24]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	bf0c      	ite	eq
 800c510:	2201      	moveq	r2, #1
 800c512:	2202      	movne	r2, #2
 800c514:	6122      	str	r2, [r4, #16]
 800c516:	b1a5      	cbz	r5, 800c542 <__d2b+0x92>
 800c518:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c51c:	4405      	add	r5, r0
 800c51e:	603d      	str	r5, [r7, #0]
 800c520:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c524:	6030      	str	r0, [r6, #0]
 800c526:	4620      	mov	r0, r4
 800c528:	b003      	add	sp, #12
 800c52a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c52e:	6161      	str	r1, [r4, #20]
 800c530:	e7ea      	b.n	800c508 <__d2b+0x58>
 800c532:	a801      	add	r0, sp, #4
 800c534:	f7ff fce9 	bl	800bf0a <__lo0bits>
 800c538:	9b01      	ldr	r3, [sp, #4]
 800c53a:	6163      	str	r3, [r4, #20]
 800c53c:	3020      	adds	r0, #32
 800c53e:	2201      	movs	r2, #1
 800c540:	e7e8      	b.n	800c514 <__d2b+0x64>
 800c542:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c546:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c54a:	6038      	str	r0, [r7, #0]
 800c54c:	6918      	ldr	r0, [r3, #16]
 800c54e:	f7ff fcbd 	bl	800becc <__hi0bits>
 800c552:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c556:	e7e5      	b.n	800c524 <__d2b+0x74>
 800c558:	0800dcf5 	.word	0x0800dcf5
 800c55c:	0800dd77 	.word	0x0800dd77

0800c560 <__ratio>:
 800c560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c564:	b085      	sub	sp, #20
 800c566:	e9cd 1000 	strd	r1, r0, [sp]
 800c56a:	a902      	add	r1, sp, #8
 800c56c:	f7ff ff56 	bl	800c41c <__b2d>
 800c570:	9800      	ldr	r0, [sp, #0]
 800c572:	a903      	add	r1, sp, #12
 800c574:	ec55 4b10 	vmov	r4, r5, d0
 800c578:	f7ff ff50 	bl	800c41c <__b2d>
 800c57c:	9b01      	ldr	r3, [sp, #4]
 800c57e:	6919      	ldr	r1, [r3, #16]
 800c580:	9b00      	ldr	r3, [sp, #0]
 800c582:	691b      	ldr	r3, [r3, #16]
 800c584:	1ac9      	subs	r1, r1, r3
 800c586:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c58a:	1a9b      	subs	r3, r3, r2
 800c58c:	ec5b ab10 	vmov	sl, fp, d0
 800c590:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c594:	2b00      	cmp	r3, #0
 800c596:	bfce      	itee	gt
 800c598:	462a      	movgt	r2, r5
 800c59a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c59e:	465a      	movle	r2, fp
 800c5a0:	462f      	mov	r7, r5
 800c5a2:	46d9      	mov	r9, fp
 800c5a4:	bfcc      	ite	gt
 800c5a6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c5aa:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c5ae:	464b      	mov	r3, r9
 800c5b0:	4652      	mov	r2, sl
 800c5b2:	4620      	mov	r0, r4
 800c5b4:	4639      	mov	r1, r7
 800c5b6:	f7f4 f961 	bl	800087c <__aeabi_ddiv>
 800c5ba:	ec41 0b10 	vmov	d0, r0, r1
 800c5be:	b005      	add	sp, #20
 800c5c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c5c4 <__copybits>:
 800c5c4:	3901      	subs	r1, #1
 800c5c6:	b570      	push	{r4, r5, r6, lr}
 800c5c8:	1149      	asrs	r1, r1, #5
 800c5ca:	6914      	ldr	r4, [r2, #16]
 800c5cc:	3101      	adds	r1, #1
 800c5ce:	f102 0314 	add.w	r3, r2, #20
 800c5d2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c5d6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c5da:	1f05      	subs	r5, r0, #4
 800c5dc:	42a3      	cmp	r3, r4
 800c5de:	d30c      	bcc.n	800c5fa <__copybits+0x36>
 800c5e0:	1aa3      	subs	r3, r4, r2
 800c5e2:	3b11      	subs	r3, #17
 800c5e4:	f023 0303 	bic.w	r3, r3, #3
 800c5e8:	3211      	adds	r2, #17
 800c5ea:	42a2      	cmp	r2, r4
 800c5ec:	bf88      	it	hi
 800c5ee:	2300      	movhi	r3, #0
 800c5f0:	4418      	add	r0, r3
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	4288      	cmp	r0, r1
 800c5f6:	d305      	bcc.n	800c604 <__copybits+0x40>
 800c5f8:	bd70      	pop	{r4, r5, r6, pc}
 800c5fa:	f853 6b04 	ldr.w	r6, [r3], #4
 800c5fe:	f845 6f04 	str.w	r6, [r5, #4]!
 800c602:	e7eb      	b.n	800c5dc <__copybits+0x18>
 800c604:	f840 3b04 	str.w	r3, [r0], #4
 800c608:	e7f4      	b.n	800c5f4 <__copybits+0x30>

0800c60a <__any_on>:
 800c60a:	f100 0214 	add.w	r2, r0, #20
 800c60e:	6900      	ldr	r0, [r0, #16]
 800c610:	114b      	asrs	r3, r1, #5
 800c612:	4298      	cmp	r0, r3
 800c614:	b510      	push	{r4, lr}
 800c616:	db11      	blt.n	800c63c <__any_on+0x32>
 800c618:	dd0a      	ble.n	800c630 <__any_on+0x26>
 800c61a:	f011 011f 	ands.w	r1, r1, #31
 800c61e:	d007      	beq.n	800c630 <__any_on+0x26>
 800c620:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c624:	fa24 f001 	lsr.w	r0, r4, r1
 800c628:	fa00 f101 	lsl.w	r1, r0, r1
 800c62c:	428c      	cmp	r4, r1
 800c62e:	d10b      	bne.n	800c648 <__any_on+0x3e>
 800c630:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c634:	4293      	cmp	r3, r2
 800c636:	d803      	bhi.n	800c640 <__any_on+0x36>
 800c638:	2000      	movs	r0, #0
 800c63a:	bd10      	pop	{r4, pc}
 800c63c:	4603      	mov	r3, r0
 800c63e:	e7f7      	b.n	800c630 <__any_on+0x26>
 800c640:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c644:	2900      	cmp	r1, #0
 800c646:	d0f5      	beq.n	800c634 <__any_on+0x2a>
 800c648:	2001      	movs	r0, #1
 800c64a:	e7f6      	b.n	800c63a <__any_on+0x30>

0800c64c <__sread>:
 800c64c:	b510      	push	{r4, lr}
 800c64e:	460c      	mov	r4, r1
 800c650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c654:	f000 f8b4 	bl	800c7c0 <_read_r>
 800c658:	2800      	cmp	r0, #0
 800c65a:	bfab      	itete	ge
 800c65c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c65e:	89a3      	ldrhlt	r3, [r4, #12]
 800c660:	181b      	addge	r3, r3, r0
 800c662:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c666:	bfac      	ite	ge
 800c668:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c66a:	81a3      	strhlt	r3, [r4, #12]
 800c66c:	bd10      	pop	{r4, pc}

0800c66e <__swrite>:
 800c66e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c672:	461f      	mov	r7, r3
 800c674:	898b      	ldrh	r3, [r1, #12]
 800c676:	05db      	lsls	r3, r3, #23
 800c678:	4605      	mov	r5, r0
 800c67a:	460c      	mov	r4, r1
 800c67c:	4616      	mov	r6, r2
 800c67e:	d505      	bpl.n	800c68c <__swrite+0x1e>
 800c680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c684:	2302      	movs	r3, #2
 800c686:	2200      	movs	r2, #0
 800c688:	f000 f888 	bl	800c79c <_lseek_r>
 800c68c:	89a3      	ldrh	r3, [r4, #12]
 800c68e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c692:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c696:	81a3      	strh	r3, [r4, #12]
 800c698:	4632      	mov	r2, r6
 800c69a:	463b      	mov	r3, r7
 800c69c:	4628      	mov	r0, r5
 800c69e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c6a2:	f000 b8af 	b.w	800c804 <_write_r>

0800c6a6 <__sseek>:
 800c6a6:	b510      	push	{r4, lr}
 800c6a8:	460c      	mov	r4, r1
 800c6aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6ae:	f000 f875 	bl	800c79c <_lseek_r>
 800c6b2:	1c43      	adds	r3, r0, #1
 800c6b4:	89a3      	ldrh	r3, [r4, #12]
 800c6b6:	bf15      	itete	ne
 800c6b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c6ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c6be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c6c2:	81a3      	strheq	r3, [r4, #12]
 800c6c4:	bf18      	it	ne
 800c6c6:	81a3      	strhne	r3, [r4, #12]
 800c6c8:	bd10      	pop	{r4, pc}

0800c6ca <__sclose>:
 800c6ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6ce:	f000 b855 	b.w	800c77c <_close_r>

0800c6d2 <_realloc_r>:
 800c6d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6d6:	4680      	mov	r8, r0
 800c6d8:	4615      	mov	r5, r2
 800c6da:	460c      	mov	r4, r1
 800c6dc:	b921      	cbnz	r1, 800c6e8 <_realloc_r+0x16>
 800c6de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c6e2:	4611      	mov	r1, r2
 800c6e4:	f7ff b9b6 	b.w	800ba54 <_malloc_r>
 800c6e8:	b92a      	cbnz	r2, 800c6f6 <_realloc_r+0x24>
 800c6ea:	f000 f8cf 	bl	800c88c <_free_r>
 800c6ee:	2400      	movs	r4, #0
 800c6f0:	4620      	mov	r0, r4
 800c6f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6f6:	f000 f913 	bl	800c920 <_malloc_usable_size_r>
 800c6fa:	4285      	cmp	r5, r0
 800c6fc:	4606      	mov	r6, r0
 800c6fe:	d802      	bhi.n	800c706 <_realloc_r+0x34>
 800c700:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c704:	d8f4      	bhi.n	800c6f0 <_realloc_r+0x1e>
 800c706:	4629      	mov	r1, r5
 800c708:	4640      	mov	r0, r8
 800c70a:	f7ff f9a3 	bl	800ba54 <_malloc_r>
 800c70e:	4607      	mov	r7, r0
 800c710:	2800      	cmp	r0, #0
 800c712:	d0ec      	beq.n	800c6ee <_realloc_r+0x1c>
 800c714:	42b5      	cmp	r5, r6
 800c716:	462a      	mov	r2, r5
 800c718:	4621      	mov	r1, r4
 800c71a:	bf28      	it	cs
 800c71c:	4632      	movcs	r2, r6
 800c71e:	f7fd fe74 	bl	800a40a <memcpy>
 800c722:	4621      	mov	r1, r4
 800c724:	4640      	mov	r0, r8
 800c726:	f000 f8b1 	bl	800c88c <_free_r>
 800c72a:	463c      	mov	r4, r7
 800c72c:	e7e0      	b.n	800c6f0 <_realloc_r+0x1e>

0800c72e <__ascii_wctomb>:
 800c72e:	4603      	mov	r3, r0
 800c730:	4608      	mov	r0, r1
 800c732:	b141      	cbz	r1, 800c746 <__ascii_wctomb+0x18>
 800c734:	2aff      	cmp	r2, #255	@ 0xff
 800c736:	d904      	bls.n	800c742 <__ascii_wctomb+0x14>
 800c738:	228a      	movs	r2, #138	@ 0x8a
 800c73a:	601a      	str	r2, [r3, #0]
 800c73c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c740:	4770      	bx	lr
 800c742:	700a      	strb	r2, [r1, #0]
 800c744:	2001      	movs	r0, #1
 800c746:	4770      	bx	lr

0800c748 <memmove>:
 800c748:	4288      	cmp	r0, r1
 800c74a:	b510      	push	{r4, lr}
 800c74c:	eb01 0402 	add.w	r4, r1, r2
 800c750:	d902      	bls.n	800c758 <memmove+0x10>
 800c752:	4284      	cmp	r4, r0
 800c754:	4623      	mov	r3, r4
 800c756:	d807      	bhi.n	800c768 <memmove+0x20>
 800c758:	1e43      	subs	r3, r0, #1
 800c75a:	42a1      	cmp	r1, r4
 800c75c:	d008      	beq.n	800c770 <memmove+0x28>
 800c75e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c762:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c766:	e7f8      	b.n	800c75a <memmove+0x12>
 800c768:	4402      	add	r2, r0
 800c76a:	4601      	mov	r1, r0
 800c76c:	428a      	cmp	r2, r1
 800c76e:	d100      	bne.n	800c772 <memmove+0x2a>
 800c770:	bd10      	pop	{r4, pc}
 800c772:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c776:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c77a:	e7f7      	b.n	800c76c <memmove+0x24>

0800c77c <_close_r>:
 800c77c:	b538      	push	{r3, r4, r5, lr}
 800c77e:	4d06      	ldr	r5, [pc, #24]	@ (800c798 <_close_r+0x1c>)
 800c780:	2300      	movs	r3, #0
 800c782:	4604      	mov	r4, r0
 800c784:	4608      	mov	r0, r1
 800c786:	602b      	str	r3, [r5, #0]
 800c788:	f7f5 fd86 	bl	8002298 <_close>
 800c78c:	1c43      	adds	r3, r0, #1
 800c78e:	d102      	bne.n	800c796 <_close_r+0x1a>
 800c790:	682b      	ldr	r3, [r5, #0]
 800c792:	b103      	cbz	r3, 800c796 <_close_r+0x1a>
 800c794:	6023      	str	r3, [r4, #0]
 800c796:	bd38      	pop	{r3, r4, r5, pc}
 800c798:	200008d4 	.word	0x200008d4

0800c79c <_lseek_r>:
 800c79c:	b538      	push	{r3, r4, r5, lr}
 800c79e:	4d07      	ldr	r5, [pc, #28]	@ (800c7bc <_lseek_r+0x20>)
 800c7a0:	4604      	mov	r4, r0
 800c7a2:	4608      	mov	r0, r1
 800c7a4:	4611      	mov	r1, r2
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	602a      	str	r2, [r5, #0]
 800c7aa:	461a      	mov	r2, r3
 800c7ac:	f7f5 fd9b 	bl	80022e6 <_lseek>
 800c7b0:	1c43      	adds	r3, r0, #1
 800c7b2:	d102      	bne.n	800c7ba <_lseek_r+0x1e>
 800c7b4:	682b      	ldr	r3, [r5, #0]
 800c7b6:	b103      	cbz	r3, 800c7ba <_lseek_r+0x1e>
 800c7b8:	6023      	str	r3, [r4, #0]
 800c7ba:	bd38      	pop	{r3, r4, r5, pc}
 800c7bc:	200008d4 	.word	0x200008d4

0800c7c0 <_read_r>:
 800c7c0:	b538      	push	{r3, r4, r5, lr}
 800c7c2:	4d07      	ldr	r5, [pc, #28]	@ (800c7e0 <_read_r+0x20>)
 800c7c4:	4604      	mov	r4, r0
 800c7c6:	4608      	mov	r0, r1
 800c7c8:	4611      	mov	r1, r2
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	602a      	str	r2, [r5, #0]
 800c7ce:	461a      	mov	r2, r3
 800c7d0:	f7f5 fd29 	bl	8002226 <_read>
 800c7d4:	1c43      	adds	r3, r0, #1
 800c7d6:	d102      	bne.n	800c7de <_read_r+0x1e>
 800c7d8:	682b      	ldr	r3, [r5, #0]
 800c7da:	b103      	cbz	r3, 800c7de <_read_r+0x1e>
 800c7dc:	6023      	str	r3, [r4, #0]
 800c7de:	bd38      	pop	{r3, r4, r5, pc}
 800c7e0:	200008d4 	.word	0x200008d4

0800c7e4 <_sbrk_r>:
 800c7e4:	b538      	push	{r3, r4, r5, lr}
 800c7e6:	4d06      	ldr	r5, [pc, #24]	@ (800c800 <_sbrk_r+0x1c>)
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	4604      	mov	r4, r0
 800c7ec:	4608      	mov	r0, r1
 800c7ee:	602b      	str	r3, [r5, #0]
 800c7f0:	f7f5 fd86 	bl	8002300 <_sbrk>
 800c7f4:	1c43      	adds	r3, r0, #1
 800c7f6:	d102      	bne.n	800c7fe <_sbrk_r+0x1a>
 800c7f8:	682b      	ldr	r3, [r5, #0]
 800c7fa:	b103      	cbz	r3, 800c7fe <_sbrk_r+0x1a>
 800c7fc:	6023      	str	r3, [r4, #0]
 800c7fe:	bd38      	pop	{r3, r4, r5, pc}
 800c800:	200008d4 	.word	0x200008d4

0800c804 <_write_r>:
 800c804:	b538      	push	{r3, r4, r5, lr}
 800c806:	4d07      	ldr	r5, [pc, #28]	@ (800c824 <_write_r+0x20>)
 800c808:	4604      	mov	r4, r0
 800c80a:	4608      	mov	r0, r1
 800c80c:	4611      	mov	r1, r2
 800c80e:	2200      	movs	r2, #0
 800c810:	602a      	str	r2, [r5, #0]
 800c812:	461a      	mov	r2, r3
 800c814:	f7f5 fd24 	bl	8002260 <_write>
 800c818:	1c43      	adds	r3, r0, #1
 800c81a:	d102      	bne.n	800c822 <_write_r+0x1e>
 800c81c:	682b      	ldr	r3, [r5, #0]
 800c81e:	b103      	cbz	r3, 800c822 <_write_r+0x1e>
 800c820:	6023      	str	r3, [r4, #0]
 800c822:	bd38      	pop	{r3, r4, r5, pc}
 800c824:	200008d4 	.word	0x200008d4

0800c828 <__assert_func>:
 800c828:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c82a:	4614      	mov	r4, r2
 800c82c:	461a      	mov	r2, r3
 800c82e:	4b09      	ldr	r3, [pc, #36]	@ (800c854 <__assert_func+0x2c>)
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	4605      	mov	r5, r0
 800c834:	68d8      	ldr	r0, [r3, #12]
 800c836:	b954      	cbnz	r4, 800c84e <__assert_func+0x26>
 800c838:	4b07      	ldr	r3, [pc, #28]	@ (800c858 <__assert_func+0x30>)
 800c83a:	461c      	mov	r4, r3
 800c83c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c840:	9100      	str	r1, [sp, #0]
 800c842:	462b      	mov	r3, r5
 800c844:	4905      	ldr	r1, [pc, #20]	@ (800c85c <__assert_func+0x34>)
 800c846:	f000 f873 	bl	800c930 <fiprintf>
 800c84a:	f000 f883 	bl	800c954 <abort>
 800c84e:	4b04      	ldr	r3, [pc, #16]	@ (800c860 <__assert_func+0x38>)
 800c850:	e7f4      	b.n	800c83c <__assert_func+0x14>
 800c852:	bf00      	nop
 800c854:	200001c4 	.word	0x200001c4
 800c858:	0800df0b 	.word	0x0800df0b
 800c85c:	0800dedd 	.word	0x0800dedd
 800c860:	0800ded0 	.word	0x0800ded0

0800c864 <_calloc_r>:
 800c864:	b570      	push	{r4, r5, r6, lr}
 800c866:	fba1 5402 	umull	r5, r4, r1, r2
 800c86a:	b93c      	cbnz	r4, 800c87c <_calloc_r+0x18>
 800c86c:	4629      	mov	r1, r5
 800c86e:	f7ff f8f1 	bl	800ba54 <_malloc_r>
 800c872:	4606      	mov	r6, r0
 800c874:	b928      	cbnz	r0, 800c882 <_calloc_r+0x1e>
 800c876:	2600      	movs	r6, #0
 800c878:	4630      	mov	r0, r6
 800c87a:	bd70      	pop	{r4, r5, r6, pc}
 800c87c:	220c      	movs	r2, #12
 800c87e:	6002      	str	r2, [r0, #0]
 800c880:	e7f9      	b.n	800c876 <_calloc_r+0x12>
 800c882:	462a      	mov	r2, r5
 800c884:	4621      	mov	r1, r4
 800c886:	f7fd fd87 	bl	800a398 <memset>
 800c88a:	e7f5      	b.n	800c878 <_calloc_r+0x14>

0800c88c <_free_r>:
 800c88c:	b538      	push	{r3, r4, r5, lr}
 800c88e:	4605      	mov	r5, r0
 800c890:	2900      	cmp	r1, #0
 800c892:	d041      	beq.n	800c918 <_free_r+0x8c>
 800c894:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c898:	1f0c      	subs	r4, r1, #4
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	bfb8      	it	lt
 800c89e:	18e4      	addlt	r4, r4, r3
 800c8a0:	f7ff fa16 	bl	800bcd0 <__malloc_lock>
 800c8a4:	4a1d      	ldr	r2, [pc, #116]	@ (800c91c <_free_r+0x90>)
 800c8a6:	6813      	ldr	r3, [r2, #0]
 800c8a8:	b933      	cbnz	r3, 800c8b8 <_free_r+0x2c>
 800c8aa:	6063      	str	r3, [r4, #4]
 800c8ac:	6014      	str	r4, [r2, #0]
 800c8ae:	4628      	mov	r0, r5
 800c8b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c8b4:	f7ff ba12 	b.w	800bcdc <__malloc_unlock>
 800c8b8:	42a3      	cmp	r3, r4
 800c8ba:	d908      	bls.n	800c8ce <_free_r+0x42>
 800c8bc:	6820      	ldr	r0, [r4, #0]
 800c8be:	1821      	adds	r1, r4, r0
 800c8c0:	428b      	cmp	r3, r1
 800c8c2:	bf01      	itttt	eq
 800c8c4:	6819      	ldreq	r1, [r3, #0]
 800c8c6:	685b      	ldreq	r3, [r3, #4]
 800c8c8:	1809      	addeq	r1, r1, r0
 800c8ca:	6021      	streq	r1, [r4, #0]
 800c8cc:	e7ed      	b.n	800c8aa <_free_r+0x1e>
 800c8ce:	461a      	mov	r2, r3
 800c8d0:	685b      	ldr	r3, [r3, #4]
 800c8d2:	b10b      	cbz	r3, 800c8d8 <_free_r+0x4c>
 800c8d4:	42a3      	cmp	r3, r4
 800c8d6:	d9fa      	bls.n	800c8ce <_free_r+0x42>
 800c8d8:	6811      	ldr	r1, [r2, #0]
 800c8da:	1850      	adds	r0, r2, r1
 800c8dc:	42a0      	cmp	r0, r4
 800c8de:	d10b      	bne.n	800c8f8 <_free_r+0x6c>
 800c8e0:	6820      	ldr	r0, [r4, #0]
 800c8e2:	4401      	add	r1, r0
 800c8e4:	1850      	adds	r0, r2, r1
 800c8e6:	4283      	cmp	r3, r0
 800c8e8:	6011      	str	r1, [r2, #0]
 800c8ea:	d1e0      	bne.n	800c8ae <_free_r+0x22>
 800c8ec:	6818      	ldr	r0, [r3, #0]
 800c8ee:	685b      	ldr	r3, [r3, #4]
 800c8f0:	6053      	str	r3, [r2, #4]
 800c8f2:	4408      	add	r0, r1
 800c8f4:	6010      	str	r0, [r2, #0]
 800c8f6:	e7da      	b.n	800c8ae <_free_r+0x22>
 800c8f8:	d902      	bls.n	800c900 <_free_r+0x74>
 800c8fa:	230c      	movs	r3, #12
 800c8fc:	602b      	str	r3, [r5, #0]
 800c8fe:	e7d6      	b.n	800c8ae <_free_r+0x22>
 800c900:	6820      	ldr	r0, [r4, #0]
 800c902:	1821      	adds	r1, r4, r0
 800c904:	428b      	cmp	r3, r1
 800c906:	bf04      	itt	eq
 800c908:	6819      	ldreq	r1, [r3, #0]
 800c90a:	685b      	ldreq	r3, [r3, #4]
 800c90c:	6063      	str	r3, [r4, #4]
 800c90e:	bf04      	itt	eq
 800c910:	1809      	addeq	r1, r1, r0
 800c912:	6021      	streq	r1, [r4, #0]
 800c914:	6054      	str	r4, [r2, #4]
 800c916:	e7ca      	b.n	800c8ae <_free_r+0x22>
 800c918:	bd38      	pop	{r3, r4, r5, pc}
 800c91a:	bf00      	nop
 800c91c:	200008d0 	.word	0x200008d0

0800c920 <_malloc_usable_size_r>:
 800c920:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c924:	1f18      	subs	r0, r3, #4
 800c926:	2b00      	cmp	r3, #0
 800c928:	bfbc      	itt	lt
 800c92a:	580b      	ldrlt	r3, [r1, r0]
 800c92c:	18c0      	addlt	r0, r0, r3
 800c92e:	4770      	bx	lr

0800c930 <fiprintf>:
 800c930:	b40e      	push	{r1, r2, r3}
 800c932:	b503      	push	{r0, r1, lr}
 800c934:	4601      	mov	r1, r0
 800c936:	ab03      	add	r3, sp, #12
 800c938:	4805      	ldr	r0, [pc, #20]	@ (800c950 <fiprintf+0x20>)
 800c93a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c93e:	6800      	ldr	r0, [r0, #0]
 800c940:	9301      	str	r3, [sp, #4]
 800c942:	f000 f837 	bl	800c9b4 <_vfiprintf_r>
 800c946:	b002      	add	sp, #8
 800c948:	f85d eb04 	ldr.w	lr, [sp], #4
 800c94c:	b003      	add	sp, #12
 800c94e:	4770      	bx	lr
 800c950:	200001c4 	.word	0x200001c4

0800c954 <abort>:
 800c954:	b508      	push	{r3, lr}
 800c956:	2006      	movs	r0, #6
 800c958:	f000 fa84 	bl	800ce64 <raise>
 800c95c:	2001      	movs	r0, #1
 800c95e:	f7f5 fc57 	bl	8002210 <_exit>

0800c962 <__sfputc_r>:
 800c962:	6893      	ldr	r3, [r2, #8]
 800c964:	3b01      	subs	r3, #1
 800c966:	2b00      	cmp	r3, #0
 800c968:	b410      	push	{r4}
 800c96a:	6093      	str	r3, [r2, #8]
 800c96c:	da08      	bge.n	800c980 <__sfputc_r+0x1e>
 800c96e:	6994      	ldr	r4, [r2, #24]
 800c970:	42a3      	cmp	r3, r4
 800c972:	db01      	blt.n	800c978 <__sfputc_r+0x16>
 800c974:	290a      	cmp	r1, #10
 800c976:	d103      	bne.n	800c980 <__sfputc_r+0x1e>
 800c978:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c97c:	f000 b932 	b.w	800cbe4 <__swbuf_r>
 800c980:	6813      	ldr	r3, [r2, #0]
 800c982:	1c58      	adds	r0, r3, #1
 800c984:	6010      	str	r0, [r2, #0]
 800c986:	7019      	strb	r1, [r3, #0]
 800c988:	4608      	mov	r0, r1
 800c98a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c98e:	4770      	bx	lr

0800c990 <__sfputs_r>:
 800c990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c992:	4606      	mov	r6, r0
 800c994:	460f      	mov	r7, r1
 800c996:	4614      	mov	r4, r2
 800c998:	18d5      	adds	r5, r2, r3
 800c99a:	42ac      	cmp	r4, r5
 800c99c:	d101      	bne.n	800c9a2 <__sfputs_r+0x12>
 800c99e:	2000      	movs	r0, #0
 800c9a0:	e007      	b.n	800c9b2 <__sfputs_r+0x22>
 800c9a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9a6:	463a      	mov	r2, r7
 800c9a8:	4630      	mov	r0, r6
 800c9aa:	f7ff ffda 	bl	800c962 <__sfputc_r>
 800c9ae:	1c43      	adds	r3, r0, #1
 800c9b0:	d1f3      	bne.n	800c99a <__sfputs_r+0xa>
 800c9b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c9b4 <_vfiprintf_r>:
 800c9b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9b8:	460d      	mov	r5, r1
 800c9ba:	b09d      	sub	sp, #116	@ 0x74
 800c9bc:	4614      	mov	r4, r2
 800c9be:	4698      	mov	r8, r3
 800c9c0:	4606      	mov	r6, r0
 800c9c2:	b118      	cbz	r0, 800c9cc <_vfiprintf_r+0x18>
 800c9c4:	6a03      	ldr	r3, [r0, #32]
 800c9c6:	b90b      	cbnz	r3, 800c9cc <_vfiprintf_r+0x18>
 800c9c8:	f7fc fe04 	bl	80095d4 <__sinit>
 800c9cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c9ce:	07d9      	lsls	r1, r3, #31
 800c9d0:	d405      	bmi.n	800c9de <_vfiprintf_r+0x2a>
 800c9d2:	89ab      	ldrh	r3, [r5, #12]
 800c9d4:	059a      	lsls	r2, r3, #22
 800c9d6:	d402      	bmi.n	800c9de <_vfiprintf_r+0x2a>
 800c9d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c9da:	f7fd fd14 	bl	800a406 <__retarget_lock_acquire_recursive>
 800c9de:	89ab      	ldrh	r3, [r5, #12]
 800c9e0:	071b      	lsls	r3, r3, #28
 800c9e2:	d501      	bpl.n	800c9e8 <_vfiprintf_r+0x34>
 800c9e4:	692b      	ldr	r3, [r5, #16]
 800c9e6:	b99b      	cbnz	r3, 800ca10 <_vfiprintf_r+0x5c>
 800c9e8:	4629      	mov	r1, r5
 800c9ea:	4630      	mov	r0, r6
 800c9ec:	f000 f938 	bl	800cc60 <__swsetup_r>
 800c9f0:	b170      	cbz	r0, 800ca10 <_vfiprintf_r+0x5c>
 800c9f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c9f4:	07dc      	lsls	r4, r3, #31
 800c9f6:	d504      	bpl.n	800ca02 <_vfiprintf_r+0x4e>
 800c9f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c9fc:	b01d      	add	sp, #116	@ 0x74
 800c9fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca02:	89ab      	ldrh	r3, [r5, #12]
 800ca04:	0598      	lsls	r0, r3, #22
 800ca06:	d4f7      	bmi.n	800c9f8 <_vfiprintf_r+0x44>
 800ca08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ca0a:	f7fd fcfd 	bl	800a408 <__retarget_lock_release_recursive>
 800ca0e:	e7f3      	b.n	800c9f8 <_vfiprintf_r+0x44>
 800ca10:	2300      	movs	r3, #0
 800ca12:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca14:	2320      	movs	r3, #32
 800ca16:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ca1a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca1e:	2330      	movs	r3, #48	@ 0x30
 800ca20:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cbd0 <_vfiprintf_r+0x21c>
 800ca24:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ca28:	f04f 0901 	mov.w	r9, #1
 800ca2c:	4623      	mov	r3, r4
 800ca2e:	469a      	mov	sl, r3
 800ca30:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca34:	b10a      	cbz	r2, 800ca3a <_vfiprintf_r+0x86>
 800ca36:	2a25      	cmp	r2, #37	@ 0x25
 800ca38:	d1f9      	bne.n	800ca2e <_vfiprintf_r+0x7a>
 800ca3a:	ebba 0b04 	subs.w	fp, sl, r4
 800ca3e:	d00b      	beq.n	800ca58 <_vfiprintf_r+0xa4>
 800ca40:	465b      	mov	r3, fp
 800ca42:	4622      	mov	r2, r4
 800ca44:	4629      	mov	r1, r5
 800ca46:	4630      	mov	r0, r6
 800ca48:	f7ff ffa2 	bl	800c990 <__sfputs_r>
 800ca4c:	3001      	adds	r0, #1
 800ca4e:	f000 80a7 	beq.w	800cba0 <_vfiprintf_r+0x1ec>
 800ca52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca54:	445a      	add	r2, fp
 800ca56:	9209      	str	r2, [sp, #36]	@ 0x24
 800ca58:	f89a 3000 	ldrb.w	r3, [sl]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	f000 809f 	beq.w	800cba0 <_vfiprintf_r+0x1ec>
 800ca62:	2300      	movs	r3, #0
 800ca64:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ca68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca6c:	f10a 0a01 	add.w	sl, sl, #1
 800ca70:	9304      	str	r3, [sp, #16]
 800ca72:	9307      	str	r3, [sp, #28]
 800ca74:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ca78:	931a      	str	r3, [sp, #104]	@ 0x68
 800ca7a:	4654      	mov	r4, sl
 800ca7c:	2205      	movs	r2, #5
 800ca7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca82:	4853      	ldr	r0, [pc, #332]	@ (800cbd0 <_vfiprintf_r+0x21c>)
 800ca84:	f7f3 fbbc 	bl	8000200 <memchr>
 800ca88:	9a04      	ldr	r2, [sp, #16]
 800ca8a:	b9d8      	cbnz	r0, 800cac4 <_vfiprintf_r+0x110>
 800ca8c:	06d1      	lsls	r1, r2, #27
 800ca8e:	bf44      	itt	mi
 800ca90:	2320      	movmi	r3, #32
 800ca92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca96:	0713      	lsls	r3, r2, #28
 800ca98:	bf44      	itt	mi
 800ca9a:	232b      	movmi	r3, #43	@ 0x2b
 800ca9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800caa0:	f89a 3000 	ldrb.w	r3, [sl]
 800caa4:	2b2a      	cmp	r3, #42	@ 0x2a
 800caa6:	d015      	beq.n	800cad4 <_vfiprintf_r+0x120>
 800caa8:	9a07      	ldr	r2, [sp, #28]
 800caaa:	4654      	mov	r4, sl
 800caac:	2000      	movs	r0, #0
 800caae:	f04f 0c0a 	mov.w	ip, #10
 800cab2:	4621      	mov	r1, r4
 800cab4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cab8:	3b30      	subs	r3, #48	@ 0x30
 800caba:	2b09      	cmp	r3, #9
 800cabc:	d94b      	bls.n	800cb56 <_vfiprintf_r+0x1a2>
 800cabe:	b1b0      	cbz	r0, 800caee <_vfiprintf_r+0x13a>
 800cac0:	9207      	str	r2, [sp, #28]
 800cac2:	e014      	b.n	800caee <_vfiprintf_r+0x13a>
 800cac4:	eba0 0308 	sub.w	r3, r0, r8
 800cac8:	fa09 f303 	lsl.w	r3, r9, r3
 800cacc:	4313      	orrs	r3, r2
 800cace:	9304      	str	r3, [sp, #16]
 800cad0:	46a2      	mov	sl, r4
 800cad2:	e7d2      	b.n	800ca7a <_vfiprintf_r+0xc6>
 800cad4:	9b03      	ldr	r3, [sp, #12]
 800cad6:	1d19      	adds	r1, r3, #4
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	9103      	str	r1, [sp, #12]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	bfbb      	ittet	lt
 800cae0:	425b      	neglt	r3, r3
 800cae2:	f042 0202 	orrlt.w	r2, r2, #2
 800cae6:	9307      	strge	r3, [sp, #28]
 800cae8:	9307      	strlt	r3, [sp, #28]
 800caea:	bfb8      	it	lt
 800caec:	9204      	strlt	r2, [sp, #16]
 800caee:	7823      	ldrb	r3, [r4, #0]
 800caf0:	2b2e      	cmp	r3, #46	@ 0x2e
 800caf2:	d10a      	bne.n	800cb0a <_vfiprintf_r+0x156>
 800caf4:	7863      	ldrb	r3, [r4, #1]
 800caf6:	2b2a      	cmp	r3, #42	@ 0x2a
 800caf8:	d132      	bne.n	800cb60 <_vfiprintf_r+0x1ac>
 800cafa:	9b03      	ldr	r3, [sp, #12]
 800cafc:	1d1a      	adds	r2, r3, #4
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	9203      	str	r2, [sp, #12]
 800cb02:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cb06:	3402      	adds	r4, #2
 800cb08:	9305      	str	r3, [sp, #20]
 800cb0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cbe0 <_vfiprintf_r+0x22c>
 800cb0e:	7821      	ldrb	r1, [r4, #0]
 800cb10:	2203      	movs	r2, #3
 800cb12:	4650      	mov	r0, sl
 800cb14:	f7f3 fb74 	bl	8000200 <memchr>
 800cb18:	b138      	cbz	r0, 800cb2a <_vfiprintf_r+0x176>
 800cb1a:	9b04      	ldr	r3, [sp, #16]
 800cb1c:	eba0 000a 	sub.w	r0, r0, sl
 800cb20:	2240      	movs	r2, #64	@ 0x40
 800cb22:	4082      	lsls	r2, r0
 800cb24:	4313      	orrs	r3, r2
 800cb26:	3401      	adds	r4, #1
 800cb28:	9304      	str	r3, [sp, #16]
 800cb2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb2e:	4829      	ldr	r0, [pc, #164]	@ (800cbd4 <_vfiprintf_r+0x220>)
 800cb30:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cb34:	2206      	movs	r2, #6
 800cb36:	f7f3 fb63 	bl	8000200 <memchr>
 800cb3a:	2800      	cmp	r0, #0
 800cb3c:	d03f      	beq.n	800cbbe <_vfiprintf_r+0x20a>
 800cb3e:	4b26      	ldr	r3, [pc, #152]	@ (800cbd8 <_vfiprintf_r+0x224>)
 800cb40:	bb1b      	cbnz	r3, 800cb8a <_vfiprintf_r+0x1d6>
 800cb42:	9b03      	ldr	r3, [sp, #12]
 800cb44:	3307      	adds	r3, #7
 800cb46:	f023 0307 	bic.w	r3, r3, #7
 800cb4a:	3308      	adds	r3, #8
 800cb4c:	9303      	str	r3, [sp, #12]
 800cb4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb50:	443b      	add	r3, r7
 800cb52:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb54:	e76a      	b.n	800ca2c <_vfiprintf_r+0x78>
 800cb56:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb5a:	460c      	mov	r4, r1
 800cb5c:	2001      	movs	r0, #1
 800cb5e:	e7a8      	b.n	800cab2 <_vfiprintf_r+0xfe>
 800cb60:	2300      	movs	r3, #0
 800cb62:	3401      	adds	r4, #1
 800cb64:	9305      	str	r3, [sp, #20]
 800cb66:	4619      	mov	r1, r3
 800cb68:	f04f 0c0a 	mov.w	ip, #10
 800cb6c:	4620      	mov	r0, r4
 800cb6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb72:	3a30      	subs	r2, #48	@ 0x30
 800cb74:	2a09      	cmp	r2, #9
 800cb76:	d903      	bls.n	800cb80 <_vfiprintf_r+0x1cc>
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d0c6      	beq.n	800cb0a <_vfiprintf_r+0x156>
 800cb7c:	9105      	str	r1, [sp, #20]
 800cb7e:	e7c4      	b.n	800cb0a <_vfiprintf_r+0x156>
 800cb80:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb84:	4604      	mov	r4, r0
 800cb86:	2301      	movs	r3, #1
 800cb88:	e7f0      	b.n	800cb6c <_vfiprintf_r+0x1b8>
 800cb8a:	ab03      	add	r3, sp, #12
 800cb8c:	9300      	str	r3, [sp, #0]
 800cb8e:	462a      	mov	r2, r5
 800cb90:	4b12      	ldr	r3, [pc, #72]	@ (800cbdc <_vfiprintf_r+0x228>)
 800cb92:	a904      	add	r1, sp, #16
 800cb94:	4630      	mov	r0, r6
 800cb96:	f7fb fea5 	bl	80088e4 <_printf_float>
 800cb9a:	4607      	mov	r7, r0
 800cb9c:	1c78      	adds	r0, r7, #1
 800cb9e:	d1d6      	bne.n	800cb4e <_vfiprintf_r+0x19a>
 800cba0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cba2:	07d9      	lsls	r1, r3, #31
 800cba4:	d405      	bmi.n	800cbb2 <_vfiprintf_r+0x1fe>
 800cba6:	89ab      	ldrh	r3, [r5, #12]
 800cba8:	059a      	lsls	r2, r3, #22
 800cbaa:	d402      	bmi.n	800cbb2 <_vfiprintf_r+0x1fe>
 800cbac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cbae:	f7fd fc2b 	bl	800a408 <__retarget_lock_release_recursive>
 800cbb2:	89ab      	ldrh	r3, [r5, #12]
 800cbb4:	065b      	lsls	r3, r3, #25
 800cbb6:	f53f af1f 	bmi.w	800c9f8 <_vfiprintf_r+0x44>
 800cbba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cbbc:	e71e      	b.n	800c9fc <_vfiprintf_r+0x48>
 800cbbe:	ab03      	add	r3, sp, #12
 800cbc0:	9300      	str	r3, [sp, #0]
 800cbc2:	462a      	mov	r2, r5
 800cbc4:	4b05      	ldr	r3, [pc, #20]	@ (800cbdc <_vfiprintf_r+0x228>)
 800cbc6:	a904      	add	r1, sp, #16
 800cbc8:	4630      	mov	r0, r6
 800cbca:	f7fc f923 	bl	8008e14 <_printf_i>
 800cbce:	e7e4      	b.n	800cb9a <_vfiprintf_r+0x1e6>
 800cbd0:	0800dd66 	.word	0x0800dd66
 800cbd4:	0800dd70 	.word	0x0800dd70
 800cbd8:	080088e5 	.word	0x080088e5
 800cbdc:	0800c991 	.word	0x0800c991
 800cbe0:	0800dd6c 	.word	0x0800dd6c

0800cbe4 <__swbuf_r>:
 800cbe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbe6:	460e      	mov	r6, r1
 800cbe8:	4614      	mov	r4, r2
 800cbea:	4605      	mov	r5, r0
 800cbec:	b118      	cbz	r0, 800cbf6 <__swbuf_r+0x12>
 800cbee:	6a03      	ldr	r3, [r0, #32]
 800cbf0:	b90b      	cbnz	r3, 800cbf6 <__swbuf_r+0x12>
 800cbf2:	f7fc fcef 	bl	80095d4 <__sinit>
 800cbf6:	69a3      	ldr	r3, [r4, #24]
 800cbf8:	60a3      	str	r3, [r4, #8]
 800cbfa:	89a3      	ldrh	r3, [r4, #12]
 800cbfc:	071a      	lsls	r2, r3, #28
 800cbfe:	d501      	bpl.n	800cc04 <__swbuf_r+0x20>
 800cc00:	6923      	ldr	r3, [r4, #16]
 800cc02:	b943      	cbnz	r3, 800cc16 <__swbuf_r+0x32>
 800cc04:	4621      	mov	r1, r4
 800cc06:	4628      	mov	r0, r5
 800cc08:	f000 f82a 	bl	800cc60 <__swsetup_r>
 800cc0c:	b118      	cbz	r0, 800cc16 <__swbuf_r+0x32>
 800cc0e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800cc12:	4638      	mov	r0, r7
 800cc14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc16:	6823      	ldr	r3, [r4, #0]
 800cc18:	6922      	ldr	r2, [r4, #16]
 800cc1a:	1a98      	subs	r0, r3, r2
 800cc1c:	6963      	ldr	r3, [r4, #20]
 800cc1e:	b2f6      	uxtb	r6, r6
 800cc20:	4283      	cmp	r3, r0
 800cc22:	4637      	mov	r7, r6
 800cc24:	dc05      	bgt.n	800cc32 <__swbuf_r+0x4e>
 800cc26:	4621      	mov	r1, r4
 800cc28:	4628      	mov	r0, r5
 800cc2a:	f7ff f829 	bl	800bc80 <_fflush_r>
 800cc2e:	2800      	cmp	r0, #0
 800cc30:	d1ed      	bne.n	800cc0e <__swbuf_r+0x2a>
 800cc32:	68a3      	ldr	r3, [r4, #8]
 800cc34:	3b01      	subs	r3, #1
 800cc36:	60a3      	str	r3, [r4, #8]
 800cc38:	6823      	ldr	r3, [r4, #0]
 800cc3a:	1c5a      	adds	r2, r3, #1
 800cc3c:	6022      	str	r2, [r4, #0]
 800cc3e:	701e      	strb	r6, [r3, #0]
 800cc40:	6962      	ldr	r2, [r4, #20]
 800cc42:	1c43      	adds	r3, r0, #1
 800cc44:	429a      	cmp	r2, r3
 800cc46:	d004      	beq.n	800cc52 <__swbuf_r+0x6e>
 800cc48:	89a3      	ldrh	r3, [r4, #12]
 800cc4a:	07db      	lsls	r3, r3, #31
 800cc4c:	d5e1      	bpl.n	800cc12 <__swbuf_r+0x2e>
 800cc4e:	2e0a      	cmp	r6, #10
 800cc50:	d1df      	bne.n	800cc12 <__swbuf_r+0x2e>
 800cc52:	4621      	mov	r1, r4
 800cc54:	4628      	mov	r0, r5
 800cc56:	f7ff f813 	bl	800bc80 <_fflush_r>
 800cc5a:	2800      	cmp	r0, #0
 800cc5c:	d0d9      	beq.n	800cc12 <__swbuf_r+0x2e>
 800cc5e:	e7d6      	b.n	800cc0e <__swbuf_r+0x2a>

0800cc60 <__swsetup_r>:
 800cc60:	b538      	push	{r3, r4, r5, lr}
 800cc62:	4b29      	ldr	r3, [pc, #164]	@ (800cd08 <__swsetup_r+0xa8>)
 800cc64:	4605      	mov	r5, r0
 800cc66:	6818      	ldr	r0, [r3, #0]
 800cc68:	460c      	mov	r4, r1
 800cc6a:	b118      	cbz	r0, 800cc74 <__swsetup_r+0x14>
 800cc6c:	6a03      	ldr	r3, [r0, #32]
 800cc6e:	b90b      	cbnz	r3, 800cc74 <__swsetup_r+0x14>
 800cc70:	f7fc fcb0 	bl	80095d4 <__sinit>
 800cc74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc78:	0719      	lsls	r1, r3, #28
 800cc7a:	d422      	bmi.n	800ccc2 <__swsetup_r+0x62>
 800cc7c:	06da      	lsls	r2, r3, #27
 800cc7e:	d407      	bmi.n	800cc90 <__swsetup_r+0x30>
 800cc80:	2209      	movs	r2, #9
 800cc82:	602a      	str	r2, [r5, #0]
 800cc84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc88:	81a3      	strh	r3, [r4, #12]
 800cc8a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cc8e:	e033      	b.n	800ccf8 <__swsetup_r+0x98>
 800cc90:	0758      	lsls	r0, r3, #29
 800cc92:	d512      	bpl.n	800ccba <__swsetup_r+0x5a>
 800cc94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cc96:	b141      	cbz	r1, 800ccaa <__swsetup_r+0x4a>
 800cc98:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cc9c:	4299      	cmp	r1, r3
 800cc9e:	d002      	beq.n	800cca6 <__swsetup_r+0x46>
 800cca0:	4628      	mov	r0, r5
 800cca2:	f7ff fdf3 	bl	800c88c <_free_r>
 800cca6:	2300      	movs	r3, #0
 800cca8:	6363      	str	r3, [r4, #52]	@ 0x34
 800ccaa:	89a3      	ldrh	r3, [r4, #12]
 800ccac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ccb0:	81a3      	strh	r3, [r4, #12]
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	6063      	str	r3, [r4, #4]
 800ccb6:	6923      	ldr	r3, [r4, #16]
 800ccb8:	6023      	str	r3, [r4, #0]
 800ccba:	89a3      	ldrh	r3, [r4, #12]
 800ccbc:	f043 0308 	orr.w	r3, r3, #8
 800ccc0:	81a3      	strh	r3, [r4, #12]
 800ccc2:	6923      	ldr	r3, [r4, #16]
 800ccc4:	b94b      	cbnz	r3, 800ccda <__swsetup_r+0x7a>
 800ccc6:	89a3      	ldrh	r3, [r4, #12]
 800ccc8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cccc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ccd0:	d003      	beq.n	800ccda <__swsetup_r+0x7a>
 800ccd2:	4621      	mov	r1, r4
 800ccd4:	4628      	mov	r0, r5
 800ccd6:	f000 f83f 	bl	800cd58 <__smakebuf_r>
 800ccda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccde:	f013 0201 	ands.w	r2, r3, #1
 800cce2:	d00a      	beq.n	800ccfa <__swsetup_r+0x9a>
 800cce4:	2200      	movs	r2, #0
 800cce6:	60a2      	str	r2, [r4, #8]
 800cce8:	6962      	ldr	r2, [r4, #20]
 800ccea:	4252      	negs	r2, r2
 800ccec:	61a2      	str	r2, [r4, #24]
 800ccee:	6922      	ldr	r2, [r4, #16]
 800ccf0:	b942      	cbnz	r2, 800cd04 <__swsetup_r+0xa4>
 800ccf2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ccf6:	d1c5      	bne.n	800cc84 <__swsetup_r+0x24>
 800ccf8:	bd38      	pop	{r3, r4, r5, pc}
 800ccfa:	0799      	lsls	r1, r3, #30
 800ccfc:	bf58      	it	pl
 800ccfe:	6962      	ldrpl	r2, [r4, #20]
 800cd00:	60a2      	str	r2, [r4, #8]
 800cd02:	e7f4      	b.n	800ccee <__swsetup_r+0x8e>
 800cd04:	2000      	movs	r0, #0
 800cd06:	e7f7      	b.n	800ccf8 <__swsetup_r+0x98>
 800cd08:	200001c4 	.word	0x200001c4

0800cd0c <__swhatbuf_r>:
 800cd0c:	b570      	push	{r4, r5, r6, lr}
 800cd0e:	460c      	mov	r4, r1
 800cd10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd14:	2900      	cmp	r1, #0
 800cd16:	b096      	sub	sp, #88	@ 0x58
 800cd18:	4615      	mov	r5, r2
 800cd1a:	461e      	mov	r6, r3
 800cd1c:	da0d      	bge.n	800cd3a <__swhatbuf_r+0x2e>
 800cd1e:	89a3      	ldrh	r3, [r4, #12]
 800cd20:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cd24:	f04f 0100 	mov.w	r1, #0
 800cd28:	bf14      	ite	ne
 800cd2a:	2340      	movne	r3, #64	@ 0x40
 800cd2c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cd30:	2000      	movs	r0, #0
 800cd32:	6031      	str	r1, [r6, #0]
 800cd34:	602b      	str	r3, [r5, #0]
 800cd36:	b016      	add	sp, #88	@ 0x58
 800cd38:	bd70      	pop	{r4, r5, r6, pc}
 800cd3a:	466a      	mov	r2, sp
 800cd3c:	f000 f848 	bl	800cdd0 <_fstat_r>
 800cd40:	2800      	cmp	r0, #0
 800cd42:	dbec      	blt.n	800cd1e <__swhatbuf_r+0x12>
 800cd44:	9901      	ldr	r1, [sp, #4]
 800cd46:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cd4a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cd4e:	4259      	negs	r1, r3
 800cd50:	4159      	adcs	r1, r3
 800cd52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cd56:	e7eb      	b.n	800cd30 <__swhatbuf_r+0x24>

0800cd58 <__smakebuf_r>:
 800cd58:	898b      	ldrh	r3, [r1, #12]
 800cd5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cd5c:	079d      	lsls	r5, r3, #30
 800cd5e:	4606      	mov	r6, r0
 800cd60:	460c      	mov	r4, r1
 800cd62:	d507      	bpl.n	800cd74 <__smakebuf_r+0x1c>
 800cd64:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cd68:	6023      	str	r3, [r4, #0]
 800cd6a:	6123      	str	r3, [r4, #16]
 800cd6c:	2301      	movs	r3, #1
 800cd6e:	6163      	str	r3, [r4, #20]
 800cd70:	b003      	add	sp, #12
 800cd72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd74:	ab01      	add	r3, sp, #4
 800cd76:	466a      	mov	r2, sp
 800cd78:	f7ff ffc8 	bl	800cd0c <__swhatbuf_r>
 800cd7c:	9f00      	ldr	r7, [sp, #0]
 800cd7e:	4605      	mov	r5, r0
 800cd80:	4639      	mov	r1, r7
 800cd82:	4630      	mov	r0, r6
 800cd84:	f7fe fe66 	bl	800ba54 <_malloc_r>
 800cd88:	b948      	cbnz	r0, 800cd9e <__smakebuf_r+0x46>
 800cd8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd8e:	059a      	lsls	r2, r3, #22
 800cd90:	d4ee      	bmi.n	800cd70 <__smakebuf_r+0x18>
 800cd92:	f023 0303 	bic.w	r3, r3, #3
 800cd96:	f043 0302 	orr.w	r3, r3, #2
 800cd9a:	81a3      	strh	r3, [r4, #12]
 800cd9c:	e7e2      	b.n	800cd64 <__smakebuf_r+0xc>
 800cd9e:	89a3      	ldrh	r3, [r4, #12]
 800cda0:	6020      	str	r0, [r4, #0]
 800cda2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cda6:	81a3      	strh	r3, [r4, #12]
 800cda8:	9b01      	ldr	r3, [sp, #4]
 800cdaa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cdae:	b15b      	cbz	r3, 800cdc8 <__smakebuf_r+0x70>
 800cdb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cdb4:	4630      	mov	r0, r6
 800cdb6:	f000 f81d 	bl	800cdf4 <_isatty_r>
 800cdba:	b128      	cbz	r0, 800cdc8 <__smakebuf_r+0x70>
 800cdbc:	89a3      	ldrh	r3, [r4, #12]
 800cdbe:	f023 0303 	bic.w	r3, r3, #3
 800cdc2:	f043 0301 	orr.w	r3, r3, #1
 800cdc6:	81a3      	strh	r3, [r4, #12]
 800cdc8:	89a3      	ldrh	r3, [r4, #12]
 800cdca:	431d      	orrs	r5, r3
 800cdcc:	81a5      	strh	r5, [r4, #12]
 800cdce:	e7cf      	b.n	800cd70 <__smakebuf_r+0x18>

0800cdd0 <_fstat_r>:
 800cdd0:	b538      	push	{r3, r4, r5, lr}
 800cdd2:	4d07      	ldr	r5, [pc, #28]	@ (800cdf0 <_fstat_r+0x20>)
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	4604      	mov	r4, r0
 800cdd8:	4608      	mov	r0, r1
 800cdda:	4611      	mov	r1, r2
 800cddc:	602b      	str	r3, [r5, #0]
 800cdde:	f7f5 fa67 	bl	80022b0 <_fstat>
 800cde2:	1c43      	adds	r3, r0, #1
 800cde4:	d102      	bne.n	800cdec <_fstat_r+0x1c>
 800cde6:	682b      	ldr	r3, [r5, #0]
 800cde8:	b103      	cbz	r3, 800cdec <_fstat_r+0x1c>
 800cdea:	6023      	str	r3, [r4, #0]
 800cdec:	bd38      	pop	{r3, r4, r5, pc}
 800cdee:	bf00      	nop
 800cdf0:	200008d4 	.word	0x200008d4

0800cdf4 <_isatty_r>:
 800cdf4:	b538      	push	{r3, r4, r5, lr}
 800cdf6:	4d06      	ldr	r5, [pc, #24]	@ (800ce10 <_isatty_r+0x1c>)
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	4604      	mov	r4, r0
 800cdfc:	4608      	mov	r0, r1
 800cdfe:	602b      	str	r3, [r5, #0]
 800ce00:	f7f5 fa66 	bl	80022d0 <_isatty>
 800ce04:	1c43      	adds	r3, r0, #1
 800ce06:	d102      	bne.n	800ce0e <_isatty_r+0x1a>
 800ce08:	682b      	ldr	r3, [r5, #0]
 800ce0a:	b103      	cbz	r3, 800ce0e <_isatty_r+0x1a>
 800ce0c:	6023      	str	r3, [r4, #0]
 800ce0e:	bd38      	pop	{r3, r4, r5, pc}
 800ce10:	200008d4 	.word	0x200008d4

0800ce14 <_raise_r>:
 800ce14:	291f      	cmp	r1, #31
 800ce16:	b538      	push	{r3, r4, r5, lr}
 800ce18:	4605      	mov	r5, r0
 800ce1a:	460c      	mov	r4, r1
 800ce1c:	d904      	bls.n	800ce28 <_raise_r+0x14>
 800ce1e:	2316      	movs	r3, #22
 800ce20:	6003      	str	r3, [r0, #0]
 800ce22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ce26:	bd38      	pop	{r3, r4, r5, pc}
 800ce28:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ce2a:	b112      	cbz	r2, 800ce32 <_raise_r+0x1e>
 800ce2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ce30:	b94b      	cbnz	r3, 800ce46 <_raise_r+0x32>
 800ce32:	4628      	mov	r0, r5
 800ce34:	f000 f830 	bl	800ce98 <_getpid_r>
 800ce38:	4622      	mov	r2, r4
 800ce3a:	4601      	mov	r1, r0
 800ce3c:	4628      	mov	r0, r5
 800ce3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce42:	f000 b817 	b.w	800ce74 <_kill_r>
 800ce46:	2b01      	cmp	r3, #1
 800ce48:	d00a      	beq.n	800ce60 <_raise_r+0x4c>
 800ce4a:	1c59      	adds	r1, r3, #1
 800ce4c:	d103      	bne.n	800ce56 <_raise_r+0x42>
 800ce4e:	2316      	movs	r3, #22
 800ce50:	6003      	str	r3, [r0, #0]
 800ce52:	2001      	movs	r0, #1
 800ce54:	e7e7      	b.n	800ce26 <_raise_r+0x12>
 800ce56:	2100      	movs	r1, #0
 800ce58:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ce5c:	4620      	mov	r0, r4
 800ce5e:	4798      	blx	r3
 800ce60:	2000      	movs	r0, #0
 800ce62:	e7e0      	b.n	800ce26 <_raise_r+0x12>

0800ce64 <raise>:
 800ce64:	4b02      	ldr	r3, [pc, #8]	@ (800ce70 <raise+0xc>)
 800ce66:	4601      	mov	r1, r0
 800ce68:	6818      	ldr	r0, [r3, #0]
 800ce6a:	f7ff bfd3 	b.w	800ce14 <_raise_r>
 800ce6e:	bf00      	nop
 800ce70:	200001c4 	.word	0x200001c4

0800ce74 <_kill_r>:
 800ce74:	b538      	push	{r3, r4, r5, lr}
 800ce76:	4d07      	ldr	r5, [pc, #28]	@ (800ce94 <_kill_r+0x20>)
 800ce78:	2300      	movs	r3, #0
 800ce7a:	4604      	mov	r4, r0
 800ce7c:	4608      	mov	r0, r1
 800ce7e:	4611      	mov	r1, r2
 800ce80:	602b      	str	r3, [r5, #0]
 800ce82:	f7f5 f9b5 	bl	80021f0 <_kill>
 800ce86:	1c43      	adds	r3, r0, #1
 800ce88:	d102      	bne.n	800ce90 <_kill_r+0x1c>
 800ce8a:	682b      	ldr	r3, [r5, #0]
 800ce8c:	b103      	cbz	r3, 800ce90 <_kill_r+0x1c>
 800ce8e:	6023      	str	r3, [r4, #0]
 800ce90:	bd38      	pop	{r3, r4, r5, pc}
 800ce92:	bf00      	nop
 800ce94:	200008d4 	.word	0x200008d4

0800ce98 <_getpid_r>:
 800ce98:	f7f5 b9a2 	b.w	80021e0 <_getpid>

0800ce9c <atan2f>:
 800ce9c:	f000 b81e 	b.w	800cedc <__ieee754_atan2f>

0800cea0 <sqrtf>:
 800cea0:	b508      	push	{r3, lr}
 800cea2:	ed2d 8b02 	vpush	{d8}
 800cea6:	eeb0 8a40 	vmov.f32	s16, s0
 800ceaa:	f000 f8b7 	bl	800d01c <__ieee754_sqrtf>
 800ceae:	eeb4 8a48 	vcmp.f32	s16, s16
 800ceb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ceb6:	d60c      	bvs.n	800ced2 <sqrtf+0x32>
 800ceb8:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800ced8 <sqrtf+0x38>
 800cebc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800cec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cec4:	d505      	bpl.n	800ced2 <sqrtf+0x32>
 800cec6:	f7fd fa73 	bl	800a3b0 <__errno>
 800ceca:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800cece:	2321      	movs	r3, #33	@ 0x21
 800ced0:	6003      	str	r3, [r0, #0]
 800ced2:	ecbd 8b02 	vpop	{d8}
 800ced6:	bd08      	pop	{r3, pc}
 800ced8:	00000000 	.word	0x00000000

0800cedc <__ieee754_atan2f>:
 800cedc:	ee10 2a90 	vmov	r2, s1
 800cee0:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800cee4:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800cee8:	b510      	push	{r4, lr}
 800ceea:	eef0 7a40 	vmov.f32	s15, s0
 800ceee:	d806      	bhi.n	800cefe <__ieee754_atan2f+0x22>
 800cef0:	ee10 0a10 	vmov	r0, s0
 800cef4:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800cef8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800cefc:	d904      	bls.n	800cf08 <__ieee754_atan2f+0x2c>
 800cefe:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800cf02:	eeb0 0a67 	vmov.f32	s0, s15
 800cf06:	bd10      	pop	{r4, pc}
 800cf08:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800cf0c:	d103      	bne.n	800cf16 <__ieee754_atan2f+0x3a>
 800cf0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf12:	f000 b887 	b.w	800d024 <atanf>
 800cf16:	1794      	asrs	r4, r2, #30
 800cf18:	f004 0402 	and.w	r4, r4, #2
 800cf1c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800cf20:	b943      	cbnz	r3, 800cf34 <__ieee754_atan2f+0x58>
 800cf22:	2c02      	cmp	r4, #2
 800cf24:	d05e      	beq.n	800cfe4 <__ieee754_atan2f+0x108>
 800cf26:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800cff8 <__ieee754_atan2f+0x11c>
 800cf2a:	2c03      	cmp	r4, #3
 800cf2c:	bf08      	it	eq
 800cf2e:	eef0 7a47 	vmoveq.f32	s15, s14
 800cf32:	e7e6      	b.n	800cf02 <__ieee754_atan2f+0x26>
 800cf34:	b941      	cbnz	r1, 800cf48 <__ieee754_atan2f+0x6c>
 800cf36:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800cffc <__ieee754_atan2f+0x120>
 800cf3a:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800d000 <__ieee754_atan2f+0x124>
 800cf3e:	2800      	cmp	r0, #0
 800cf40:	bfb8      	it	lt
 800cf42:	eef0 7a47 	vmovlt.f32	s15, s14
 800cf46:	e7dc      	b.n	800cf02 <__ieee754_atan2f+0x26>
 800cf48:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800cf4c:	d110      	bne.n	800cf70 <__ieee754_atan2f+0x94>
 800cf4e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800cf52:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 800cf56:	d107      	bne.n	800cf68 <__ieee754_atan2f+0x8c>
 800cf58:	2c02      	cmp	r4, #2
 800cf5a:	d846      	bhi.n	800cfea <__ieee754_atan2f+0x10e>
 800cf5c:	4b29      	ldr	r3, [pc, #164]	@ (800d004 <__ieee754_atan2f+0x128>)
 800cf5e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800cf62:	edd3 7a00 	vldr	s15, [r3]
 800cf66:	e7cc      	b.n	800cf02 <__ieee754_atan2f+0x26>
 800cf68:	2c02      	cmp	r4, #2
 800cf6a:	d841      	bhi.n	800cff0 <__ieee754_atan2f+0x114>
 800cf6c:	4b26      	ldr	r3, [pc, #152]	@ (800d008 <__ieee754_atan2f+0x12c>)
 800cf6e:	e7f6      	b.n	800cf5e <__ieee754_atan2f+0x82>
 800cf70:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800cf74:	d0df      	beq.n	800cf36 <__ieee754_atan2f+0x5a>
 800cf76:	1a5b      	subs	r3, r3, r1
 800cf78:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800cf7c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800cf80:	da1a      	bge.n	800cfb8 <__ieee754_atan2f+0xdc>
 800cf82:	2a00      	cmp	r2, #0
 800cf84:	da01      	bge.n	800cf8a <__ieee754_atan2f+0xae>
 800cf86:	313c      	adds	r1, #60	@ 0x3c
 800cf88:	db19      	blt.n	800cfbe <__ieee754_atan2f+0xe2>
 800cf8a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800cf8e:	f000 f91d 	bl	800d1cc <fabsf>
 800cf92:	f000 f847 	bl	800d024 <atanf>
 800cf96:	eef0 7a40 	vmov.f32	s15, s0
 800cf9a:	2c01      	cmp	r4, #1
 800cf9c:	d012      	beq.n	800cfc4 <__ieee754_atan2f+0xe8>
 800cf9e:	2c02      	cmp	r4, #2
 800cfa0:	d017      	beq.n	800cfd2 <__ieee754_atan2f+0xf6>
 800cfa2:	2c00      	cmp	r4, #0
 800cfa4:	d0ad      	beq.n	800cf02 <__ieee754_atan2f+0x26>
 800cfa6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800d00c <__ieee754_atan2f+0x130>
 800cfaa:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cfae:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800d010 <__ieee754_atan2f+0x134>
 800cfb2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cfb6:	e7a4      	b.n	800cf02 <__ieee754_atan2f+0x26>
 800cfb8:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800cffc <__ieee754_atan2f+0x120>
 800cfbc:	e7ed      	b.n	800cf9a <__ieee754_atan2f+0xbe>
 800cfbe:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800d014 <__ieee754_atan2f+0x138>
 800cfc2:	e7ea      	b.n	800cf9a <__ieee754_atan2f+0xbe>
 800cfc4:	ee17 3a90 	vmov	r3, s15
 800cfc8:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800cfcc:	ee07 3a90 	vmov	s15, r3
 800cfd0:	e797      	b.n	800cf02 <__ieee754_atan2f+0x26>
 800cfd2:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800d00c <__ieee754_atan2f+0x130>
 800cfd6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cfda:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800d010 <__ieee754_atan2f+0x134>
 800cfde:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cfe2:	e78e      	b.n	800cf02 <__ieee754_atan2f+0x26>
 800cfe4:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800d010 <__ieee754_atan2f+0x134>
 800cfe8:	e78b      	b.n	800cf02 <__ieee754_atan2f+0x26>
 800cfea:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800d018 <__ieee754_atan2f+0x13c>
 800cfee:	e788      	b.n	800cf02 <__ieee754_atan2f+0x26>
 800cff0:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800d014 <__ieee754_atan2f+0x138>
 800cff4:	e785      	b.n	800cf02 <__ieee754_atan2f+0x26>
 800cff6:	bf00      	nop
 800cff8:	c0490fdb 	.word	0xc0490fdb
 800cffc:	3fc90fdb 	.word	0x3fc90fdb
 800d000:	bfc90fdb 	.word	0xbfc90fdb
 800d004:	0800df18 	.word	0x0800df18
 800d008:	0800df0c 	.word	0x0800df0c
 800d00c:	33bbbd2e 	.word	0x33bbbd2e
 800d010:	40490fdb 	.word	0x40490fdb
 800d014:	00000000 	.word	0x00000000
 800d018:	3f490fdb 	.word	0x3f490fdb

0800d01c <__ieee754_sqrtf>:
 800d01c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d020:	4770      	bx	lr
	...

0800d024 <atanf>:
 800d024:	b538      	push	{r3, r4, r5, lr}
 800d026:	ee10 5a10 	vmov	r5, s0
 800d02a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800d02e:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800d032:	eef0 7a40 	vmov.f32	s15, s0
 800d036:	d310      	bcc.n	800d05a <atanf+0x36>
 800d038:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800d03c:	d904      	bls.n	800d048 <atanf+0x24>
 800d03e:	ee70 7a00 	vadd.f32	s15, s0, s0
 800d042:	eeb0 0a67 	vmov.f32	s0, s15
 800d046:	bd38      	pop	{r3, r4, r5, pc}
 800d048:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800d180 <atanf+0x15c>
 800d04c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800d184 <atanf+0x160>
 800d050:	2d00      	cmp	r5, #0
 800d052:	bfc8      	it	gt
 800d054:	eef0 7a47 	vmovgt.f32	s15, s14
 800d058:	e7f3      	b.n	800d042 <atanf+0x1e>
 800d05a:	4b4b      	ldr	r3, [pc, #300]	@ (800d188 <atanf+0x164>)
 800d05c:	429c      	cmp	r4, r3
 800d05e:	d810      	bhi.n	800d082 <atanf+0x5e>
 800d060:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800d064:	d20a      	bcs.n	800d07c <atanf+0x58>
 800d066:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800d18c <atanf+0x168>
 800d06a:	ee30 7a07 	vadd.f32	s14, s0, s14
 800d06e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d072:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800d076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d07a:	dce2      	bgt.n	800d042 <atanf+0x1e>
 800d07c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d080:	e013      	b.n	800d0aa <atanf+0x86>
 800d082:	f000 f8a3 	bl	800d1cc <fabsf>
 800d086:	4b42      	ldr	r3, [pc, #264]	@ (800d190 <atanf+0x16c>)
 800d088:	429c      	cmp	r4, r3
 800d08a:	d84f      	bhi.n	800d12c <atanf+0x108>
 800d08c:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800d090:	429c      	cmp	r4, r3
 800d092:	d841      	bhi.n	800d118 <atanf+0xf4>
 800d094:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800d098:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800d09c:	eea0 7a27 	vfma.f32	s14, s0, s15
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d0a6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d0aa:	1c5a      	adds	r2, r3, #1
 800d0ac:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800d0b0:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800d194 <atanf+0x170>
 800d0b4:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800d198 <atanf+0x174>
 800d0b8:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800d19c <atanf+0x178>
 800d0bc:	ee66 6a06 	vmul.f32	s13, s12, s12
 800d0c0:	eee6 5a87 	vfma.f32	s11, s13, s14
 800d0c4:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800d1a0 <atanf+0x17c>
 800d0c8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800d0cc:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800d1a4 <atanf+0x180>
 800d0d0:	eee7 5a26 	vfma.f32	s11, s14, s13
 800d0d4:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800d1a8 <atanf+0x184>
 800d0d8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800d0dc:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800d1ac <atanf+0x188>
 800d0e0:	eee7 5a26 	vfma.f32	s11, s14, s13
 800d0e4:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800d1b0 <atanf+0x18c>
 800d0e8:	eea6 5a87 	vfma.f32	s10, s13, s14
 800d0ec:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800d1b4 <atanf+0x190>
 800d0f0:	eea5 7a26 	vfma.f32	s14, s10, s13
 800d0f4:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800d1b8 <atanf+0x194>
 800d0f8:	eea7 5a26 	vfma.f32	s10, s14, s13
 800d0fc:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800d1bc <atanf+0x198>
 800d100:	eea5 7a26 	vfma.f32	s14, s10, s13
 800d104:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d108:	eea5 7a86 	vfma.f32	s14, s11, s12
 800d10c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d110:	d121      	bne.n	800d156 <atanf+0x132>
 800d112:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d116:	e794      	b.n	800d042 <atanf+0x1e>
 800d118:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800d11c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800d120:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d124:	2301      	movs	r3, #1
 800d126:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d12a:	e7be      	b.n	800d0aa <atanf+0x86>
 800d12c:	4b24      	ldr	r3, [pc, #144]	@ (800d1c0 <atanf+0x19c>)
 800d12e:	429c      	cmp	r4, r3
 800d130:	d80b      	bhi.n	800d14a <atanf+0x126>
 800d132:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800d136:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d13a:	eea0 7a27 	vfma.f32	s14, s0, s15
 800d13e:	2302      	movs	r3, #2
 800d140:	ee70 6a67 	vsub.f32	s13, s0, s15
 800d144:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d148:	e7af      	b.n	800d0aa <atanf+0x86>
 800d14a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800d14e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d152:	2303      	movs	r3, #3
 800d154:	e7a9      	b.n	800d0aa <atanf+0x86>
 800d156:	4a1b      	ldr	r2, [pc, #108]	@ (800d1c4 <atanf+0x1a0>)
 800d158:	491b      	ldr	r1, [pc, #108]	@ (800d1c8 <atanf+0x1a4>)
 800d15a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d15e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800d162:	edd3 6a00 	vldr	s13, [r3]
 800d166:	ee37 7a66 	vsub.f32	s14, s14, s13
 800d16a:	2d00      	cmp	r5, #0
 800d16c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d170:	edd2 7a00 	vldr	s15, [r2]
 800d174:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d178:	bfb8      	it	lt
 800d17a:	eef1 7a67 	vneglt.f32	s15, s15
 800d17e:	e760      	b.n	800d042 <atanf+0x1e>
 800d180:	bfc90fdb 	.word	0xbfc90fdb
 800d184:	3fc90fdb 	.word	0x3fc90fdb
 800d188:	3edfffff 	.word	0x3edfffff
 800d18c:	7149f2ca 	.word	0x7149f2ca
 800d190:	3f97ffff 	.word	0x3f97ffff
 800d194:	3c8569d7 	.word	0x3c8569d7
 800d198:	3d4bda59 	.word	0x3d4bda59
 800d19c:	bd6ef16b 	.word	0xbd6ef16b
 800d1a0:	3d886b35 	.word	0x3d886b35
 800d1a4:	3dba2e6e 	.word	0x3dba2e6e
 800d1a8:	3e124925 	.word	0x3e124925
 800d1ac:	3eaaaaab 	.word	0x3eaaaaab
 800d1b0:	bd15a221 	.word	0xbd15a221
 800d1b4:	bd9d8795 	.word	0xbd9d8795
 800d1b8:	bde38e38 	.word	0xbde38e38
 800d1bc:	be4ccccd 	.word	0xbe4ccccd
 800d1c0:	401bffff 	.word	0x401bffff
 800d1c4:	0800df34 	.word	0x0800df34
 800d1c8:	0800df24 	.word	0x0800df24

0800d1cc <fabsf>:
 800d1cc:	ee10 3a10 	vmov	r3, s0
 800d1d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d1d4:	ee00 3a10 	vmov	s0, r3
 800d1d8:	4770      	bx	lr
	...

0800d1dc <_init>:
 800d1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1de:	bf00      	nop
 800d1e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1e2:	bc08      	pop	{r3}
 800d1e4:	469e      	mov	lr, r3
 800d1e6:	4770      	bx	lr

0800d1e8 <_fini>:
 800d1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1ea:	bf00      	nop
 800d1ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1ee:	bc08      	pop	{r3}
 800d1f0:	469e      	mov	lr, r3
 800d1f2:	4770      	bx	lr
